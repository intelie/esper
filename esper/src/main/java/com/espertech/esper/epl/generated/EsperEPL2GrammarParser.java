// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-08-03 16:15:22

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "BOR", "PLUS", "QUESTION", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=166;
    public static final int FLOAT_SUFFIX=314;
    public static final int STAR=255;
    public static final int NUMERIC_PARAM_LIST=107;
    public static final int MOD=275;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=149;
    public static final int BSR=296;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=172;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=153;
    public static final int MATCHREC_PATTERN_CONCAT=239;
    public static final int INC=289;
    public static final int LNOT=285;
    public static final int RPAREN=254;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=262;
    public static final int BSR_ASSIGN=297;
    public static final int CAST_EXPR=201;
    public static final int MATCHES=104;
    public static final int STREAM_EXPR=148;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=267;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=116;
    public static final int LAST_AGGREG=225;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=110;
    public static final int FOLLOWED_BY=279;
    public static final int HOUR_PART=177;
    public static final int RBRACK=260;
    public static final int MATCHREC_PATTERN_NESTED=241;
    public static final int MATCH_UNTIL_RANGE_CLOSED=216;
    public static final int GE=271;
    public static final int METHOD_JOIN_EXPR=212;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=115;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=114;
    public static final int MINUS_ASSIGN=290;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=126;
    public static final int NUM_DOUBLE=235;
    public static final int INSERTINTO_STREAM_NAME=189;
    public static final int LCURLY=276;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=173;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=187;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=124;
    public static final int WS=306;
    public static final int EMAILAT=305;
    public static final int SUBSELECT_GROUP_EXPR=193;
    public static final int ON_SELECT_INSERT_EXPR=207;
    public static final int ESCAPECHAR=280;
    public static final int SL_COMMENT=307;
    public static final int NULL_TYPE=234;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=214;
    public static final int GT=269;
    public static final int BNOT=286;
    public static final int WHERE_EXPR=135;
    public static final int END=33;
    public static final int LAND=303;
    public static final int INNERJOIN_EXPR=150;
    public static final int NOT_REGEXP=184;
    public static final int MATCH_UNTIL_EXPR=213;
    public static final int EVENT_PROP_EXPR=157;
    public static final int LBRACK=259;
    public static final int VIEW_EXPR=132;
    public static final int ANNOTATION=221;
    public static final int LONG_TYPE=229;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=117;
    public static final int MATCHREC_PATTERN=237;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=281;
    public static final int ON_SELECT_EXPR=206;
    public static final int MINUTE_PART=178;
    public static final int PATTERN_NOT_EXPR=113;
    public static final int SQL_NE=266;
    public static final int SUM=18;
    public static final int HexDigit=312;
    public static final int UPDATE_EXPR=226;
    public static final int LPAREN=253;
    public static final int IN_SUBSELECT_EXPR=195;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=243;
    public static final int NOT_IN_RANGE=191;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=179;
    public static final int MATCH_RECOGNIZE=100;
    public static final int IDENT=250;
    public static final int DATABASE_JOIN_EXPR=134;
    public static final int BXOR=265;
    public static final int PLUS=257;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=160;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=141;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=215;
    public static final int CREATE_VARIABLE_EXPR=211;
    public static final int CREATE_WINDOW_COL_TYPE=219;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=244;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=111;
    public static final int RIGHT_OUTERJOIN_EXPR=152;
    public static final int NUMBERSETSTAR=220;
    public static final int LAST_OPERATOR=198;
    public static final int PATTERN_FILTER_EXPR=112;
    public static final int EVAL_AND_EXPR=138;
    public static final int LEFT_OUTERJOIN_EXPR=151;
    public static final int EPL_EXPR=236;
    public static final int GROUP_BY_EXPR=154;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=158;
    public static final int MINUS=273;
    public static final int SEMI=304;
    public static final int STAR_ASSIGN=292;
    public static final int FIRST_AGGREG=224;
    public static final int COLON=261;
    public static final int EVAL_EQUALS_GROUP_EXPR=142;
    public static final int BAND_ASSIGN=302;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=167;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=181;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=161;
    public static final int SL=298;
    public static final int NOT_IN_SUBSELECT_EXPR=196;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=130;
    public static final int SR=294;
    public static final int RCURLY=277;
    public static final int PLUS_ASSIGN=288;
    public static final int EXISTS_SUBSELECT_EXPR=194;
    public static final int DAY_PART=176;
    public static final int EVENT_FILTER_IN=125;
    public static final int DIV=274;
    public static final int OBJECT_PARAM_ORDERED_EXPR=109;
    public static final int OctalEscape=311;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=180;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=145;
    public static final int LOR=272;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=188;
    public static final int EXPONENT=313;
    public static final int LT=268;
    public static final int PATTERN_INCL_EXPR=133;
    public static final int ORDER_BY_EXPR=155;
    public static final int BOOL_TYPE=233;
    public static final int MOD_ASSIGN=293;
    public static final int ANNOTATION_ARRAY=222;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=197;
    public static final int EQUALS=251;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=287;
    public static final int SL_ASSIGN=299;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int MATCHREC_AFTER_SKIP=242;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=175;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=143;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=230;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=127;
    public static final int ANNOTATION_VALUE=223;
    public static final int SUBSELECT_EXPR=192;
    public static final int NUMERIC_PARAM_RANGE=106;
    public static final int CONCAT=171;
    public static final int CLASS_IDENT=129;
    public static final int MATCHREC_PATTERN_ALTER=240;
    public static final int ON_EXPR=204;
    public static final int CREATE_WINDOW_EXPR=202;
    public static final int PROPERTY_SELECTION_STREAM=119;
    public static final int ON_DELETE_EXPR=205;
    public static final int NUM_LONG=282;
    public static final int ON=41;
    public static final int TIME_PERIOD=174;
    public static final int DOUBLE_TYPE=231;
    public static final int DELETE=76;
    public static final int INT_TYPE=228;
    public static final int MATCHREC_PARTITION=248;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=137;
    public static final int ORDER_ELEMENT_EXPR=156;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=200;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=232;
    public static final int NUM_INT=278;
    public static final int MATCHREC_DEFINE_ITEM=245;
    public static final int ON_SET_EXPR=210;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=283;
    public static final int ON_EXPR_FROM=209;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=309;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=118;
    public static final int WEEKDAY_OPERATOR=199;
    public static final int DEC=291;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=218;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=300;
    public static final int NUMERIC_PARAM_FREQUENCY=108;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=122;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=163;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=99;
    public static final int DEFINE=102;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=123;
    public static final int ML_COMMENT=308;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=162;
    public static final int BOR_ASSIGN=301;
    public static final int COMMA=249;
    public static final int IS=42;
    public static final int PARTITION=103;
    public static final int WHEN_LIMIT_EXPR=168;
    public static final int TIMEPERIOD_LIMIT_EXPR=165;
    public static final int SOME=49;
    public static final int EQUAL=284;
    public static final int BOR=256;
    public static final int MATCHREC_MEASURE_ITEM=247;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=128;
    public static final int IN_RANGE=190;
    public static final int DOT=252;
    public static final int MATCHREC_MEASURES=246;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=120;
    public static final int INSERTINTO_EXPR=169;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=136;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=217;
    public static final int EVAL_EQUALS_EXPR=140;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=183;
    public static final int EVENT_LIMIT_EXPR=164;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=182;
    public static final int EVAL_OR_EXPR=139;
    public static final int ON_SELECT_INSERT_OUTPUT=208;
    public static final int MEASURES=101;
    public static final int AFTER=105;
    public static final int BAND=264;
    public static final int MATCHREC_PATTERN_ATOM=238;
    public static final int QUOTED_STRING_LITERAL=263;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=258;
    public static final int OBSERVER_EXPR=131;
    public static final int EVENT_FILTER_IDENT=121;
    public static final int EVENT_PROP_MAPPED=159;
    public static final int UnicodeEscape=310;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=185;
    public static final int SELECTION_ELEMENT_EXPR=146;
    public static final int CREATE_WINDOW_SELECT_EXPR=203;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=170;
    public static final int ON_SET_EXPR_ITEM=227;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=147;
    public static final int SR_ASSIGN=295;
    public static final int LE=270;
    public static final int DBFROM_CLAUSE=186;
    public static final int EVAL_IDENT=144;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after';");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:508:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:509:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:509:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:509:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:509:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1545);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1550);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1554); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:514:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:515:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:515:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:515:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:515:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1568);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1574);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: annotationEnum, eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 518:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:518:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:518:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:521:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:522:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:522:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1604);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1608); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:529:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:530:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:530:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1630);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:530:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);

                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);

                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:530:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:530:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:530:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1638);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:530:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1642);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, elementValuePairsNoEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 531:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:531:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:531:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:531:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:534:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:535:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:535:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1690);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:535:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:535:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:535:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:535:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1698);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:535:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1702);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairsEnum, elementValueEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:536:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:536:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:536:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:539:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:540:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:540:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1748);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:540:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:540:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1751); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1754);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:543:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:544:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:544:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1775);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:544:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:544:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1778); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1781);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:547:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:548:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:548:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1808);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: i, elementValueNoEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:549:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:552:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:553:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:553:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1849);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: i, elementValueEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 554:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:554:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:557:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:558:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:558:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1880);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:559:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:559:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:559:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1891);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 559:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:560:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1904);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:563:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:564:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:564:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1927);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:565:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:565:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:565:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1938);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 565:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:566:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1951);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:567:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1959);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:570:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:571:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:571:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:571:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:571:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1982);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:571:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:571:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1985); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1987);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:571:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:571:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum1998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 572:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:572:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:572:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:575:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:576:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:576:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:576:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:576:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2030);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:576:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:576:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2033); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2035);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:576:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:576:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 577:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:577:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:577:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:583:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr52 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr53 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr54 = null;



        try {
            // EsperEPL2Grammar.g:584:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr )
            int alt17=5;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                int LA17_3 = input.LA(2);

                if ( (LA17_3==WINDOW) ) {
                    alt17=2;
                }
                else if ( (LA17_3==VARIABLE) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=4;
                }
                break;
            case UPDATE:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:584:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2078);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:585:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2083);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:586:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2088);
                    createVariableExpr52=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:587:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2093);
                    onExpr53=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:588:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression2098);
                    updateExpr54=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:591:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT55=null;
        Token SELECT57=null;
        Token FROM59=null;
        Token WHERE62=null;
        Token GROUP64=null;
        Token BY65=null;
        Token HAVING67=null;
        Token OUTPUT69=null;
        Token ORDER71=null;
        Token BY72=null;
        Token ROW_LIMIT_EXPR74=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr56 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause58 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause60 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog61 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause63 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr66 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause68 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit70 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr73 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit75 = null;


        CommonTree INSERT55_tree=null;
        CommonTree SELECT57_tree=null;
        CommonTree FROM59_tree=null;
        CommonTree WHERE62_tree=null;
        CommonTree GROUP64_tree=null;
        CommonTree BY65_tree=null;
        CommonTree HAVING67_tree=null;
        CommonTree OUTPUT69_tree=null;
        CommonTree ORDER71_tree=null;
        CommonTree BY72_tree=null;
        CommonTree ROW_LIMIT_EXPR74_tree=null;

        try {
            // EsperEPL2Grammar.g:592:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:592:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:592:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:592:5: INSERT insertIntoExpr
                    {
                    INSERT55=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2111); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2114);
                    insertIntoExpr56=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr56.getTree());

                    }
                    break;

            }

            SELECT57=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2120); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2123);
            selectClause58=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause58.getTree());
            FROM59=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2127); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2130);
            fromClause60=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause60.getTree());
            // EsperEPL2Grammar.g:595:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:595:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2134);
                    matchRecog61=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog61.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:596:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:596:4: WHERE whereClause
                    {
                    WHERE62=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2140); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2143);
                    whereClause63=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:597:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:597:4: GROUP BY groupByListExpr
                    {
                    GROUP64=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2150); if (state.failed) return retval;
                    BY65=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2153); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2156);
                    groupByListExpr66=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:598:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:598:4: HAVING havingClause
                    {
                    HAVING67=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2163); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2166);
                    havingClause68=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:599:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:599:4: OUTPUT outputLimit
                    {
                    OUTPUT69=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2173); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2176);
                    outputLimit70=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit70.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:600:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:600:4: ORDER BY orderByListExpr
                    {
                    ORDER71=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2183); if (state.failed) return retval;
                    BY72=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2186); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2189);
                    orderByListExpr73=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:601:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:601:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR74=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2196); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2199);
                    rowLimit75=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit75.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:604:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON76=null;
        Token AS79=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression77 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression78 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr80 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr81 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr82 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert83 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr84 = null;


        CommonTree i_tree=null;
        CommonTree ON76_tree=null;
        CommonTree AS79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:605:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:605:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON76=(Token)match(input,ON,FOLLOW_ON_in_onExpr2214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON76);

            // EsperEPL2Grammar.g:605:7: ( eventFilterExpression | patternInclusionExpression )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENT||LA26_0==TICKED_STRING_LITERAL) ) {
                alt26=1;
            }
            else if ( (LA26_0==PATTERN) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:605:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2217);
                    eventFilterExpression77=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression77.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:605:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2221);
                    patternInclusionExpression78=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression78.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:605:60: ( AS i= IDENT | i= IDENT )?
            int alt27=3;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==AS) ) {
                alt27=1;
            }
            else if ( (LA27_0==IDENT) ) {
                alt27=2;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:605:61: AS i= IDENT
                    {
                    AS79=(Token)match(input,AS,FOLLOW_AS_in_onExpr2225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS79);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:605:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:606:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt31=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt31=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt31=2;
                }
                break;
            case SET:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:606:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2243);
                    onDeleteExpr80=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr80.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:606:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2247);
                    onSelectExpr81=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr81.getTree());
                    // EsperEPL2Grammar.g:606:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==INSERT) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // EsperEPL2Grammar.g:606:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:606:33: ( onSelectInsertExpr )+
                            int cnt28=0;
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( (LA28_0==INSERT) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:606:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2250);
                            	    onSelectInsertExpr82=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr82.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt28 >= 1 ) break loop28;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(28, input);
                                        throw eee;
                                }
                                cnt28++;
                            } while (true);

                            // EsperEPL2Grammar.g:606:53: ( outputClauseInsert )?
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==OUTPUT) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    // EsperEPL2Grammar.g:606:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2253);
                                    outputClauseInsert83=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert83.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:606:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2260);
                    onSetExpr84=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr84.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onDeleteExpr, eventFilterExpression, onSelectInsertExpr, patternInclusionExpression, outputClauseInsert, onSelectExpr, i, onSetExpr
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 607:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:607:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:607:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:607:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:607:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:607:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:607:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:607:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:607:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:607:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:610:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE85=null;
        Token ISTREAM86=null;
        Token AS88=null;
        Token SET89=null;
        Token COMMA91=null;
        Token WHERE93=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier87 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment90 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment92 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause94 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE85_tree=null;
        CommonTree ISTREAM86_tree=null;
        CommonTree AS88_tree=null;
        CommonTree SET89_tree=null;
        CommonTree COMMA91_tree=null;
        CommonTree WHERE93_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:611:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:611:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE85=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE85);

            ISTREAM86=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM86);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2310);
            classIdentifier87=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier87.getTree());
            // EsperEPL2Grammar.g:611:35: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:611:36: AS i= IDENT
                    {
                    AS88=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS88);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:611:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET89=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET89);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2331);
            onSetAssignment90=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment90.getTree());
            // EsperEPL2Grammar.g:612:23: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:612:24: COMMA onSetAssignment
            	    {
            	    COMMA91=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2334); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA91);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2336);
            	    onSetAssignment92=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment92.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // EsperEPL2Grammar.g:613:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:613:4: WHERE whereClause
                    {
                    WHERE93=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE93);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2346);
                    whereClause94=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, whereClause, onSetAssignment, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 614:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:614:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:614:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:614:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:617:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT95=null;
        Token SELECT97=null;
        Token WHERE100=null;
        Token GROUP102=null;
        Token BY103=null;
        Token HAVING105=null;
        Token ORDER107=null;
        Token BY108=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr96 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList98 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom99 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause101 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr104 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause106 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr109 = null;


        CommonTree INSERT95_tree=null;
        CommonTree SELECT97_tree=null;
        CommonTree WHERE100_tree=null;
        CommonTree GROUP102_tree=null;
        CommonTree BY103_tree=null;
        CommonTree HAVING105_tree=null;
        CommonTree ORDER107_tree=null;
        CommonTree BY108_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:620:2: ( ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:620:4: ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:620:4: ( INSERT insertIntoExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==INSERT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:620:5: INSERT insertIntoExpr
                    {
                    INSERT95=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT95);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2396);
                    insertIntoExpr96=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr96.getTree());

                    }
                    break;

            }

            SELECT97=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT97);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2404);
            selectionList98=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList98.getTree());
            // EsperEPL2Grammar.g:622:3: ( onExprFrom )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==FROM) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:622:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2408);
                    onExprFrom99=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom99.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:623:3: ( WHERE whereClause )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==WHERE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:623:4: WHERE whereClause
                    {
                    WHERE100=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE100);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2416);
                    whereClause101=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause101.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:624:3: ( GROUP BY groupByListExpr )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==GROUP) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:624:4: GROUP BY groupByListExpr
                    {
                    GROUP102=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP102);

                    BY103=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY103);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2429);
                    groupByListExpr104=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr104.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:625:3: ( HAVING havingClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==HAVING) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:625:4: HAVING havingClause
                    {
                    HAVING105=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING105);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2438);
                    havingClause106=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause106.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:626:3: ( ORDER BY orderByListExpr )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==ORDER) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: ORDER BY orderByListExpr
                    {
                    ORDER107=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER107);

                    BY108=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY108);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2449);
                    orderByListExpr109=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr109.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, havingClause, insertIntoExpr, orderByListExpr, groupByListExpr, onExprFrom, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:627:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:627:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:627:53: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:627:65: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:627:78: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:627:95: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:627:109: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:630:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT110=null;
        Token SELECT112=null;
        Token WHERE114=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr111 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList113 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause115 = null;


        CommonTree INSERT110_tree=null;
        CommonTree SELECT112_tree=null;
        CommonTree WHERE114_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:633:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:633:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT110=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT110);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2504);
            insertIntoExpr111=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr111.getTree());
            SELECT112=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT112);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2510);
            selectionList113=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList113.getTree());
            // EsperEPL2Grammar.g:635:3: ( WHERE whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:635:4: WHERE whereClause
                    {
                    WHERE114=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE114);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2517);
                    whereClause115=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause115.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, selectionList, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 636:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:636:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:636:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:639:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT116=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT116_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:640:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:640:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT116=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT116);

            // EsperEPL2Grammar.g:640:11: (f= FIRST | a= ALL )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==FIRST) ) {
                alt42=1;
            }
            else if ( (LA42_0==ALL) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:640:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:640:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 641:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:641:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:641:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:641:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:644:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE117=null;
        Token WHERE119=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom118 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause120 = null;


        CommonTree DELETE117_tree=null;
        CommonTree WHERE119_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:647:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:647:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE117=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE117);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2605);
            onExprFrom118=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom118.getTree());
            // EsperEPL2Grammar.g:649:3: ( WHERE whereClause )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==WHERE) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:649:4: WHERE whereClause
                    {
                    WHERE119=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE119);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2612);
                    whereClause120=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause120.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 650:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:650:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:650:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:653:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET121=null;
        Token COMMA123=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment122 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment124 = null;


        CommonTree SET121_tree=null;
        CommonTree COMMA123_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:656:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:656:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET121=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET121);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2654);
            onSetAssignment122=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment122.getTree());
            // EsperEPL2Grammar.g:656:24: ( COMMA onSetAssignment )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // EsperEPL2Grammar.g:656:25: COMMA onSetAssignment
            	    {
            	    COMMA123=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2657); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA123);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2659);
            	    onSetAssignment124=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment124.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 657:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:657:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:660:1: onSetAssignment : i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS125=null;
        EsperEPL2GrammarParser.expression_return expression126 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS125_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:661:2: (i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) )
            // EsperEPL2Grammar.g:661:4: i= IDENT EQUALS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            EQUALS125=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS125);

            pushFollow(FOLLOW_expression_in_onSetAssignment2690);
            expression126=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression126.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 662:3: -> ^( ON_SET_EXPR_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:662:6: ^( ON_SET_EXPR_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:665:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM127=null;
        Token AS128=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM127_tree=null;
        CommonTree AS128_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:666:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:666:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM127=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM127);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:666:17: ( AS i= IDENT | i= IDENT )?
            int alt45=3;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==AS) ) {
                alt45=1;
            }
            else if ( (LA45_0==IDENT) ) {
                alt45=2;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:666:18: AS i= IDENT
                    {
                    AS128=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS128);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:666:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 667:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:667:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:667:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:670:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE129=null;
        Token WINDOW130=null;
        Token DOT131=null;
        Token DOT133=null;
        Token AS135=null;
        Token LPAREN137=null;
        Token RPAREN139=null;
        Token WHERE140=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression132 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression134 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter136 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList138 = null;

        EsperEPL2GrammarParser.expression_return expression141 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE129_tree=null;
        CommonTree WINDOW130_tree=null;
        CommonTree DOT131_tree=null;
        CommonTree DOT133_tree=null;
        CommonTree AS135_tree=null;
        CommonTree LPAREN137_tree=null;
        CommonTree RPAREN139_tree=null;
        CommonTree WHERE140_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:671:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:671:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE129=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE129);

            WINDOW130=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW130);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:671:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==DOT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:671:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT131=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT131);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2772);
                    viewExpression132=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression132.getTree());
                    // EsperEPL2Grammar.g:671:46: ( DOT viewExpression )*
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==DOT) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:671:47: DOT viewExpression
                    	    {
                    	    DOT133=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2775); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT133);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2777);
                    	    viewExpression134=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression134.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:671:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt48=3;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==RETAINUNION) ) {
                alt48=1;
            }
            else if ( (LA48_0==RETAININTERSECTION) ) {
                alt48=2;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:671:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:671:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:671:110: ( AS )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==AS) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:671:110: AS
                    {
                    AS135=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS135);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:672:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SELECT||LA50_0==IDENT||LA50_0==TICKED_STRING_LITERAL) ) {
                alt50=1;
            }
            else if ( (LA50_0==LPAREN) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:673:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2809);
                    createWindowExprModelAfter136=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter136.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:674:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN137=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN137);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2826);
                    createWindowColumnList138=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList138.getTree());
                    RPAREN139=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN139);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:676:5: (i1= INSERT ( WHERE expression )? )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==INSERT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:676:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:676:16: ( WHERE expression )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==WHERE) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // EsperEPL2Grammar.g:676:17: WHERE expression
                            {
                            WHERE140=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2848); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE140);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2850);
                            expression141=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression141.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, INSERT, ri, createWindowExprModelAfter, createWindowColumnList, viewExpression, ru, createWindowColumnList, expression, viewExpression, createWindowExprModelAfter, ru, i, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 677:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:677:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:677:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:677:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:677:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:677:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:677:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:678:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:678:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 679:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:679:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:679:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:679:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:679:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:679:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:679:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:682:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT142=null;
        Token FROM144=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList143 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier145 = null;


        CommonTree SELECT142_tree=null;
        CommonTree FROM144_tree=null;

        try {
            // EsperEPL2Grammar.g:683:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:683:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:683:4: ( SELECT createSelectionList FROM )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==SELECT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:683:5: SELECT createSelectionList FROM
                    {
                    SELECT142=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2937); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2940);
                    createSelectionList143=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList143.getTree());
                    FROM144=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2942); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2947);
            classIdentifier145=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier145.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:686:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE146=null;
        Token VARIABLE147=null;
        Token EQUALS148=null;
        EsperEPL2GrammarParser.expression_return expression149 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE146_tree=null;
        CommonTree VARIABLE147_tree=null;
        CommonTree EQUALS148_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:687:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:687:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE146=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE146);

            VARIABLE147=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE147);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:687:36: ( EQUALS expression )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==EQUALS) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:687:37: EQUALS expression
                    {
                    EQUALS148=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS148);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2975);
                    expression149=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression149.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, t, n
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 688:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:688:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:688:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:691:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA151=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement150 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement152 = null;


        CommonTree COMMA151_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:694:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:694:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3018);
            createWindowColumnListElement150=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement150.getTree());
            // EsperEPL2Grammar.g:694:34: ( COMMA createWindowColumnListElement )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // EsperEPL2Grammar.g:694:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA151=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList3021); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA151);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3023);
            	    createWindowColumnListElement152=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement152.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 695:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:695:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:698:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:699:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:699:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: name, type
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:700:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:703:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA154=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement153 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement155 = null;


        CommonTree COMMA154_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:706:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:706:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3095);
            createSelectionListElement153=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement153.getTree());
            // EsperEPL2Grammar.g:706:31: ( COMMA createSelectionListElement )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // EsperEPL2Grammar.g:706:32: COMMA createSelectionListElement
            	    {
            	    COMMA154=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3098); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA154);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3100);
            	    createSelectionListElement155=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement155.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 707:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:707:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:710:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS157=null;
        Token AS159=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty156 = null;

        EsperEPL2GrammarParser.constant_return constant158 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS157_tree=null;
        CommonTree AS159_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:711:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt58=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt58=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case UPDATE:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt58=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:711:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 712:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:713:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3141);
                    eventProperty156=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty156.getTree());
                    // EsperEPL2Grammar.g:713:18: ( AS i= IDENT )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==AS) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // EsperEPL2Grammar.g:713:19: AS i= IDENT
                            {
                            AS157=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3144); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS157);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3148); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 714:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:714:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:714:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:715:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3169);
                    constant158=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant158.getTree());
                    AS159=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS159);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 716:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:716:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:716:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:719:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO160=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList161 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO160_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:722:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:722:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:722:4: (s= ISTREAM | s= RSTREAM )?
            int alt59=3;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ISTREAM) ) {
                alt59=1;
            }
            else if ( (LA59_0==RSTREAM) ) {
                alt59=2;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:722:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:722:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO160=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO160);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:722:42: ( insertIntoColumnList )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LPAREN) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:722:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr3231);
                    insertIntoColumnList161=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList161.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoColumnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 723:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:723:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:723:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:723:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:726:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN162=null;
        Token IDENT163=null;
        Token COMMA164=null;
        Token IDENT165=null;
        Token RPAREN166=null;

        CommonTree LPAREN162_tree=null;
        CommonTree IDENT163_tree=null;
        CommonTree COMMA164_tree=null;
        CommonTree IDENT165_tree=null;
        CommonTree RPAREN166_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:727:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:727:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN162=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN162);

            IDENT163=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT163);

            // EsperEPL2Grammar.g:727:18: ( COMMA IDENT )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:727:19: COMMA IDENT
            	    {
            	    COMMA164=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3270); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA164);

            	    IDENT165=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3272); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT165);


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            RPAREN166=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN166);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:728:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:728:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:731:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression167 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin168 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList169 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:734:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:734:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3311);
            streamExpression167=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression167.getTree());
            // EsperEPL2Grammar.g:734:21: ( regularJoin | outerJoinList )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==EOF||LA62_0==WHERE||(LA62_0>=GROUP && LA62_0<=HAVING)||LA62_0==OUTPUT||LA62_0==ORDER||LA62_0==ROW_LIMIT_EXPR||LA62_0==MATCH_RECOGNIZE||LA62_0==COMMA) ) {
                alt62=1;
            }
            else if ( ((LA62_0>=INNER && LA62_0<=FULL)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:734:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3314);
                    regularJoin168=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin168.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:734:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3318);
                    outerJoinList169=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList169.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:737:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA170=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression171 = null;


        CommonTree COMMA170_tree=null;

        try {
            // EsperEPL2Grammar.g:738:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:738:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:738:4: ( COMMA streamExpression )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:738:5: COMMA streamExpression
            	    {
            	    COMMA170=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3332); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3335);
            	    streamExpression171=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression171.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:741:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin172 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin173 = null;



        try {
            // EsperEPL2Grammar.g:742:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:742:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3349);
            outerJoin172=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin172.getTree());
            // EsperEPL2Grammar.g:742:14: ( outerJoin )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( ((LA64_0>=INNER && LA64_0<=FULL)) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // EsperEPL2Grammar.g:742:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3352);
            	    outerJoin173=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin173.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:745:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER174=null;
        Token JOIN175=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression176 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent177 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER174_tree=null;
        CommonTree JOIN175_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:748:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:748:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:748:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=JOIN && LA67_0<=FULL)) ) {
                alt67=1;
            }
            else if ( (LA67_0==INNER) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:749:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:749:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( ((LA66_0>=LEFT && LA66_0<=FULL)) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // EsperEPL2Grammar.g:749:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:749:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt65=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt65=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt65=2;
                                }
                                break;
                            case FULL:
                                {
                                alt65=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 65, 0, input);

                                throw nvae;
                            }

                            switch (alt65) {
                                case 1 :
                                    // EsperEPL2Grammar.g:749:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3395); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:749:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3399); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:749:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3403); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER174=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3406); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER174);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:750:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:750:14: (i= INNER )
                    // EsperEPL2Grammar.g:750:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN175=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN175);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3443);
            streamExpression176=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression176.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3445);
            outerJoinIdent177=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent177.getTree());


            // AST REWRITE
            // elements: streamExpression, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:752:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 753:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:753:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 754:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:754:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 755:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:755:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:758:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON178=null;
        Token AND_EXPR180=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair179 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair181 = null;


        CommonTree ON178_tree=null;
        CommonTree AND_EXPR180_tree=null;

        try {
            // EsperEPL2Grammar.g:759:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:759:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON178=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3510); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3513);
            outerJoinIdentPair179=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair179.getTree());
            // EsperEPL2Grammar.g:759:27: ( AND_EXPR outerJoinIdentPair )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==AND_EXPR) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // EsperEPL2Grammar.g:759:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR180=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3516); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3519);
            	    outerJoinIdentPair181=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair181.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:762:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS183=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty182 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty184 = null;


        CommonTree EQUALS183_tree=null;

        try {
            // EsperEPL2Grammar.g:763:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:763:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3534);
            eventProperty182=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty182.getTree());
            EQUALS183=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3536); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3539);
            eventProperty184=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:766:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression185 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:769:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:769:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3561);
            evalOrExpression185=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression185.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 770:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:770:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:773:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList186 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:776:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:776:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:776:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt69=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt69=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt69=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt69=3;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:776:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:776:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:776:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3613);
            selectionList186=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList186.getTree());


            // AST REWRITE
            // elements: selectionList, s
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 777:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:777:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:777:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:780:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA188=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement187 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement189 = null;


        CommonTree COMMA188_tree=null;

        try {
            // EsperEPL2Grammar.g:781:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:781:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3640);
            selectionListElement187=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement187.getTree());
            // EsperEPL2Grammar.g:781:25: ( COMMA selectionListElement )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // EsperEPL2Grammar.g:781:26: COMMA selectionListElement
            	    {
            	    COMMA188=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3643); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3646);
            	    selectionListElement189=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement189.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:784:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS192=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector190 = null;

        EsperEPL2GrammarParser.expression_return expression191 = null;


        CommonTree s_tree=null;
        CommonTree AS192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:786:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt72=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt72=1;
                }
                break;
            case IDENT:
                {
                int LA72_2 = input.LA(2);

                if ( (LA72_2==DOT) ) {
                    int LA72_62 = input.LA(3);

                    if ( (LA72_62==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt72=2;
                    }
                    else if ( (LA72_62==WINDOW||LA72_62==ESCAPE||LA72_62==EVERY_EXPR||(LA72_62>=SUM && LA72_62<=COUNT)||LA72_62==OUTER||(LA72_62>=JOIN && LA72_62<=FULL)||(LA72_62>=EVENTS && LA72_62<=LAST)||(LA72_62>=UNIDIRECTIONAL && LA72_62<=PRIOR)||(LA72_62>=WEEKDAY && LA72_62<=CAST)||LA72_62==SNAPSHOT||(LA72_62>=VARIABLE && LA72_62<=AT)||LA72_62==UPDATE||(LA72_62>=DEFINE && LA72_62<=MATCHES)||LA72_62==IDENT||LA72_62==TICKED_STRING_LITERAL) ) {
                        alt72=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 72, 62, input);

                        throw nvae;
                    }
                }
                else if ( (LA72_2==EOF||(LA72_2>=IN_SET && LA72_2<=REGEXP)||(LA72_2>=OR_EXPR && LA72_2<=NOT_EXPR)||(LA72_2>=WHERE && LA72_2<=AS)||LA72_2==FROM||LA72_2==IS||(LA72_2>=GROUP && LA72_2<=HAVING)||LA72_2==OUTPUT||LA72_2==INSERT||LA72_2==ORDER||LA72_2==COMMA||LA72_2==EQUALS||LA72_2==LPAREN||(LA72_2>=STAR && LA72_2<=LBRACK)||(LA72_2>=BAND && LA72_2<=MOD)||LA72_2==ESCAPECHAR) ) {
                    alt72=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case UPDATE:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:786:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 786:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:787:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3688);
                    streamSelector190=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector190.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:788:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3693);
                    expression191=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression191.getTree());
                    // EsperEPL2Grammar.g:788:15: ( AS i= keywordAllowedIdent )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==AS) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // EsperEPL2Grammar.g:788:16: AS i= keywordAllowedIdent
                            {
                            AS192=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3696); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS192);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3700);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 789:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:789:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 790:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:790:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 791:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:791:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:794:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT193=null;
        Token STAR194=null;
        Token AS195=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT193_tree=null;
        CommonTree STAR194_tree=null;
        CommonTree AS195_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:795:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:795:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT193=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT193);

            STAR194=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR194);

            // EsperEPL2Grammar.g:795:21: ( AS i= IDENT )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==AS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:795:22: AS i= IDENT
                    {
                    AS195=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS195);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 796:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:796:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:796:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:800:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT200=null;
        Token DOT202=null;
        Token AS204=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression196 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression197 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression198 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression199 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression201 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression203 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT200_tree=null;
        CommonTree DOT202_tree=null;
        CommonTree AS204_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:801:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:801:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:801:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt74=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==EOF||(LA74_1>=WHERE && LA74_1<=AS)||(LA74_1>=INNER && LA74_1<=ON)||(LA74_1>=GROUP && LA74_1<=HAVING)||LA74_1==OUTPUT||LA74_1==ORDER||(LA74_1>=UNIDIRECTIONAL && LA74_1<=RETAININTERSECTION)||LA74_1==ROW_LIMIT_EXPR||LA74_1==MATCH_RECOGNIZE||(LA74_1>=COMMA && LA74_1<=LPAREN)||LA74_1==LBRACK) ) {
                    alt74=1;
                }
                else if ( (LA74_1==COLON) ) {
                    alt74=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt74=1;
                }
                break;
            case PATTERN:
                {
                alt74=2;
                }
                break;
            case SQL:
                {
                alt74=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:801:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3798);
                    eventFilterExpression196=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression196.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:801:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3802);
                    patternInclusionExpression197=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression197.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:801:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3806);
                    databaseJoinExpression198=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression198.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:801:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3810);
                    methodJoinExpression199=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression199.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:802:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==DOT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:802:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT200=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT200);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3819);
                    viewExpression201=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression201.getTree());
                    // EsperEPL2Grammar.g:802:23: ( DOT viewExpression )*
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==DOT) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:802:24: DOT viewExpression
                    	    {
                    	    DOT202=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3822); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT202);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3824);
                    	    viewExpression203=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression203.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:802:47: ( AS i= IDENT | i= IDENT )?
            int alt77=3;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==AS) ) {
                alt77=1;
            }
            else if ( (LA77_0==IDENT) ) {
                alt77=2;
            }
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:802:48: AS i= IDENT
                    {
                    AS204=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS204);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:802:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:802:71: (u= UNIDIRECTIONAL )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==UNIDIRECTIONAL) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:802:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:802:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt79=3;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==RETAINUNION) ) {
                alt79=1;
            }
            else if ( (LA79_0==RETAININTERSECTION) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:802:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:802:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: u, viewExpression, patternInclusionExpression, i, ri, methodJoinExpression, ru, databaseJoinExpression, eventFilterExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 803:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:803:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:803:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:803:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:803:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:803:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:804:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:804:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:804:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:804:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:804:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:815:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE205=null;
        Token LPAREN206=null;
        Token RPAREN214=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy207 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures208 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection209 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip210 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern211 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval212 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine213 = null;


        CommonTree MATCH_RECOGNIZE205_tree=null;
        CommonTree LPAREN206_tree=null;
        CommonTree RPAREN214_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:816:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:816:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE205=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog3922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE205);

            LPAREN206=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog3936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN206);

            // EsperEPL2Grammar.g:818:4: ( matchRecogPartitionBy )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==PARTITION) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:818:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog3942);
                    matchRecogPartitionBy207=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy207.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog3949);
            matchRecogMeasures208=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures208.getTree());
            // EsperEPL2Grammar.g:820:4: ( matchRecogMatchesSelection )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ALL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:820:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog3954);
                    matchRecogMatchesSelection209=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection209.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:821:4: ( matchRecogMatchesAfterSkip )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==AFTER) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:821:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3960);
                    matchRecogMatchesAfterSkip210=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip210.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog3966);
            matchRecogPattern211=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern211.getTree());
            // EsperEPL2Grammar.g:823:4: ( matchRecogMatchesInterval )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==IDENT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:823:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog3972);
                    matchRecogMatchesInterval212=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval212.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog3978);
            matchRecogDefine213=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine213.getTree());
            RPAREN214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog3985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN214);



            // AST REWRITE
            // elements: matchRecogMeasures, matchRecogDefine, MATCH_RECOGNIZE, matchRecogPattern, matchRecogMatchesAfterSkip, matchRecogMatchesInterval, matchRecogMatchesSelection, matchRecogPartitionBy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 826:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:826:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:826:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:826:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:826:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:826:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:829:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION215=null;
        Token BY216=null;
        Token COMMA218=null;
        EsperEPL2GrammarParser.expression_return expression217 = null;

        EsperEPL2GrammarParser.expression_return expression219 = null;


        CommonTree PARTITION215_tree=null;
        CommonTree BY216_tree=null;
        CommonTree COMMA218_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:830:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:830:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION215=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION215);

            BY216=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY216);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4026);
            expression217=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression217.getTree());
            // EsperEPL2Grammar.g:830:28: ( COMMA expression )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // EsperEPL2Grammar.g:830:29: COMMA expression
            	    {
            	    COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4029); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4031);
            	    expression219=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression219.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 831:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:831:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:834:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES220=null;
        Token COMMA222=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem221 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem223 = null;


        CommonTree MEASURES220_tree=null;
        CommonTree COMMA222_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:835:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:835:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES220=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES220);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4062);
            matchRecogMeasureItem221=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem221.getTree());
            // EsperEPL2Grammar.g:835:35: ( COMMA matchRecogMeasureItem )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // EsperEPL2Grammar.g:835:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4065); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA222);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4067);
            	    matchRecogMeasureItem223=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem223.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 836:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:836:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:836:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:839:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS225=null;
        EsperEPL2GrammarParser.expression_return expression224 = null;


        CommonTree i_tree=null;
        CommonTree AS225_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:840:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:840:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4092);
            expression224=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression224.getTree());
            // EsperEPL2Grammar.g:840:15: ( AS (i= IDENT )? )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==AS) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:840:16: AS (i= IDENT )?
                    {
                    AS225=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS225);

                    // EsperEPL2Grammar.g:840:19: (i= IDENT )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==IDENT) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:840:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4100); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 841:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:841:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:841:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:844:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL226=null;
        Token MATCHES227=null;

        CommonTree ALL226_tree=null;
        CommonTree MATCHES227_tree=null;

        try {
            // EsperEPL2Grammar.g:845:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:845:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL226=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL226_tree = (CommonTree)adaptor.create(ALL226);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL226_tree, root_0);
            }
            MATCHES227=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4134); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:848:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN228=null;
        Token LPAREN229=null;
        Token RPAREN231=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration230 = null;


        CommonTree PATTERN228_tree=null;
        CommonTree LPAREN229_tree=null;
        CommonTree RPAREN231_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:849:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:849:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN228=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN228);

            LPAREN229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN229);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4153);
            matchRecogPatternAlteration230=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration230.getTree());
            RPAREN231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN231);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 850:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:850:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:853:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER232=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER232_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:854:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:854:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER232=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER232);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4181);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4185);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4189);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4193);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4197);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i5, i4, i1, i2, i3
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 855:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:855:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:858:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod233 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:859:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:859:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4235);
            timePeriod233=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod233.getTree());


            // AST REWRITE
            // elements: i, timePeriod
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 860:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:860:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:863:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat234 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat235 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:864:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:864:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4261);
            matchRecogPatternConcat234=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat234.getTree());
            // EsperEPL2Grammar.g:864:28: (o= BOR matchRecogPatternConcat )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==BOR) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // EsperEPL2Grammar.g:864:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4266); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4268);
            	    matchRecogPatternConcat235=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat235.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 865:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:865:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 866:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:869:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary236 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:870:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:870:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:870:4: ( matchRecogPatternUnary )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==IDENT||LA89_0==LPAREN) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // EsperEPL2Grammar.g:870:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4301);
            	    matchRecogPatternUnary236=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary236.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 871:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:871:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:874:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested237 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom238 = null;



        try {
            // EsperEPL2Grammar.g:875:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==LPAREN) ) {
                alt90=1;
            }
            else if ( (LA90_0==IDENT) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // EsperEPL2Grammar.g:875:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4326);
                    matchRecogPatternNested237=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested237.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:876:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4332);
                    matchRecogPatternAtom238=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:879:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN239=null;
        Token RPAREN241=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration240 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN239_tree=null;
        CommonTree RPAREN241_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:880:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:880:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN239=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN239);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4346);
            matchRecogPatternAlteration240=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration240.getTree());
            RPAREN241=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN241);

            // EsperEPL2Grammar.g:880:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt91=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt91=1;
                    }
                    break;
                case PLUS:
                    {
                    alt91=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt91=3;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:880:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:880:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:880:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, q, p, matchRecogPatternAlteration
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 881:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:881:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:881:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:881:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:881:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:884:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:885:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:885:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:885:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==STAR||(LA94_0>=PLUS && LA94_0<=QUESTION)) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:885:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:885:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt92=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt92=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt92=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt92=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 0, input);

                        throw nvae;
                    }

                    switch (alt92) {
                        case 1 :
                            // EsperEPL2Grammar.g:885:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:885:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4416); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:885:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4422); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:885:44: (reluctant= QUESTION )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==QUESTION) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // EsperEPL2Grammar.g:885:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4428); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, p, reluctant, i, q
            // token labels: reluctant, s, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 886:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:886:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:886:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:886:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:886:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:886:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:889:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE242=null;
        Token COMMA244=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem243 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem245 = null;


        CommonTree DEFINE242_tree=null;
        CommonTree COMMA244_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:890:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:890:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE242=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE242);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4474);
            matchRecogDefineItem243=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem243.getTree());
            // EsperEPL2Grammar.g:890:32: ( COMMA matchRecogDefineItem )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // EsperEPL2Grammar.g:890:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA244=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4477); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA244);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4479);
            	    matchRecogDefineItem245=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem245.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 891:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:891:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:894:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS246=null;
        EsperEPL2GrammarParser.expression_return expression247 = null;


        CommonTree i_tree=null;
        CommonTree AS246_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:895:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:895:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS246=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS246);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4510);
            expression247=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression247.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 896:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:896:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:899:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN248=null;
        Token LBRACK249=null;
        Token RBRACK251=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression250 = null;


        CommonTree PATTERN248_tree=null;
        CommonTree LBRACK249_tree=null;
        CommonTree RBRACK251_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:900:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:900:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN248=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN248);

            LBRACK249=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK249);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4539);
            patternExpression250=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression250.getTree());
            RBRACK251=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK251);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 901:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:901:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:904:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL252=null;
        Token COLON253=null;
        Token LBRACK254=null;
        Token METADATASQL255=null;
        Token RBRACK256=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL252_tree=null;
        CommonTree COLON253_tree=null;
        CommonTree LBRACK254_tree=null;
        CommonTree METADATASQL255_tree=null;
        CommonTree RBRACK256_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:907:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:907:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL252=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL252);

            COLON253=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression4576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON253);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression4580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK254=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression4582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK254);

            // EsperEPL2Grammar.g:907:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==STRING_LITERAL) ) {
                alt96=1;
            }
            else if ( (LA96_0==QUOTED_STRING_LITERAL) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:907:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:907:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:907:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==METADATASQL) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:907:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL255=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression4597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL255);

                    // EsperEPL2Grammar.g:907:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==STRING_LITERAL) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==QUOTED_STRING_LITERAL) ) {
                        alt97=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 0, input);

                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            // EsperEPL2Grammar.g:907:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4602); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:907:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4608); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK256=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression4613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK256);



            // AST REWRITE
            // elements: s, s2, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 908:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:908:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:908:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:911:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON257=null;
        Token LPAREN259=null;
        Token RPAREN261=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier258 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList260 = null;


        CommonTree i_tree=null;
        CommonTree COLON257_tree=null;
        CommonTree LPAREN259_tree=null;
        CommonTree RPAREN261_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:914:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:914:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression4664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON257=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression4666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON257);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression4668);
            classIdentifier258=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier258.getTree());
            // EsperEPL2Grammar.g:914:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==LPAREN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:914:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN259=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression4671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN259);

                    // EsperEPL2Grammar.g:914:49: ( expressionList )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==WINDOW||LA99_0==ESCAPE||(LA99_0>=NOT_EXPR && LA99_0<=EVERY_EXPR)||(LA99_0>=SUM && LA99_0<=COUNT)||LA99_0==CASE||LA99_0==OUTER||(LA99_0>=JOIN && LA99_0<=FULL)||(LA99_0>=EVENTS && LA99_0<=LAST)||(LA99_0>=UNIDIRECTIONAL && LA99_0<=CURRENT_TIMESTAMP)||LA99_0==SNAPSHOT||(LA99_0>=VARIABLE && LA99_0<=AT)||(LA99_0>=BOOLEAN_TRUE && LA99_0<=VALUE_NULL)||LA99_0==UPDATE||(LA99_0>=DEFINE && LA99_0<=MATCHES)||LA99_0==NUM_DOUBLE||LA99_0==IDENT||LA99_0==LPAREN||(LA99_0>=PLUS && LA99_0<=QUESTION)||(LA99_0>=STRING_LITERAL && LA99_0<=QUOTED_STRING_LITERAL)||LA99_0==MINUS||LA99_0==LCURLY||LA99_0==NUM_INT||(LA99_0>=TICKED_STRING_LITERAL && LA99_0<=NUM_FLOAT)) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // EsperEPL2Grammar.g:914:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression4673);
                            expressionList260=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList260.getTree());

                            }
                            break;

                    }

                    RPAREN261=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression4676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN261);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, classIdentifier, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 915:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:915:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:915:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:918:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON262=null;
        Token LPAREN263=null;
        Token RPAREN265=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList264 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON262_tree=null;
        CommonTree LPAREN263_tree=null;
        CommonTree RPAREN265_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:921:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:921:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON262=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression4731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON262);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN263=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression4737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN263);

            // EsperEPL2Grammar.g:921:35: ( expressionWithTimeList )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==WINDOW||LA101_0==ESCAPE||(LA101_0>=NOT_EXPR && LA101_0<=EVERY_EXPR)||(LA101_0>=SUM && LA101_0<=COUNT)||LA101_0==CASE||LA101_0==OUTER||(LA101_0>=JOIN && LA101_0<=FULL)||(LA101_0>=EVENTS && LA101_0<=LAST)||(LA101_0>=UNIDIRECTIONAL && LA101_0<=CURRENT_TIMESTAMP)||LA101_0==SNAPSHOT||(LA101_0>=VARIABLE && LA101_0<=AT)||(LA101_0>=BOOLEAN_TRUE && LA101_0<=VALUE_NULL)||LA101_0==UPDATE||(LA101_0>=DEFINE && LA101_0<=MATCHES)||LA101_0==NUM_DOUBLE||LA101_0==IDENT||LA101_0==LPAREN||LA101_0==STAR||(LA101_0>=PLUS && LA101_0<=LBRACK)||(LA101_0>=STRING_LITERAL && LA101_0<=QUOTED_STRING_LITERAL)||LA101_0==MINUS||LA101_0==LCURLY||LA101_0==NUM_INT||(LA101_0>=TICKED_STRING_LITERAL && LA101_0<=NUM_FLOAT)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // EsperEPL2Grammar.g:921:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression4739);
                    expressionWithTimeList264=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList264.getTree());

                    }
                    break;

            }

            RPAREN265=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression4742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN265);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 922:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:922:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:922:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:925:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA267=null;
        EsperEPL2GrammarParser.expression_return expression266 = null;

        EsperEPL2GrammarParser.expression_return expression268 = null;


        CommonTree COMMA267_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:928:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:928:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr4781);
            expression266=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression266.getTree());
            // EsperEPL2Grammar.g:928:15: ( COMMA expression )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:928:16: COMMA expression
            	    {
            	    COMMA267=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr4784); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA267);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr4786);
            	    expression268=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression268.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 929:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:929:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:932:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA270=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement269 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement271 = null;


        CommonTree COMMA270_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:935:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:935:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4821);
            orderByListElement269=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement269.getTree());
            // EsperEPL2Grammar.g:935:23: ( COMMA orderByListElement )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // EsperEPL2Grammar.g:935:24: COMMA orderByListElement
            	    {
            	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr4824); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA270);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4826);
            	    orderByListElement271=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement271.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 936:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:936:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:939:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression272 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:940:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:940:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement4851);
            expression272=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression272.getTree());
            // EsperEPL2Grammar.g:940:15: (d= ASC | d= DESC )?
            int alt104=3;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ASC) ) {
                alt104=1;
            }
            else if ( (LA104_0==DESC) ) {
                alt104=2;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:940:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement4856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:940:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement4860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 941:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:941:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:941:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:944:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression273 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:947:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:947:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4898);
            evalOrExpression273=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression273.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 948:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:948:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:951:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN278=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod274 = null;

        EsperEPL2GrammarParser.number_return number275 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet276 = null;

        EsperEPL2GrammarParser.expression_return expression277 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr279 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN278_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:954:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:954:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:954:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt105=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt105=1;
                    }
                    break;
                case FIRST:
                    {
                    alt105=2;
                    }
                    break;
                case LAST:
                    {
                    alt105=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt105=4;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // EsperEPL2Grammar.g:954:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:954:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:954:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:954:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:955:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt109=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt109=1;
                }
                break;
            case AT:
                {
                alt109=2;
                }
                break;
            case WHEN:
                {
                alt109=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }

            switch (alt109) {
                case 1 :
                    // EsperEPL2Grammar.g:956:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:956:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:956:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit4975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:957:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==NUM_INT) ) {
                        int LA107_1 = input.LA(2);

                        if ( (LA107_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_1==EVENTS) ) {
                            alt107=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 107, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA107_0==NUM_LONG) ) {
                        int LA107_2 = input.LA(2);

                        if ( (LA107_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==EVENTS) ) {
                            alt107=2;
                        }
                        else if ( (LA107_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 107, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA107_0==NUM_FLOAT) ) {
                        int LA107_3 = input.LA(2);

                        if ( (LA107_3==EVENTS) ) {
                            alt107=2;
                        }
                        else if ( (LA107_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 107, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA107_0==NUM_DOUBLE) ) {
                        int LA107_4 = input.LA(2);

                        if ( (LA107_4==EVENTS) ) {
                            alt107=2;
                        }
                        else if ( (LA107_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 107, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA107_0==IDENT) ) {
                        int LA107_5 = input.LA(2);

                        if ( (LA107_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==EVENTS) ) {
                            alt107=2;
                        }
                        else if ( (LA107_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else if ( (LA107_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt107=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 107, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA107_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt107=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        throw nvae;
                    }
                    switch (alt107) {
                        case 1 :
                            // EsperEPL2Grammar.g:958:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit4997);
                            timePeriod274=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod274.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:959:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:959:7: ( number | i= IDENT )
                            int alt106=2;
                            int LA106_0 = input.LA(1);

                            if ( (LA106_0==NUM_DOUBLE||LA106_0==NUM_INT||(LA106_0>=NUM_LONG && LA106_0<=NUM_FLOAT)) ) {
                                alt106=1;
                            }
                            else if ( (LA106_0==IDENT) ) {
                                alt106=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 106, 0, input);

                                throw nvae;
                            }
                            switch (alt106) {
                                case 1 :
                                    // EsperEPL2Grammar.g:959:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5006);
                                    number275=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number275.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:959:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5012); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:959:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:959:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:963:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:963:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:963:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5043);
                    crontabLimitParameterSet276=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet276.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:965:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:965:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:965:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5059);
                    expression277=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression277.getTree());
                    // EsperEPL2Grammar.g:965:24: ( THEN onSetExpr )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==THEN) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // EsperEPL2Grammar.g:965:25: THEN onSetExpr
                            {
                            THEN278=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN278);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5064);
                            onSetExpr279=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr279.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetExpr, crontabLimitParameterSet, number, expression, timePeriod, k, i, k, k, k
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 967:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:967:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:967:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:967:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:967:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 968:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:968:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:968:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 969:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:969:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:969:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 970:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:970:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:970:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:970:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:973:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:976:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:976:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:976:6: (n1= numberconstant | i1= IDENT )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NUM_DOUBLE||LA110_0==PLUS||LA110_0==MINUS||LA110_0==NUM_INT||(LA110_0>=NUM_LONG && LA110_0<=NUM_FLOAT)) ) {
                alt110=1;
            }
            else if ( (LA110_0==IDENT) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // EsperEPL2Grammar.g:976:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5193);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:976:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:976:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==OFFSET||LA113_0==COMMA) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:976:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:976:38: (c= COMMA | o= OFFSET )
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==COMMA) ) {
                        alt111=1;
                    }
                    else if ( (LA111_0==OFFSET) ) {
                        alt111=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }
                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:976:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5206); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:976:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:976:59: (n2= numberconstant | i2= IDENT )
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==NUM_DOUBLE||LA112_0==PLUS||LA112_0==MINUS||LA112_0==NUM_INT||(LA112_0>=NUM_LONG && LA112_0<=NUM_FLOAT)) ) {
                        alt112=1;
                    }
                    else if ( (LA112_0==IDENT) ) {
                        alt112=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 0, input);

                        throw nvae;
                    }
                    switch (alt112) {
                        case 1 :
                            // EsperEPL2Grammar.g:976:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5218);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:976:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i1, i2, o, n1, n2, c
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 977:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:977:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:977:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:977:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:977:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:977:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:977:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:977:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:980:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN280=null;
        Token COMMA282=null;
        Token COMMA284=null;
        Token COMMA286=null;
        Token COMMA288=null;
        Token COMMA290=null;
        Token RPAREN292=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime281 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime283 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime285 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime287 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime289 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime291 = null;


        CommonTree LPAREN280_tree=null;
        CommonTree COMMA282_tree=null;
        CommonTree COMMA284_tree=null;
        CommonTree COMMA286_tree=null;
        CommonTree COMMA288_tree=null;
        CommonTree COMMA290_tree=null;
        CommonTree RPAREN292_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:981:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:981:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN280=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN280);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5278);
            expressionWithTime281=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime281.getTree());
            COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA282);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5282);
            expressionWithTime283=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime283.getTree());
            COMMA284=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA284);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5286);
            expressionWithTime285=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime285.getTree());
            COMMA286=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA286);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5290);
            expressionWithTime287=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime287.getTree());
            COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA288);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5294);
            expressionWithTime289=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime289.getTree());
            // EsperEPL2Grammar.g:981:130: ( COMMA expressionWithTime )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==COMMA) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:981:131: COMMA expressionWithTime
                    {
                    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA290);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5299);
                    expressionWithTime291=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime291.getTree());

                    }
                    break;

            }

            RPAREN292=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN292);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:982:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:982:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:985:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN293=null;
        Token THEN295=null;
        EsperEPL2GrammarParser.expression_return expression294 = null;

        EsperEPL2GrammarParser.expression_return expression296 = null;


        CommonTree WHEN293_tree=null;
        CommonTree THEN295_tree=null;

        try {
            // EsperEPL2Grammar.g:986:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:986:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:986:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:986:5: WHEN expression THEN expression
            {
            WHEN293=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5333); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5336);
            expression294=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression294.getTree());
            THEN295=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5338); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5341);
            expression296=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression296.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:989:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE297=null;
        EsperEPL2GrammarParser.expression_return expression298 = null;


        CommonTree ELSE297_tree=null;

        try {
            // EsperEPL2Grammar.g:990:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:990:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:990:4: ( ELSE expression )
            // EsperEPL2Grammar.g:990:5: ELSE expression
            {
            ELSE297=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5354); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5357);
            expression298=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression298.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:994:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression299 = null;



        try {
            // EsperEPL2Grammar.g:995:2: ( caseExpression )
            // EsperEPL2Grammar.g:995:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5370);
            caseExpression299=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression299.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:998:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE300=null;
        Token END303=null;
        Token CASE304=null;
        Token END308=null;
        EsperEPL2GrammarParser.whenClause_return whenClause301 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause302 = null;

        EsperEPL2GrammarParser.expression_return expression305 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause306 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause307 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression309 = null;


        CommonTree CASE300_tree=null;
        CommonTree END303_tree=null;
        CommonTree CASE304_tree=null;
        CommonTree END308_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:999:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt119=3;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==CASE) ) {
                int LA119_1 = input.LA(2);

                if ( (LA119_1==WINDOW||LA119_1==ESCAPE||(LA119_1>=NOT_EXPR && LA119_1<=EVERY_EXPR)||(LA119_1>=SUM && LA119_1<=COUNT)||LA119_1==CASE||LA119_1==OUTER||(LA119_1>=JOIN && LA119_1<=FULL)||(LA119_1>=EVENTS && LA119_1<=LAST)||(LA119_1>=UNIDIRECTIONAL && LA119_1<=CURRENT_TIMESTAMP)||LA119_1==SNAPSHOT||(LA119_1>=VARIABLE && LA119_1<=AT)||(LA119_1>=BOOLEAN_TRUE && LA119_1<=VALUE_NULL)||LA119_1==UPDATE||(LA119_1>=DEFINE && LA119_1<=MATCHES)||LA119_1==NUM_DOUBLE||LA119_1==IDENT||LA119_1==LPAREN||(LA119_1>=PLUS && LA119_1<=QUESTION)||(LA119_1>=STRING_LITERAL && LA119_1<=QUOTED_STRING_LITERAL)||LA119_1==MINUS||LA119_1==LCURLY||LA119_1==NUM_INT||(LA119_1>=TICKED_STRING_LITERAL && LA119_1<=NUM_FLOAT)) ) {
                    alt119=2;
                }
                else if ( (LA119_1==WHEN) ) {
                    alt119=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 119, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA119_0==WINDOW||LA119_0==ESCAPE||(LA119_0>=NOT_EXPR && LA119_0<=EVERY_EXPR)||(LA119_0>=SUM && LA119_0<=COUNT)||LA119_0==OUTER||(LA119_0>=JOIN && LA119_0<=FULL)||(LA119_0>=EVENTS && LA119_0<=LAST)||(LA119_0>=UNIDIRECTIONAL && LA119_0<=CURRENT_TIMESTAMP)||LA119_0==SNAPSHOT||(LA119_0>=VARIABLE && LA119_0<=AT)||(LA119_0>=BOOLEAN_TRUE && LA119_0<=VALUE_NULL)||LA119_0==UPDATE||(LA119_0>=DEFINE && LA119_0<=MATCHES)||LA119_0==NUM_DOUBLE||LA119_0==IDENT||LA119_0==LPAREN||(LA119_0>=PLUS && LA119_0<=QUESTION)||(LA119_0>=STRING_LITERAL && LA119_0<=QUOTED_STRING_LITERAL)||LA119_0==MINUS||LA119_0==LCURLY||LA119_0==NUM_INT||(LA119_0>=TICKED_STRING_LITERAL && LA119_0<=NUM_FLOAT)) ) {
                alt119=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:999:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE300=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE300_tree = (CommonTree)adaptor.create(CASE300);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE300_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:999:52: ( whenClause )+
                    int cnt115=0;
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( (LA115_0==WHEN) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:999:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5387);
                    	    whenClause301=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause301.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt115 >= 1 ) break loop115;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(115, input);
                                throw eee;
                        }
                        cnt115++;
                    } while (true);

                    // EsperEPL2Grammar.g:999:64: ( elseClause )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==ELSE) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:999:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5390);
                            elseClause302=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause302.getTree());

                            }
                            break;

                    }

                    END303=(Token)match(input,END,FOLLOW_END_in_caseExpression5393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1000:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE304=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE304);

                    pushFollow(FOLLOW_expression_in_caseExpression5406);
                    expression305=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression305.getTree());
                    // EsperEPL2Grammar.g:1000:62: ( whenClause )+
                    int cnt117=0;
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==WHEN) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1000:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5408);
                    	    whenClause306=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause306.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt117 >= 1 ) break loop117;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(117, input);
                                throw eee;
                        }
                        cnt117++;
                    } while (true);

                    // EsperEPL2Grammar.g:1000:74: ( elseClause )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==ELSE) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // EsperEPL2Grammar.g:1000:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5411);
                            elseClause307=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause307.getTree());

                            }
                            break;

                    }

                    END308=(Token)match(input,END,FOLLOW_END_in_caseExpression5414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END308);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, expression, whenClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1001:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1001:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1001:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1002:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5438);
                    evalOrExpression309=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1005:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression310 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression311 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1006:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1006:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5449);
            evalAndExpression310=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression310.getTree());
            // EsperEPL2Grammar.g:1006:22: (op= OR_EXPR evalAndExpression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==OR_EXPR) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1006:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression5454); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5456);
            	    evalAndExpression311=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1007:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1007:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1007:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1008:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1011:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression312 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression313 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1012:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1012:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5488);
            bitWiseExpression312=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression312.getTree());
            // EsperEPL2Grammar.g:1012:22: (op= AND_EXPR bitWiseExpression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==AND_EXPR) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1012:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression5493); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5495);
            	    bitWiseExpression313=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression313.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1013:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1013:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1014:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1017:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND315=null;
        Token BOR316=null;
        Token BXOR317=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression314 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression318 = null;


        CommonTree BAND315_tree=null;
        CommonTree BOR316_tree=null;
        CommonTree BXOR317_tree=null;

        try {
            // EsperEPL2Grammar.g:1018:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1018:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5527);
            negatedExpression314=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression314.getTree());
            // EsperEPL2Grammar.g:1018:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==BOR||(LA123_0>=BAND && LA123_0<=BXOR)) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1018:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1018:24: ( BAND | BOR | BXOR )
            	    int alt122=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt122=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt122=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt122=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 122, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt122) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1018:25: BAND
            	            {
            	            BAND315=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression5532); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND315_tree = (CommonTree)adaptor.create(BAND315);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND315_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1018:31: BOR
            	            {
            	            BOR316=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression5535); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR316_tree = (CommonTree)adaptor.create(BOR316);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR316_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1018:36: BXOR
            	            {
            	            BXOR317=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression5538); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR317_tree = (CommonTree)adaptor.create(BXOR317);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR317_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5542);
            	    negatedExpression318=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression318.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1021:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR320=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression319 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression321 = null;


        CommonTree NOT_EXPR320_tree=null;

        try {
            // EsperEPL2Grammar.g:1022:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==WINDOW||LA124_0==ESCAPE||LA124_0==EVERY_EXPR||(LA124_0>=SUM && LA124_0<=COUNT)||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=CURRENT_TIMESTAMP)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=AT)||(LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||LA124_0==UPDATE||(LA124_0>=DEFINE && LA124_0<=MATCHES)||LA124_0==NUM_DOUBLE||LA124_0==IDENT||LA124_0==LPAREN||(LA124_0>=PLUS && LA124_0<=QUESTION)||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==MINUS||LA124_0==LCURLY||LA124_0==NUM_INT||(LA124_0>=TICKED_STRING_LITERAL && LA124_0<=NUM_FLOAT)) ) {
                alt124=1;
            }
            else if ( (LA124_0==NOT_EXPR) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:1022:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5557);
                    evalEqualsExpression319=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression319.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1023:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR320=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression5563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR320_tree = (CommonTree)adaptor.create(NOT_EXPR320);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR320_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5566);
                    evalEqualsExpression321=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression321.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1026:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR323=null;
        Token LPAREN325=null;
        Token RPAREN327=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression322 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression324 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList326 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression328 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR323_tree=null;
        CommonTree LPAREN325_tree=null;
        CommonTree RPAREN327_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1027:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1027:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5579);
            evalRelationalExpression322=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression322.getTree());
            // EsperEPL2Grammar.g:1027:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==IS||LA130_0==EQUALS||(LA130_0>=SQL_NE && LA130_0<=NOT_EQUAL)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1028:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1028:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt125=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt125=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA125_2 = input.LA(2);

            	        if ( (LA125_2==NOT_EXPR) ) {
            	            alt125=3;
            	        }
            	        else if ( (LA125_2==WINDOW||LA125_2==ESCAPE||LA125_2==EVERY_EXPR||(LA125_2>=SUM && LA125_2<=COUNT)||LA125_2==OUTER||(LA125_2>=JOIN && LA125_2<=FULL)||(LA125_2>=ALL && LA125_2<=SOME)||(LA125_2>=EVENTS && LA125_2<=LAST)||(LA125_2>=UNIDIRECTIONAL && LA125_2<=CURRENT_TIMESTAMP)||LA125_2==SNAPSHOT||(LA125_2>=VARIABLE && LA125_2<=AT)||(LA125_2>=BOOLEAN_TRUE && LA125_2<=VALUE_NULL)||LA125_2==UPDATE||(LA125_2>=DEFINE && LA125_2<=MATCHES)||LA125_2==NUM_DOUBLE||LA125_2==IDENT||LA125_2==LPAREN||(LA125_2>=PLUS && LA125_2<=QUESTION)||(LA125_2>=STRING_LITERAL && LA125_2<=QUOTED_STRING_LITERAL)||LA125_2==MINUS||LA125_2==LCURLY||LA125_2==NUM_INT||(LA125_2>=TICKED_STRING_LITERAL && LA125_2<=NUM_FLOAT)) ) {
            	            alt125=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 125, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt125=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt125=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 125, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt125) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1028:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression5592); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1029:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5610); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1030:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5624); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR323=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression5626); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR323);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1031:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression5640); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1032:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression5654); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1034:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt129=2;
            	    int LA129_0 = input.LA(1);

            	    if ( (LA129_0==WINDOW||LA129_0==ESCAPE||LA129_0==EVERY_EXPR||(LA129_0>=SUM && LA129_0<=COUNT)||LA129_0==OUTER||(LA129_0>=JOIN && LA129_0<=FULL)||(LA129_0>=EVENTS && LA129_0<=LAST)||(LA129_0>=UNIDIRECTIONAL && LA129_0<=CURRENT_TIMESTAMP)||LA129_0==SNAPSHOT||(LA129_0>=VARIABLE && LA129_0<=AT)||(LA129_0>=BOOLEAN_TRUE && LA129_0<=VALUE_NULL)||LA129_0==UPDATE||(LA129_0>=DEFINE && LA129_0<=MATCHES)||LA129_0==NUM_DOUBLE||LA129_0==IDENT||LA129_0==LPAREN||(LA129_0>=PLUS && LA129_0<=QUESTION)||(LA129_0>=STRING_LITERAL && LA129_0<=QUOTED_STRING_LITERAL)||LA129_0==MINUS||LA129_0==LCURLY||LA129_0==NUM_INT||(LA129_0>=TICKED_STRING_LITERAL && LA129_0<=NUM_FLOAT)) ) {
            	        alt129=1;
            	    }
            	    else if ( ((LA129_0>=ALL && LA129_0<=SOME)) ) {
            	        alt129=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 129, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt129) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1035:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5684);
            	            evalRelationalExpression324=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression324.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1036:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1036:13: (a= ANY | a= SOME | a= ALL )
            	            int alt126=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt126=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt126=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt126=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 126, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt126) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1036:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression5701); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1036:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression5707); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1036:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression5713); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1036:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt128=2;
            	            int LA128_0 = input.LA(1);

            	            if ( (LA128_0==LPAREN) ) {
            	                int LA128_1 = input.LA(2);

            	                if ( (LA128_1==SELECT) ) {
            	                    alt128=2;
            	                }
            	                else if ( (LA128_1==WINDOW||LA128_1==ESCAPE||(LA128_1>=NOT_EXPR && LA128_1<=EVERY_EXPR)||(LA128_1>=SUM && LA128_1<=COUNT)||LA128_1==CASE||LA128_1==OUTER||(LA128_1>=JOIN && LA128_1<=FULL)||(LA128_1>=EVENTS && LA128_1<=LAST)||(LA128_1>=UNIDIRECTIONAL && LA128_1<=CURRENT_TIMESTAMP)||LA128_1==SNAPSHOT||(LA128_1>=VARIABLE && LA128_1<=AT)||(LA128_1>=BOOLEAN_TRUE && LA128_1<=VALUE_NULL)||LA128_1==UPDATE||(LA128_1>=DEFINE && LA128_1<=MATCHES)||LA128_1==NUM_DOUBLE||LA128_1==IDENT||(LA128_1>=LPAREN && LA128_1<=RPAREN)||(LA128_1>=PLUS && LA128_1<=QUESTION)||(LA128_1>=STRING_LITERAL && LA128_1<=QUOTED_STRING_LITERAL)||LA128_1==MINUS||LA128_1==LCURLY||LA128_1==NUM_INT||(LA128_1>=TICKED_STRING_LITERAL && LA128_1<=NUM_FLOAT)) ) {
            	                    alt128=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 128, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 128, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt128) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1036:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1036:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1036:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN325=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression5719); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN325);

            	                    // EsperEPL2Grammar.g:1036:48: ( expressionList )?
            	                    int alt127=2;
            	                    int LA127_0 = input.LA(1);

            	                    if ( (LA127_0==WINDOW||LA127_0==ESCAPE||(LA127_0>=NOT_EXPR && LA127_0<=EVERY_EXPR)||(LA127_0>=SUM && LA127_0<=COUNT)||LA127_0==CASE||LA127_0==OUTER||(LA127_0>=JOIN && LA127_0<=FULL)||(LA127_0>=EVENTS && LA127_0<=LAST)||(LA127_0>=UNIDIRECTIONAL && LA127_0<=CURRENT_TIMESTAMP)||LA127_0==SNAPSHOT||(LA127_0>=VARIABLE && LA127_0<=AT)||(LA127_0>=BOOLEAN_TRUE && LA127_0<=VALUE_NULL)||LA127_0==UPDATE||(LA127_0>=DEFINE && LA127_0<=MATCHES)||LA127_0==NUM_DOUBLE||LA127_0==IDENT||LA127_0==LPAREN||(LA127_0>=PLUS && LA127_0<=QUESTION)||(LA127_0>=STRING_LITERAL && LA127_0<=QUOTED_STRING_LITERAL)||LA127_0==MINUS||LA127_0==LCURLY||LA127_0==NUM_INT||(LA127_0>=TICKED_STRING_LITERAL && LA127_0<=NUM_FLOAT)) ) {
            	                        alt127=1;
            	                    }
            	                    switch (alt127) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1036:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression5721);
            	                            expressionList326=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList326.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN327=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression5724); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN327);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1036:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5729);
            	                    subSelectGroupExpression328=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression328.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, expressionList, subSelectGroupExpression, evalRelationalExpression, expressionList, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, a, a, subSelectGroupExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1039:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1039:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1040:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1040:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1040:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1040:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1041:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1041:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1042:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1042:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1042:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1042:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1043:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1046:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN331=null;
        Token RPAREN333=null;
        Token COMMA337=null;
        Token IN_SET339=null;
        Token BETWEEN341=null;
        Token LIKE343=null;
        Token ESCAPE345=null;
        Token REGEXP347=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr329 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr330 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList332 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression334 = null;

        EsperEPL2GrammarParser.expression_return expression335 = null;

        EsperEPL2GrammarParser.expression_return expression336 = null;

        EsperEPL2GrammarParser.expression_return expression338 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery340 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList342 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr344 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant346 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr348 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN331_tree=null;
        CommonTree RPAREN333_tree=null;
        CommonTree COMMA337_tree=null;
        CommonTree IN_SET339_tree=null;
        CommonTree BETWEEN341_tree=null;
        CommonTree LIKE343_tree=null;
        CommonTree ESCAPE345_tree=null;
        CommonTree REGEXP347_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1047:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1047:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5857);
            concatenationExpr329=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr329.getTree());
            // EsperEPL2Grammar.g:1048:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==EOF||(LA144_0>=OR_EXPR && LA144_0<=AND_EXPR)||(LA144_0>=WHERE && LA144_0<=AS)||(LA144_0>=ELSE && LA144_0<=FROM)||LA144_0==IS||(LA144_0>=GROUP && LA144_0<=HAVING)||LA144_0==ALL||LA144_0==OUTPUT||LA144_0==INSERT||(LA144_0>=ORDER && LA144_0<=DESC)||LA144_0==PATTERN||(LA144_0>=TIMEPERIOD_SEC && LA144_0<=TIMEPERIOD_SECONDS)||LA144_0==ROW_LIMIT_EXPR||LA144_0==MEASURES||LA144_0==AFTER||LA144_0==COMMA||LA144_0==EQUALS||LA144_0==RPAREN||LA144_0==BOR||(LA144_0>=RBRACK && LA144_0<=COLON)||(LA144_0>=BAND && LA144_0<=GE)||LA144_0==RCURLY) ) {
                alt144=1;
            }
            else if ( ((LA144_0>=IN_SET && LA144_0<=REGEXP)||LA144_0==NOT_EXPR) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // EsperEPL2Grammar.g:1049:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1049:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1050:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1050:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( ((LA136_0>=LT && LA136_0<=GE)) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1051:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1051:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt131=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt131=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt131=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt131=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt131=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 131, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt131) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1051:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression5889); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1051:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression5893); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1051:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression5897); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1051:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression5901); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1052:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt135=2;
                    	    int LA135_0 = input.LA(1);

                    	    if ( (LA135_0==WINDOW||LA135_0==ESCAPE||LA135_0==EVERY_EXPR||(LA135_0>=SUM && LA135_0<=COUNT)||LA135_0==OUTER||(LA135_0>=JOIN && LA135_0<=FULL)||(LA135_0>=EVENTS && LA135_0<=LAST)||(LA135_0>=UNIDIRECTIONAL && LA135_0<=CURRENT_TIMESTAMP)||LA135_0==SNAPSHOT||(LA135_0>=VARIABLE && LA135_0<=AT)||(LA135_0>=BOOLEAN_TRUE && LA135_0<=VALUE_NULL)||LA135_0==UPDATE||(LA135_0>=DEFINE && LA135_0<=MATCHES)||LA135_0==NUM_DOUBLE||LA135_0==IDENT||LA135_0==LPAREN||(LA135_0>=PLUS && LA135_0<=QUESTION)||(LA135_0>=STRING_LITERAL && LA135_0<=QUOTED_STRING_LITERAL)||LA135_0==MINUS||LA135_0==LCURLY||LA135_0==NUM_INT||(LA135_0>=TICKED_STRING_LITERAL && LA135_0<=NUM_FLOAT)) ) {
                    	        alt135=1;
                    	    }
                    	    else if ( ((LA135_0>=ALL && LA135_0<=SOME)) ) {
                    	        alt135=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 135, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt135) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1053:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5925);
                    	            concatenationExpr330=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr330.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1054:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1054:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt132=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt132=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt132=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt132=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 132, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt132) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1054:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression5942); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1054:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression5948); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1054:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression5954); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1054:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt134=2;
                    	            int LA134_0 = input.LA(1);

                    	            if ( (LA134_0==LPAREN) ) {
                    	                int LA134_1 = input.LA(2);

                    	                if ( (LA134_1==SELECT) ) {
                    	                    alt134=2;
                    	                }
                    	                else if ( (LA134_1==WINDOW||LA134_1==ESCAPE||(LA134_1>=NOT_EXPR && LA134_1<=EVERY_EXPR)||(LA134_1>=SUM && LA134_1<=COUNT)||LA134_1==CASE||LA134_1==OUTER||(LA134_1>=JOIN && LA134_1<=FULL)||(LA134_1>=EVENTS && LA134_1<=LAST)||(LA134_1>=UNIDIRECTIONAL && LA134_1<=CURRENT_TIMESTAMP)||LA134_1==SNAPSHOT||(LA134_1>=VARIABLE && LA134_1<=AT)||(LA134_1>=BOOLEAN_TRUE && LA134_1<=VALUE_NULL)||LA134_1==UPDATE||(LA134_1>=DEFINE && LA134_1<=MATCHES)||LA134_1==NUM_DOUBLE||LA134_1==IDENT||(LA134_1>=LPAREN && LA134_1<=RPAREN)||(LA134_1>=PLUS && LA134_1<=QUESTION)||(LA134_1>=STRING_LITERAL && LA134_1<=QUOTED_STRING_LITERAL)||LA134_1==MINUS||LA134_1==LCURLY||LA134_1==NUM_INT||(LA134_1>=TICKED_STRING_LITERAL && LA134_1<=NUM_FLOAT)) ) {
                    	                    alt134=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 134, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 134, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt134) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1054:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1054:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1054:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN331=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5960); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN331);

                    	                    // EsperEPL2Grammar.g:1054:48: ( expressionList )?
                    	                    int alt133=2;
                    	                    int LA133_0 = input.LA(1);

                    	                    if ( (LA133_0==WINDOW||LA133_0==ESCAPE||(LA133_0>=NOT_EXPR && LA133_0<=EVERY_EXPR)||(LA133_0>=SUM && LA133_0<=COUNT)||LA133_0==CASE||LA133_0==OUTER||(LA133_0>=JOIN && LA133_0<=FULL)||(LA133_0>=EVENTS && LA133_0<=LAST)||(LA133_0>=UNIDIRECTIONAL && LA133_0<=CURRENT_TIMESTAMP)||LA133_0==SNAPSHOT||(LA133_0>=VARIABLE && LA133_0<=AT)||(LA133_0>=BOOLEAN_TRUE && LA133_0<=VALUE_NULL)||LA133_0==UPDATE||(LA133_0>=DEFINE && LA133_0<=MATCHES)||LA133_0==NUM_DOUBLE||LA133_0==IDENT||LA133_0==LPAREN||(LA133_0>=PLUS && LA133_0<=QUESTION)||(LA133_0>=STRING_LITERAL && LA133_0<=QUOTED_STRING_LITERAL)||LA133_0==MINUS||LA133_0==LCURLY||LA133_0==NUM_INT||(LA133_0>=TICKED_STRING_LITERAL && LA133_0<=NUM_FLOAT)) ) {
                    	                        alt133=1;
                    	                    }
                    	                    switch (alt133) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1054:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression5962);
                    	                            expressionList332=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList332.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5965); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN333);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1054:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5970);
                    	                    subSelectGroupExpression334=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression334.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: subSelectGroupExpression, expressionList, g, concatenationExpr, concatenationExpr, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1058:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1058:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1059:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1059:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1059:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1059:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1060:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1062:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1062:6: (n= NOT_EXPR )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==NOT_EXPR) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1062:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6066); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1063:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt143=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA143_1 = input.LA(2);

                        if ( (LA143_1==LPAREN) ) {
                            int LA143_5 = input.LA(3);

                            if ( (LA143_5==SELECT) ) {
                                alt143=2;
                            }
                            else if ( (LA143_5==WINDOW||LA143_5==ESCAPE||(LA143_5>=NOT_EXPR && LA143_5<=EVERY_EXPR)||(LA143_5>=SUM && LA143_5<=COUNT)||LA143_5==CASE||LA143_5==OUTER||(LA143_5>=JOIN && LA143_5<=FULL)||(LA143_5>=EVENTS && LA143_5<=LAST)||(LA143_5>=UNIDIRECTIONAL && LA143_5<=CURRENT_TIMESTAMP)||LA143_5==SNAPSHOT||(LA143_5>=VARIABLE && LA143_5<=AT)||(LA143_5>=BOOLEAN_TRUE && LA143_5<=VALUE_NULL)||LA143_5==UPDATE||(LA143_5>=DEFINE && LA143_5<=MATCHES)||LA143_5==NUM_DOUBLE||LA143_5==IDENT||LA143_5==LPAREN||(LA143_5>=PLUS && LA143_5<=QUESTION)||(LA143_5>=STRING_LITERAL && LA143_5<=QUOTED_STRING_LITERAL)||LA143_5==MINUS||LA143_5==LCURLY||LA143_5==NUM_INT||(LA143_5>=TICKED_STRING_LITERAL && LA143_5<=NUM_FLOAT)) ) {
                                alt143=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 143, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA143_1==LBRACK) ) {
                            alt143=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 143, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt143=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt143=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt143=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }

                    switch (alt143) {
                        case 1 :
                            // EsperEPL2Grammar.g:1066:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1066:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1066:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6093); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1067:8: (l= LPAREN | l= LBRACK )
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==LPAREN) ) {
                                alt138=1;
                            }
                            else if ( (LA138_0==LBRACK) ) {
                                alt138=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 138, 0, input);

                                throw nvae;
                            }
                            switch (alt138) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1067:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6105); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1067:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6111); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6114);
                            expression335=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression335.getTree());
                            // EsperEPL2Grammar.g:1068:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt140=2;
                            int LA140_0 = input.LA(1);

                            if ( (LA140_0==COLON) ) {
                                alt140=1;
                            }
                            else if ( (LA140_0==COMMA||LA140_0==RPAREN||LA140_0==RBRACK) ) {
                                alt140=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 140, 0, input);

                                throw nvae;
                            }
                            switch (alt140) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1069:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1069:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1069:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6136); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1069:20: ( expression )
                                    // EsperEPL2Grammar.g:1069:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6139);
                                    expression336=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression336.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1071:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1071:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1071:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1071:10: ( COMMA expression )*
                                    loop139:
                                    do {
                                        int alt139=2;
                                        int LA139_0 = input.LA(1);

                                        if ( (LA139_0==COMMA) ) {
                                            alt139=1;
                                        }


                                        switch (alt139) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1071:11: COMMA expression
                                    	    {
                                    	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6165); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6167);
                                    	    expression338=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression338.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop139;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1073:8: (r= RPAREN | r= RBRACK )
                            int alt141=2;
                            int LA141_0 = input.LA(1);

                            if ( (LA141_0==RPAREN) ) {
                                alt141=1;
                            }
                            else if ( (LA141_0==RBRACK) ) {
                                alt141=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 141, 0, input);

                                throw nvae;
                            }
                            switch (alt141) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1073:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6193); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1073:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6199); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: r, expression, concatenationExpr, concatenationExpr, r, IN_SET, l, concatenationExpr, expression, r, r, expression, concatenationExpr, l, l, l, expression
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1075:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1075:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1076:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1076:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1077:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1077:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1078:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1078:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1079:7: IN_SET inSubSelectQuery
                            {
                            IN_SET339=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6322); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET339);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6324);
                            inSubSelectQuery340=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery340.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, inSubSelectQuery, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1080:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1080:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1081:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1081:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1082:7: BETWEEN betweenList
                            {
                            BETWEEN341=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6370); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN341);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6372);
                            betweenList342=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList342.getTree());


                            // AST REWRITE
                            // elements: betweenList, concatenationExpr, betweenList, concatenationExpr, BETWEEN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1083:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1083:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1084:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1084:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1085:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE343=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6422); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE343);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6424);
                            concatenationExpr344=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr344.getTree());
                            // EsperEPL2Grammar.g:1085:30: ( ESCAPE stringconstant )?
                            int alt142=2;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==ESCAPE) ) {
                                alt142=1;
                            }
                            switch (alt142) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1085:31: ESCAPE stringconstant
                                    {
                                    ESCAPE345=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6427); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE345);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6429);
                                    stringconstant346=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant346.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, LIKE, concatenationExpr, stringconstant, stringconstant
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1086:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1086:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1086:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1086:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1087:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1087:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1087:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1087:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1088:7: REGEXP concatenationExpr
                            {
                            REGEXP347=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression6481); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP347);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6483);
                            concatenationExpr348=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr348.getTree());


                            // AST REWRITE
                            // elements: REGEXP, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1089:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1089:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1090:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1090:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1095:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr349 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1096:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1096:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery6545);
            subQueryExpr349=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr349.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1097:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1097:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1100:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR352=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression350 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression351 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression353 = null;


        CommonTree c_tree=null;
        CommonTree LOR352_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1101:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1101:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6570);
            additiveExpression350=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression350.getTree());
            // EsperEPL2Grammar.g:1101:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LOR) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // EsperEPL2Grammar.g:1101:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6578);
                    additiveExpression351=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression351.getTree());
                    // EsperEPL2Grammar.g:1101:50: ( LOR additiveExpression )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==LOR) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1101:52: LOR additiveExpression
                    	    {
                    	    LOR352=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6582); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR352);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6584);
                    	    additiveExpression353=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1102:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1102:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1103:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1106:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS355=null;
        Token MINUS356=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression354 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression357 = null;


        CommonTree PLUS355_tree=null;
        CommonTree MINUS356_tree=null;

        try {
            // EsperEPL2Grammar.g:1107:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1107:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6625);
            multiplyExpression354=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression354.getTree());
            // EsperEPL2Grammar.g:1107:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==PLUS||LA148_0==MINUS) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1107:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1107:25: ( PLUS | MINUS )
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==PLUS) ) {
            	        alt147=1;
            	    }
            	    else if ( (LA147_0==MINUS) ) {
            	        alt147=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 147, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1107:26: PLUS
            	            {
            	            PLUS355=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression6630); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS355_tree = (CommonTree)adaptor.create(PLUS355);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS355_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1107:32: MINUS
            	            {
            	            MINUS356=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression6633); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS356_tree = (CommonTree)adaptor.create(MINUS356);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS356_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6637);
            	    multiplyExpression357=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression357.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1110:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR359=null;
        Token DIV360=null;
        Token MOD361=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression358 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression362 = null;


        CommonTree STAR359_tree=null;
        CommonTree DIV360_tree=null;
        CommonTree MOD361_tree=null;

        try {
            // EsperEPL2Grammar.g:1111:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1111:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6651);
            unaryExpression358=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression358.getTree());
            // EsperEPL2Grammar.g:1111:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==STAR||(LA150_0>=DIV && LA150_0<=MOD)) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1111:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1111:22: ( STAR | DIV | MOD )
            	    int alt149=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt149=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt149=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt149=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 149, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt149) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1111:23: STAR
            	            {
            	            STAR359=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression6656); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR359_tree = (CommonTree)adaptor.create(STAR359);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR359_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1111:29: DIV
            	            {
            	            DIV360=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression6659); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV360_tree = (CommonTree)adaptor.create(DIV360);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV360_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1111:34: MOD
            	            {
            	            MOD361=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression6662); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD361_tree = (CommonTree)adaptor.create(MOD361);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD361_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6666);
            	    unaryExpression362=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression362.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1114:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS363=null;
        Token LPAREN367=null;
        Token RPAREN369=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty364 = null;

        EsperEPL2GrammarParser.constant_return constant365 = null;

        EsperEPL2GrammarParser.substitution_return substitution366 = null;

        EsperEPL2GrammarParser.expression_return expression368 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction370 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc371 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression372 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression373 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression374 = null;


        CommonTree MINUS363_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree RPAREN369_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1115:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt151=9;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // EsperEPL2Grammar.g:1115:4: MINUS eventProperty
                    {
                    MINUS363=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS363);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression6683);
                    eventProperty364=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty364.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1115:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1115:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1116:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression6696);
                    constant365=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant365.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1117:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression6701);
                    substitution366=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution366.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1118:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression6706); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression6709);
                    expression368=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression368.getTree());
                    RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression6711); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1119:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6717);
                    eventPropertyOrLibFunction370=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction370.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1120:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1120:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1120:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression6729);
                    builtinFunc371=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc371.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1121:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression6735);
                    arrayExpression372=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression372.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1122:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression6740);
                    subSelectExpression373=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression373.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1123:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression6745);
                    existsSubSelectExpression374=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression374.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1126:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr375 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1127:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1127:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression6762);
            subQueryExpr375=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr375.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1128:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1128:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1131:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr376 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1132:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1132:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression6784);
            subQueryExpr376=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr376.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1133:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1133:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1136:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS377=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr378 = null;


        CommonTree EXISTS377_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1137:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1137:4: EXISTS subQueryExpr
            {
            EXISTS377=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression6806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS377);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression6808);
            subQueryExpr378=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr378.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1138:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1138:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1141:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN379=null;
        Token SELECT380=null;
        Token FROM382=null;
        Token WHERE384=null;
        Token RPAREN386=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement381 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr383 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause385 = null;


        CommonTree LPAREN379_tree=null;
        CommonTree SELECT380_tree=null;
        CommonTree FROM382_tree=null;
        CommonTree WHERE384_tree=null;
        CommonTree RPAREN386_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1144:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1144:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN379=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr6841); if (state.failed) return retval;
            SELECT380=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr6847); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr6850);
            selectionListElement381=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement381.getTree());
            FROM382=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr6857); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr6860);
            subSelectFilterExpr383=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr383.getTree());
            // EsperEPL2Grammar.g:1147:6: ( WHERE whereClause )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==WHERE) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // EsperEPL2Grammar.g:1147:7: WHERE whereClause
                    {
                    WHERE384=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr6868); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr6871);
                    whereClause385=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause385.getTree());

                    }
                    break;

            }

            RPAREN386=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr6880); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1151:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT388=null;
        Token DOT390=null;
        Token AS392=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression387 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression389 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression391 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT388_tree=null;
        CommonTree DOT390_tree=null;
        CommonTree AS392_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1154:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1154:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr6904);
            eventFilterExpression387=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression387.getTree());
            // EsperEPL2Grammar.g:1155:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==DOT) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT388=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT388);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6911);
                    viewExpression389=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression389.getTree());
                    // EsperEPL2Grammar.g:1155:23: ( DOT viewExpression )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==DOT) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1155:24: DOT viewExpression
                    	    {
                    	    DOT390=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6914); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT390);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6916);
                    	    viewExpression391=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression391.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1155:47: ( AS i= IDENT | i= IDENT )?
            int alt155=3;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==AS) ) {
                alt155=1;
            }
            else if ( (LA155_0==IDENT) ) {
                alt155=2;
            }
            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:48: AS i= IDENT
                    {
                    AS392=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr6923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS392);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1155:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1155:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt156=3;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==RETAINUNION) ) {
                alt156=1;
            }
            else if ( (LA156_0==RETAININTERSECTION) ) {
                alt156=2;
            }
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr6940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1155:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, i, ri, ru, eventFilterExpression
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1156:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1156:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1156:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1156:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1156:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1156:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1159:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY393=null;
        Token COMMA395=null;
        Token RCURLY397=null;
        EsperEPL2GrammarParser.expression_return expression394 = null;

        EsperEPL2GrammarParser.expression_return expression396 = null;


        CommonTree LCURLY393_tree=null;
        CommonTree COMMA395_tree=null;
        CommonTree RCURLY397_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1160:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1160:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY393=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression6984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY393);

            // EsperEPL2Grammar.g:1160:11: ( expression ( COMMA expression )* )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==WINDOW||LA158_0==ESCAPE||(LA158_0>=NOT_EXPR && LA158_0<=EVERY_EXPR)||(LA158_0>=SUM && LA158_0<=COUNT)||LA158_0==CASE||LA158_0==OUTER||(LA158_0>=JOIN && LA158_0<=FULL)||(LA158_0>=EVENTS && LA158_0<=LAST)||(LA158_0>=UNIDIRECTIONAL && LA158_0<=CURRENT_TIMESTAMP)||LA158_0==SNAPSHOT||(LA158_0>=VARIABLE && LA158_0<=AT)||(LA158_0>=BOOLEAN_TRUE && LA158_0<=VALUE_NULL)||LA158_0==UPDATE||(LA158_0>=DEFINE && LA158_0<=MATCHES)||LA158_0==NUM_DOUBLE||LA158_0==IDENT||LA158_0==LPAREN||(LA158_0>=PLUS && LA158_0<=QUESTION)||(LA158_0>=STRING_LITERAL && LA158_0<=QUOTED_STRING_LITERAL)||LA158_0==MINUS||LA158_0==LCURLY||LA158_0==NUM_INT||(LA158_0>=TICKED_STRING_LITERAL && LA158_0<=NUM_FLOAT)) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // EsperEPL2Grammar.g:1160:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression6987);
                    expression394=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());
                    // EsperEPL2Grammar.g:1160:23: ( COMMA expression )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==COMMA) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1160:24: COMMA expression
                    	    {
                    	    COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression6990); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression6992);
                    	    expression396=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY397=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression6999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY397);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1161:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1161:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1161:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1164:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM398=null;
        Token LPAREN399=null;
        Token ALL400=null;
        Token DISTINCT401=null;
        Token RPAREN403=null;
        Token AVG404=null;
        Token LPAREN405=null;
        Token ALL406=null;
        Token DISTINCT407=null;
        Token RPAREN409=null;
        Token COUNT410=null;
        Token LPAREN411=null;
        Token ALL412=null;
        Token DISTINCT413=null;
        Token STAR415=null;
        Token RPAREN416=null;
        Token MEDIAN417=null;
        Token LPAREN418=null;
        Token ALL419=null;
        Token DISTINCT420=null;
        Token RPAREN422=null;
        Token STDDEV423=null;
        Token LPAREN424=null;
        Token ALL425=null;
        Token DISTINCT426=null;
        Token RPAREN428=null;
        Token AVEDEV429=null;
        Token LPAREN430=null;
        Token ALL431=null;
        Token DISTINCT432=null;
        Token RPAREN434=null;
        Token COALESCE437=null;
        Token LPAREN438=null;
        Token COMMA440=null;
        Token COMMA442=null;
        Token RPAREN444=null;
        Token PREVIOUS445=null;
        Token LPAREN446=null;
        Token COMMA448=null;
        Token RPAREN450=null;
        Token PRIOR451=null;
        Token LPAREN452=null;
        Token NUM_INT453=null;
        Token COMMA454=null;
        Token RPAREN456=null;
        Token INSTANCEOF457=null;
        Token LPAREN458=null;
        Token COMMA460=null;
        Token COMMA462=null;
        Token RPAREN464=null;
        Token CAST465=null;
        Token LPAREN466=null;
        Token COMMA468=null;
        Token AS469=null;
        Token RPAREN471=null;
        Token EXISTS472=null;
        Token LPAREN473=null;
        Token RPAREN475=null;
        Token CURRENT_TIMESTAMP476=null;
        Token LPAREN477=null;
        Token RPAREN478=null;
        EsperEPL2GrammarParser.expression_return expression402 = null;

        EsperEPL2GrammarParser.expression_return expression408 = null;

        EsperEPL2GrammarParser.expression_return expression414 = null;

        EsperEPL2GrammarParser.expression_return expression421 = null;

        EsperEPL2GrammarParser.expression_return expression427 = null;

        EsperEPL2GrammarParser.expression_return expression433 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation435 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation436 = null;

        EsperEPL2GrammarParser.expression_return expression439 = null;

        EsperEPL2GrammarParser.expression_return expression441 = null;

        EsperEPL2GrammarParser.expression_return expression443 = null;

        EsperEPL2GrammarParser.expression_return expression447 = null;

        EsperEPL2GrammarParser.expression_return expression449 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty455 = null;

        EsperEPL2GrammarParser.expression_return expression459 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier461 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier463 = null;

        EsperEPL2GrammarParser.expression_return expression467 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier470 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty474 = null;


        CommonTree SUM398_tree=null;
        CommonTree LPAREN399_tree=null;
        CommonTree ALL400_tree=null;
        CommonTree DISTINCT401_tree=null;
        CommonTree RPAREN403_tree=null;
        CommonTree AVG404_tree=null;
        CommonTree LPAREN405_tree=null;
        CommonTree ALL406_tree=null;
        CommonTree DISTINCT407_tree=null;
        CommonTree RPAREN409_tree=null;
        CommonTree COUNT410_tree=null;
        CommonTree LPAREN411_tree=null;
        CommonTree ALL412_tree=null;
        CommonTree DISTINCT413_tree=null;
        CommonTree STAR415_tree=null;
        CommonTree RPAREN416_tree=null;
        CommonTree MEDIAN417_tree=null;
        CommonTree LPAREN418_tree=null;
        CommonTree ALL419_tree=null;
        CommonTree DISTINCT420_tree=null;
        CommonTree RPAREN422_tree=null;
        CommonTree STDDEV423_tree=null;
        CommonTree LPAREN424_tree=null;
        CommonTree ALL425_tree=null;
        CommonTree DISTINCT426_tree=null;
        CommonTree RPAREN428_tree=null;
        CommonTree AVEDEV429_tree=null;
        CommonTree LPAREN430_tree=null;
        CommonTree ALL431_tree=null;
        CommonTree DISTINCT432_tree=null;
        CommonTree RPAREN434_tree=null;
        CommonTree COALESCE437_tree=null;
        CommonTree LPAREN438_tree=null;
        CommonTree COMMA440_tree=null;
        CommonTree COMMA442_tree=null;
        CommonTree RPAREN444_tree=null;
        CommonTree PREVIOUS445_tree=null;
        CommonTree LPAREN446_tree=null;
        CommonTree COMMA448_tree=null;
        CommonTree RPAREN450_tree=null;
        CommonTree PRIOR451_tree=null;
        CommonTree LPAREN452_tree=null;
        CommonTree NUM_INT453_tree=null;
        CommonTree COMMA454_tree=null;
        CommonTree RPAREN456_tree=null;
        CommonTree INSTANCEOF457_tree=null;
        CommonTree LPAREN458_tree=null;
        CommonTree COMMA460_tree=null;
        CommonTree COMMA462_tree=null;
        CommonTree RPAREN464_tree=null;
        CommonTree CAST465_tree=null;
        CommonTree LPAREN466_tree=null;
        CommonTree COMMA468_tree=null;
        CommonTree AS469_tree=null;
        CommonTree RPAREN471_tree=null;
        CommonTree EXISTS472_tree=null;
        CommonTree LPAREN473_tree=null;
        CommonTree RPAREN475_tree=null;
        CommonTree CURRENT_TIMESTAMP476_tree=null;
        CommonTree LPAREN477_tree=null;
        CommonTree RPAREN478_tree=null;

        try {
            // EsperEPL2Grammar.g:1165:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt171=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt171=1;
                }
                break;
            case AVG:
                {
                alt171=2;
                }
                break;
            case COUNT:
                {
                alt171=3;
                }
                break;
            case MEDIAN:
                {
                alt171=4;
                }
                break;
            case STDDEV:
                {
                alt171=5;
                }
                break;
            case AVEDEV:
                {
                alt171=6;
                }
                break;
            case FIRST:
                {
                alt171=7;
                }
                break;
            case LAST:
                {
                alt171=8;
                }
                break;
            case COALESCE:
                {
                alt171=9;
                }
                break;
            case PREVIOUS:
                {
                alt171=10;
                }
                break;
            case PRIOR:
                {
                alt171=11;
                }
                break;
            case INSTANCEOF:
                {
                alt171=12;
                }
                break;
            case CAST:
                {
                alt171=13;
                }
                break;
            case EXISTS:
                {
                alt171=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt171=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM398=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM398_tree = (CommonTree)adaptor.create(SUM398);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM398_tree, root_0);
                    }
                    LPAREN399=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7025); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1165:17: ( ALL | DISTINCT )?
                    int alt159=3;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==ALL) ) {
                        alt159=1;
                    }
                    else if ( (LA159_0==DISTINCT) ) {
                        alt159=2;
                    }
                    switch (alt159) {
                        case 1 :
                            // EsperEPL2Grammar.g:1165:18: ALL
                            {
                            ALL400=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7029); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1165:25: DISTINCT
                            {
                            DISTINCT401=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7034); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT401_tree = (CommonTree)adaptor.create(DISTINCT401);
                            adaptor.addChild(root_0, DISTINCT401_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7038);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression402.getTree());
                    RPAREN403=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7040); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1166:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG404=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG404_tree = (CommonTree)adaptor.create(AVG404);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG404_tree, root_0);
                    }
                    LPAREN405=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7049); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1166:17: ( ALL | DISTINCT )?
                    int alt160=3;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==ALL) ) {
                        alt160=1;
                    }
                    else if ( (LA160_0==DISTINCT) ) {
                        alt160=2;
                    }
                    switch (alt160) {
                        case 1 :
                            // EsperEPL2Grammar.g:1166:18: ALL
                            {
                            ALL406=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7053); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1166:25: DISTINCT
                            {
                            DISTINCT407=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7058); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT407_tree = (CommonTree)adaptor.create(DISTINCT407);
                            adaptor.addChild(root_0, DISTINCT407_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7062);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression408.getTree());
                    RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7064); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1167:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT410=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT410_tree = (CommonTree)adaptor.create(COUNT410);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT410_tree, root_0);
                    }
                    LPAREN411=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7073); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1168:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==WINDOW||LA162_0==ESCAPE||(LA162_0>=NOT_EXPR && LA162_0<=EVERY_EXPR)||(LA162_0>=SUM && LA162_0<=COUNT)||LA162_0==CASE||LA162_0==OUTER||(LA162_0>=JOIN && LA162_0<=FULL)||(LA162_0>=DISTINCT && LA162_0<=ALL)||(LA162_0>=EVENTS && LA162_0<=LAST)||(LA162_0>=UNIDIRECTIONAL && LA162_0<=CURRENT_TIMESTAMP)||LA162_0==SNAPSHOT||(LA162_0>=VARIABLE && LA162_0<=AT)||(LA162_0>=BOOLEAN_TRUE && LA162_0<=VALUE_NULL)||LA162_0==UPDATE||(LA162_0>=DEFINE && LA162_0<=MATCHES)||LA162_0==NUM_DOUBLE||LA162_0==IDENT||LA162_0==LPAREN||(LA162_0>=PLUS && LA162_0<=QUESTION)||(LA162_0>=STRING_LITERAL && LA162_0<=QUOTED_STRING_LITERAL)||LA162_0==MINUS||LA162_0==LCURLY||LA162_0==NUM_INT||(LA162_0>=TICKED_STRING_LITERAL && LA162_0<=NUM_FLOAT)) ) {
                        alt162=1;
                    }
                    else if ( (LA162_0==STAR) ) {
                        alt162=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);

                        throw nvae;
                    }
                    switch (alt162) {
                        case 1 :
                            // EsperEPL2Grammar.g:1169:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1169:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1169:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1169:5: ( ALL | DISTINCT )?
                            int alt161=3;
                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==ALL) ) {
                                alt161=1;
                            }
                            else if ( (LA161_0==DISTINCT) ) {
                                alt161=2;
                            }
                            switch (alt161) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1169:6: ALL
                                    {
                                    ALL412=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7085); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1169:13: DISTINCT
                                    {
                                    DISTINCT413=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7090); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT413_tree = (CommonTree)adaptor.create(DISTINCT413);
                                    adaptor.addChild(root_0, DISTINCT413_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7094);
                            expression414=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression414.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1171:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1171:4: ( STAR )
                            // EsperEPL2Grammar.g:1171:5: STAR
                            {
                            STAR415=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7105); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7116); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1174:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN417=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN417_tree = (CommonTree)adaptor.create(MEDIAN417);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN417_tree, root_0);
                    }
                    LPAREN418=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7125); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1174:20: ( ALL | DISTINCT )?
                    int alt163=3;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==ALL) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==DISTINCT) ) {
                        alt163=2;
                    }
                    switch (alt163) {
                        case 1 :
                            // EsperEPL2Grammar.g:1174:21: ALL
                            {
                            ALL419=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7129); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1174:28: DISTINCT
                            {
                            DISTINCT420=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT420_tree = (CommonTree)adaptor.create(DISTINCT420);
                            adaptor.addChild(root_0, DISTINCT420_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7138);
                    expression421=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression421.getTree());
                    RPAREN422=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7140); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1175:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV423=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV423_tree = (CommonTree)adaptor.create(STDDEV423);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV423_tree, root_0);
                    }
                    LPAREN424=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7149); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1175:20: ( ALL | DISTINCT )?
                    int alt164=3;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==ALL) ) {
                        alt164=1;
                    }
                    else if ( (LA164_0==DISTINCT) ) {
                        alt164=2;
                    }
                    switch (alt164) {
                        case 1 :
                            // EsperEPL2Grammar.g:1175:21: ALL
                            {
                            ALL425=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7153); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1175:28: DISTINCT
                            {
                            DISTINCT426=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7158); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT426_tree = (CommonTree)adaptor.create(DISTINCT426);
                            adaptor.addChild(root_0, DISTINCT426_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7162);
                    expression427=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression427.getTree());
                    RPAREN428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7164); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1176:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV429=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV429_tree = (CommonTree)adaptor.create(AVEDEV429);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV429_tree, root_0);
                    }
                    LPAREN430=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7173); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1176:20: ( ALL | DISTINCT )?
                    int alt165=3;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==ALL) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==DISTINCT) ) {
                        alt165=2;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1176:21: ALL
                            {
                            ALL431=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7177); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1176:28: DISTINCT
                            {
                            DISTINCT432=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7182); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT432_tree = (CommonTree)adaptor.create(DISTINCT432);
                            adaptor.addChild(root_0, DISTINCT432_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7186);
                    expression433=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());
                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7188); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1177:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7194);
                    firstAggregation435=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation435.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1178:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7199);
                    lastAggregation436=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation436.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1179:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE437=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7204); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE437_tree = (CommonTree)adaptor.create(COALESCE437);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE437_tree, root_0);
                    }
                    LPAREN438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7207); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7210);
                    expression439=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression439.getTree());
                    COMMA440=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7212); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7215);
                    expression441=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression441.getTree());
                    // EsperEPL2Grammar.g:1179:51: ( COMMA expression )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==COMMA) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1179:52: COMMA expression
                    	    {
                    	    COMMA442=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7218); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7221);
                    	    expression443=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression443.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);

                    RPAREN444=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7225); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1180:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS445=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS445_tree = (CommonTree)adaptor.create(PREVIOUS445);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS445_tree, root_0);
                    }
                    LPAREN446=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7234); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7237);
                    expression447=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());
                    // EsperEPL2Grammar.g:1180:33: ( COMMA expression )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==COMMA) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // EsperEPL2Grammar.g:1180:34: COMMA expression
                            {
                            COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7240); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7243);
                            expression449=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());

                            }
                            break;

                    }

                    RPAREN450=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7247); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1181:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR451=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR451_tree = (CommonTree)adaptor.create(PRIOR451);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR451_tree, root_0);
                    }
                    LPAREN452=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7256); if (state.failed) return retval;
                    NUM_INT453=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT453_tree = (CommonTree)adaptor.create(NUM_INT453);
                    adaptor.addChild(root_0, NUM_INT453_tree);
                    }
                    COMMA454=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7261); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7264);
                    eventProperty455=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty455.getTree());
                    RPAREN456=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7266); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1184:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF457=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF457_tree = (CommonTree)adaptor.create(INSTANCEOF457);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF457_tree, root_0);
                    }
                    LPAREN458=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7279); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7282);
                    expression459=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression459.getTree());
                    COMMA460=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7284); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7287);
                    classIdentifier461=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier461.getTree());
                    // EsperEPL2Grammar.g:1184:58: ( COMMA classIdentifier )*
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==COMMA) ) {
                            alt168=1;
                        }


                        switch (alt168) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1184:59: COMMA classIdentifier
                    	    {
                    	    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7290); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7293);
                    	    classIdentifier463=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier463.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop168;
                        }
                    } while (true);

                    RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7297); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1185:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST465=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST465_tree = (CommonTree)adaptor.create(CAST465);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST465_tree, root_0);
                    }
                    LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7306); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7309);
                    expression467=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression467.getTree());
                    // EsperEPL2Grammar.g:1185:29: ( COMMA | AS )
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==COMMA) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==AS) ) {
                        alt169=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 0, input);

                        throw nvae;
                    }
                    switch (alt169) {
                        case 1 :
                            // EsperEPL2Grammar.g:1185:30: COMMA
                            {
                            COMMA468=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7312); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1185:39: AS
                            {
                            AS469=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7317); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7321);
                    classIdentifier470=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier470.getTree());
                    RPAREN471=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7323); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1186:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS472=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS472_tree = (CommonTree)adaptor.create(EXISTS472);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS472_tree, root_0);
                    }
                    LPAREN473=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7332); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7335);
                    eventProperty474=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty474.getTree());
                    RPAREN475=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7337); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1187:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP476=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP476_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP476);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP476_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1187:23: ( LPAREN RPAREN )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==LPAREN) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // EsperEPL2Grammar.g:1187:24: LPAREN RPAREN
                            {
                            LPAREN477=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7347); if (state.failed) return retval;
                            RPAREN478=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7350); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1190:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST479=null;
        Token LPAREN480=null;
        Token RPAREN482=null;
        EsperEPL2GrammarParser.expression_return expression481 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST479_tree=null;
        CommonTree LPAREN480_tree=null;
        CommonTree RPAREN482_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1191:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1191:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST479=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST479);

            LPAREN480=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN480);

            // EsperEPL2Grammar.g:1191:17: (a= ALL | d= DISTINCT )?
            int alt172=3;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==ALL) ) {
                alt172=1;
            }
            else if ( (LA172_0==DISTINCT) ) {
                alt172=2;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1191:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1191:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7382);
            expression481=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression481.getTree());
            RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN482);



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1192:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1192:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1192:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1195:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST483=null;
        Token LPAREN484=null;
        Token RPAREN486=null;
        EsperEPL2GrammarParser.expression_return expression485 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST483_tree=null;
        CommonTree LPAREN484_tree=null;
        CommonTree RPAREN486_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1196:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1196:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST483=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST483);

            LPAREN484=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN484);

            // EsperEPL2Grammar.g:1196:16: (a= ALL | d= DISTINCT )?
            int alt173=3;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==ALL) ) {
                alt173=1;
            }
            else if ( (LA173_0==DISTINCT) ) {
                alt173=2;
            }
            switch (alt173) {
                case 1 :
                    // EsperEPL2Grammar.g:1196:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1196:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7427);
            expression485=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression485.getTree());
            RPAREN486=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN486);



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1197:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1197:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1197:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1200:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX487=null;
        Token MIN488=null;
        Token LPAREN489=null;
        Token COMMA491=null;
        Token COMMA493=null;
        Token RPAREN495=null;
        EsperEPL2GrammarParser.expression_return expression490 = null;

        EsperEPL2GrammarParser.expression_return expression492 = null;

        EsperEPL2GrammarParser.expression_return expression494 = null;


        CommonTree MAX487_tree=null;
        CommonTree MIN488_tree=null;
        CommonTree LPAREN489_tree=null;
        CommonTree COMMA491_tree=null;
        CommonTree COMMA493_tree=null;
        CommonTree RPAREN495_tree=null;

        try {
            // EsperEPL2Grammar.g:1201:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1201:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1201:4: ( MAX | MIN )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==MAX) ) {
                alt174=1;
            }
            else if ( (LA174_0==MIN) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1201:5: MAX
                    {
                    MAX487=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc7456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX487_tree = (CommonTree)adaptor.create(MAX487);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX487_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1201:12: MIN
                    {
                    MIN488=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc7461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN488_tree = (CommonTree)adaptor.create(MIN488);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN488_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN489=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc7465); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc7468);
            expression490=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
            // EsperEPL2Grammar.g:1201:37: ( COMMA expression ( COMMA expression )* )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COMMA) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1201:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7471); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc7474);
                    expression492=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());
                    // EsperEPL2Grammar.g:1201:56: ( COMMA expression )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1201:57: COMMA expression
                    	    {
                    	    COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7477); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc7480);
                    	    expression494=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression494.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN495=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc7487); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1204:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty496 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction497 = null;



        try {
            // EsperEPL2Grammar.g:1205:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt177=2;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1205:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction7506);
                    eventProperty496=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty496.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1206:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction7511);
                    libFunction497=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction497.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1209:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT499=null;
        Token LPAREN501=null;
        Token RPAREN503=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy498 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent500 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs502 = null;


        CommonTree DOT499_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree RPAREN503_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1210:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1210:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1210:4: ( classIdentifierNonGreedy DOT )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==IDENT) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==DOT) ) {
                    alt178=1;
                }
            }
            else if ( (LA178_0==TICKED_STRING_LITERAL) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1210:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction7524);
                    classIdentifierNonGreedy498=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy498.getTree());
                    DOT499=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction7526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT499);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction7530);
            funcIdent500=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent500.getTree());
            LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction7532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN501);

            // EsperEPL2Grammar.g:1210:53: ( libFunctionArgs )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==WINDOW||LA179_0==ESCAPE||(LA179_0>=NOT_EXPR && LA179_0<=EVERY_EXPR)||(LA179_0>=SUM && LA179_0<=COUNT)||LA179_0==CASE||LA179_0==OUTER||(LA179_0>=JOIN && LA179_0<=FULL)||(LA179_0>=DISTINCT && LA179_0<=ALL)||(LA179_0>=EVENTS && LA179_0<=LAST)||(LA179_0>=UNIDIRECTIONAL && LA179_0<=CURRENT_TIMESTAMP)||LA179_0==SNAPSHOT||(LA179_0>=VARIABLE && LA179_0<=AT)||(LA179_0>=BOOLEAN_TRUE && LA179_0<=VALUE_NULL)||LA179_0==UPDATE||(LA179_0>=DEFINE && LA179_0<=MATCHES)||LA179_0==NUM_DOUBLE||LA179_0==IDENT||LA179_0==LPAREN||(LA179_0>=PLUS && LA179_0<=QUESTION)||(LA179_0>=STRING_LITERAL && LA179_0<=QUOTED_STRING_LITERAL)||LA179_0==MINUS||LA179_0==LCURLY||LA179_0==NUM_INT||(LA179_0>=TICKED_STRING_LITERAL && LA179_0<=NUM_FLOAT)) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // EsperEPL2Grammar.g:1210:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction7535);
                    libFunctionArgs502=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs502.getTree());

                    }
                    break;

            }

            RPAREN503=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction7539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN503);



            // AST REWRITE
            // elements: classIdentifierNonGreedy, libFunctionArgs, funcIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1211:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1211:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1211:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1211:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1214:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT504=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT504_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1215:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt180=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt180=1;
                }
                break;
            case MAX:
                {
                alt180=2;
                }
                break;
            case MIN:
                {
                alt180=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // EsperEPL2Grammar.g:1215:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT504=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent7569); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT504_tree = (CommonTree)adaptor.create(IDENT504);
                    adaptor.addChild(root_0, IDENT504_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1216:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent7576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1216:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1217:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent7588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1217:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1220:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL505=null;
        Token DISTINCT506=null;
        Token COMMA508=null;
        EsperEPL2GrammarParser.expression_return expression507 = null;

        EsperEPL2GrammarParser.expression_return expression509 = null;


        CommonTree ALL505_tree=null;
        CommonTree DISTINCT506_tree=null;
        CommonTree COMMA508_tree=null;

        try {
            // EsperEPL2Grammar.g:1221:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1221:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1221:4: ( ALL | DISTINCT )?
            int alt181=3;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ALL) ) {
                alt181=1;
            }
            else if ( (LA181_0==DISTINCT) ) {
                alt181=2;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1221:5: ALL
                    {
                    ALL505=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs7606); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1221:12: DISTINCT
                    {
                    DISTINCT506=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs7611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT506_tree = (CommonTree)adaptor.create(DISTINCT506);
                    adaptor.addChild(root_0, DISTINCT506_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs7615);
            expression507=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
            // EsperEPL2Grammar.g:1221:34: ( COMMA expression )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1221:35: COMMA expression
            	    {
            	    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs7618); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs7621);
            	    expression509=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression509.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1224:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR511=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr510 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr512 = null;


        CommonTree AND_EXPR511_tree=null;

        try {
            // EsperEPL2Grammar.g:1225:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1225:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList7635);
            concatenationExpr510=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr510.getTree());
            AND_EXPR511=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList7637); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList7640);
            concatenationExpr512=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr512.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1234:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression513 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1237:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1237:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression7668);
            followedByExpression513=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression513.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1240:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression514 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression515 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1241:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1241:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression7680);
            orExpression514=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression514.getTree());
            // EsperEPL2Grammar.g:1241:17: (f= FOLLOWED_BY orExpression )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==FOLLOWED_BY) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1241:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression7685); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression7687);
            	    orExpression515=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression515.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1242:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1242:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1243:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1246:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression516 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression517 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1247:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1247:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression7726);
            andExpression516=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression516.getTree());
            // EsperEPL2Grammar.g:1247:18: (o= OR_EXPR andExpression )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==OR_EXPR) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1247:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression7731); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression7733);
            	    andExpression517=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression517.getTree());

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);



            // AST REWRITE
            // elements: OR_EXPR, andExpression, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1248:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1248:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1249:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1252:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression518 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression519 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1253:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1253:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression7765);
            matchUntilExpression518=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression518.getTree());
            // EsperEPL2Grammar.g:1253:25: (a= AND_EXPR matchUntilExpression )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==AND_EXPR) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1253:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression7770); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression7772);
            	    matchUntilExpression519=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression519.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, matchUntilExpression, AND_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1254:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1254:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1255:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1258:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression520 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression521 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1259:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1259:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1259:4: (r= matchUntilRange )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==LBRACK) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1259:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression7807);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7811);
            qualifyExpression520=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression520.getTree());
            // EsperEPL2Grammar.g:1259:43: (a= UNTIL qualifyExpression )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==UNTIL) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1259:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression7816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7818);
                    qualifyExpression521=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression521.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange, matchUntilRange, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1260:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1260:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1261:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1261:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1262:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1262:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1263:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1266:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList522 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix523 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1267:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1267:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1267:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( ((LA190_0>=NOT_EXPR && LA190_0<=EVERY_DISTINCT_EXPR)) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1267:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1267:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt188=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt188=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt188=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt188=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 0, input);

                        throw nvae;
                    }

                    switch (alt188) {
                        case 1 :
                            // EsperEPL2Grammar.g:1267:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression7883); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1267:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression7889); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1267:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7895); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression7897);
                            distinctExpressionList522=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList522.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1267:80: (r= matchUntilRange )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==LBRACK) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // EsperEPL2Grammar.g:1267:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression7903);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression7912);
            guardPostFix523=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix523.getTree());


            // AST REWRITE
            // elements: distinctExpressionList, matchUntilRange, matchUntilRange, EVERY_EXPR, EVERY_EXPR, guardPostFix, guardPostFix, guardPostFix, EVERY_DISTINCT_EXPR, guardPostFix, guardPostFix, guardPostFix, matchUntilRange, EVERY_DISTINCT_EXPR, guardPostFix, distinctExpressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1269:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1269:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1270:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1270:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1271:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1271:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1272:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1272:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1272:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1273:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1273:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1273:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1274:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1274:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1274:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1275:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1278:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN524=null;
        Token COMMA526=null;
        Token RPAREN528=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom525 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom527 = null;


        CommonTree LPAREN524_tree=null;
        CommonTree COMMA526_tree=null;
        CommonTree RPAREN528_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1279:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1279:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN524=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN524);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8029);
            distinctExpressionAtom525=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom525.getTree());
            // EsperEPL2Grammar.g:1279:34: ( COMMA distinctExpressionAtom )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1279:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA526=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8032); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA526);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8034);
            	    distinctExpressionAtom527=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom527.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);

            RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN528);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1280:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1280:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1283:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression529 = null;



        try {
            // EsperEPL2Grammar.g:1284:2: ( expression )
            // EsperEPL2Grammar.g:1284:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8061);
            expression529=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression529.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1287:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN532=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression530 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression531 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression533 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN532_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1288:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1288:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1288:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==IDENT||LA192_0==TICKED_STRING_LITERAL) ) {
                alt192=1;
            }
            else if ( (LA192_0==LPAREN) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1288:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8076);
                    atomicExpression530=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression530.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1288:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8084);
                    patternExpression531=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression531.getTree());
                    RPAREN532=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN532);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1288:59: (w= WHERE guardExpression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==WHERE) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1288:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix8094);
                    guardExpression533=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression533.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, guardExpression, patternExpression, patternExpression, atomicExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1289:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1289:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1289:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1289:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1290:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1290:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1290:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1293:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression534 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression535 = null;



        try {
            // EsperEPL2Grammar.g:1294:2: ( observerExpression | patternFilterExpression )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==IDENT) ) {
                int LA194_1 = input.LA(2);

                if ( (LA194_1==COLON) ) {
                    alt194=1;
                }
                else if ( (LA194_1==EOF||(LA194_1>=OR_EXPR && LA194_1<=AND_EXPR)||LA194_1==WHERE||LA194_1==UNTIL||(LA194_1>=EQUALS && LA194_1<=RPAREN)||(LA194_1>=LBRACK && LA194_1<=RBRACK)||LA194_1==FOLLOWED_BY) ) {
                    alt194=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA194_0==TICKED_STRING_LITERAL) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1294:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8136);
                    observerExpression534=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression534.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1294:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8140);
                    patternFilterExpression535=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression535.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1297:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON536=null;
        Token LPAREN537=null;
        Token RPAREN539=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList538 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON536_tree=null;
        CommonTree LPAREN537_tree=null;
        CommonTree RPAREN539_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1298:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1298:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON536=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON536);

            // EsperEPL2Grammar.g:1298:19: (nm= IDENT | a= AT )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==IDENT) ) {
                alt195=1;
            }
            else if ( (LA195_0==AT) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1298:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1298:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN537=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN537);

            // EsperEPL2Grammar.g:1298:44: ( expressionWithTimeList )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==WINDOW||LA196_0==ESCAPE||(LA196_0>=NOT_EXPR && LA196_0<=EVERY_EXPR)||(LA196_0>=SUM && LA196_0<=COUNT)||LA196_0==CASE||LA196_0==OUTER||(LA196_0>=JOIN && LA196_0<=FULL)||(LA196_0>=EVENTS && LA196_0<=LAST)||(LA196_0>=UNIDIRECTIONAL && LA196_0<=CURRENT_TIMESTAMP)||LA196_0==SNAPSHOT||(LA196_0>=VARIABLE && LA196_0<=AT)||(LA196_0>=BOOLEAN_TRUE && LA196_0<=VALUE_NULL)||LA196_0==UPDATE||(LA196_0>=DEFINE && LA196_0<=MATCHES)||LA196_0==NUM_DOUBLE||LA196_0==IDENT||LA196_0==LPAREN||LA196_0==STAR||(LA196_0>=PLUS && LA196_0<=LBRACK)||(LA196_0>=STRING_LITERAL && LA196_0<=QUOTED_STRING_LITERAL)||LA196_0==MINUS||LA196_0==LCURLY||LA196_0==NUM_INT||(LA196_0>=TICKED_STRING_LITERAL && LA196_0<=NUM_FLOAT)) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1298:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8173);
                    expressionWithTimeList538=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList538.getTree());

                    }
                    break;

            }

            RPAREN539=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN539);



            // AST REWRITE
            // elements: ns, expressionWithTimeList, IDENT, expressionWithTimeList, nm, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1299:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1299:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1299:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1299:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1300:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1300:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1300:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1303:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT540=null;
        Token COLON541=null;
        Token IDENT542=null;
        Token LPAREN543=null;
        Token RPAREN545=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList544 = null;


        CommonTree IDENT540_tree=null;
        CommonTree COLON541_tree=null;
        CommonTree IDENT542_tree=null;
        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN545_tree=null;

        try {
            // EsperEPL2Grammar.g:1304:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1304:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT540=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT540_tree = (CommonTree)adaptor.create(IDENT540);
            adaptor.addChild(root_0, IDENT540_tree);
            }
            COLON541=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8227); if (state.failed) return retval;
            IDENT542=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT542_tree = (CommonTree)adaptor.create(IDENT542);
            adaptor.addChild(root_0, IDENT542_tree);
            }
            LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8232); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1304:31: ( expressionWithTimeList )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==WINDOW||LA197_0==ESCAPE||(LA197_0>=NOT_EXPR && LA197_0<=EVERY_EXPR)||(LA197_0>=SUM && LA197_0<=COUNT)||LA197_0==CASE||LA197_0==OUTER||(LA197_0>=JOIN && LA197_0<=FULL)||(LA197_0>=EVENTS && LA197_0<=LAST)||(LA197_0>=UNIDIRECTIONAL && LA197_0<=CURRENT_TIMESTAMP)||LA197_0==SNAPSHOT||(LA197_0>=VARIABLE && LA197_0<=AT)||(LA197_0>=BOOLEAN_TRUE && LA197_0<=VALUE_NULL)||LA197_0==UPDATE||(LA197_0>=DEFINE && LA197_0<=MATCHES)||LA197_0==NUM_DOUBLE||LA197_0==IDENT||LA197_0==LPAREN||LA197_0==STAR||(LA197_0>=PLUS && LA197_0<=LBRACK)||(LA197_0>=STRING_LITERAL && LA197_0<=QUOTED_STRING_LITERAL)||LA197_0==MINUS||LA197_0==LCURLY||LA197_0==NUM_INT||(LA197_0>=TICKED_STRING_LITERAL && LA197_0<=NUM_FLOAT)) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1304:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8236);
                    expressionWithTimeList544=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList544.getTree());

                    }
                    break;

            }

            RPAREN545=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8240); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1308:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK546=null;
        Token DOT547=null;
        Token DOT548=null;
        Token DOT549=null;
        Token DOT550=null;
        Token RBRACK551=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK546_tree=null;
        CommonTree DOT547_tree=null;
        CommonTree DOT548_tree=null;
        CommonTree DOT549_tree=null;
        CommonTree DOT550_tree=null;
        CommonTree RBRACK551_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1309:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1309:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK546=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK546);

            // EsperEPL2Grammar.g:1309:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt202=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt202=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt202=2;
                }
                break;
            case DOT:
                {
                int LA202_3 = input.LA(2);

                if ( (LA202_3==DOT) ) {
                    alt202=3;
                }
                else if ( (LA202_3==NUM_DOUBLE) ) {
                    alt202=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 202, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1310:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1310:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt199=3;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==DOT) ) {
                        alt199=1;
                    }
                    else if ( (LA199_0==COLON) ) {
                        alt199=2;
                    }
                    switch (alt199) {
                        case 1 :
                            // EsperEPL2Grammar.g:1310:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1310:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1310:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8271); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT547=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8273); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT547);

                            // EsperEPL2Grammar.g:1310:30: (r= NUM_INT )?
                            int alt198=2;
                            int LA198_0 = input.LA(1);

                            if ( (LA198_0==NUM_INT) ) {
                                alt198=1;
                            }
                            switch (alt198) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1310:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8277); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1311:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1311:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1311:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8301); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8305); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1313:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1313:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt201=3;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==DOT) ) {
                        alt201=1;
                    }
                    else if ( (LA201_0==NUM_DOUBLE) ) {
                        alt201=2;
                    }
                    switch (alt201) {
                        case 1 :
                            // EsperEPL2Grammar.g:1314:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8359); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1314:35: (r= NUM_INT )?
                            int alt200=2;
                            int LA200_0 = input.LA(1);

                            if ( (LA200_0==NUM_INT) ) {
                                alt200=1;
                            }
                            switch (alt200) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1314:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8363); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1316:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8423); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1318:8: DOT DOT r= NUM_INT
                    {
                    DOT548=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT548);

                    DOT549=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT549);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1319:8: DOT db3= NUM_DOUBLE
                    {
                    DOT550=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT550);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK551=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange8490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK551);



            // AST REWRITE
            // elements: l, db, db, db, db3, r, r, db, r, l, db2, l, r, l
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1322:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1322:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1323:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1323:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1324:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1324:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1325:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1325:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1326:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1326:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1327:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1327:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1328:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1328:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1329:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1329:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1330:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1330:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1331:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1331:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1339:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS552=null;
        Token LPAREN554=null;
        Token RPAREN556=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier553 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList555 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression557 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS552_tree=null;
        CommonTree LPAREN554_tree=null;
        CommonTree RPAREN556_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1342:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1342:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1342:9: (i= IDENT EQUALS )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==IDENT) ) {
                int LA203_1 = input.LA(2);

                if ( (LA203_1==EQUALS) ) {
                    alt203=1;
                }
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1342:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression8675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS552=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression8677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS552);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression8686);
            classIdentifier553=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier553.getTree());
            // EsperEPL2Grammar.g:1344:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==LPAREN) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1344:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN554=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression8697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN554);

                    // EsperEPL2Grammar.g:1344:17: ( expressionList )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==WINDOW||LA204_0==ESCAPE||(LA204_0>=NOT_EXPR && LA204_0<=EVERY_EXPR)||(LA204_0>=SUM && LA204_0<=COUNT)||LA204_0==CASE||LA204_0==OUTER||(LA204_0>=JOIN && LA204_0<=FULL)||(LA204_0>=EVENTS && LA204_0<=LAST)||(LA204_0>=UNIDIRECTIONAL && LA204_0<=CURRENT_TIMESTAMP)||LA204_0==SNAPSHOT||(LA204_0>=VARIABLE && LA204_0<=AT)||(LA204_0>=BOOLEAN_TRUE && LA204_0<=VALUE_NULL)||LA204_0==UPDATE||(LA204_0>=DEFINE && LA204_0<=MATCHES)||LA204_0==NUM_DOUBLE||LA204_0==IDENT||LA204_0==LPAREN||(LA204_0>=PLUS && LA204_0<=QUESTION)||(LA204_0>=STRING_LITERAL && LA204_0<=QUOTED_STRING_LITERAL)||LA204_0==MINUS||LA204_0==LCURLY||LA204_0==NUM_INT||(LA204_0>=TICKED_STRING_LITERAL && LA204_0<=NUM_FLOAT)) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // EsperEPL2Grammar.g:1344:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression8699);
                            expressionList555=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList555.getTree());

                            }
                            break;

                    }

                    RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression8702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN556);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1345:9: ( propertyExpression )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==LBRACK) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // EsperEPL2Grammar.g:1345:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression8714);
                    propertyExpression557=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression557.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyExpression, expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1346:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1346:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1346:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1346:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1346:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1349:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic558 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic559 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1350:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1350:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8759);
            propertyExpressionAtomic558=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic558.getTree());
            // EsperEPL2Grammar.g:1350:29: ( propertyExpressionAtomic )*
            loop207:
            do {
                int alt207=2;
                int LA207_0 = input.LA(1);

                if ( (LA207_0==LBRACK) ) {
                    alt207=1;
                }


                switch (alt207) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1350:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8762);
            	    propertyExpressionAtomic559=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic559.getTree());

            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1351:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1351:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1354:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK560=null;
        Token SELECT561=null;
        Token FROM563=null;
        Token AS565=null;
        Token IDENT566=null;
        Token WHERE567=null;
        Token RBRACK569=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList562 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty564 = null;

        EsperEPL2GrammarParser.expression_return expression568 = null;


        CommonTree LBRACK560_tree=null;
        CommonTree SELECT561_tree=null;
        CommonTree FROM563_tree=null;
        CommonTree AS565_tree=null;
        CommonTree IDENT566_tree=null;
        CommonTree WHERE567_tree=null;
        CommonTree RBRACK569_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1355:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1355:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK560=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic8792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK560);

            // EsperEPL2Grammar.g:1355:11: ( SELECT propertySelectionList FROM )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==SELECT) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1355:12: SELECT propertySelectionList FROM
                    {
                    SELECT561=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic8795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT561);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic8797);
                    propertySelectionList562=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList562.getTree());
                    FROM563=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic8799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM563);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic8803);
            eventProperty564=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty564.getTree());
            // EsperEPL2Grammar.g:1355:62: ( AS IDENT )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==AS) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1355:63: AS IDENT
                    {
                    AS565=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic8806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS565);

                    IDENT566=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic8808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT566);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1355:74: ( WHERE expression )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==WHERE) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1355:75: WHERE expression
                    {
                    WHERE567=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic8813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE567);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic8815);
                    expression568=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression568.getTree());

                    }
                    break;

            }

            RBRACK569=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic8819); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK569);



            // AST REWRITE
            // elements: eventProperty, IDENT, expression, propertySelectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1356:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1356:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1356:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1356:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1356:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1356:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1359:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA571=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement570 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement572 = null;


        CommonTree COMMA571_tree=null;

        try {
            // EsperEPL2Grammar.g:1360:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1360:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList8869);
            propertySelectionListElement570=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement570.getTree());
            // EsperEPL2Grammar.g:1360:33: ( COMMA propertySelectionListElement )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1360:34: COMMA propertySelectionListElement
            	    {
            	    COMMA571=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList8872); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList8875);
            	    propertySelectionListElement572=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement572.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1363:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS575=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector573 = null;

        EsperEPL2GrammarParser.expression_return expression574 = null;


        CommonTree s_tree=null;
        CommonTree AS575_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1365:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt213=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt213=1;
                }
                break;
            case IDENT:
                {
                int LA213_2 = input.LA(2);

                if ( (LA213_2==DOT) ) {
                    int LA213_62 = input.LA(3);

                    if ( (LA213_62==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt213=2;
                    }
                    else if ( (LA213_62==WINDOW||LA213_62==ESCAPE||LA213_62==EVERY_EXPR||(LA213_62>=SUM && LA213_62<=COUNT)||LA213_62==OUTER||(LA213_62>=JOIN && LA213_62<=FULL)||(LA213_62>=EVENTS && LA213_62<=LAST)||(LA213_62>=UNIDIRECTIONAL && LA213_62<=PRIOR)||(LA213_62>=WEEKDAY && LA213_62<=CAST)||LA213_62==SNAPSHOT||(LA213_62>=VARIABLE && LA213_62<=AT)||LA213_62==UPDATE||(LA213_62>=DEFINE && LA213_62<=MATCHES)||LA213_62==IDENT||LA213_62==TICKED_STRING_LITERAL) ) {
                        alt213=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 62, input);

                        throw nvae;
                    }
                }
                else if ( ((LA213_2>=IN_SET && LA213_2<=REGEXP)||(LA213_2>=OR_EXPR && LA213_2<=NOT_EXPR)||LA213_2==AS||LA213_2==FROM||LA213_2==IS||LA213_2==COMMA||LA213_2==EQUALS||LA213_2==LPAREN||(LA213_2>=STAR && LA213_2<=LBRACK)||(LA213_2>=BAND && LA213_2<=MOD)||LA213_2==ESCAPECHAR) ) {
                    alt213=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case UPDATE:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt213=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement8901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1365:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1366:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement8917);
                    propertyStreamSelector573=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector573.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1367:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement8922);
                    expression574=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression574.getTree());
                    // EsperEPL2Grammar.g:1367:15: ( AS i= keywordAllowedIdent )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==AS) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // EsperEPL2Grammar.g:1367:16: AS i= keywordAllowedIdent
                            {
                            AS575=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement8925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS575);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8929);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1368:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1368:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1369:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1369:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1372:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT576=null;
        Token STAR577=null;
        Token AS578=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT576_tree=null;
        CommonTree STAR577_tree=null;
        CommonTree AS578_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1373:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1373:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT576=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector8975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT576);

            STAR577=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector8977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR577);

            // EsperEPL2Grammar.g:1373:21: ( AS i= IDENT )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==AS) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1373:22: AS i= IDENT
                    {
                    AS578=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector8980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS578);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1374:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1374:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1374:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1377:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS579=null;
        Token LPAREN581=null;
        Token RPAREN583=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier580 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList582 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression584 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS579_tree=null;
        CommonTree LPAREN581_tree=null;
        CommonTree RPAREN583_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1380:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1380:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1380:9: (i= IDENT EQUALS )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==IDENT) ) {
                int LA215_1 = input.LA(2);

                if ( (LA215_1==EQUALS) ) {
                    alt215=1;
                }
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1380:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS579=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS579);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9042);
            classIdentifier580=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier580.getTree());
            // EsperEPL2Grammar.g:1382:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==LPAREN) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1382:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN581=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN581);

                    // EsperEPL2Grammar.g:1382:17: ( expressionList )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==WINDOW||LA216_0==ESCAPE||(LA216_0>=NOT_EXPR && LA216_0<=EVERY_EXPR)||(LA216_0>=SUM && LA216_0<=COUNT)||LA216_0==CASE||LA216_0==OUTER||(LA216_0>=JOIN && LA216_0<=FULL)||(LA216_0>=EVENTS && LA216_0<=LAST)||(LA216_0>=UNIDIRECTIONAL && LA216_0<=CURRENT_TIMESTAMP)||LA216_0==SNAPSHOT||(LA216_0>=VARIABLE && LA216_0<=AT)||(LA216_0>=BOOLEAN_TRUE && LA216_0<=VALUE_NULL)||LA216_0==UPDATE||(LA216_0>=DEFINE && LA216_0<=MATCHES)||LA216_0==NUM_DOUBLE||LA216_0==IDENT||LA216_0==LPAREN||(LA216_0>=PLUS && LA216_0<=QUESTION)||(LA216_0>=STRING_LITERAL && LA216_0<=QUOTED_STRING_LITERAL)||LA216_0==MINUS||LA216_0==LCURLY||LA216_0==NUM_INT||(LA216_0>=TICKED_STRING_LITERAL && LA216_0<=NUM_FLOAT)) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // EsperEPL2Grammar.g:1382:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9055);
                            expressionList582=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList582.getTree());

                            }
                            break;

                    }

                    RPAREN583=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN583);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1383:9: ( propertyExpression )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==LBRACK) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1383:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9070);
                    propertyExpression584=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression584.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1384:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1384:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1384:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1384:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1384:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1388:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT585=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT585_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1390:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1390:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9125);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1391:6: ( DOT i2= escapableIdent )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==DOT) ) {
                    int LA219_20 = input.LA(2);

                    if ( (LA219_20==IDENT) ) {
                        int LA219_42 = input.LA(3);

                        if ( (LA219_42==EOF||LA219_42==CREATE||(LA219_42>=OR_EXPR && LA219_42<=AS)||LA219_42==SELECT||(LA219_42>=INNER && LA219_42<=ON)||(LA219_42>=GROUP && LA219_42<=HAVING)||LA219_42==OUTPUT||LA219_42==INSERT||LA219_42==ORDER||(LA219_42>=UNIDIRECTIONAL && LA219_42<=RETAININTERSECTION)||LA219_42==DELETE||LA219_42==SET||LA219_42==UNTIL||LA219_42==ROW_LIMIT_EXPR||(LA219_42>=UPDATE && LA219_42<=MATCH_RECOGNIZE)||(LA219_42>=COMMA && LA219_42<=IDENT)||(LA219_42>=DOT && LA219_42<=RPAREN)||(LA219_42>=LBRACK && LA219_42<=RBRACK)||LA219_42==RCURLY||LA219_42==FOLLOWED_BY||LA219_42==TICKED_STRING_LITERAL||LA219_42==EMAILAT) ) {
                            alt219=1;
                        }


                    }
                    else if ( (LA219_20==TICKED_STRING_LITERAL) ) {
                        alt219=1;
                    }


                }


                switch (alt219) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1392:8: DOT i2= escapableIdent
            	    {
            	    DOT585=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9144); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT585);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9148);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1394:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1394:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1397:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT586=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT586_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1399:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1399:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9193);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1400:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA220_2 = input.LA(3);

                        if ( (LA220_2==LPAREN) ) {
                            alt220=2;
                        }
                        else if ( (LA220_2==DOT) ) {
                            alt220=1;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt220=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt220=2;
                        }
                        break;

                    }

                }


                switch (alt220) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1402:8: DOT i2= escapableIdent
            	    {
            	    DOT586=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9228); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT586);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9232);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1404:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1404:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1407:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA588=null;
        EsperEPL2GrammarParser.expression_return expression587 = null;

        EsperEPL2GrammarParser.expression_return expression589 = null;


        CommonTree COMMA588_tree=null;

        try {
            // EsperEPL2Grammar.g:1408:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1408:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9274);
            expression587=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression587.getTree());
            // EsperEPL2Grammar.g:1408:22: ( COMMA expression )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1408:23: COMMA expression
            	    {
            	    COMMA588=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9277); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9280);
            	    expression589=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression589.getTree());

            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1411:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA591=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime590 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime592 = null;


        CommonTree COMMA591_tree=null;

        try {
            // EsperEPL2Grammar.g:1412:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1412:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9308);
            expressionWithTime590=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime590.getTree());
            // EsperEPL2Grammar.g:1412:30: ( COMMA expressionWithTime )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==COMMA) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1412:31: COMMA expressionWithTime
            	    {
            	    COMMA591=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9311); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9314);
            	    expressionWithTime592=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime592.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1415:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand593 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand594 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod595 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable596 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand597 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand598 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator599 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator600 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList601 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar602 = null;



        try {
            // EsperEPL2Grammar.g:1416:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt223=10;
            alt223 = dfa223.predict(input);
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1416:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9340);
                    lastOperand593=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand593.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1417:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9351);
                    lastWeekdayOperand594=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand594.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1418:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9362);
                    timePeriod595=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod595.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1419:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9373);
                    expressionQualifyable596=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable596.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1420:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9384);
                    rangeOperand597=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand597.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1421:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9396);
                    frequencyOperand598=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand598.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1422:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9407);
                    lastOperator599=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator599.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1423:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9419);
                    weekDayOperator600=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator600.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1424:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9431);
                    numericParameterList601=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList601.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1425:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9436);
                    numberSetStar602=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar602.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1428:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression603 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1429:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1429:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9447);
            expression603=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression603.getTree());
            // EsperEPL2Grammar.g:1429:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt224=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt224=1;
                    }
                    break;
                case DESC:
                    {
                    alt224=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt224=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt224=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt224=5;
                    }
                    break;
            }

            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1429:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1429:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1429:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1429:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1429:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, expression, a, d, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1430:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1430:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1430:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1430:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1431:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1431:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1431:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1432:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1436:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR604=null;

        CommonTree STAR604_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1437:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1437:4: STAR
            {
            STAR604=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR604);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1438:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1438:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1441:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW605=null;

        CommonTree LW605_tree=null;

        try {
            // EsperEPL2Grammar.g:1442:2: ( LW )
            // EsperEPL2Grammar.g:1442:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW605=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand9545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW605_tree = (CommonTree)adaptor.create(LW605);
            root_0 = (CommonTree)adaptor.becomeRoot(LW605_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1445:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST606=null;

        CommonTree LAST606_tree=null;

        try {
            // EsperEPL2Grammar.g:1446:2: ( LAST )
            // EsperEPL2Grammar.g:1446:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST606=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand9558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST606_tree = (CommonTree)adaptor.create(LAST606);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST606_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1449:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR607=null;
        Token DIV608=null;
        EsperEPL2GrammarParser.number_return number609 = null;

        EsperEPL2GrammarParser.substitution_return substitution610 = null;


        CommonTree i_tree=null;
        CommonTree STAR607_tree=null;
        CommonTree DIV608_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1450:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1450:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR607=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand9570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR607);

            DIV608=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand9572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV608);

            // EsperEPL2Grammar.g:1450:13: ( number | i= IDENT | substitution )
            int alt225=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt225=1;
                }
                break;
            case IDENT:
                {
                alt225=2;
                }
                break;
            case QUESTION:
                {
                alt225=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1450:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand9575);
                    number609=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number609.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1450:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand9579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1450:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand9581);
                    substitution610=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution610.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1451:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1451:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1451:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1451:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1452:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1452:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1452:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1452:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1455:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON613=null;
        EsperEPL2GrammarParser.number_return number611 = null;

        EsperEPL2GrammarParser.substitution_return substitution612 = null;

        EsperEPL2GrammarParser.number_return number614 = null;

        EsperEPL2GrammarParser.substitution_return substitution615 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON613_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1456:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1456:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1456:4: ( number | i1= IDENT | substitution )
            int alt226=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt226=1;
                }
                break;
            case IDENT:
                {
                alt226=2;
                }
                break;
            case QUESTION:
                {
                alt226=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1456:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9630);
                    number611=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number611.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1456:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1456:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9636);
                    substitution612=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution612.getTree());

                    }
                    break;

            }

            COLON613=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand9639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON613);

            // EsperEPL2Grammar.g:1456:41: ( number | i2= IDENT | substitution )
            int alt227=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt227=1;
                }
                break;
            case IDENT:
                {
                alt227=2;
                }
                break;
            case QUESTION:
                {
                alt227=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }

            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1456:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9642);
                    number614=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number614.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1456:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1456:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9648);
                    substitution615=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution615.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, substitution, number, number, number, substitution, i1, substitution, i1, i2
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1457:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1457:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1457:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1457:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1457:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1457:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1458:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1458:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1458:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1458:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1458:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1458:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1459:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1459:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1459:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1459:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1459:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1459:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1460:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1460:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1460:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1460:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1463:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST618=null;
        EsperEPL2GrammarParser.number_return number616 = null;

        EsperEPL2GrammarParser.substitution_return substitution617 = null;


        CommonTree i_tree=null;
        CommonTree LAST618_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1464:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1464:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1464:4: ( number | i= IDENT | substitution )
            int alt228=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt228=1;
                }
                break;
            case IDENT:
                {
                alt228=2;
                }
                break;
            case QUESTION:
                {
                alt228=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }

            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1464:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator9762);
                    number616=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number616.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1464:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator9766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1464:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator9768);
                    substitution617=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution617.getTree());

                    }
                    break;

            }

            LAST618=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator9771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST618);



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1465:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1465:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1465:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1465:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1466:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1466:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1466:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1466:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1469:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY621=null;
        EsperEPL2GrammarParser.number_return number619 = null;

        EsperEPL2GrammarParser.substitution_return substitution620 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY621_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1470:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1470:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1470:4: ( number | i= IDENT | substitution )
            int alt229=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt229=1;
                }
                break;
            case IDENT:
                {
                alt229=2;
                }
                break;
            case QUESTION:
                {
                alt229=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }

            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1470:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator9819);
                    number619=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number619.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1470:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator9823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1470:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator9825);
                    substitution620=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution620.getTree());

                    }
                    break;

            }

            WEEKDAY621=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator9828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY621);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1471:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1471:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1471:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1471:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1472:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1472:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1472:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1472:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1475:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK622=null;
        Token COMMA624=null;
        Token RBRACK626=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter623 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter625 = null;


        CommonTree LBRACK622_tree=null;
        CommonTree COMMA624_tree=null;
        CommonTree RBRACK626_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1476:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1476:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK622=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList9875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK622);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList9877);
            numericListParameter623=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter623.getTree());
            // EsperEPL2Grammar.g:1476:32: ( COMMA numericListParameter )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1476:33: COMMA numericListParameter
            	    {
            	    COMMA624=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList9880); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA624);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList9882);
            	    numericListParameter625=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter625.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);

            RBRACK626=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList9886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK626);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1477:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1477:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1480:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand627 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand628 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant629 = null;



        try {
            // EsperEPL2Grammar.g:1481:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt231=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA231_1 = input.LA(2);

                if ( (LA231_1==COLON) ) {
                    alt231=1;
                }
                else if ( (LA231_1==COMMA||LA231_1==RBRACK) ) {
                    alt231=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA231_2 = input.LA(2);

                if ( (LA231_2==COLON) ) {
                    alt231=1;
                }
                else if ( (LA231_2==COMMA||LA231_2==RBRACK) ) {
                    alt231=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA231_3 = input.LA(2);

                if ( (LA231_3==COMMA||LA231_3==RBRACK) ) {
                    alt231=3;
                }
                else if ( (LA231_3==COLON) ) {
                    alt231=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA231_4 = input.LA(2);

                if ( (LA231_4==COMMA||LA231_4==RBRACK) ) {
                    alt231=3;
                }
                else if ( (LA231_4==COLON) ) {
                    alt231=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt231=1;
                }
                break;
            case STAR:
                {
                alt231=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt231=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1481:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter9908);
                    rangeOperand627=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand627.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1482:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter9914);
                    frequencyOperand628=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand628.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1483:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter9919);
                    numberconstant629=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant629.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1486:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT631=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic630 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic632 = null;


        CommonTree DOT631_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1487:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1487:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9935);
            eventPropertyAtomic630=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic630.getTree());
            // EsperEPL2Grammar.g:1487:24: ( DOT eventPropertyAtomic )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==DOT) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1487:25: DOT eventPropertyAtomic
            	    {
            	    DOT631=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty9938); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT631);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9940);
            	    eventPropertyAtomic632=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic632.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1488:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1488:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1491:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK634=null;
        Token RPAREN635=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent633 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK634_tree=null;
        CommonTree RPAREN635_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1492:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1492:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9966);
            eventPropertyIdent633=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent633.getTree());
            // EsperEPL2Grammar.g:1492:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt236=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt236=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt236=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt236=3;
                    }
                    break;
            }

            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1493:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic9975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic9979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK634=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic9981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK634);

                    // EsperEPL2Grammar.g:1493:32: (q= QUESTION )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==QUESTION) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // EsperEPL2Grammar.g:1493:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1495:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1495:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt234=2;
                    int LA234_0 = input.LA(1);

                    if ( (LA234_0==STRING_LITERAL) ) {
                        alt234=1;
                    }
                    else if ( (LA234_0==QUOTED_STRING_LITERAL) ) {
                        alt234=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 234, 0, input);

                        throw nvae;
                    }
                    switch (alt234) {
                        case 1 :
                            // EsperEPL2Grammar.g:1495:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10005); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1495:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10011); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN635);

                    // EsperEPL2Grammar.g:1495:66: (q= QUESTION )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==QUESTION) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // EsperEPL2Grammar.g:1495:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10019); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1497:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ni, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, s, ni, eventPropertyIdent, s, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1500:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1500:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1501:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1501:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1502:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1502:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1503:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1503:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1504:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1504:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1505:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1505:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1508:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR636=null;
        Token DOT637=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR636_tree=null;
        CommonTree DOT637_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1510:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1510:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10156);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1511:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==ESCAPECHAR) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1512:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR636=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10168); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR636);

            	    DOT637=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10170); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT637);

            	    // EsperEPL2Grammar.g:1512:24: (ipi2= keywordAllowedIdent )?
            	    int alt237=2;
            	    alt237 = dfa237.predict(input);
            	    switch (alt237) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1512:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10174);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1514:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1514:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1517:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | UPDATE | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT638=null;
        Token COUNT639=null;
        Token ESCAPE640=null;
        Token EVERY_EXPR641=null;
        Token SUM642=null;
        Token AVG643=null;
        Token MAX644=null;
        Token MIN645=null;
        Token COALESCE646=null;
        Token MEDIAN647=null;
        Token STDDEV648=null;
        Token AVEDEV649=null;
        Token EVENTS650=null;
        Token FIRST651=null;
        Token LAST652=null;
        Token UNIDIRECTIONAL653=null;
        Token RETAINUNION654=null;
        Token RETAININTERSECTION655=null;
        Token UNTIL656=null;
        Token PATTERN657=null;
        Token SQL658=null;
        Token METADATASQL659=null;
        Token PREVIOUS660=null;
        Token PRIOR661=null;
        Token WEEKDAY662=null;
        Token LW663=null;
        Token INSTANCEOF664=null;
        Token CAST665=null;
        Token SNAPSHOT666=null;
        Token VARIABLE667=null;
        Token WINDOW668=null;
        Token LEFT669=null;
        Token RIGHT670=null;
        Token OUTER671=null;
        Token FULL672=null;
        Token JOIN673=null;
        Token UPDATE674=null;
        Token DEFINE675=null;
        Token PARTITION676=null;
        Token MATCHES677=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT638_tree=null;
        CommonTree COUNT639_tree=null;
        CommonTree ESCAPE640_tree=null;
        CommonTree EVERY_EXPR641_tree=null;
        CommonTree SUM642_tree=null;
        CommonTree AVG643_tree=null;
        CommonTree MAX644_tree=null;
        CommonTree MIN645_tree=null;
        CommonTree COALESCE646_tree=null;
        CommonTree MEDIAN647_tree=null;
        CommonTree STDDEV648_tree=null;
        CommonTree AVEDEV649_tree=null;
        CommonTree EVENTS650_tree=null;
        CommonTree FIRST651_tree=null;
        CommonTree LAST652_tree=null;
        CommonTree UNIDIRECTIONAL653_tree=null;
        CommonTree RETAINUNION654_tree=null;
        CommonTree RETAININTERSECTION655_tree=null;
        CommonTree UNTIL656_tree=null;
        CommonTree PATTERN657_tree=null;
        CommonTree SQL658_tree=null;
        CommonTree METADATASQL659_tree=null;
        CommonTree PREVIOUS660_tree=null;
        CommonTree PRIOR661_tree=null;
        CommonTree WEEKDAY662_tree=null;
        CommonTree LW663_tree=null;
        CommonTree INSTANCEOF664_tree=null;
        CommonTree CAST665_tree=null;
        CommonTree SNAPSHOT666_tree=null;
        CommonTree VARIABLE667_tree=null;
        CommonTree WINDOW668_tree=null;
        CommonTree LEFT669_tree=null;
        CommonTree RIGHT670_tree=null;
        CommonTree OUTER671_tree=null;
        CommonTree FULL672_tree=null;
        CommonTree JOIN673_tree=null;
        CommonTree UPDATE674_tree=null;
        CommonTree DEFINE675_tree=null;
        CommonTree PARTITION676_tree=null;
        CommonTree MATCHES677_tree=null;

        try {
            // EsperEPL2Grammar.g:1518:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | UPDATE | DEFINE | PARTITION | MATCHES )
            int alt239=42;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt239=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt239=2;
                }
                break;
            case AT:
                {
                alt239=3;
                }
                break;
            case COUNT:
                {
                alt239=4;
                }
                break;
            case ESCAPE:
                {
                alt239=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt239=6;
                }
                break;
            case SUM:
                {
                alt239=7;
                }
                break;
            case AVG:
                {
                alt239=8;
                }
                break;
            case MAX:
                {
                alt239=9;
                }
                break;
            case MIN:
                {
                alt239=10;
                }
                break;
            case COALESCE:
                {
                alt239=11;
                }
                break;
            case MEDIAN:
                {
                alt239=12;
                }
                break;
            case STDDEV:
                {
                alt239=13;
                }
                break;
            case AVEDEV:
                {
                alt239=14;
                }
                break;
            case EVENTS:
                {
                alt239=15;
                }
                break;
            case FIRST:
                {
                alt239=16;
                }
                break;
            case LAST:
                {
                alt239=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt239=18;
                }
                break;
            case RETAINUNION:
                {
                alt239=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt239=20;
                }
                break;
            case UNTIL:
                {
                alt239=21;
                }
                break;
            case PATTERN:
                {
                alt239=22;
                }
                break;
            case SQL:
                {
                alt239=23;
                }
                break;
            case METADATASQL:
                {
                alt239=24;
                }
                break;
            case PREVIOUS:
                {
                alt239=25;
                }
                break;
            case PRIOR:
                {
                alt239=26;
                }
                break;
            case WEEKDAY:
                {
                alt239=27;
                }
                break;
            case LW:
                {
                alt239=28;
                }
                break;
            case INSTANCEOF:
                {
                alt239=29;
                }
                break;
            case CAST:
                {
                alt239=30;
                }
                break;
            case SNAPSHOT:
                {
                alt239=31;
                }
                break;
            case VARIABLE:
                {
                alt239=32;
                }
                break;
            case WINDOW:
                {
                alt239=33;
                }
                break;
            case LEFT:
                {
                alt239=34;
                }
                break;
            case RIGHT:
                {
                alt239=35;
                }
                break;
            case OUTER:
                {
                alt239=36;
                }
                break;
            case FULL:
                {
                alt239=37;
                }
                break;
            case JOIN:
                {
                alt239=38;
                }
                break;
            case UPDATE:
                {
                alt239=39;
                }
                break;
            case DEFINE:
                {
                alt239=40;
                }
                break;
            case PARTITION:
                {
                alt239=41;
                }
                break;
            case MATCHES:
                {
                alt239=42;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }

            switch (alt239) {
                case 1 :
                    // EsperEPL2Grammar.g:1518:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1519:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1520:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT638=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT638_tree = (CommonTree)adaptor.create(AT638);
                    adaptor.addChild(root_0, AT638_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1521:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT639=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT639_tree = (CommonTree)adaptor.create(COUNT639);
                    adaptor.addChild(root_0, COUNT639_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1522:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE640=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE640_tree = (CommonTree)adaptor.create(ESCAPE640);
                    adaptor.addChild(root_0, ESCAPE640_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1523:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR641=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR641_tree = (CommonTree)adaptor.create(EVERY_EXPR641);
                    adaptor.addChild(root_0, EVERY_EXPR641_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1524:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM642=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM642_tree = (CommonTree)adaptor.create(SUM642);
                    adaptor.addChild(root_0, SUM642_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1525:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG643=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG643_tree = (CommonTree)adaptor.create(AVG643);
                    adaptor.addChild(root_0, AVG643_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1526:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX644=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX644_tree = (CommonTree)adaptor.create(MAX644);
                    adaptor.addChild(root_0, MAX644_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1527:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN645=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN645_tree = (CommonTree)adaptor.create(MIN645);
                    adaptor.addChild(root_0, MIN645_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1528:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE646=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE646_tree = (CommonTree)adaptor.create(COALESCE646);
                    adaptor.addChild(root_0, COALESCE646_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1529:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN647=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN647_tree = (CommonTree)adaptor.create(MEDIAN647);
                    adaptor.addChild(root_0, MEDIAN647_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1530:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV648=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV648_tree = (CommonTree)adaptor.create(STDDEV648);
                    adaptor.addChild(root_0, STDDEV648_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1531:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV649=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV649_tree = (CommonTree)adaptor.create(AVEDEV649);
                    adaptor.addChild(root_0, AVEDEV649_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1532:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS650=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS650_tree = (CommonTree)adaptor.create(EVENTS650);
                    adaptor.addChild(root_0, EVENTS650_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1533:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST651=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST651_tree = (CommonTree)adaptor.create(FIRST651);
                    adaptor.addChild(root_0, FIRST651_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1534:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST652=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST652_tree = (CommonTree)adaptor.create(LAST652);
                    adaptor.addChild(root_0, LAST652_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1535:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL653=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL653_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL653);
                    adaptor.addChild(root_0, UNIDIRECTIONAL653_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1536:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION654=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION654_tree = (CommonTree)adaptor.create(RETAINUNION654);
                    adaptor.addChild(root_0, RETAINUNION654_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1537:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION655=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION655_tree = (CommonTree)adaptor.create(RETAININTERSECTION655);
                    adaptor.addChild(root_0, RETAININTERSECTION655_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1538:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL656=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL656_tree = (CommonTree)adaptor.create(UNTIL656);
                    adaptor.addChild(root_0, UNTIL656_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1539:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN657=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN657_tree = (CommonTree)adaptor.create(PATTERN657);
                    adaptor.addChild(root_0, PATTERN657_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1540:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL658=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL658_tree = (CommonTree)adaptor.create(SQL658);
                    adaptor.addChild(root_0, SQL658_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1541:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL659=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL659_tree = (CommonTree)adaptor.create(METADATASQL659);
                    adaptor.addChild(root_0, METADATASQL659_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1542:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS660=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS660_tree = (CommonTree)adaptor.create(PREVIOUS660);
                    adaptor.addChild(root_0, PREVIOUS660_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1543:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR661=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR661_tree = (CommonTree)adaptor.create(PRIOR661);
                    adaptor.addChild(root_0, PRIOR661_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1544:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY662=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY662_tree = (CommonTree)adaptor.create(WEEKDAY662);
                    adaptor.addChild(root_0, WEEKDAY662_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1545:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW663=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW663_tree = (CommonTree)adaptor.create(LW663);
                    adaptor.addChild(root_0, LW663_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1546:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF664=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF664_tree = (CommonTree)adaptor.create(INSTANCEOF664);
                    adaptor.addChild(root_0, INSTANCEOF664_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1547:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST665=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST665_tree = (CommonTree)adaptor.create(CAST665);
                    adaptor.addChild(root_0, CAST665_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1548:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT666=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT666_tree = (CommonTree)adaptor.create(SNAPSHOT666);
                    adaptor.addChild(root_0, SNAPSHOT666_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1549:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE667=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE667_tree = (CommonTree)adaptor.create(VARIABLE667);
                    adaptor.addChild(root_0, VARIABLE667_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1550:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW668=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW668_tree = (CommonTree)adaptor.create(WINDOW668);
                    adaptor.addChild(root_0, WINDOW668_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1551:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT669=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT669_tree = (CommonTree)adaptor.create(LEFT669);
                    adaptor.addChild(root_0, LEFT669_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1552:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT670=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT670_tree = (CommonTree)adaptor.create(RIGHT670);
                    adaptor.addChild(root_0, RIGHT670_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1553:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER671=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER671_tree = (CommonTree)adaptor.create(OUTER671);
                    adaptor.addChild(root_0, OUTER671_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1554:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL672=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL672_tree = (CommonTree)adaptor.create(FULL672);
                    adaptor.addChild(root_0, FULL672_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1555:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN673=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN673_tree = (CommonTree)adaptor.create(JOIN673);
                    adaptor.addChild(root_0, JOIN673_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1556:4: UPDATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UPDATE674=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_keywordAllowedIdent10487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UPDATE674_tree = (CommonTree)adaptor.create(UPDATE674);
                    adaptor.addChild(root_0, UPDATE674_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "update"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1557:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE675=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent10494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE675_tree = (CommonTree)adaptor.create(DEFINE675);
                    adaptor.addChild(root_0, DEFINE675_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1558:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION676=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent10501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION676_tree = (CommonTree)adaptor.create(PARTITION676);
                    adaptor.addChild(root_0, PARTITION676_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1559:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES677=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent10508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES677_tree = (CommonTree)adaptor.create(MATCHES677);
                    adaptor.addChild(root_0, MATCHES677_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1562:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1563:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==IDENT) ) {
                alt240=1;
            }
            else if ( (LA240_0==TICKED_STRING_LITERAL) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    // EsperEPL2Grammar.g:1563:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent10529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1564:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1567:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart678 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart679 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart680 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart681 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart682 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart683 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart684 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart685 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart686 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart687 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart688 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart689 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart690 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart691 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart692 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1568:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1569:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1569:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt251=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt251=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt251=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt251=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt251=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt251=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // EsperEPL2Grammar.g:1570:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod10561);
                    dayPart678=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart678.getTree());
                    // EsperEPL2Grammar.g:1570:11: ( hourPart )?
                    int alt241=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA241_1 = input.LA(2);

                            if ( ((LA241_1>=TIMEPERIOD_HOUR && LA241_1<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA241_2 = input.LA(2);

                            if ( ((LA241_2>=TIMEPERIOD_HOUR && LA241_2<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA241_3 = input.LA(2);

                            if ( ((LA241_3>=TIMEPERIOD_HOUR && LA241_3<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA241_4 = input.LA(2);

                            if ( ((LA241_4>=TIMEPERIOD_HOUR && LA241_4<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA241_5 = input.LA(2);

                            if ( ((LA241_5>=TIMEPERIOD_HOUR && LA241_5<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA241_6 = input.LA(2);

                            if ( ((LA241_6>=TIMEPERIOD_HOUR && LA241_6<=TIMEPERIOD_HOURS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                    }

                    switch (alt241) {
                        case 1 :
                            // EsperEPL2Grammar.g:1570:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod10563);
                            hourPart679=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart679.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1570:21: ( minutePart )?
                    int alt242=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA242_1 = input.LA(2);

                            if ( (LA242_1==MIN||(LA242_1>=TIMEPERIOD_MINUTE && LA242_1<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA242_2 = input.LA(2);

                            if ( (LA242_2==MIN||(LA242_2>=TIMEPERIOD_MINUTE && LA242_2<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA242_3 = input.LA(2);

                            if ( (LA242_3==MIN||(LA242_3>=TIMEPERIOD_MINUTE && LA242_3<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA242_4 = input.LA(2);

                            if ( (LA242_4==MIN||(LA242_4>=TIMEPERIOD_MINUTE && LA242_4<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA242_5 = input.LA(2);

                            if ( (LA242_5==MIN||(LA242_5>=TIMEPERIOD_MINUTE && LA242_5<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA242_6 = input.LA(2);

                            if ( (LA242_6==MIN||(LA242_6>=TIMEPERIOD_MINUTE && LA242_6<=TIMEPERIOD_MINUTES)) ) {
                                alt242=1;
                            }
                            }
                            break;
                    }

                    switch (alt242) {
                        case 1 :
                            // EsperEPL2Grammar.g:1570:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10566);
                            minutePart680=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart680.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1570:33: ( secondPart )?
                    int alt243=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA243_1 = input.LA(2);

                            if ( ((LA243_1>=TIMEPERIOD_SEC && LA243_1<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA243_2 = input.LA(2);

                            if ( ((LA243_2>=TIMEPERIOD_SEC && LA243_2<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA243_3 = input.LA(2);

                            if ( ((LA243_3>=TIMEPERIOD_SEC && LA243_3<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA243_4 = input.LA(2);

                            if ( ((LA243_4>=TIMEPERIOD_SEC && LA243_4<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA243_5 = input.LA(2);

                            if ( ((LA243_5>=TIMEPERIOD_SEC && LA243_5<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA243_6 = input.LA(2);

                            if ( ((LA243_6>=TIMEPERIOD_SEC && LA243_6<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                    }

                    switch (alt243) {
                        case 1 :
                            // EsperEPL2Grammar.g:1570:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10569);
                            secondPart681=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart681.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1570:45: ( millisecondPart )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==NUM_DOUBLE||LA244_0==IDENT||LA244_0==QUESTION||LA244_0==NUM_INT||(LA244_0>=NUM_LONG && LA244_0<=NUM_FLOAT)) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // EsperEPL2Grammar.g:1570:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10572);
                            millisecondPart682=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart682.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1571:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod10578);
                    hourPart683=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart683.getTree());
                    // EsperEPL2Grammar.g:1571:13: ( minutePart )?
                    int alt245=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA245_1 = input.LA(2);

                            if ( (LA245_1==MIN||(LA245_1>=TIMEPERIOD_MINUTE && LA245_1<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA245_2 = input.LA(2);

                            if ( (LA245_2==MIN||(LA245_2>=TIMEPERIOD_MINUTE && LA245_2<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA245_3 = input.LA(2);

                            if ( (LA245_3==MIN||(LA245_3>=TIMEPERIOD_MINUTE && LA245_3<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA245_4 = input.LA(2);

                            if ( (LA245_4==MIN||(LA245_4>=TIMEPERIOD_MINUTE && LA245_4<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA245_5 = input.LA(2);

                            if ( (LA245_5==MIN||(LA245_5>=TIMEPERIOD_MINUTE && LA245_5<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA245_6 = input.LA(2);

                            if ( (LA245_6==MIN||(LA245_6>=TIMEPERIOD_MINUTE && LA245_6<=TIMEPERIOD_MINUTES)) ) {
                                alt245=1;
                            }
                            }
                            break;
                    }

                    switch (alt245) {
                        case 1 :
                            // EsperEPL2Grammar.g:1571:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10580);
                            minutePart684=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart684.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1571:25: ( secondPart )?
                    int alt246=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA246_1 = input.LA(2);

                            if ( ((LA246_1>=TIMEPERIOD_SEC && LA246_1<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA246_2 = input.LA(2);

                            if ( ((LA246_2>=TIMEPERIOD_SEC && LA246_2<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA246_3 = input.LA(2);

                            if ( ((LA246_3>=TIMEPERIOD_SEC && LA246_3<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA246_4 = input.LA(2);

                            if ( ((LA246_4>=TIMEPERIOD_SEC && LA246_4<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA246_5 = input.LA(2);

                            if ( ((LA246_5>=TIMEPERIOD_SEC && LA246_5<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA246_6 = input.LA(2);

                            if ( ((LA246_6>=TIMEPERIOD_SEC && LA246_6<=TIMEPERIOD_SECONDS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                    }

                    switch (alt246) {
                        case 1 :
                            // EsperEPL2Grammar.g:1571:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10583);
                            secondPart685=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart685.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1571:37: ( millisecondPart )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==NUM_DOUBLE||LA247_0==IDENT||LA247_0==QUESTION||LA247_0==NUM_INT||(LA247_0>=NUM_LONG && LA247_0<=NUM_FLOAT)) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // EsperEPL2Grammar.g:1571:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10586);
                            millisecondPart686=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart686.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1572:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod10592);
                    minutePart687=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart687.getTree());
                    // EsperEPL2Grammar.g:1572:15: ( secondPart )?
                    int alt248=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA248_1 = input.LA(2);

                            if ( ((LA248_1>=TIMEPERIOD_SEC && LA248_1<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA248_2 = input.LA(2);

                            if ( ((LA248_2>=TIMEPERIOD_SEC && LA248_2<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA248_3 = input.LA(2);

                            if ( ((LA248_3>=TIMEPERIOD_SEC && LA248_3<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA248_4 = input.LA(2);

                            if ( ((LA248_4>=TIMEPERIOD_SEC && LA248_4<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA248_5 = input.LA(2);

                            if ( ((LA248_5>=TIMEPERIOD_SEC && LA248_5<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA248_6 = input.LA(2);

                            if ( ((LA248_6>=TIMEPERIOD_SEC && LA248_6<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                    }

                    switch (alt248) {
                        case 1 :
                            // EsperEPL2Grammar.g:1572:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10594);
                            secondPart688=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart688.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1572:27: ( millisecondPart )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==NUM_DOUBLE||LA249_0==IDENT||LA249_0==QUESTION||LA249_0==NUM_INT||(LA249_0>=NUM_LONG && LA249_0<=NUM_FLOAT)) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // EsperEPL2Grammar.g:1572:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10597);
                            millisecondPart689=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart689.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1573:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod10603);
                    secondPart690=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart690.getTree());
                    // EsperEPL2Grammar.g:1573:15: ( millisecondPart )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==NUM_DOUBLE||LA250_0==IDENT||LA250_0==QUESTION||LA250_0==NUM_INT||(LA250_0>=NUM_LONG && LA250_0<=NUM_FLOAT)) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // EsperEPL2Grammar.g:1573:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10605);
                            millisecondPart691=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart691.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1574:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod10611);
                    millisecondPart692=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart692.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: secondPart, dayPart, millisecondPart, minutePart, hourPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1576:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1576:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1576:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1576:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1576:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1576:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1576:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1579:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS695=null;
        Token TIMEPERIOD_DAY696=null;
        EsperEPL2GrammarParser.number_return number693 = null;

        EsperEPL2GrammarParser.substitution_return substitution694 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS695_tree=null;
        CommonTree TIMEPERIOD_DAY696_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1580:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1580:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1580:4: ( number | i= IDENT | substitution )
            int alt252=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt252=1;
                }
                break;
            case IDENT:
                {
                alt252=2;
                }
                break;
            case QUESTION:
                {
                alt252=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 252, 0, input);

                throw nvae;
            }

            switch (alt252) {
                case 1 :
                    // EsperEPL2Grammar.g:1580:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart10649);
                    number693=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number693.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1580:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart10653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1580:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart10655);
                    substitution694=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution694.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1580:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==TIMEPERIOD_DAYS) ) {
                alt253=1;
            }
            else if ( (LA253_0==TIMEPERIOD_DAY) ) {
                alt253=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // EsperEPL2Grammar.g:1580:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS695=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart10659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS695);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1580:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY696=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart10663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY696);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1581:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1581:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1581:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1581:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1582:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1582:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1582:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1582:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1585:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS699=null;
        Token TIMEPERIOD_HOUR700=null;
        EsperEPL2GrammarParser.number_return number697 = null;

        EsperEPL2GrammarParser.substitution_return substitution698 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS699_tree=null;
        CommonTree TIMEPERIOD_HOUR700_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1586:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1586:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1586:4: ( number | i= IDENT | substitution )
            int alt254=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt254=1;
                }
                break;
            case IDENT:
                {
                alt254=2;
                }
                break;
            case QUESTION:
                {
                alt254=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // EsperEPL2Grammar.g:1586:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart10712);
                    number697=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number697.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1586:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart10716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1586:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart10718);
                    substitution698=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution698.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1586:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==TIMEPERIOD_HOURS) ) {
                alt255=1;
            }
            else if ( (LA255_0==TIMEPERIOD_HOUR) ) {
                alt255=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    // EsperEPL2Grammar.g:1586:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS699=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart10722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS699);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1586:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR700=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart10726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR700);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1587:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1587:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1587:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1587:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1588:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1588:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1588:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1588:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1591:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES703=null;
        Token TIMEPERIOD_MINUTE704=null;
        Token MIN705=null;
        EsperEPL2GrammarParser.number_return number701 = null;

        EsperEPL2GrammarParser.substitution_return substitution702 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES703_tree=null;
        CommonTree TIMEPERIOD_MINUTE704_tree=null;
        CommonTree MIN705_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1592:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1592:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1592:4: ( number | i= IDENT | substitution )
            int alt256=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt256=1;
                }
                break;
            case IDENT:
                {
                alt256=2;
                }
                break;
            case QUESTION:
                {
                alt256=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1592:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart10775);
                    number701=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number701.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1592:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart10779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1592:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart10781);
                    substitution702=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution702.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1592:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt257=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt257=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt257=2;
                }
                break;
            case MIN:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // EsperEPL2Grammar.g:1592:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES703=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES703);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1592:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE704=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE704);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1592:76: MIN
                    {
                    MIN705=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart10793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN705);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1593:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1593:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1593:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1593:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1594:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1594:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1594:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1594:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1597:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS708=null;
        Token TIMEPERIOD_SECOND709=null;
        Token TIMEPERIOD_SEC710=null;
        EsperEPL2GrammarParser.number_return number706 = null;

        EsperEPL2GrammarParser.substitution_return substitution707 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS708_tree=null;
        CommonTree TIMEPERIOD_SECOND709_tree=null;
        CommonTree TIMEPERIOD_SEC710_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1598:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1598:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1598:4: ( number | i= IDENT | substitution )
            int alt258=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt258=1;
                }
                break;
            case IDENT:
                {
                alt258=2;
                }
                break;
            case QUESTION:
                {
                alt258=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }

            switch (alt258) {
                case 1 :
                    // EsperEPL2Grammar.g:1598:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart10843);
                    number706=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number706.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1598:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart10847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1598:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart10849);
                    substitution707=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution707.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1598:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt259=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt259=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt259=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt259=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1598:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS708=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS708);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1598:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND709=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart10857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND709);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1598:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC710=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart10861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC710);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1599:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1599:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1599:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1599:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1600:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1600:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1600:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1600:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1603:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS713=null;
        Token TIMEPERIOD_MILLISECOND714=null;
        Token TIMEPERIOD_MILLISEC715=null;
        EsperEPL2GrammarParser.number_return number711 = null;

        EsperEPL2GrammarParser.substitution_return substitution712 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS713_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND714_tree=null;
        CommonTree TIMEPERIOD_MILLISEC715_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1604:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1604:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1604:4: ( number | i= IDENT | substitution )
            int alt260=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt260=1;
                }
                break;
            case IDENT:
                {
                alt260=2;
                }
                break;
            case QUESTION:
                {
                alt260=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }

            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1604:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart10911);
                    number711=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number711.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1604:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart10915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1604:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart10917);
                    substitution712=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution712.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1604:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt261=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt261=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt261=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1604:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS713=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS713);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1604:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND714=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND714);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1604:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC715=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC715);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1605:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1605:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1605:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1605:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1606:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1606:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1606:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1606:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1609:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1610:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt262=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt262=1;
                }
                break;
            case NUM_LONG:
                {
                alt262=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt262=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt262=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }

            switch (alt262) {
                case 1 :
                    // EsperEPL2Grammar.g:1610:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number10984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1610:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1611:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1611:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1612:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1612:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1613:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1613:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1616:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1617:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1617:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1617:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1620:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant716 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant717 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1621:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt263=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt263=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt263=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt263=4;
                }
                break;
            case VALUE_NULL:
                {
                alt263=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }

            switch (alt263) {
                case 1 :
                    // EsperEPL2Grammar.g:1621:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11075);
                    numberconstant716=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant716.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1622:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11082);
                    stringconstant717=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant717.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1623:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1623:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1623:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1624:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1624:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1624:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1625:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1625:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1625:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1628:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number718 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1629:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1629:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1629:5: (m= MINUS | p= PLUS )?
            int alt264=3;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==MINUS) ) {
                alt264=1;
            }
            else if ( (LA264_0==PLUS) ) {
                alt264=2;
            }
            switch (alt264) {
                case 1 :
                    // EsperEPL2Grammar.g:1629:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1629:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11167);
            number718=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number718.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1630:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number718!=null?((CommonTree)number718.tree):null).getType(), "-" + (number718!=null?input.toString(number718.start,number718.stop):null)));

            }
            else // 1631:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1634:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1635:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==STRING_LITERAL) ) {
                alt265=1;
            }
            else if ( (LA265_0==QUOTED_STRING_LITERAL) ) {
                alt265=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    // EsperEPL2Grammar.g:1635:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1635:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1635:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1636:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1636:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1636:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:787:4: ( streamSelector )
        // EsperEPL2Grammar.g:787:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3683);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:958:7: ( timePeriod )
        // EsperEPL2Grammar.g:958:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4992);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1120:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1120:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6723);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1205:4: ( eventProperty )
        // EsperEPL2Grammar.g:1205:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7501);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1366:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1366:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8912);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1416:7: ( lastOperand )
        // EsperEPL2Grammar.g:1416:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9335);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1417:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1417:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9346);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1418:4: ( timePeriod )
        // EsperEPL2Grammar.g:1418:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9357);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1419:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1419:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9368);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1420:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1420:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9379);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1421:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1421:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9391);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1422:4: ( lastOperator )
        // EsperEPL2Grammar.g:1422:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9402);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1423:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1423:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9413);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1424:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1424:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9426);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA151 dfa151 = new DFA151(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA237 dfa237 = new DFA237(this);
    static final String DFA151_eotS =
        "\u090a\uffff";
    static final String DFA151_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u08de\uffff";
    static final String DFA151_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\14\uffff\1\u00fd\155\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\u0106\71"+
        "\uffff\1\5\71\uffff\1\5\71\uffff\1\5\2\6\75\uffff\2\6\74\uffff\2"+
        "\6\74\uffff\2\6\72\uffff\2\6\74\uffff\2\6\74\uffff\2\6\74\uffff"+
        "\2\6\74\uffff\2\6\74\uffff\2\6\75\uffff\2\6\72\uffff\2\6\145\uffff"+
        "\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\114\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff"+
        "\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\157\uffff";
    static final String DFA151_maxS =
        "\2\u011b\13\uffff\1\u011b\3\uffff\1\u0118\2\uffff\2\u0118\2\uffff"+
        "\4\u0118\1\uffff\2\u0118\7\uffff\2\u0118\2\uffff\2\u0118\14\uffff"+
        "\1\u00fd\155\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u011b\71"+
        "\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u011b"+
        "\71\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u0116"+
        "\71\uffff\1\u011b\71\uffff\1\u011b\71\uffff\1\u0119\2\u0113\75\uffff"+
        "\2\u0113\74\uffff\2\u0113\74\uffff\2\u0113\72\uffff\2\u0113\74\uffff"+
        "\2\u0113\74\uffff\2\u0113\74\uffff\2\u0113\74\uffff\2\u0113\74\uffff"+
        "\2\u0113\75\uffff\2\u0113\72\uffff\2\u0113\145\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff"+
        "\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\157\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\52\uffff\1\6\1\7\4\uffff"+
        "\1\1\51\uffff\1\10\1\4\u0330\uffff\75\6\2\uffff\74\6\2\uffff\74"+
        "\6\2\uffff\72\6\2\uffff\74\6\2\uffff\74\6\2\uffff\74\6\2\uffff\74"+
        "\6\2\uffff\74\6\2\uffff\73\6\4\uffff\72\6\2\uffff\72\6\1\11\52\6"+
        "\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6"+
        "\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\53\6\1\uffff\5\6"+
        "\1\uffff\53\6\1\uffff\5\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6"+
        "\1\uffff\30\6\1\uffff\53\6\1\uffff\5\6\1\uffff\55\6\1\uffff\36\6"+
        "\1\uffff\31\6\2\uffff\64\6\1\uffff";
    static final String DFA151_specialS =
        "\1\0\u00a5\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1\4\71"+
        "\uffff\1\5\71\uffff\1\6\71\uffff\1\7\71\uffff\1\10\71\uffff\1\11"+
        "\71\uffff\1\12\71\uffff\1\13\71\uffff\1\14\71\uffff\1\15\71\uffff"+
        "\1\16\1\17\1\20\75\uffff\1\21\1\22\74\uffff\1\23\1\24\74\uffff\1"+
        "\25\1\26\72\uffff\1\27\1\30\74\uffff\1\31\1\32\74\uffff\1\33\1\34"+
        "\74\uffff\1\35\1\36\74\uffff\1\37\1\40\74\uffff\1\41\1\42\75\uffff"+
        "\1\43\1\44\72\uffff\1\45\1\46\145\uffff\1\47\53\uffff\1\50\5\uffff"+
        "\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1\54\114\uffff\1\55\53"+
        "\uffff\1\56\5\uffff\1\57\53\uffff\1\60\5\uffff\1\61\53\uffff\1\62"+
        "\5\uffff\1\63\30\uffff\1\64\30\uffff\1\65\53\uffff\1\66\5\uffff"+
        "\1\67\55\uffff\1\70\157\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\10\uffff\6\16\1\46\1\47\1\70\2\16\1\52\1\53\1\71"+
            "\1\uffff\1\16\1\uffff\3\16\14\uffff\3\2\2\uffff\1\16\2\uffff"+
            "\3\16\u0082\uffff\1\2\16\uffff\1\16\2\uffff\1\15\3\uffff\1\2"+
            "\1\14\3\uffff\2\2\11\uffff\1\1\2\uffff\1\72\1\uffff\1\2\2\uffff"+
            "\1\16\2\2",
            "\1\77\4\uffff\1\77\3\uffff\1\77\3\uffff\11\77\10\uffff\1\77"+
            "\1\uffff\4\77\12\uffff\3\77\10\uffff\10\77\1\uffff\4\77\2\uffff"+
            "\1\77\1\uffff\3\77\21\uffff\1\77\2\uffff\3\77\u0082\uffff\1"+
            "\2\16\uffff\1\77\33\uffff\1\2\2\uffff\1\77\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\152\4\uffff\1\152\2\uffff\2\152\3\uffff\11\152\1\151\1"+
            "\152\6\uffff\1\152\1\uffff\4\152\12\uffff\3\152\10\uffff\16"+
            "\152\1\uffff\1\152\1\uffff\3\152\14\uffff\3\152\2\uffff\1\152"+
            "\2\uffff\3\152\u0082\uffff\1\152\16\uffff\1\152\2\uffff\1\152"+
            "\3\uffff\2\152\3\uffff\2\152\11\uffff\1\152\2\uffff\1\152\1"+
            "\uffff\1\152\2\uffff\3\152",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u00a6\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u00e0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u011a\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u0154\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u018e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u01c8\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u0202\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u023c\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u0276\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u02b0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u02ea\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u0324\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u008f"+
            "\uffff\1\16\1\uffff\2\16\1\u035e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0398",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03c9\4\uffff\1\u03ad\2\uffff\1\u03d6\1\u03ae\3\uffff\1"+
            "\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u03b4\1\u03b5\1\u03b6"+
            "\1\u03ac\1\uffff\1\u039d\6\uffff\1\u03cc\1\uffff\1\u03ce\1\u03ca"+
            "\1\u03cb\1\u03cd\5\uffff\1\u039c\1\u039b\3\uffff\1\u03b7\1\u03b8"+
            "\1\u03b9\10\uffff\1\u03ba\1\u03bb\1\u03bc\1\u03be\1\u03bf\1"+
            "\u03c0\1\u03c1\1\u03c2\1\u03d3\1\u03c3\1\u03c4\1\u03c5\1\u03c6"+
            "\1\u03d4\1\uffff\1\u03c7\1\uffff\1\u03c8\1\u03bd\1\u03ab\14"+
            "\uffff\1\u03a4\1\u03a5\1\u03a6\2\uffff\1\u03cf\2\uffff\1\u03d0"+
            "\1\u03d1\1\u03d2\u0082\uffff\1\u03a3\16\uffff\1\u03a9\2\uffff"+
            "\1\u03a8\1\uffff\1\u03d7\1\uffff\1\u039f\1\u03a7\3\uffff\1\u0399"+
            "\1\u039a\11\uffff\1\u039e\2\uffff\1\u03d5\1\uffff\1\u03a0\2"+
            "\uffff\1\u03aa\1\u03a1\1\u03a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0408\4\uffff\1\u03ec\2\uffff\1\u0415\1\u03ed\3\uffff\1"+
            "\u03ee\1\u03ef\1\u03f0\1\u03f1\1\u03f2\1\u03f3\1\u03f4\1\u03f5"+
            "\1\u03eb\1\uffff\1\u03dc\6\uffff\1\u040b\1\uffff\1\u040d\1\u0409"+
            "\1\u040a\1\u040c\5\uffff\1\u03db\1\u03da\3\uffff\1\u03f6\1\u03f7"+
            "\1\u03f8\10\uffff\1\u03f9\1\u03fa\1\u03fb\1\u03fd\1\u03fe\1"+
            "\u03ff\1\u0400\1\u0401\1\u0412\1\u0402\1\u0403\1\u0404\1\u0405"+
            "\1\u0413\1\uffff\1\u0406\1\uffff\1\u0407\1\u03fc\1\u03ea\14"+
            "\uffff\1\u03e3\1\u03e4\1\u03e5\2\uffff\1\u040e\2\uffff\1\u040f"+
            "\1\u0410\1\u0411\u0082\uffff\1\u03e2\16\uffff\1\u03e8\2\uffff"+
            "\1\u03e7\3\uffff\1\u03de\1\u03e6\3\uffff\1\u03d8\1\u03d9\11"+
            "\uffff\1\u03dd\2\uffff\1\u0414\1\uffff\1\u03df\2\uffff\1\u03e9"+
            "\1\u03e0\1\u03e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0446\4\uffff\1\u042a\2\uffff\1\u0453\1\u042b\3\uffff\1"+
            "\u042c\1\u042d\1\u042e\1\u042f\1\u0430\1\u0431\1\u0432\1\u0433"+
            "\1\u0429\1\uffff\1\u041a\6\uffff\1\u0449\1\uffff\1\u044b\1\u0447"+
            "\1\u0448\1\u044a\5\uffff\1\u0419\1\u0418\3\uffff\1\u0434\1\u0435"+
            "\1\u0436\10\uffff\1\u0437\1\u0438\1\u0439\1\u043b\1\u043c\1"+
            "\u043d\1\u043e\1\u043f\1\u0450\1\u0440\1\u0441\1\u0442\1\u0443"+
            "\1\u0451\1\uffff\1\u0444\1\uffff\1\u0445\1\u043a\1\u0428\14"+
            "\uffff\1\u0421\1\u0422\1\u0423\2\uffff\1\u044c\2\uffff\1\u044d"+
            "\1\u044e\1\u044f\u0082\uffff\1\u0420\16\uffff\1\u0426\2\uffff"+
            "\1\u0425\3\uffff\1\u041c\1\u0424\3\uffff\1\u0416\1\u0417\11"+
            "\uffff\1\u041b\2\uffff\1\u0452\1\uffff\1\u041d\2\uffff\1\u0427"+
            "\1\u041e\1\u041f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0482\4\uffff\1\u0466\2\uffff\1\u048f\1\u0467\3\uffff\1"+
            "\u0468\1\u0469\1\u046a\1\u046b\1\u046c\1\u046d\1\u046e\1\u046f"+
            "\1\u0465\1\uffff\1\u0456\6\uffff\1\u0485\1\uffff\1\u0487\1\u0483"+
            "\1\u0484\1\u0486\12\uffff\1\u0470\1\u0471\1\u0472\10\uffff\1"+
            "\u0473\1\u0474\1\u0475\1\u0477\1\u0478\1\u0479\1\u047a\1\u047b"+
            "\1\u048c\1\u047c\1\u047d\1\u047e\1\u047f\1\u048d\1\uffff\1\u0480"+
            "\1\uffff\1\u0481\1\u0476\1\u0464\14\uffff\1\u045d\1\u045e\1"+
            "\u045f\2\uffff\1\u0488\2\uffff\1\u0489\1\u048a\1\u048b\u0082"+
            "\uffff\1\u045c\16\uffff\1\u0462\2\uffff\1\u0461\3\uffff\1\u0458"+
            "\1\u0460\3\uffff\1\u0454\1\u0455\11\uffff\1\u0457\2\uffff\1"+
            "\u048e\1\uffff\1\u0459\2\uffff\1\u0463\1\u045a\1\u045b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04c0\4\uffff\1\u04a4\2\uffff\1\u04cd\1\u04a5\3\uffff\1"+
            "\u04a6\1\u04a7\1\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04ad"+
            "\1\u04a3\1\uffff\1\u0494\6\uffff\1\u04c3\1\uffff\1\u04c5\1\u04c1"+
            "\1\u04c2\1\u04c4\5\uffff\1\u0493\1\u0492\3\uffff\1\u04ae\1\u04af"+
            "\1\u04b0\10\uffff\1\u04b1\1\u04b2\1\u04b3\1\u04b5\1\u04b6\1"+
            "\u04b7\1\u04b8\1\u04b9\1\u04ca\1\u04ba\1\u04bb\1\u04bc\1\u04bd"+
            "\1\u04cb\1\uffff\1\u04be\1\uffff\1\u04bf\1\u04b4\1\u04a2\14"+
            "\uffff\1\u049b\1\u049c\1\u049d\2\uffff\1\u04c6\2\uffff\1\u04c7"+
            "\1\u04c8\1\u04c9\u0082\uffff\1\u049a\16\uffff\1\u04a0\2\uffff"+
            "\1\u049f\3\uffff\1\u0496\1\u049e\3\uffff\1\u0490\1\u0491\11"+
            "\uffff\1\u0495\2\uffff\1\u04cc\1\uffff\1\u0497\2\uffff\1\u04a1"+
            "\1\u0498\1\u0499",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04fe\4\uffff\1\u04e2\2\uffff\1\u050b\1\u04e3\3\uffff\1"+
            "\u04e4\1\u04e5\1\u04e6\1\u04e7\1\u04e8\1\u04e9\1\u04ea\1\u04eb"+
            "\1\u04e1\1\uffff\1\u04d2\6\uffff\1\u0501\1\uffff\1\u0503\1\u04ff"+
            "\1\u0500\1\u0502\5\uffff\1\u04d1\1\u04d0\3\uffff\1\u04ec\1\u04ed"+
            "\1\u04ee\10\uffff\1\u04ef\1\u04f0\1\u04f1\1\u04f3\1\u04f4\1"+
            "\u04f5\1\u04f6\1\u04f7\1\u0508\1\u04f8\1\u04f9\1\u04fa\1\u04fb"+
            "\1\u0509\1\uffff\1\u04fc\1\uffff\1\u04fd\1\u04f2\1\u04e0\14"+
            "\uffff\1\u04d9\1\u04da\1\u04db\2\uffff\1\u0504\2\uffff\1\u0505"+
            "\1\u0506\1\u0507\u0082\uffff\1\u04d8\16\uffff\1\u04de\2\uffff"+
            "\1\u04dd\3\uffff\1\u04d4\1\u04dc\3\uffff\1\u04ce\1\u04cf\11"+
            "\uffff\1\u04d3\2\uffff\1\u050a\1\uffff\1\u04d5\2\uffff\1\u04df"+
            "\1\u04d6\1\u04d7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053c\4\uffff\1\u0520\2\uffff\1\u0549\1\u0521\3\uffff\1"+
            "\u0522\1\u0523\1\u0524\1\u0525\1\u0526\1\u0527\1\u0528\1\u0529"+
            "\1\u051f\1\uffff\1\u0510\6\uffff\1\u053f\1\uffff\1\u0541\1\u053d"+
            "\1\u053e\1\u0540\5\uffff\1\u050f\1\u050e\3\uffff\1\u052a\1\u052b"+
            "\1\u052c\10\uffff\1\u052d\1\u052e\1\u052f\1\u0531\1\u0532\1"+
            "\u0533\1\u0534\1\u0535\1\u0546\1\u0536\1\u0537\1\u0538\1\u0539"+
            "\1\u0547\1\uffff\1\u053a\1\uffff\1\u053b\1\u0530\1\u051e\14"+
            "\uffff\1\u0517\1\u0518\1\u0519\2\uffff\1\u0542\2\uffff\1\u0543"+
            "\1\u0544\1\u0545\u0082\uffff\1\u0516\16\uffff\1\u051c\2\uffff"+
            "\1\u051b\3\uffff\1\u0512\1\u051a\3\uffff\1\u050c\1\u050d\11"+
            "\uffff\1\u0511\2\uffff\1\u0548\1\uffff\1\u0513\2\uffff\1\u051d"+
            "\1\u0514\1\u0515",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057a\4\uffff\1\u055e\2\uffff\1\u0587\1\u055f\3\uffff\1"+
            "\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565\1\u0566\1\u0567"+
            "\1\u055d\1\uffff\1\u054e\6\uffff\1\u057d\1\uffff\1\u057f\1\u057b"+
            "\1\u057c\1\u057e\5\uffff\1\u054d\1\u054c\3\uffff\1\u0568\1\u0569"+
            "\1\u056a\10\uffff\1\u056b\1\u056c\1\u056d\1\u056f\1\u0570\1"+
            "\u0571\1\u0572\1\u0573\1\u0584\1\u0574\1\u0575\1\u0576\1\u0577"+
            "\1\u0585\1\uffff\1\u0578\1\uffff\1\u0579\1\u056e\1\u055c\14"+
            "\uffff\1\u0555\1\u0556\1\u0557\2\uffff\1\u0580\2\uffff\1\u0581"+
            "\1\u0582\1\u0583\u0082\uffff\1\u0554\16\uffff\1\u055a\2\uffff"+
            "\1\u0559\3\uffff\1\u0550\1\u0558\3\uffff\1\u054a\1\u054b\11"+
            "\uffff\1\u054f\2\uffff\1\u0586\1\uffff\1\u0551\2\uffff\1\u055b"+
            "\1\u0552\1\u0553",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b8\4\uffff\1\u059c\2\uffff\1\u05c5\1\u059d\3\uffff\1"+
            "\u059e\1\u059f\1\u05a0\1\u05a1\1\u05a2\1\u05a3\1\u05a4\1\u05a5"+
            "\1\u059b\1\uffff\1\u058c\6\uffff\1\u05bb\1\uffff\1\u05bd\1\u05b9"+
            "\1\u05ba\1\u05bc\5\uffff\1\u058b\1\u058a\3\uffff\1\u05a6\1\u05a7"+
            "\1\u05a8\10\uffff\1\u05a9\1\u05aa\1\u05ab\1\u05ad\1\u05ae\1"+
            "\u05af\1\u05b0\1\u05b1\1\u05c2\1\u05b2\1\u05b3\1\u05b4\1\u05b5"+
            "\1\u05c3\1\uffff\1\u05b6\1\uffff\1\u05b7\1\u05ac\1\u059a\14"+
            "\uffff\1\u0593\1\u0594\1\u0595\2\uffff\1\u05be\2\uffff\1\u05bf"+
            "\1\u05c0\1\u05c1\u0082\uffff\1\u0592\16\uffff\1\u0598\2\uffff"+
            "\1\u0597\3\uffff\1\u058e\1\u0596\3\uffff\1\u0588\1\u0589\11"+
            "\uffff\1\u058d\2\uffff\1\u05c4\1\uffff\1\u058f\2\uffff\1\u0599"+
            "\1\u0590\1\u0591",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f4\4\uffff\1\u05d8\2\uffff\1\u0601\1\u05d9\3\uffff\1"+
            "\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0\1\u05e1"+
            "\1\u05d7\1\uffff\1\u05c8\6\uffff\1\u05f7\1\uffff\1\u05f9\1\u05f5"+
            "\1\u05f6\1\u05f8\12\uffff\1\u05e2\1\u05e3\1\u05e4\10\uffff\1"+
            "\u05e5\1\u05e6\1\u05e7\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed"+
            "\1\u05fe\1\u05ee\1\u05ef\1\u05f0\1\u05f1\1\u05ff\1\uffff\1\u05f2"+
            "\1\uffff\1\u05f3\1\u05e8\1\u05d6\14\uffff\1\u05cf\1\u05d0\1"+
            "\u05d1\2\uffff\1\u05fa\2\uffff\1\u05fb\1\u05fc\1\u05fd\u0082"+
            "\uffff\1\u05ce\16\uffff\1\u05d4\2\uffff\1\u05d3\3\uffff\1\u05ca"+
            "\1\u05d2\3\uffff\1\u05c6\1\u05c7\11\uffff\1\u05c9\2\uffff\1"+
            "\u0600\1\uffff\1\u05cb\2\uffff\1\u05d5\1\u05cc\1\u05cd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0602",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0633\4\uffff\1\u0617\2\uffff\1\u0640\1\u0618\3\uffff\1"+
            "\u0619\1\u061a\1\u061b\1\u061c\1\u061d\1\u061e\1\u061f\1\u0620"+
            "\1\u0616\1\uffff\1\u0607\6\uffff\1\u0636\1\uffff\1\u0638\1\u0634"+
            "\1\u0635\1\u0637\12\uffff\1\u0621\1\u0622\1\u0623\10\uffff\1"+
            "\u0624\1\u0625\1\u0626\1\u0628\1\u0629\1\u062a\1\u062b\1\u062c"+
            "\1\u063d\1\u062d\1\u062e\1\u062f\1\u0630\1\u063e\1\uffff\1\u0631"+
            "\1\uffff\1\u0632\1\u0627\1\u0615\14\uffff\1\u060e\1\u060f\1"+
            "\u0610\2\uffff\1\u0639\2\uffff\1\u063a\1\u063b\1\u063c\u0082"+
            "\uffff\1\u060d\16\uffff\1\u0613\2\uffff\1\u0612\3\uffff\1\u0609"+
            "\1\u0611\3\uffff\1\u0605\1\u0606\11\uffff\1\u0608\2\uffff\1"+
            "\u063f\1\uffff\1\u060a\2\uffff\1\u0614\1\u060b\1\u060c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u066f\4\uffff\1\u0653\2\uffff\1\u067c\1\u0654\3\uffff\1"+
            "\u0655\1\u0656\1\u0657\1\u0658\1\u0659\1\u065a\1\u065b\1\u065c"+
            "\1\u0652\1\uffff\1\u0643\6\uffff\1\u0672\1\uffff\1\u0674\1\u0670"+
            "\1\u0671\1\u0673\12\uffff\1\u065d\1\u065e\1\u065f\10\uffff\1"+
            "\u0660\1\u0661\1\u0662\1\u0664\1\u0665\1\u0666\1\u0667\1\u0668"+
            "\1\u0679\1\u0669\1\u066a\1\u066b\1\u066c\1\u067a\1\uffff\1\u066d"+
            "\1\uffff\1\u066e\1\u0663\1\u0651\14\uffff\1\u064a\1\u064b\1"+
            "\u064c\2\uffff\1\u0675\2\uffff\1\u0676\1\u0677\1\u0678\u0082"+
            "\uffff\1\u0649\16\uffff\1\u064f\2\uffff\1\u064e\3\uffff\1\u0645"+
            "\1\u064d\3\uffff\1\u0641\1\u0642\11\uffff\1\u0644\2\uffff\1"+
            "\u067b\1\uffff\1\u0646\2\uffff\1\u0650\1\u0647\1\u0648",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u069e\4\uffff\1\u0682\3\uffff\1\u0683\3\uffff\1\u0684\1"+
            "\u0685\1\u0686\1\u0687\1\u0688\1\u0689\1\u068a\1\u068b\1\u0681"+
            "\1\u067d\7\uffff\1\u06a1\1\uffff\1\u06a3\1\u069f\1\u06a0\1\u06a2"+
            "\12\uffff\1\u068c\1\u068d\1\u068e\10\uffff\1\u068f\1\u0690\1"+
            "\u0691\1\u0693\1\u0694\1\u0695\1\u0696\1\u0697\1\uffff\1\u0698"+
            "\1\u0699\1\u069a\1\u069b\2\uffff\1\u069c\1\uffff\1\u069d\1\u0692"+
            "\1\u0680\21\uffff\1\u06a4\2\uffff\1\u06a5\1\u06a6\1\u06a7\u0091"+
            "\uffff\1\u067e\36\uffff\1\u067f",
            "\1\u06bd\1\u06be\1\u06bf\1\u06c0\1\uffff\1\u06bb\1\u06ba\1"+
            "\u06bc\34\uffff\1\u06b4\u00d0\uffff\1\u06b3\2\uffff\1\u06a8"+
            "\1\u06a9\1\u06b8\1\u06ac\6\uffff\1\u06b7\1\u06b9\1\u06b5\1\u06b6"+
            "\1\u06af\1\u06b0\1\u06b1\1\u06b2\1\u06ae\1\u06ad\1\u06aa\1\u06ab",
            "\1\u06d6\1\u06d7\1\u06d8\1\u06d9\1\uffff\1\u06d3\1\u06d2\1"+
            "\u06d5\34\uffff\1\u06cc\u00d0\uffff\1\u06cb\2\uffff\1\u06d4"+
            "\1\u06c1\1\u06d0\1\u06c4\6\uffff\1\u06cf\1\u06d1\1\u06cd\1\u06ce"+
            "\1\u06c7\1\u06c8\1\u06c9\1\u06ca\1\u06c6\1\u06c5\1\u06c2\1\u06c3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ef\1\u06f0\1\u06f1\1\u06f2\1\uffff\1\u06ed\1\u06ec\1"+
            "\u06ee\34\uffff\1\u06e6\u00d0\uffff\1\u06e5\2\uffff\1\u06da"+
            "\1\u06db\1\u06ea\1\u06de\6\uffff\1\u06e9\1\u06eb\1\u06e7\1\u06e8"+
            "\1\u06e1\1\u06e2\1\u06e3\1\u06e4\1\u06e0\1\u06df\1\u06dc\1\u06dd",
            "\1\u0708\1\u0709\1\u070a\1\u070b\1\uffff\1\u0706\1\u0705\1"+
            "\u0707\34\uffff\1\u06ff\u00d0\uffff\1\u06fe\2\uffff\1\u06f3"+
            "\1\u06f4\1\u0703\1\u06f7\6\uffff\1\u0702\1\u0704\1\u0700\1\u0701"+
            "\1\u06fa\1\u06fb\1\u06fc\1\u06fd\1\u06f9\1\u06f8\1\u06f5\1\u06f6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0721\1\u0722\1\u0723\1\u0724\1\uffff\1\u071f\1\u071e\1"+
            "\u0720\34\uffff\1\u0718\u00d0\uffff\1\u0717\2\uffff\1\u070c"+
            "\1\u070d\1\u071c\1\u0710\6\uffff\1\u071b\1\u071d\1\u0719\1\u071a"+
            "\1\u0713\1\u0714\1\u0715\1\u0716\1\u0712\1\u0711\1\u070e\1\u070f",
            "\1\u073a\1\u073b\1\u073c\1\u073d\1\uffff\1\u0738\1\u0737\1"+
            "\u0739\34\uffff\1\u0731\u00d0\uffff\1\u0730\2\uffff\1\u0725"+
            "\1\u0726\1\u0735\1\u0729\6\uffff\1\u0734\1\u0736\1\u0732\1\u0733"+
            "\1\u072c\1\u072d\1\u072e\1\u072f\1\u072b\1\u072a\1\u0727\1\u0728",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0754\1\u0755\1\u0756\1\u0757\1\uffff\1\u0751\1\u0750\1"+
            "\u0753\34\uffff\1\u074a\u00ce\uffff\1\u0752\1\uffff\1\u0749"+
            "\2\uffff\1\16\1\u073f\1\u074e\1\u0742\6\uffff\1\u074d\1\u074f"+
            "\1\u074b\1\u074c\1\u0745\1\u0746\1\u0747\1\u0748\1\u0744\1\u0743"+
            "\1\u0740\1\u0741",
            "\1\u076e\1\u076f\1\u0770\1\u0771\1\uffff\1\u076b\1\u076a\1"+
            "\u076d\34\uffff\1\u0764\u00ce\uffff\1\u076c\1\uffff\1\u0763"+
            "\2\uffff\1\16\1\u0759\1\u0768\1\u075c\6\uffff\1\u0767\1\u0769"+
            "\1\u0765\1\u0766\1\u075f\1\u0760\1\u0761\1\u0762\1\u075e\1\u075d"+
            "\1\u075a\1\u075b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0787\1\u0788\1\u0789\1\u078a\1\uffff\1\u0785\1\u0784\1"+
            "\u0786\34\uffff\1\u077e\u00d0\uffff\1\u077d\2\uffff\1\u0772"+
            "\1\u0773\1\u0782\1\u0776\6\uffff\1\u0781\1\u0783\1\u077f\1\u0780"+
            "\1\u0779\1\u077a\1\u077b\1\u077c\1\u0778\1\u0777\1\u0774\1\u0775",
            "\1\u07a0\1\u07a1\1\u07a2\1\u07a3\1\uffff\1\u079d\1\u079c\1"+
            "\u079f\34\uffff\1\u0796\u00d0\uffff\1\u0795\2\uffff\1\u079e"+
            "\1\u078b\1\u079a\1\u078e\6\uffff\1\u0799\1\u079b\1\u0797\1\u0798"+
            "\1\u0791\1\u0792\1\u0793\1\u0794\1\u0790\1\u078f\1\u078c\1\u078d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07b9\1\u07ba\1\u07bb\1\u07bc\1\uffff\1\u07b7\1\u07b6\1"+
            "\u07b8\34\uffff\1\u07b0\u00d0\uffff\1\u07af\2\uffff\1\u07a4"+
            "\1\u07a5\1\u07b4\1\u07a8\6\uffff\1\u07b3\1\u07b5\1\u07b1\1\u07b2"+
            "\1\u07ab\1\u07ac\1\u07ad\1\u07ae\1\u07aa\1\u07a9\1\u07a6\1\u07a7",
            "\1\u07d2\1\u07d3\1\u07d4\1\u07d5\1\uffff\1\u07cf\1\u07ce\1"+
            "\u07d1\34\uffff\1\u07c8\u00d0\uffff\1\u07c7\2\uffff\1\u07d0"+
            "\1\u07bd\1\u07cc\1\u07c0\6\uffff\1\u07cb\1\u07cd\1\u07c9\1\u07ca"+
            "\1\u07c3\1\u07c4\1\u07c5\1\u07c6\1\u07c2\1\u07c1\1\u07be\1\u07bf",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07eb\1\u07ec\1\u07ed\1\u07ee\1\uffff\1\u07e9\1\u07e8\1"+
            "\u07ea\34\uffff\1\u07e2\u00d0\uffff\1\u07e1\2\uffff\1\u07d6"+
            "\1\u07d7\1\u07e6\1\u07da\6\uffff\1\u07e5\1\u07e7\1\u07e3\1\u07e4"+
            "\1\u07dd\1\u07de\1\u07df\1\u07e0\1\u07dc\1\u07db\1\u07d8\1\u07d9",
            "\1\u0804\1\u0805\1\u0806\1\u0807\1\uffff\1\u0801\1\u0800\1"+
            "\u0803\34\uffff\1\u07fa\u00d0\uffff\1\u07f9\2\uffff\1\u0802"+
            "\1\u07ef\1\u07fe\1\u07f2\6\uffff\1\u07fd\1\u07ff\1\u07fb\1\u07fc"+
            "\1\u07f5\1\u07f6\1\u07f7\1\u07f8\1\u07f4\1\u07f3\1\u07f0\1\u07f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081d\1\u081e\1\u081f\1\u0820\1\uffff\1\u081b\1\u081a\1"+
            "\u081c\34\uffff\1\u0814\u00d0\uffff\1\u0813\2\uffff\1\u0808"+
            "\1\u0809\1\u0818\1\u080c\6\uffff\1\u0817\1\u0819\1\u0815\1\u0816"+
            "\1\u080f\1\u0810\1\u0811\1\u0812\1\u080e\1\u080d\1\u080a\1\u080b",
            "\1\u0836\1\u0837\1\u0838\1\u0839\1\uffff\1\u0834\1\u0833\1"+
            "\u0835\34\uffff\1\u082d\u00d0\uffff\1\u082c\2\uffff\1\u0821"+
            "\1\u0822\1\u0831\1\u0825\6\uffff\1\u0830\1\u0832\1\u082e\1\u082f"+
            "\1\u0828\1\u0829\1\u082a\1\u082b\1\u0827\1\u0826\1\u0823\1\u0824",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u084f\1\u0850\1\u0851\1\u0852\1\uffff\1\u084d\1\u084c\1"+
            "\u084e\34\uffff\1\u0846\u00d0\uffff\1\u0845\2\uffff\1\u083a"+
            "\1\u083b\1\u084a\1\u083e\6\uffff\1\u0849\1\u084b\1\u0847\1\u0848"+
            "\1\u0841\1\u0842\1\u0843\1\u0844\1\u0840\1\u083f\1\u083c\1\u083d",
            "\1\u0868\1\u0869\1\u086a\1\u086b\1\uffff\1\u0865\1\u0864\1"+
            "\u0867\34\uffff\1\u085e\u00d0\uffff\1\u085d\2\uffff\1\u0866"+
            "\1\u0853\1\u0862\1\u0856\6\uffff\1\u0861\1\u0863\1\u085f\1\u0860"+
            "\1\u0859\1\u085a\1\u085b\1\u085c\1\u0858\1\u0857\1\u0854\1\u0855",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0882\1\u0883\1\u0884\1\u0885\1\uffff\1\u087f\1\u087e\1"+
            "\u0881\34\uffff\1\u0878\u00ce\uffff\1\u0880\1\uffff\1\u0877"+
            "\2\uffff\1\u086c\1\u086d\1\u087c\1\u0870\6\uffff\1\u087b\1\u087d"+
            "\1\u0879\1\u087a\1\u0873\1\u0874\1\u0875\1\u0876\1\u0872\1\u0871"+
            "\1\u086e\1\u086f",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0898\1\u0897\1"+
            "\u089b\34\uffff\1\u0891\u00ce\uffff\1\u0899\1\uffff\1\u0890"+
            "\2\uffff\1\u089a\1\u0886\1\u0895\1\u0889\6\uffff\1\u0894\1\u0896"+
            "\1\u0892\1\u0893\1\u088c\1\u088d\1\u088e\1\u088f\1\u088b\1\u088a"+
            "\1\u0887\1\u0888",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b5\1\u08b6\1\u08b7\1\u08b8\1\uffff\1\u08b2\1\u08b1\1"+
            "\u08b4\34\uffff\1\u08ab\u00ce\uffff\1\u08b3\1\uffff\1\u08aa"+
            "\2\uffff\1\16\1\u08a0\1\u08af\1\u08a3\6\uffff\1\u08ae\1\u08b0"+
            "\1\u08ac\1\u08ad\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\u08a5\1\u08a4"+
            "\1\u08a1\1\u08a2",
            "\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\uffff\1\u08cc\1\u08cb\1"+
            "\u08ce\34\uffff\1\u08c5\u00ce\uffff\1\u08cd\1\uffff\1\u08c4"+
            "\2\uffff\1\16\1\u08ba\1\u08c9\1\u08bd\6\uffff\1\u08c8\1\u08ca"+
            "\1\u08c6\1\u08c7\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\u08bf\1\u08be"+
            "\1\u08bb\1\u08bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08eb\1\u08ec\1\u08ed\1\u08ee\1\uffff\1\u08e7\1\u08e6\1"+
            "\u08ea\3\uffff\1\u08e9\30\uffff\1\u08e0\u00ce\uffff\1\u08e8"+
            "\1\uffff\1\u08df\2\uffff\1\16\1\u08d5\1\u08e4\1\u08d8\6\uffff"+
            "\1\u08e3\1\u08e5\1\u08e1\1\u08e2\1\u08db\1\u08dc\1\u08dd\1\u08de"+
            "\1\u08da\1\u08d9\1\u08d6\1\u08d7",
            "\1\u0905\1\u0906\1\u0907\1\u0908\1\uffff\1\u0901\1\u0900\1"+
            "\u0904\3\uffff\1\u0903\30\uffff\1\u08fa\u00ce\uffff\1\u0902"+
            "\1\uffff\1\u08f9\2\uffff\1\16\1\u08ef\1\u08fe\1\u08f2\6\uffff"+
            "\1\u08fd\1\u08ff\1\u08fb\1\u08fc\1\u08f5\1\u08f6\1\u08f7\1\u08f8"+
            "\1\u08f4\1\u08f3\1\u08f0\1\u08f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "1114:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_0 = input.LA(1);

                         
                        int index151_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_0==MINUS) ) {s = 1;}

                        else if ( ((LA151_0>=BOOLEAN_TRUE && LA151_0<=VALUE_NULL)||LA151_0==NUM_DOUBLE||LA151_0==PLUS||(LA151_0>=STRING_LITERAL && LA151_0<=QUOTED_STRING_LITERAL)||LA151_0==NUM_INT||(LA151_0>=NUM_LONG && LA151_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA151_0==QUESTION) ) {s = 12;}

                        else if ( (LA151_0==LPAREN) ) {s = 13;}

                        else if ( (LA151_0==WINDOW||LA151_0==ESCAPE||LA151_0==EVERY_EXPR||(LA151_0>=MAX && LA151_0<=MIN)||LA151_0==OUTER||(LA151_0>=JOIN && LA151_0<=FULL)||LA151_0==EVENTS||(LA151_0>=UNIDIRECTIONAL && LA151_0<=METADATASQL)||(LA151_0>=WEEKDAY && LA151_0<=LW)||LA151_0==SNAPSHOT||(LA151_0>=VARIABLE && LA151_0<=AT)||LA151_0==UPDATE||(LA151_0>=DEFINE && LA151_0<=MATCHES)||LA151_0==IDENT||LA151_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA151_0==COUNT) ) {s = 17;}

                        else if ( (LA151_0==SUM) ) {s = 20;}

                        else if ( (LA151_0==AVG) ) {s = 21;}

                        else if ( (LA151_0==COALESCE) ) {s = 24;}

                        else if ( (LA151_0==MEDIAN) ) {s = 25;}

                        else if ( (LA151_0==STDDEV) ) {s = 26;}

                        else if ( (LA151_0==AVEDEV) ) {s = 27;}

                        else if ( (LA151_0==FIRST) ) {s = 29;}

                        else if ( (LA151_0==LAST) ) {s = 30;}

                        else if ( (LA151_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA151_0==PRIOR) ) {s = 39;}

                        else if ( (LA151_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA151_0==CAST) ) {s = 43;}

                        else if ( (LA151_0==EXISTS) ) {s = 56;}

                        else if ( (LA151_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA151_0==LCURLY) ) {s = 58;}

                         
                        input.seek(index151_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_166 = input.LA(1);

                         
                        int index151_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_166==STRING_LITERAL) ) {s = 921;}

                        else if ( (LA151_166==QUOTED_STRING_LITERAL) ) {s = 922;}

                        else if ( (LA151_166==ALL) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA151_166==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA151_166==CASE) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA151_166==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA151_166==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA151_166==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA151_166==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA151_166==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA151_166==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA151_166==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA151_166==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA151_166==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA151_166==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA151_166==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA151_166==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA151_166==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA151_166==AT) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA151_166==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA151_166==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA151_166==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA151_166==SUM) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA151_166==AVG) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA151_166==MAX) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA151_166==MIN) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA151_166==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA151_166==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA151_166==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA151_166==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA151_166==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA151_166==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA151_166==LAST) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA151_166==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA151_166==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA151_166==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA151_166==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA151_166==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA151_166==SQL) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA151_166==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA151_166==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA151_166==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA151_166==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA151_166==LW) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA151_166==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA151_166==CAST) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA151_166==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA151_166==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA151_166==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA151_166==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA151_166==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA151_166==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA151_166==FULL) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA151_166==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA151_166==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA151_166==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA151_166==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA151_166==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA151_166==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA151_166==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA151_166==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA151_166==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA151_166==STAR) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                         
                        input.seek(index151_166);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA151_224 = input.LA(1);

                         
                        int index151_224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_224==STRING_LITERAL) ) {s = 984;}

                        else if ( (LA151_224==QUOTED_STRING_LITERAL) ) {s = 985;}

                        else if ( (LA151_224==ALL) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA151_224==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA151_224==CASE) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA151_224==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA151_224==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA151_224==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA151_224==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA151_224==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA151_224==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA151_224==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA151_224==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA151_224==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA151_224==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA151_224==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA151_224==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA151_224==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA151_224==AT) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA151_224==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA151_224==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA151_224==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA151_224==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA151_224==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA151_224==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA151_224==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA151_224==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA151_224==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA151_224==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA151_224==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA151_224==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA151_224==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA151_224==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA151_224==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA151_224==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA151_224==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA151_224==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA151_224==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA151_224==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA151_224==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA151_224==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA151_224==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA151_224==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA151_224==LW) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA151_224==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA151_224==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA151_224==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA151_224==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA151_224==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA151_224==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA151_224==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA151_224==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA151_224==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA151_224==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA151_224==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA151_224==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA151_224==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA151_224==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA151_224==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA151_224==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA151_224==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA151_224==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                         
                        input.seek(index151_224);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA151_282 = input.LA(1);

                         
                        int index151_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_282==STRING_LITERAL) ) {s = 1046;}

                        else if ( (LA151_282==QUOTED_STRING_LITERAL) ) {s = 1047;}

                        else if ( (LA151_282==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA151_282==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA151_282==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA151_282==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA151_282==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA151_282==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA151_282==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA151_282==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA151_282==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA151_282==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA151_282==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA151_282==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA151_282==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA151_282==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA151_282==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA151_282==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA151_282==AT) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA151_282==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA151_282==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA151_282==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA151_282==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA151_282==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA151_282==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA151_282==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA151_282==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA151_282==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA151_282==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA151_282==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA151_282==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA151_282==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA151_282==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA151_282==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA151_282==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA151_282==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA151_282==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA151_282==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA151_282==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA151_282==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA151_282==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA151_282==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA151_282==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA151_282==LW) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA151_282==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA151_282==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA151_282==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA151_282==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA151_282==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA151_282==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA151_282==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA151_282==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA151_282==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA151_282==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA151_282==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA151_282==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA151_282==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA151_282==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA151_282==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA151_282==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA151_282==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA151_282==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                         
                        input.seek(index151_282);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA151_340 = input.LA(1);

                         
                        int index151_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_340==STRING_LITERAL) ) {s = 1108;}

                        else if ( (LA151_340==QUOTED_STRING_LITERAL) ) {s = 1109;}

                        else if ( (LA151_340==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA151_340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA151_340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA151_340==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA151_340==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA151_340==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA151_340==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA151_340==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA151_340==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA151_340==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA151_340==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA151_340==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA151_340==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA151_340==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA151_340==AT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA151_340==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA151_340==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA151_340==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA151_340==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA151_340==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA151_340==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA151_340==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA151_340==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA151_340==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA151_340==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA151_340==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA151_340==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA151_340==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA151_340==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA151_340==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA151_340==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA151_340==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA151_340==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA151_340==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA151_340==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA151_340==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA151_340==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA151_340==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA151_340==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA151_340==LW) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA151_340==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA151_340==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA151_340==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA151_340==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA151_340==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA151_340==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA151_340==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA151_340==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA151_340==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA151_340==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA151_340==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA151_340==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA151_340==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA151_340==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA151_340==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA151_340==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA151_340==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA151_340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                         
                        input.seek(index151_340);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA151_398 = input.LA(1);

                         
                        int index151_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_398==STRING_LITERAL) ) {s = 1168;}

                        else if ( (LA151_398==QUOTED_STRING_LITERAL) ) {s = 1169;}

                        else if ( (LA151_398==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA151_398==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA151_398==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA151_398==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA151_398==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA151_398==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA151_398==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA151_398==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA151_398==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA151_398==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA151_398==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA151_398==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA151_398==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA151_398==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA151_398==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA151_398==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA151_398==AT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA151_398==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA151_398==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA151_398==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA151_398==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA151_398==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA151_398==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA151_398==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA151_398==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA151_398==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA151_398==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA151_398==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA151_398==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA151_398==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA151_398==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA151_398==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA151_398==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA151_398==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA151_398==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA151_398==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA151_398==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA151_398==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA151_398==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA151_398==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA151_398==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA151_398==LW) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA151_398==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA151_398==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA151_398==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA151_398==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA151_398==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA151_398==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA151_398==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA151_398==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA151_398==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA151_398==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA151_398==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA151_398==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA151_398==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA151_398==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA151_398==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA151_398==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA151_398==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA151_398==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                         
                        input.seek(index151_398);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA151_456 = input.LA(1);

                         
                        int index151_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_456==STRING_LITERAL) ) {s = 1230;}

                        else if ( (LA151_456==QUOTED_STRING_LITERAL) ) {s = 1231;}

                        else if ( (LA151_456==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA151_456==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA151_456==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA151_456==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA151_456==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA151_456==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA151_456==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA151_456==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA151_456==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA151_456==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA151_456==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA151_456==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA151_456==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA151_456==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA151_456==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA151_456==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA151_456==AT) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA151_456==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA151_456==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA151_456==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA151_456==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA151_456==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA151_456==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA151_456==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA151_456==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA151_456==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA151_456==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA151_456==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA151_456==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA151_456==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA151_456==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA151_456==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA151_456==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA151_456==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA151_456==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA151_456==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA151_456==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA151_456==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA151_456==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA151_456==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA151_456==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA151_456==LW) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA151_456==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA151_456==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA151_456==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA151_456==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA151_456==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA151_456==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA151_456==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA151_456==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA151_456==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA151_456==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA151_456==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA151_456==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA151_456==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA151_456==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA151_456==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA151_456==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA151_456==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA151_456==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                         
                        input.seek(index151_456);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA151_514 = input.LA(1);

                         
                        int index151_514 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_514==STRING_LITERAL) ) {s = 1292;}

                        else if ( (LA151_514==QUOTED_STRING_LITERAL) ) {s = 1293;}

                        else if ( (LA151_514==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA151_514==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA151_514==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA151_514==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA151_514==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA151_514==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA151_514==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA151_514==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA151_514==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA151_514==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA151_514==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA151_514==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA151_514==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA151_514==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA151_514==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA151_514==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA151_514==AT) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA151_514==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA151_514==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA151_514==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA151_514==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA151_514==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA151_514==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA151_514==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA151_514==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA151_514==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA151_514==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA151_514==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA151_514==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA151_514==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA151_514==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA151_514==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA151_514==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA151_514==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA151_514==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA151_514==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA151_514==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA151_514==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA151_514==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA151_514==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA151_514==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA151_514==LW) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA151_514==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA151_514==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA151_514==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA151_514==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA151_514==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA151_514==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA151_514==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA151_514==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA151_514==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA151_514==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA151_514==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA151_514==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA151_514==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA151_514==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA151_514==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA151_514==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA151_514==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA151_514==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                         
                        input.seek(index151_514);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA151_572 = input.LA(1);

                         
                        int index151_572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_572==STRING_LITERAL) ) {s = 1354;}

                        else if ( (LA151_572==QUOTED_STRING_LITERAL) ) {s = 1355;}

                        else if ( (LA151_572==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA151_572==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA151_572==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA151_572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA151_572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA151_572==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA151_572==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA151_572==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA151_572==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA151_572==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA151_572==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA151_572==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA151_572==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA151_572==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA151_572==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA151_572==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA151_572==AT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA151_572==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA151_572==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA151_572==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA151_572==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA151_572==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA151_572==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA151_572==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA151_572==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA151_572==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA151_572==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA151_572==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA151_572==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA151_572==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA151_572==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA151_572==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA151_572==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA151_572==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA151_572==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA151_572==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA151_572==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA151_572==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA151_572==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA151_572==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA151_572==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA151_572==LW) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA151_572==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA151_572==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA151_572==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA151_572==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA151_572==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA151_572==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA151_572==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA151_572==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA151_572==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA151_572==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA151_572==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA151_572==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA151_572==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA151_572==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA151_572==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA151_572==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA151_572==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA151_572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                         
                        input.seek(index151_572);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA151_630 = input.LA(1);

                         
                        int index151_630 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_630==STRING_LITERAL) ) {s = 1416;}

                        else if ( (LA151_630==QUOTED_STRING_LITERAL) ) {s = 1417;}

                        else if ( (LA151_630==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA151_630==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA151_630==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA151_630==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA151_630==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA151_630==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA151_630==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA151_630==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA151_630==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA151_630==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA151_630==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA151_630==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA151_630==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA151_630==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA151_630==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA151_630==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA151_630==AT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA151_630==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA151_630==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA151_630==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA151_630==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA151_630==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA151_630==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA151_630==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA151_630==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA151_630==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA151_630==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA151_630==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA151_630==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA151_630==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA151_630==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA151_630==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA151_630==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA151_630==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA151_630==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA151_630==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA151_630==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA151_630==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA151_630==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA151_630==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA151_630==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA151_630==LW) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA151_630==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA151_630==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA151_630==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA151_630==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA151_630==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA151_630==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA151_630==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA151_630==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA151_630==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA151_630==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA151_630==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA151_630==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA151_630==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA151_630==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA151_630==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA151_630==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA151_630==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA151_630==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                         
                        input.seek(index151_630);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA151_688 = input.LA(1);

                         
                        int index151_688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_688==STRING_LITERAL) ) {s = 1478;}

                        else if ( (LA151_688==QUOTED_STRING_LITERAL) ) {s = 1479;}

                        else if ( (LA151_688==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA151_688==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA151_688==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA151_688==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA151_688==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA151_688==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA151_688==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA151_688==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA151_688==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA151_688==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA151_688==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA151_688==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA151_688==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA151_688==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA151_688==AT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA151_688==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA151_688==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA151_688==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA151_688==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA151_688==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA151_688==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA151_688==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA151_688==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA151_688==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA151_688==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA151_688==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA151_688==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA151_688==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA151_688==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA151_688==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA151_688==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA151_688==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA151_688==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA151_688==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA151_688==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA151_688==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA151_688==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA151_688==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA151_688==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA151_688==LW) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA151_688==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA151_688==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA151_688==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA151_688==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA151_688==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA151_688==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA151_688==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA151_688==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA151_688==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA151_688==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA151_688==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA151_688==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA151_688==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA151_688==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA151_688==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA151_688==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA151_688==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA151_688==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                         
                        input.seek(index151_688);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA151_746 = input.LA(1);

                         
                        int index151_746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_746==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( ((LA151_746>=STRING_LITERAL && LA151_746<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index151_746);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA151_804 = input.LA(1);

                         
                        int index151_804 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_804==STRING_LITERAL) ) {s = 1541;}

                        else if ( (LA151_804==QUOTED_STRING_LITERAL) ) {s = 1542;}

                        else if ( (LA151_804==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA151_804==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA151_804==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA151_804==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA151_804==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA151_804==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA151_804==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA151_804==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA151_804==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA151_804==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA151_804==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA151_804==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA151_804==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA151_804==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA151_804==AT) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA151_804==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA151_804==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA151_804==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA151_804==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA151_804==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA151_804==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA151_804==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA151_804==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA151_804==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA151_804==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA151_804==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA151_804==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA151_804==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA151_804==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA151_804==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA151_804==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA151_804==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA151_804==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA151_804==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA151_804==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA151_804==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA151_804==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA151_804==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA151_804==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA151_804==LW) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA151_804==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA151_804==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA151_804==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA151_804==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA151_804==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA151_804==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA151_804==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA151_804==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA151_804==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA151_804==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA151_804==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA151_804==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA151_804==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA151_804==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA151_804==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA151_804==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA151_804==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA151_804==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                         
                        input.seek(index151_804);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA151_862 = input.LA(1);

                         
                        int index151_862 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_862==STRING_LITERAL) ) {s = 1601;}

                        else if ( (LA151_862==QUOTED_STRING_LITERAL) ) {s = 1602;}

                        else if ( (LA151_862==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA151_862==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA151_862==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA151_862==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA151_862==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA151_862==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA151_862==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA151_862==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA151_862==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA151_862==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA151_862==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA151_862==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA151_862==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA151_862==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA151_862==AT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA151_862==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA151_862==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA151_862==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA151_862==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA151_862==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA151_862==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA151_862==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA151_862==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA151_862==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA151_862==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA151_862==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA151_862==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA151_862==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA151_862==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA151_862==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA151_862==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA151_862==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA151_862==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA151_862==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA151_862==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA151_862==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA151_862==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA151_862==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA151_862==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA151_862==LW) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA151_862==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA151_862==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA151_862==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA151_862==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA151_862==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA151_862==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA151_862==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA151_862==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA151_862==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA151_862==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA151_862==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA151_862==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA151_862==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA151_862==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA151_862==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA151_862==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA151_862==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA151_862==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                         
                        input.seek(index151_862);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA151_920 = input.LA(1);

                         
                        int index151_920 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_920==SELECT) ) {s = 1661;}

                        else if ( (LA151_920==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA151_920==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA151_920==AT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA151_920==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA151_920==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA151_920==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA151_920==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA151_920==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA151_920==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA151_920==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA151_920==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA151_920==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA151_920==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA151_920==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA151_920==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA151_920==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA151_920==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA151_920==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA151_920==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA151_920==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA151_920==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA151_920==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA151_920==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA151_920==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA151_920==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA151_920==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA151_920==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA151_920==LW) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA151_920==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA151_920==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA151_920==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA151_920==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA151_920==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA151_920==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA151_920==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA151_920==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA151_920==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA151_920==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA151_920==UPDATE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA151_920==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA151_920==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA151_920==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                         
                        input.seek(index151_920);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA151_921 = input.LA(1);

                         
                        int index151_921 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_921==RPAREN) ) {s = 1704;}

                        else if ( (LA151_921==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA151_921==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA151_921==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA151_921==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA151_921==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA151_921==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA151_921==LT) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA151_921==GT) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA151_921==LE) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA151_921==GE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA151_921==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA151_921==IS) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA151_921==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA151_921==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA151_921==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA151_921==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA151_921==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA151_921==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA151_921==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA151_921==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA151_921==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA151_921==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA151_921==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA151_921==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                         
                        input.seek(index151_921);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA151_922 = input.LA(1);

                         
                        int index151_922 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_922==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA151_922==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA151_922==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA151_922==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA151_922==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA151_922==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA151_922==LT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA151_922==GT) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA151_922==LE) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA151_922==GE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA151_922==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA151_922==IS) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA151_922==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA151_922==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA151_922==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA151_922==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA151_922==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA151_922==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA151_922==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA151_922==RPAREN) ) {s = 1748;}

                        else if ( (LA151_922==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA151_922==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA151_922==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA151_922==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA151_922==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                         
                        input.seek(index151_922);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA151_984 = input.LA(1);

                         
                        int index151_984 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_984==RPAREN) ) {s = 1754;}

                        else if ( (LA151_984==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA151_984==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA151_984==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA151_984==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA151_984==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA151_984==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA151_984==LT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA151_984==GT) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA151_984==LE) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA151_984==GE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA151_984==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA151_984==IS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA151_984==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA151_984==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA151_984==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA151_984==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA151_984==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA151_984==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA151_984==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA151_984==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA151_984==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA151_984==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA151_984==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA151_984==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                         
                        input.seek(index151_984);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA151_985 = input.LA(1);

                         
                        int index151_985 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_985==RPAREN) ) {s = 1779;}

                        else if ( (LA151_985==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA151_985==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA151_985==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA151_985==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA151_985==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA151_985==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA151_985==LT) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA151_985==GT) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA151_985==LE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA151_985==GE) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA151_985==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA151_985==IS) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA151_985==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA151_985==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA151_985==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA151_985==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA151_985==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA151_985==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA151_985==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA151_985==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA151_985==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA151_985==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA151_985==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA151_985==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                         
                        input.seek(index151_985);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA151_1046 = input.LA(1);

                         
                        int index151_1046 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1046==RPAREN) ) {s = 1804;}

                        else if ( (LA151_1046==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA151_1046==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA151_1046==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA151_1046==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA151_1046==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA151_1046==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA151_1046==LT) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA151_1046==GT) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA151_1046==LE) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA151_1046==GE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA151_1046==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA151_1046==IS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA151_1046==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA151_1046==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA151_1046==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA151_1046==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA151_1046==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA151_1046==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA151_1046==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA151_1046==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA151_1046==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA151_1046==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA151_1046==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA151_1046==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                         
                        input.seek(index151_1046);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA151_1047 = input.LA(1);

                         
                        int index151_1047 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1047==RPAREN) ) {s = 1829;}

                        else if ( (LA151_1047==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA151_1047==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA151_1047==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA151_1047==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA151_1047==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA151_1047==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA151_1047==LT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA151_1047==GT) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA151_1047==LE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA151_1047==GE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA151_1047==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA151_1047==IS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA151_1047==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA151_1047==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA151_1047==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA151_1047==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA151_1047==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA151_1047==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA151_1047==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA151_1047==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA151_1047==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA151_1047==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA151_1047==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA151_1047==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                         
                        input.seek(index151_1047);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA151_1108 = input.LA(1);

                         
                        int index151_1108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1108==RPAREN) ) {s = 14;}

                        else if ( (LA151_1108==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA151_1108==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA151_1108==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA151_1108==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA151_1108==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA151_1108==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA151_1108==LT) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA151_1108==GT) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA151_1108==LE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA151_1108==GE) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA151_1108==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA151_1108==IS) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA151_1108==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA151_1108==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA151_1108==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA151_1108==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA151_1108==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA151_1108==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA151_1108==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA151_1108==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA151_1108==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA151_1108==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA151_1108==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA151_1108==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA151_1108==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                         
                        input.seek(index151_1108);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA151_1109 = input.LA(1);

                         
                        int index151_1109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1109==RPAREN) ) {s = 14;}

                        else if ( (LA151_1109==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA151_1109==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA151_1109==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA151_1109==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA151_1109==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA151_1109==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA151_1109==LT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA151_1109==GT) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA151_1109==LE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA151_1109==GE) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA151_1109==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA151_1109==IS) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA151_1109==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA151_1109==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA151_1109==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA151_1109==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA151_1109==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA151_1109==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA151_1109==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA151_1109==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA151_1109==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA151_1109==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA151_1109==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA151_1109==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA151_1109==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                         
                        input.seek(index151_1109);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA151_1168 = input.LA(1);

                         
                        int index151_1168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1168==RPAREN) ) {s = 1906;}

                        else if ( (LA151_1168==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA151_1168==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA151_1168==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA151_1168==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA151_1168==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA151_1168==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA151_1168==LT) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA151_1168==GT) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA151_1168==LE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA151_1168==GE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA151_1168==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA151_1168==IS) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA151_1168==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA151_1168==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA151_1168==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA151_1168==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA151_1168==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA151_1168==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA151_1168==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA151_1168==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA151_1168==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA151_1168==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA151_1168==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA151_1168==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                         
                        input.seek(index151_1168);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA151_1169 = input.LA(1);

                         
                        int index151_1169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA151_1169==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA151_1169==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA151_1169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA151_1169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA151_1169==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA151_1169==LT) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA151_1169==GT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA151_1169==LE) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA151_1169==GE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA151_1169==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA151_1169==IS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA151_1169==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA151_1169==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA151_1169==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA151_1169==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA151_1169==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA151_1169==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA151_1169==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA151_1169==RPAREN) ) {s = 1950;}

                        else if ( (LA151_1169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA151_1169==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA151_1169==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA151_1169==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA151_1169==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                         
                        input.seek(index151_1169);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA151_1230 = input.LA(1);

                         
                        int index151_1230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1230==RPAREN) ) {s = 1956;}

                        else if ( (LA151_1230==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA151_1230==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA151_1230==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA151_1230==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA151_1230==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA151_1230==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA151_1230==LT) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA151_1230==GT) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA151_1230==LE) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA151_1230==GE) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA151_1230==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA151_1230==IS) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA151_1230==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA151_1230==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA151_1230==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA151_1230==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA151_1230==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA151_1230==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA151_1230==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA151_1230==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA151_1230==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA151_1230==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA151_1230==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA151_1230==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                         
                        input.seek(index151_1230);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA151_1231 = input.LA(1);

                         
                        int index151_1231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1231==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA151_1231==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA151_1231==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA151_1231==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA151_1231==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA151_1231==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA151_1231==LT) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA151_1231==GT) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA151_1231==LE) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA151_1231==GE) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA151_1231==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA151_1231==IS) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA151_1231==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA151_1231==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA151_1231==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA151_1231==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA151_1231==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA151_1231==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA151_1231==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA151_1231==RPAREN) ) {s = 2000;}

                        else if ( (LA151_1231==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA151_1231==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA151_1231==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA151_1231==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA151_1231==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                         
                        input.seek(index151_1231);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA151_1292 = input.LA(1);

                         
                        int index151_1292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1292==RPAREN) ) {s = 2006;}

                        else if ( (LA151_1292==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA151_1292==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA151_1292==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA151_1292==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA151_1292==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA151_1292==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA151_1292==LT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA151_1292==GT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA151_1292==LE) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA151_1292==GE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA151_1292==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA151_1292==IS) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA151_1292==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA151_1292==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA151_1292==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA151_1292==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA151_1292==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA151_1292==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA151_1292==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA151_1292==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA151_1292==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA151_1292==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA151_1292==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA151_1292==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                         
                        input.seek(index151_1292);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA151_1293 = input.LA(1);

                         
                        int index151_1293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1293==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA151_1293==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA151_1293==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA151_1293==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA151_1293==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA151_1293==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA151_1293==LT) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA151_1293==GT) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA151_1293==LE) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA151_1293==GE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA151_1293==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA151_1293==IS) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA151_1293==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA151_1293==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA151_1293==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA151_1293==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA151_1293==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA151_1293==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA151_1293==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA151_1293==RPAREN) ) {s = 2050;}

                        else if ( (LA151_1293==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA151_1293==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA151_1293==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA151_1293==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA151_1293==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                         
                        input.seek(index151_1293);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA151_1354 = input.LA(1);

                         
                        int index151_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1354==RPAREN) ) {s = 2056;}

                        else if ( (LA151_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA151_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA151_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA151_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA151_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA151_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA151_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA151_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA151_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA151_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA151_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA151_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA151_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA151_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA151_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA151_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA151_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA151_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA151_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA151_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA151_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA151_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA151_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA151_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                         
                        input.seek(index151_1354);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA151_1355 = input.LA(1);

                         
                        int index151_1355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1355==RPAREN) ) {s = 2081;}

                        else if ( (LA151_1355==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA151_1355==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA151_1355==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA151_1355==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA151_1355==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA151_1355==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA151_1355==LT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA151_1355==GT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA151_1355==LE) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA151_1355==GE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA151_1355==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA151_1355==IS) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA151_1355==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA151_1355==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA151_1355==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA151_1355==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA151_1355==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA151_1355==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA151_1355==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA151_1355==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA151_1355==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA151_1355==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA151_1355==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA151_1355==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                         
                        input.seek(index151_1355);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA151_1416 = input.LA(1);

                         
                        int index151_1416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1416==RPAREN) ) {s = 2106;}

                        else if ( (LA151_1416==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA151_1416==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA151_1416==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA151_1416==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA151_1416==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA151_1416==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA151_1416==LT) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA151_1416==GT) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA151_1416==LE) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA151_1416==GE) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA151_1416==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA151_1416==IS) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA151_1416==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA151_1416==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA151_1416==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA151_1416==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA151_1416==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA151_1416==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA151_1416==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA151_1416==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA151_1416==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA151_1416==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA151_1416==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA151_1416==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                         
                        input.seek(index151_1416);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA151_1417 = input.LA(1);

                         
                        int index151_1417 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1417==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA151_1417==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA151_1417==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA151_1417==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA151_1417==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA151_1417==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA151_1417==LT) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA151_1417==GT) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA151_1417==LE) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA151_1417==GE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA151_1417==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA151_1417==IS) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA151_1417==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA151_1417==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA151_1417==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA151_1417==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA151_1417==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA151_1417==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA151_1417==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA151_1417==RPAREN) ) {s = 2150;}

                        else if ( (LA151_1417==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA151_1417==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA151_1417==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA151_1417==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA151_1417==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                         
                        input.seek(index151_1417);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA151_1478 = input.LA(1);

                         
                        int index151_1478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1478==RPAREN) ) {s = 2156;}

                        else if ( (LA151_1478==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA151_1478==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA151_1478==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA151_1478==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA151_1478==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA151_1478==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA151_1478==LT) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA151_1478==GT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA151_1478==LE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA151_1478==GE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA151_1478==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA151_1478==IS) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA151_1478==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA151_1478==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA151_1478==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA151_1478==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA151_1478==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA151_1478==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA151_1478==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA151_1478==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA151_1478==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA151_1478==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA151_1478==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA151_1478==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA151_1478==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                         
                        input.seek(index151_1478);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA151_1479 = input.LA(1);

                         
                        int index151_1479 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1479==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA151_1479==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA151_1479==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA151_1479==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA151_1479==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA151_1479==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA151_1479==LT) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA151_1479==GT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA151_1479==LE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA151_1479==GE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA151_1479==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA151_1479==IS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA151_1479==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA151_1479==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA151_1479==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA151_1479==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA151_1479==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA151_1479==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA151_1479==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA151_1479==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA151_1479==RPAREN) ) {s = 2202;}

                        else if ( (LA151_1479==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA151_1479==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA151_1479==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA151_1479==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA151_1479==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                         
                        input.seek(index151_1479);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA151_1541 = input.LA(1);

                         
                        int index151_1541 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1541==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA151_1541==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA151_1541==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA151_1541==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA151_1541==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA151_1541==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA151_1541==LT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA151_1541==GT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA151_1541==LE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA151_1541==GE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA151_1541==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA151_1541==IS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA151_1541==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA151_1541==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA151_1541==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA151_1541==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA151_1541==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA151_1541==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA151_1541==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA151_1541==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA151_1541==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA151_1541==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA151_1541==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA151_1541==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA151_1541==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA151_1541==RPAREN) ) {s = 14;}

                         
                        input.seek(index151_1541);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA151_1542 = input.LA(1);

                         
                        int index151_1542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1542==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA151_1542==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA151_1542==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA151_1542==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA151_1542==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA151_1542==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA151_1542==LT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA151_1542==GT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA151_1542==LE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA151_1542==GE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA151_1542==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA151_1542==IS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA151_1542==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA151_1542==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA151_1542==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA151_1542==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA151_1542==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA151_1542==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA151_1542==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA151_1542==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA151_1542==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA151_1542==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA151_1542==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA151_1542==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA151_1542==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA151_1542==RPAREN) ) {s = 14;}

                         
                        input.seek(index151_1542);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA151_1601 = input.LA(1);

                         
                        int index151_1601 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1601==RPAREN) ) {s = 14;}

                        else if ( (LA151_1601==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA151_1601==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA151_1601==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA151_1601==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA151_1601==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA151_1601==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA151_1601==LT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA151_1601==GT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA151_1601==LE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA151_1601==GE) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA151_1601==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA151_1601==IS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA151_1601==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA151_1601==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA151_1601==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA151_1601==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA151_1601==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA151_1601==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA151_1601==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA151_1601==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA151_1601==AS) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA151_1601==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA151_1601==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA151_1601==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA151_1601==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA151_1601==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                         
                        input.seek(index151_1601);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA151_1602 = input.LA(1);

                         
                        int index151_1602 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA151_1602==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA151_1602==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA151_1602==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA151_1602==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA151_1602==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA151_1602==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA151_1602==LT) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA151_1602==GT) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA151_1602==LE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA151_1602==GE) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA151_1602==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA151_1602==IS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                        else if ( (LA151_1602==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2299;}

                        else if ( (LA151_1602==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA151_1602==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA151_1602==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA151_1602==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA151_1602==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA151_1602==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA151_1602==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA151_1602==AS) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                        else if ( (LA151_1602==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA151_1602==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA151_1602==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA151_1602==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA151_1602==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA151_1602==RPAREN) ) {s = 14;}

                         
                        input.seek(index151_1602);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA151_1704 = input.LA(1);

                         
                        int index151_1704 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1704);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA151_1748 = input.LA(1);

                         
                        int index151_1748 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1748);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA151_1754 = input.LA(1);

                         
                        int index151_1754 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1754);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA151_1779 = input.LA(1);

                         
                        int index151_1779 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1779);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA151_1804 = input.LA(1);

                         
                        int index151_1804 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1804);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA151_1829 = input.LA(1);

                         
                        int index151_1829 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1829);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA151_1906 = input.LA(1);

                         
                        int index151_1906 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1906);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA151_1950 = input.LA(1);

                         
                        int index151_1950 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1950);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA151_1956 = input.LA(1);

                         
                        int index151_1956 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_1956);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA151_2000 = input.LA(1);

                         
                        int index151_2000 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2000);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA151_2006 = input.LA(1);

                         
                        int index151_2006 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2006);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA151_2050 = input.LA(1);

                         
                        int index151_2050 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2050);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA151_2056 = input.LA(1);

                         
                        int index151_2056 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2056);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA151_2081 = input.LA(1);

                         
                        int index151_2081 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2081);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA151_2106 = input.LA(1);

                         
                        int index151_2106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2106);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA151_2150 = input.LA(1);

                         
                        int index151_2150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2150);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA151_2156 = input.LA(1);

                         
                        int index151_2156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2156);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA151_2202 = input.LA(1);

                         
                        int index151_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index151_2202);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\u0490\uffff";
    static final String DFA177_eofS =
        "\1\uffff\1\110\1\u0082\6\uffff\1\u00bc\1\u00f6\u0108\uffff\1\u0240"+
        "\1\u027a\1\u02b4\1\u02ee\145\uffff\1\u035c\1\u0396\1\u03d0\1\u040a"+
        "\u0310\uffff";
    static final String DFA177_minS =
        "\1\5\2\6\6\uffff\2\6\40\uffff\1\5\2\uffff\1\5\72\uffff\1\5\67\uffff"+
        "\1\5\71\uffff\1\5\67\uffff\4\6\46\uffff\2\6\75\uffff\4\6\46\uffff"+
        "\2\6\75\uffff\2\6\77\uffff\1\0\66\uffff\1\0\2\uffff\1\0\71\uffff"+
        "\1\0\160\uffff\2\0\55\uffff\1\0\7\uffff\1\0\66\uffff\1\0\2\uffff"+
        "\1\0\71\uffff\1\0\160\uffff\2\0\55\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\5\uffff";
    static final String DFA177_maxS =
        "\1\u0119\2\u0118\6\uffff\2\u0118\40\uffff\1\u0119\2\uffff\1\u011b"+
        "\72\uffff\1\u0119\67\uffff\1\u011b\71\uffff\1\u011b\67\uffff\4\u0118"+
        "\46\uffff\2\u0113\75\uffff\4\u0118\46\uffff\2\u0113\75\uffff\2\u0113"+
        "\77\uffff\1\0\66\uffff\1\0\2\uffff\1\0\71\uffff\1\0\160\uffff\2"+
        "\0\55\uffff\1\0\7\uffff\1\0\66\uffff\1\0\2\uffff\1\0\71\uffff\1"+
        "\0\160\uffff\2\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff";
    static final String DFA177_acceptS =
        "\3\uffff\6\1\2\uffff\40\1\1\uffff\2\1\1\uffff\72\1\1\uffff\67\1"+
        "\1\uffff\71\1\1\uffff\67\1\4\uffff\46\1\2\uffff\1\2\100\uffff\46"+
        "\1\176\uffff\2\1\1\uffff\66\1\1\uffff\2\1\1\uffff\71\1\1\uffff\160"+
        "\1\65\uffff\2\1\1\uffff\66\1\1\uffff\2\1\1\uffff\71\1\1\uffff\160"+
        "\1\151\uffff";
    static final String DFA177_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\40\uffff\1\5\75\uffff\1\6\u00a9\uffff"+
        "\1\7\1\10\1\11\1\12\145\uffff\1\13\1\14\1\15\1\16\u00a6\uffff\1"+
        "\17\66\uffff\1\20\2\uffff\1\21\71\uffff\1\22\160\uffff\1\23\1\24"+
        "\55\uffff\1\25\7\uffff\1\26\66\uffff\1\27\2\uffff\1\30\71\uffff"+
        "\1\31\160\uffff\1\32\1\33\55\uffff\1\34\5\uffff\1\35\55\uffff\1"+
        "\36\5\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\21\uffff\1\47\2\uffff\1\50\1\51\1\52"+
            "\u0091\uffff\1\1\36\uffff\1\2",
            "\1\140\1\141\1\142\1\143\1\144\1\102\1\101\1\137\2\uffff\1"+
            "\114\1\115\14\uffff\1\126\1\130\1\125\1\127\1\116\7\uffff\1"+
            "\73\1\uffff\1\103\1\104\1\uffff\1\120\2\uffff\1\105\3\uffff"+
            "\1\111\1\uffff\1\106\1\123\1\124\6\uffff\1\122\26\uffff\1\136"+
            "\1\135\1\134\6\uffff\1\107\3\uffff\1\117\3\uffff\1\121\u008f"+
            "\uffff\1\113\1\uffff\1\72\1\53\1\56\1\112\1\60\1\77\1\63\1\57"+
            "\1\55\1\132\1\131\2\uffff\1\76\1\100\1\74\1\75\1\66\1\67\1\70"+
            "\1\71\1\65\1\64\1\61\1\62\1\uffff\1\133\2\uffff\1\54",
            "\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\174\1\173\1\u0099"+
            "\2\uffff\1\u0086\1\u0087\14\uffff\1\u0090\1\u0092\1\u008f\1"+
            "\u0091\1\u0088\7\uffff\1\165\1\uffff\1\175\1\176\1\uffff\1\u008a"+
            "\2\uffff\1\177\3\uffff\1\u0083\1\uffff\1\u0080\1\u008d\1\u008e"+
            "\6\uffff\1\u008c\26\uffff\1\u0098\1\u0097\1\u0096\6\uffff\1"+
            "\u0081\3\uffff\1\u0089\3\uffff\1\u008b\u008f\uffff\1\u0085\1"+
            "\uffff\1\164\1\151\1\147\1\u0084\1\152\1\171\1\155\1\150\1\146"+
            "\1\u0094\1\u0093\2\uffff\1\170\1\172\1\166\1\167\1\160\1\161"+
            "\1\162\1\163\1\157\1\156\1\153\1\154\1\uffff\1\u0095\2\uffff"+
            "\1\145",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\u00b6\1\u00b5\1"+
            "\u00d3\2\uffff\1\u00c0\1\u00c1\14\uffff\1\u00ca\1\u00cc\1\u00c9"+
            "\1\u00cb\1\u00c2\7\uffff\1\u00af\1\uffff\1\u00b7\1\u00b8\1\uffff"+
            "\1\u00c4\2\uffff\1\u00b9\3\uffff\1\u00bd\1\uffff\1\u00ba\1\u00c7"+
            "\1\u00c8\6\uffff\1\u00c6\26\uffff\1\u00d2\1\u00d1\1\u00d0\6"+
            "\uffff\1\u00bb\3\uffff\1\u00c3\3\uffff\1\u00c5\u008f\uffff\1"+
            "\u00bf\1\uffff\1\u00ae\1\u00a3\1\u00a1\1\u00be\1\u00a4\1\u00b3"+
            "\1\u00a7\1\u00a2\1\u00a0\1\u00ce\1\u00cd\2\uffff\1\u00b2\1\u00b4"+
            "\1\u00b0\1\u00b1\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00a9\1\u00a8"+
            "\1\u00a5\1\u00a6\1\uffff\1\u00cf\2\uffff\1\u009f",
            "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u00f0\1\u00ef\1"+
            "\u010d\2\uffff\1\u00fa\1\u00fb\14\uffff\1\u0104\1\u0106\1\u0103"+
            "\1\u0105\1\u00fc\7\uffff\1\u00e9\1\uffff\1\u00f1\1\u00f2\1\uffff"+
            "\1\u00fe\2\uffff\1\u00f3\3\uffff\1\u00f7\1\uffff\1\u00f4\1\u0101"+
            "\1\u0102\6\uffff\1\u0100\26\uffff\1\u010c\1\u010b\1\u010a\6"+
            "\uffff\1\u00f5\3\uffff\1\u00fd\3\uffff\1\u00ff\u008f\uffff\1"+
            "\u00f9\1\uffff\1\u00e8\1\u00dd\1\u00db\1\u00f8\1\u00de\1\u00ed"+
            "\1\u00e1\1\u00dc\1\u00da\1\u0108\1\u0107\2\uffff\1\u00ec\1\u00ee"+
            "\1\u00ea\1\u00eb\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e3\1\u00e2"+
            "\1\u00df\1\u00e0\1\uffff\1\u0109\2\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0133\4\uffff\1\u0119\3\uffff\1\u011a\3\uffff\1\u011b\1"+
            "\u011c\1\u0114\1\u0115\1\u011d\1\u011e\1\u011f\1\u0120\1\u0118"+
            "\10\uffff\1\u0136\1\uffff\1\u0138\1\u0134\1\u0135\1\u0137\12"+
            "\uffff\1\u0121\1\u0122\1\u0123\10\uffff\1\u0124\1\u0125\1\u0126"+
            "\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\uffff\1\u012d\1\u012e"+
            "\1\u012f\1\u0130\2\uffff\1\u0131\1\uffff\1\u0132\1\u0127\1\u0117"+
            "\21\uffff\1\u0139\2\uffff\1\u013a\1\u013b\1\u013c\u0091\uffff"+
            "\1\u0113\36\uffff\1\u0116",
            "",
            "",
            "\1\u013f\4\uffff\1\u013f\2\uffff\2\u013f\3\uffff\11\u013f"+
            "\1\uffff\1\u013f\6\uffff\1\u013f\1\uffff\4\u013f\5\uffff\2\u013f"+
            "\3\uffff\3\u013f\10\uffff\16\u013f\1\uffff\1\u013f\1\uffff\3"+
            "\u013f\14\uffff\3\u013f\2\uffff\1\u013f\2\uffff\3\u013f\u0082"+
            "\uffff\1\u013f\16\uffff\1\u013f\2\uffff\2\u013f\2\uffff\2\u013f"+
            "\3\uffff\1\u013d\1\u013e\11\uffff\1\u013f\2\uffff\1\u013f\1"+
            "\uffff\1\u013f\2\uffff\3\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u019c\4\uffff\1\u0182\3\uffff\1\u0183\3\uffff\1\u0184\1"+
            "\u0185\1\u017d\1\u017e\1\u0186\1\u0187\1\u0188\1\u0189\1\u0181"+
            "\10\uffff\1\u019f\1\uffff\1\u01a1\1\u019d\1\u019e\1\u01a0\12"+
            "\uffff\1\u018a\1\u018b\1\u018c\10\uffff\1\u018d\1\u018e\1\u018f"+
            "\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\uffff\1\u0196\1\u0197"+
            "\1\u0198\1\u0199\2\uffff\1\u019a\1\uffff\1\u019b\1\u0190\1\u0180"+
            "\21\uffff\1\u01a2\2\uffff\1\u01a3\1\u01a4\1\u01a5\u0091\uffff"+
            "\1\u017c\36\uffff\1\u017f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013f\4\uffff\1\u013f\2\uffff\2\u013f\3\uffff\11\u013f"+
            "\1\uffff\1\u013f\6\uffff\1\u013f\1\uffff\4\u013f\5\uffff\2\u013f"+
            "\3\uffff\3\u013f\10\uffff\16\u013f\1\uffff\1\u013f\1\uffff\3"+
            "\u013f\14\uffff\3\u013f\2\uffff\1\u013f\2\uffff\3\u013f\u0082"+
            "\uffff\1\u013f\16\uffff\1\u013f\2\uffff\2\u013f\2\uffff\2\u013f"+
            "\3\uffff\1\u01a6\1\u01a7\11\uffff\1\u013f\2\uffff\1\u013f\1"+
            "\uffff\1\u013f\2\uffff\3\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013f\4\uffff\1\u013f\2\uffff\2\u013f\3\uffff\11\u013f"+
            "\1\uffff\1\u013f\6\uffff\1\u013f\1\uffff\4\u013f\5\uffff\2\u013f"+
            "\3\uffff\3\u013f\10\uffff\16\u013f\1\uffff\1\u013f\1\uffff\3"+
            "\u013f\14\uffff\3\u013f\2\uffff\1\u013f\2\uffff\3\u013f\u0082"+
            "\uffff\1\u013f\16\uffff\1\u013f\2\uffff\2\u013f\2\uffff\2\u013f"+
            "\3\uffff\1\u01e5\1\u01e6\11\uffff\1\u013f\2\uffff\1\u013f\1"+
            "\uffff\1\u013f\2\uffff\3\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0258\1\u0259\1\u025a\1\u025b\1\u025c\1\u023a\1\u0239\1"+
            "\u0257\2\uffff\1\u0244\1\u0245\14\uffff\1\u024e\1\u0250\1\u024d"+
            "\1\u024f\1\u0246\7\uffff\1\u0233\1\uffff\1\u023b\1\u023c\1\uffff"+
            "\1\u0248\2\uffff\1\u023d\3\uffff\1\u0241\1\uffff\1\u023e\1\u024b"+
            "\1\u024c\6\uffff\1\u024a\26\uffff\1\u0256\1\u0255\1\u0254\6"+
            "\uffff\1\u023f\3\uffff\1\u0247\3\uffff\1\u0249\u008f\uffff\1"+
            "\u0243\1\uffff\1\u0232\1\u025d\1\u0226\1\u0242\1\u0228\1\u0237"+
            "\1\u022b\1\u0227\1\u0225\1\u0252\1\u0251\2\uffff\1\u0236\1\u0238"+
            "\1\u0234\1\u0235\1\u022e\1\u022f\1\u0230\1\u0231\1\u022d\1\u022c"+
            "\1\u0229\1\u022a\1\uffff\1\u0253\2\uffff\1\u0224",
            "\1\u0292\1\u0293\1\u0294\1\u0295\1\u0296\1\u0274\1\u0273\1"+
            "\u0291\2\uffff\1\u027e\1\u027f\14\uffff\1\u0288\1\u028a\1\u0287"+
            "\1\u0289\1\u0280\7\uffff\1\u026d\1\uffff\1\u0275\1\u0276\1\uffff"+
            "\1\u0282\2\uffff\1\u0277\3\uffff\1\u027b\1\uffff\1\u0278\1\u0285"+
            "\1\u0286\6\uffff\1\u0284\26\uffff\1\u0290\1\u028f\1\u028e\6"+
            "\uffff\1\u0279\3\uffff\1\u0281\3\uffff\1\u0283\u008f\uffff\1"+
            "\u027d\1\uffff\1\u026c\1\u0297\1\u0260\1\u027c\1\u0262\1\u0271"+
            "\1\u0265\1\u0261\1\u025f\1\u028c\1\u028b\2\uffff\1\u0270\1\u0272"+
            "\1\u026e\1\u026f\1\u0268\1\u0269\1\u026a\1\u026b\1\u0267\1\u0266"+
            "\1\u0263\1\u0264\1\uffff\1\u028d\2\uffff\1\u025e",
            "\1\u02cc\1\u02cd\1\u02ce\1\u02cf\1\u02d0\1\u02ae\1\u02ad\1"+
            "\u02cb\2\uffff\1\u02b8\1\u02b9\14\uffff\1\u02c2\1\u02c4\1\u02c1"+
            "\1\u02c3\1\u02ba\7\uffff\1\u02a7\1\uffff\1\u02af\1\u02b0\1\uffff"+
            "\1\u02bc\2\uffff\1\u02b1\3\uffff\1\u02b5\1\uffff\1\u02b2\1\u02bf"+
            "\1\u02c0\6\uffff\1\u02be\26\uffff\1\u02ca\1\u02c9\1\u02c8\6"+
            "\uffff\1\u02b3\3\uffff\1\u02bb\3\uffff\1\u02bd\u008f\uffff\1"+
            "\u02b7\1\uffff\1\u02a6\1\u02d1\1\u029a\1\u02b6\1\u029c\1\u02ab"+
            "\1\u029f\1\u029b\1\u0299\1\u02c6\1\u02c5\2\uffff\1\u02aa\1\u02ac"+
            "\1\u02a8\1\u02a9\1\u02a2\1\u02a3\1\u02a4\1\u02a5\1\u02a1\1\u02a0"+
            "\1\u029d\1\u029e\1\uffff\1\u02c7\2\uffff\1\u0298",
            "\1\u0306\1\u0307\1\u0308\1\u0309\1\u030a\1\u02e8\1\u02e7\1"+
            "\u0305\2\uffff\1\u02f2\1\u02f3\14\uffff\1\u02fc\1\u02fe\1\u02fb"+
            "\1\u02fd\1\u02f4\7\uffff\1\u02e1\1\uffff\1\u02e9\1\u02ea\1\uffff"+
            "\1\u02f6\2\uffff\1\u02eb\3\uffff\1\u02ef\1\uffff\1\u02ec\1\u02f9"+
            "\1\u02fa\6\uffff\1\u02f8\26\uffff\1\u0304\1\u0303\1\u0302\6"+
            "\uffff\1\u02ed\3\uffff\1\u02f5\3\uffff\1\u02f7\u008f\uffff\1"+
            "\u02f1\1\uffff\1\u02e0\1\u030b\1\u02d4\1\u02f0\1\u02d6\1\u02e5"+
            "\1\u02d9\1\u02d5\1\u02d3\1\u0300\1\u02ff\2\uffff\1\u02e4\1\u02e6"+
            "\1\u02e2\1\u02e3\1\u02dc\1\u02dd\1\u02de\1\u02df\1\u02db\1\u02da"+
            "\1\u02d7\1\u02d8\1\uffff\1\u0301\2\uffff\1\u02d2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u030c\3\u013f\6\uffff\14\u013f",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u033a\3\u013f\6\uffff\14\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0374\1\u0375\1\u0376\1\u0377\1\u0378\1\u0356\1\u0355\1"+
            "\u0373\2\uffff\1\u0360\1\u0361\14\uffff\1\u036a\1\u036c\1\u0369"+
            "\1\u036b\1\u0362\7\uffff\1\u034f\1\uffff\1\u0357\1\u0358\1\uffff"+
            "\1\u0364\2\uffff\1\u0359\3\uffff\1\u035d\1\uffff\1\u035a\1\u0367"+
            "\1\u0368\6\uffff\1\u0366\26\uffff\1\u0372\1\u0371\1\u0370\6"+
            "\uffff\1\u035b\3\uffff\1\u0363\3\uffff\1\u0365\u008f\uffff\1"+
            "\u035f\1\uffff\1\u034e\1\u0379\1\u0342\1\u035e\1\u0344\1\u0353"+
            "\1\u0347\1\u0343\1\u0341\1\u036e\1\u036d\2\uffff\1\u0352\1\u0354"+
            "\1\u0350\1\u0351\1\u034a\1\u034b\1\u034c\1\u034d\1\u0349\1\u0348"+
            "\1\u0345\1\u0346\1\uffff\1\u036f\2\uffff\1\u0340",
            "\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u0390\1\u038f\1"+
            "\u03ad\2\uffff\1\u039a\1\u039b\14\uffff\1\u03a4\1\u03a6\1\u03a3"+
            "\1\u03a5\1\u039c\7\uffff\1\u0389\1\uffff\1\u0391\1\u0392\1\uffff"+
            "\1\u039e\2\uffff\1\u0393\3\uffff\1\u0397\1\uffff\1\u0394\1\u03a1"+
            "\1\u03a2\6\uffff\1\u03a0\26\uffff\1\u03ac\1\u03ab\1\u03aa\6"+
            "\uffff\1\u0395\3\uffff\1\u039d\3\uffff\1\u039f\u008f\uffff\1"+
            "\u0399\1\uffff\1\u0388\1\u03b3\1\u037c\1\u0398\1\u037e\1\u038d"+
            "\1\u0381\1\u037d\1\u037b\1\u03a8\1\u03a7\2\uffff\1\u038c\1\u038e"+
            "\1\u038a\1\u038b\1\u0384\1\u0385\1\u0386\1\u0387\1\u0383\1\u0382"+
            "\1\u037f\1\u0380\1\uffff\1\u03a9\2\uffff\1\u037a",
            "\1\u03e8\1\u03e9\1\u03ea\1\u03eb\1\u03ec\1\u03ca\1\u03c9\1"+
            "\u03e7\2\uffff\1\u03d4\1\u03d5\14\uffff\1\u03de\1\u03e0\1\u03dd"+
            "\1\u03df\1\u03d6\7\uffff\1\u03c3\1\uffff\1\u03cb\1\u03cc\1\uffff"+
            "\1\u03d8\2\uffff\1\u03cd\3\uffff\1\u03d1\1\uffff\1\u03ce\1\u03db"+
            "\1\u03dc\6\uffff\1\u03da\26\uffff\1\u03e6\1\u03e5\1\u03e4\6"+
            "\uffff\1\u03cf\3\uffff\1\u03d7\3\uffff\1\u03d9\u008f\uffff\1"+
            "\u03d3\1\uffff\1\u03c2\1\u03ed\1\u03b6\1\u03d2\1\u03b8\1\u03c7"+
            "\1\u03bb\1\u03b7\1\u03b5\1\u03e2\1\u03e1\2\uffff\1\u03c6\1\u03c8"+
            "\1\u03c4\1\u03c5\1\u03be\1\u03bf\1\u03c0\1\u03c1\1\u03bd\1\u03bc"+
            "\1\u03b9\1\u03ba\1\uffff\1\u03e3\2\uffff\1\u03b4",
            "\1\u0422\1\u0423\1\u0424\1\u0425\1\u0426\1\u0404\1\u0403\1"+
            "\u0421\2\uffff\1\u040e\1\u040f\14\uffff\1\u0418\1\u041a\1\u0417"+
            "\1\u0419\1\u0410\7\uffff\1\u03fd\1\uffff\1\u0405\1\u0406\1\uffff"+
            "\1\u0412\2\uffff\1\u0407\3\uffff\1\u040b\1\uffff\1\u0408\1\u0415"+
            "\1\u0416\6\uffff\1\u0414\26\uffff\1\u0420\1\u041f\1\u041e\6"+
            "\uffff\1\u0409\3\uffff\1\u0411\3\uffff\1\u0413\u008f\uffff\1"+
            "\u040d\1\uffff\1\u03fc\1\u0427\1\u03f0\1\u040c\1\u03f2\1\u0401"+
            "\1\u03f5\1\u03f1\1\u03ef\1\u041c\1\u041b\2\uffff\1\u0400\1\u0402"+
            "\1\u03fe\1\u03ff\1\u03f8\1\u03f9\1\u03fa\1\u03fb\1\u03f7\1\u03f6"+
            "\1\u03f3\1\u03f4\1\uffff\1\u041d\2\uffff\1\u03ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u0428\3\u013f\6\uffff\14\u013f",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u0456\3\u013f\6\uffff\14\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u045c\3\u013f\6\uffff\14\u013f",
            "\4\u013f\1\uffff\3\u013f\34\uffff\1\u013f\u00ce\uffff\1\u013f"+
            "\1\uffff\1\u013f\2\uffff\1\u048a\3\u013f\6\uffff\14\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "1204:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_0==IDENT) ) {s = 1;}

                        else if ( (LA177_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA177_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA177_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA177_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA177_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA177_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA177_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA177_0==MAX) ) {s = 9;}

                        else if ( (LA177_0==MIN) ) {s = 10;}

                        else if ( (LA177_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA177_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA177_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA177_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA177_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA177_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA177_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA177_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA177_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA177_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA177_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA177_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA177_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA177_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA177_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA177_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA177_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA177_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA177_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA177_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA177_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA177_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA177_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA177_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA177_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA177_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA177_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA177_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA177_0==UPDATE) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA177_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA177_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA177_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA177_1 = input.LA(1);

                         
                        int index177_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_1==DOT) ) {s = 43;}

                        else if ( (LA177_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA177_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA177_1==LPAREN) ) {s = 46;}

                        else if ( (LA177_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA177_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA177_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA177_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA177_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA177_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA177_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA177_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA177_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA177_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA177_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA177_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA177_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA177_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA177_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA177_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA177_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA177_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA177_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA177_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA177_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA177_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA177_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA177_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA177_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA177_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA177_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA177_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA177_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA177_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA177_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA177_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA177_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA177_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA177_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA177_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA177_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA177_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA177_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA177_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA177_1==END) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA177_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA177_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA177_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA177_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA177_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA177_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA177_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA177_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA177_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA177_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA177_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA177_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA177_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                         
                        input.seek(index177_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA177_2 = input.LA(1);

                         
                        int index177_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA177_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA177_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA177_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA177_2==DOT) ) {s = 105;}

                        else if ( (LA177_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA177_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA177_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA177_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA177_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA177_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA177_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA177_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA177_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA177_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA177_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA177_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA177_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA177_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA177_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA177_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA177_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA177_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA177_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA177_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA177_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA177_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA177_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA177_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA177_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA177_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA177_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA177_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA177_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA177_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA177_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA177_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA177_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA177_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA177_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA177_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA177_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA177_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA177_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA177_2==END) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA177_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA177_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA177_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA177_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA177_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA177_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA177_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA177_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA177_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA177_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA177_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA177_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA177_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                         
                        input.seek(index177_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA177_9 = input.LA(1);

                         
                        int index177_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA177_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA177_9==LPAREN) ) {s = 161;}

                        else if ( (LA177_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA177_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA177_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA177_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA177_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA177_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA177_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA177_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA177_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA177_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA177_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA177_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA177_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA177_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA177_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA177_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA177_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA177_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA177_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA177_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA177_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA177_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA177_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA177_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA177_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA177_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA177_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA177_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA177_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA177_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA177_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA177_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA177_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA177_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA177_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA177_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA177_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA177_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA177_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA177_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA177_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA177_9==END) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA177_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA177_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA177_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA177_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA177_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA177_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA177_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA177_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA177_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA177_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA177_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA177_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA177_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                         
                        input.seek(index177_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA177_10 = input.LA(1);

                         
                        int index177_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA177_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA177_10==LPAREN) ) {s = 219;}

                        else if ( (LA177_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA177_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA177_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA177_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA177_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA177_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA177_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA177_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA177_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA177_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA177_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA177_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA177_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA177_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA177_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA177_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA177_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA177_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA177_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA177_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA177_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA177_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA177_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA177_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA177_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA177_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA177_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA177_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA177_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA177_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA177_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA177_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA177_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA177_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA177_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA177_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA177_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA177_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA177_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA177_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA177_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA177_10==END) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA177_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA177_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA177_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA177_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA177_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA177_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA177_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA177_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA177_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA177_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA177_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA177_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA177_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                         
                        input.seek(index177_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA177_43 = input.LA(1);

                         
                        int index177_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_43==IDENT) ) {s = 275;}

                        else if ( (LA177_43==MAX) ) {s = 276;}

                        else if ( (LA177_43==MIN) ) {s = 277;}

                        else if ( (LA177_43==TICKED_STRING_LITERAL) ) {s = 278;}

                        else if ( (LA177_43==AT) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA177_43==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA177_43==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA177_43==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA177_43==SUM) && (synpred4_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA177_43==AVG) && (synpred4_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA177_43==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA177_43==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA177_43==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA177_43==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA177_43==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA177_43==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA177_43==LAST) && (synpred4_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA177_43==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA177_43==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA177_43==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA177_43==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA177_43==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA177_43==SQL) && (synpred4_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA177_43==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA177_43==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA177_43==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA177_43==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA177_43==LW) && (synpred4_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA177_43==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA177_43==CAST) && (synpred4_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA177_43==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA177_43==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA177_43==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA177_43==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA177_43==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA177_43==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA177_43==FULL) && (synpred4_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA177_43==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA177_43==UPDATE) && (synpred4_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA177_43==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA177_43==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA177_43==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 316;}

                         
                        input.seek(index177_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA177_105 = input.LA(1);

                         
                        int index177_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_105==IDENT) ) {s = 380;}

                        else if ( (LA177_105==MAX) ) {s = 381;}

                        else if ( (LA177_105==MIN) ) {s = 382;}

                        else if ( (LA177_105==TICKED_STRING_LITERAL) ) {s = 383;}

                        else if ( (LA177_105==AT) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA177_105==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA177_105==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA177_105==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA177_105==SUM) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA177_105==AVG) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA177_105==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA177_105==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA177_105==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA177_105==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA177_105==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA177_105==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA177_105==LAST) && (synpred4_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA177_105==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA177_105==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA177_105==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA177_105==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA177_105==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA177_105==SQL) && (synpred4_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA177_105==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA177_105==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA177_105==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA177_105==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA177_105==LW) && (synpred4_EsperEPL2Grammar())) {s = 407;}

                        else if ( (LA177_105==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 408;}

                        else if ( (LA177_105==CAST) && (synpred4_EsperEPL2Grammar())) {s = 409;}

                        else if ( (LA177_105==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 410;}

                        else if ( (LA177_105==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 411;}

                        else if ( (LA177_105==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 412;}

                        else if ( (LA177_105==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 413;}

                        else if ( (LA177_105==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 414;}

                        else if ( (LA177_105==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 415;}

                        else if ( (LA177_105==FULL) && (synpred4_EsperEPL2Grammar())) {s = 416;}

                        else if ( (LA177_105==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 417;}

                        else if ( (LA177_105==UPDATE) && (synpred4_EsperEPL2Grammar())) {s = 418;}

                        else if ( (LA177_105==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 419;}

                        else if ( (LA177_105==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 420;}

                        else if ( (LA177_105==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 421;}

                         
                        input.seek(index177_105);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA177_275 = input.LA(1);

                         
                        int index177_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_275==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 548;}

                        else if ( (LA177_275==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 549;}

                        else if ( (LA177_275==LPAREN) ) {s = 550;}

                        else if ( (LA177_275==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 551;}

                        else if ( (LA177_275==STAR) && (synpred4_EsperEPL2Grammar())) {s = 552;}

                        else if ( (LA177_275==DIV) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA177_275==MOD) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA177_275==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 555;}

                        else if ( (LA177_275==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA177_275==LOR) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA177_275==LT) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA177_275==GT) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA177_275==LE) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                        else if ( (LA177_275==GE) && (synpred4_EsperEPL2Grammar())) {s = 561;}

                        else if ( (LA177_275==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA177_275==IS) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA177_275==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA177_275==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA177_275==BAND) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA177_275==BOR) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA177_275==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA177_275==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA177_275==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA177_275==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA177_275==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA177_275==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA177_275==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA177_275==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA177_275==EOF) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA177_275==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA177_275==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA177_275==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA177_275==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA177_275==AS) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA177_275==FROM) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA177_275==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA177_275==ALL) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA177_275==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA177_275==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA177_275==ASC) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA177_275==DESC) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA177_275==THEN) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA177_275==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA177_275==END) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA177_275==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA177_275==COLON) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA177_275==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA177_275==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA177_275==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA177_275==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA177_275==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA177_275==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA177_275==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA177_275==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA177_275==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA177_275==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA177_275==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA177_275==DOT) ) {s = 605;}

                         
                        input.seek(index177_275);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA177_276 = input.LA(1);

                         
                        int index177_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_276==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA177_276==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA177_276==LPAREN) ) {s = 608;}

                        else if ( (LA177_276==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA177_276==STAR) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA177_276==DIV) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA177_276==MOD) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA177_276==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA177_276==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA177_276==LOR) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA177_276==LT) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA177_276==GT) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA177_276==LE) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA177_276==GE) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA177_276==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA177_276==IS) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA177_276==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA177_276==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA177_276==BAND) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA177_276==BOR) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA177_276==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA177_276==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA177_276==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA177_276==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA177_276==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA177_276==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA177_276==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA177_276==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA177_276==EOF) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA177_276==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA177_276==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA177_276==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA177_276==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA177_276==AS) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA177_276==FROM) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA177_276==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA177_276==ALL) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA177_276==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA177_276==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA177_276==ASC) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA177_276==DESC) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA177_276==THEN) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA177_276==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA177_276==END) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA177_276==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA177_276==COLON) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA177_276==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA177_276==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA177_276==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA177_276==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA177_276==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA177_276==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA177_276==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA177_276==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA177_276==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA177_276==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA177_276==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA177_276==DOT) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                         
                        input.seek(index177_276);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA177_277 = input.LA(1);

                         
                        int index177_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_277==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA177_277==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA177_277==LPAREN) ) {s = 666;}

                        else if ( (LA177_277==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA177_277==STAR) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA177_277==DIV) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA177_277==MOD) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA177_277==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA177_277==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA177_277==LOR) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA177_277==LT) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA177_277==GT) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA177_277==LE) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA177_277==GE) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA177_277==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA177_277==IS) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA177_277==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA177_277==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA177_277==BAND) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA177_277==BOR) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA177_277==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA177_277==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA177_277==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA177_277==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA177_277==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA177_277==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA177_277==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA177_277==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA177_277==EOF) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA177_277==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA177_277==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA177_277==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA177_277==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA177_277==AS) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA177_277==FROM) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA177_277==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA177_277==ALL) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA177_277==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA177_277==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA177_277==ASC) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA177_277==DESC) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA177_277==THEN) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA177_277==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA177_277==END) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA177_277==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA177_277==COLON) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA177_277==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA177_277==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA177_277==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA177_277==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA177_277==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA177_277==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA177_277==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA177_277==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA177_277==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA177_277==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA177_277==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA177_277==DOT) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                         
                        input.seek(index177_277);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA177_278 = input.LA(1);

                         
                        int index177_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_278==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA177_278==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA177_278==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA177_278==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA177_278==STAR) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA177_278==DIV) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA177_278==MOD) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA177_278==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA177_278==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA177_278==LOR) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA177_278==LT) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA177_278==GT) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA177_278==LE) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA177_278==GE) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA177_278==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA177_278==IS) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA177_278==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA177_278==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA177_278==BAND) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA177_278==BOR) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA177_278==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA177_278==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA177_278==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA177_278==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA177_278==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA177_278==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA177_278==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA177_278==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA177_278==EOF) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA177_278==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA177_278==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA177_278==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA177_278==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA177_278==AS) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA177_278==FROM) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA177_278==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA177_278==ALL) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA177_278==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA177_278==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA177_278==ASC) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA177_278==DESC) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA177_278==THEN) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA177_278==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA177_278==END) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA177_278==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA177_278==COLON) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA177_278==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA177_278==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA177_278==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA177_278==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA177_278==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA177_278==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA177_278==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA177_278==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA177_278==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA177_278==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA177_278==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA177_278==DOT) ) {s = 779;}

                         
                        input.seek(index177_278);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA177_380 = input.LA(1);

                         
                        int index177_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_380==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA177_380==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA177_380==LPAREN) ) {s = 834;}

                        else if ( (LA177_380==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA177_380==STAR) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA177_380==DIV) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA177_380==MOD) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA177_380==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA177_380==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA177_380==LOR) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA177_380==LT) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA177_380==GT) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA177_380==LE) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA177_380==GE) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA177_380==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA177_380==IS) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA177_380==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA177_380==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA177_380==BAND) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA177_380==BOR) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA177_380==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA177_380==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA177_380==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA177_380==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA177_380==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA177_380==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA177_380==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA177_380==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA177_380==EOF) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA177_380==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA177_380==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA177_380==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA177_380==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA177_380==AS) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA177_380==FROM) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA177_380==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA177_380==ALL) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA177_380==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA177_380==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA177_380==ASC) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA177_380==DESC) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA177_380==THEN) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA177_380==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA177_380==END) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA177_380==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA177_380==COLON) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA177_380==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA177_380==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA177_380==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA177_380==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA177_380==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA177_380==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA177_380==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA177_380==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA177_380==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA177_380==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA177_380==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA177_380==DOT) ) {s = 889;}

                         
                        input.seek(index177_380);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA177_381 = input.LA(1);

                         
                        int index177_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_381==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA177_381==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA177_381==LPAREN) ) {s = 892;}

                        else if ( (LA177_381==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA177_381==STAR) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA177_381==DIV) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA177_381==MOD) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA177_381==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA177_381==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA177_381==LOR) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA177_381==LT) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA177_381==GT) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA177_381==LE) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA177_381==GE) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA177_381==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA177_381==IS) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA177_381==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA177_381==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA177_381==BAND) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA177_381==BOR) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA177_381==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA177_381==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA177_381==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA177_381==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA177_381==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA177_381==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA177_381==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA177_381==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA177_381==EOF) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA177_381==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA177_381==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA177_381==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA177_381==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA177_381==AS) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA177_381==FROM) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA177_381==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA177_381==ALL) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA177_381==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA177_381==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA177_381==ASC) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA177_381==DESC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA177_381==THEN) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA177_381==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA177_381==END) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA177_381==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA177_381==COLON) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA177_381==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA177_381==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA177_381==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA177_381==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA177_381==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA177_381==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA177_381==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA177_381==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA177_381==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA177_381==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA177_381==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA177_381==DOT) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                         
                        input.seek(index177_381);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA177_382 = input.LA(1);

                         
                        int index177_382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_382==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA177_382==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA177_382==LPAREN) ) {s = 950;}

                        else if ( (LA177_382==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA177_382==STAR) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA177_382==DIV) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA177_382==MOD) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA177_382==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA177_382==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA177_382==LOR) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA177_382==LT) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA177_382==GT) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA177_382==LE) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA177_382==GE) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA177_382==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA177_382==IS) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA177_382==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA177_382==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA177_382==BAND) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA177_382==BOR) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA177_382==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA177_382==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA177_382==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA177_382==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA177_382==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA177_382==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA177_382==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA177_382==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA177_382==EOF) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA177_382==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA177_382==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA177_382==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA177_382==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA177_382==AS) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA177_382==FROM) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA177_382==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA177_382==ALL) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA177_382==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA177_382==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA177_382==ASC) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA177_382==DESC) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA177_382==THEN) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA177_382==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA177_382==END) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA177_382==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA177_382==COLON) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA177_382==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA177_382==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA177_382==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA177_382==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA177_382==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA177_382==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA177_382==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA177_382==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA177_382==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA177_382==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA177_382==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA177_382==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                         
                        input.seek(index177_382);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA177_383 = input.LA(1);

                         
                        int index177_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_383==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA177_383==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA177_383==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA177_383==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA177_383==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA177_383==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA177_383==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA177_383==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA177_383==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA177_383==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA177_383==LT) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA177_383==GT) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA177_383==LE) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA177_383==GE) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA177_383==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA177_383==IS) && (synpred4_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA177_383==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA177_383==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA177_383==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA177_383==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA177_383==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA177_383==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA177_383==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA177_383==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA177_383==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA177_383==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA177_383==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA177_383==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA177_383==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA177_383==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA177_383==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA177_383==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA177_383==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA177_383==AS) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA177_383==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA177_383==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA177_383==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA177_383==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA177_383==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA177_383==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA177_383==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA177_383==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA177_383==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA177_383==END) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA177_383==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA177_383==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA177_383==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA177_383==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA177_383==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA177_383==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA177_383==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA177_383==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA177_383==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA177_383==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA177_383==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA177_383==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA177_383==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA177_383==DOT) ) {s = 1063;}

                         
                        input.seek(index177_383);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA177_550 = input.LA(1);

                         
                        int index177_550 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_550);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA177_605 = input.LA(1);

                         
                        int index177_605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_605);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA177_608 = input.LA(1);

                         
                        int index177_608 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_608);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA177_666 = input.LA(1);

                         
                        int index177_666 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_666);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA177_779 = input.LA(1);

                         
                        int index177_779 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_779);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA177_780 = input.LA(1);

                         
                        int index177_780 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_780);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA177_826 = input.LA(1);

                         
                        int index177_826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_826);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA177_834 = input.LA(1);

                         
                        int index177_834 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_834);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA177_889 = input.LA(1);

                         
                        int index177_889 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_889);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA177_892 = input.LA(1);

                         
                        int index177_892 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_892);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA177_950 = input.LA(1);

                         
                        int index177_950 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_950);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA177_1063 = input.LA(1);

                         
                        int index177_1063 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_1063);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA177_1064 = input.LA(1);

                         
                        int index177_1064 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_1064);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA177_1110 = input.LA(1);

                         
                        int index177_1110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_1110);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA177_1116 = input.LA(1);

                         
                        int index177_1116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_1116);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA177_1162 = input.LA(1);

                         
                        int index177_1162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1062;}

                        else if ( (true) ) {s = 319;}

                         
                        input.seek(index177_1162);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA223_eotS =
        "\u0229\uffff";
    static final String DFA223_eofS =
        "\u0229\uffff";
    static final String DFA223_minS =
        "\1\5\2\0\6\6\64\uffff\1\u00f9\114\uffff\3\0\56\uffff\3\0\43\uffff"+
        "\3\0\76\uffff\3\0\25\uffff\3\0\103\uffff\3\0\u00a6\uffff";
    static final String DFA223_maxS =
        "\1\u011b\2\0\4\u0113\1\u0118\1\u0113\64\uffff\1\u0112\114\uffff"+
        "\3\0\56\uffff\3\0\43\uffff\3\0\76\uffff\3\0\25\uffff\3\0\103\uffff"+
        "\3\0\u00a6\uffff";
    static final String DFA223_acceptS =
        "\11\uffff\64\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\10\3\uffff"+
        "\1\7\10\3\1\5\34\4\2\3\1\7\5\3\3\uffff\2\3\1\5\34\4\3\3\1\10\3\uffff"+
        "\1\7\34\4\3\3\1\5\7\3\1\10\25\4\3\uffff\7\4\3\3\1\5\7\3\1\10\2\7"+
        "\3\uffff\3\3\41\4\1\5\5\3\1\10\2\3\1\7\25\4\3\uffff\7\4\7\3\1\5"+
        "\1\10\3\3\1\6\1\12\u0091\uffff";
    static final String DFA223_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\64\uffff\1\11\114\uffff\1"+
        "\12\1\13\1\14\56\uffff\1\15\1\16\1\17\43\uffff\1\20\1\21\1\22\76"+
        "\uffff\1\23\1\24\1\25\25\uffff\1\26\1\27\1\30\103\uffff\1\31\1\32"+
        "\1\33\u00a6\uffff}>";
    static final String[] DFA223_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\74\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\71\1\52\1\2\1\53\1\54\1"+
            "\72\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\2\uffff\1\65\2\uffff\1\66\1\67\1\70\u0082\uffff\1\6\16\uffff"+
            "\1\7\2\uffff\1\21\1\uffff\1\75\1\uffff\1\13\1\10\1\76\2\uffff"+
            "\1\14\1\15\11\uffff\1\12\2\uffff\1\73\1\uffff\1\3\2\uffff\1"+
            "\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\uffff\1\u00a9\1\u00a8\1"+
            "\u00ae\7\uffff\1\u0095\24\uffff\1\u00a2\12\uffff\1\u008d\3\uffff"+
            "\1\u00aa\1\u00ab\14\uffff\1\u0089\12\uffff\1\u0092\1\u0091\1"+
            "\u00b4\1\u00b3\1\u0094\1\u0093\1\u008c\1\u008b\1\u008a\1\u0090"+
            "\1\u008f\1\u008e\u009b\uffff\1\u00ac\1\uffff\1\u00a1\2\uffff"+
            "\1\u00ad\1\u0097\1\u00a6\1\u009a\3\uffff\1\u0096\2\uffff\1\u00a5"+
            "\1\u00a7\1\u00a3\1\u00a4\1\u009d\1\u009e\1\u009f\1\u00a0\1\u009c"+
            "\1\u009b\1\u0098\1\u0099",
            "\1\u00d9\1\u00da\1\u00db\1\u00dc\1\uffff\1\u00d3\1\u00d2\1"+
            "\u00d8\7\uffff\1\u00df\24\uffff\1\u00cc\12\uffff\1\u00b5\3\uffff"+
            "\1\u00d4\1\u00d5\14\uffff\1\u00e0\12\uffff\1\u00ba\1\u00b9\1"+
            "\u00bf\1\u00be\1\u00de\1\u00dd\1\u00bd\1\u00bc\1\u00bb\1\u00b8"+
            "\1\u00b7\1\u00b6\u009b\uffff\1\u00d6\1\uffff\1\u00cb\2\uffff"+
            "\1\u00d7\1\u00c1\1\u00d0\1\u00c4\3\uffff\1\u00c0\2\uffff\1\u00cf"+
            "\1\u00d1\1\u00cd\1\u00ce\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00c6"+
            "\1\u00c5\1\u00c2\1\u00c3",
            "\1\u00fd\1\u00fe\1\u00ff\1\u0100\1\uffff\1\u00f7\1\u00f6\1"+
            "\u00fc\7\uffff\1\u010b\24\uffff\1\u00f0\12\uffff\1\u00e4\3\uffff"+
            "\1\u00f8\1\u00f9\14\uffff\1\u010c\12\uffff\1\u0106\1\u0105\1"+
            "\u0108\1\u0107\1\u010a\1\u0109\1\u00e3\1\u00e2\1\u00e1\1\u0103"+
            "\1\u0102\1\u0101\u009b\uffff\1\u00fa\1\uffff\1\u00ef\2\uffff"+
            "\1\u00fb\1\u00e5\1\u00f4\1\u00e8\3\uffff\1\u0104\2\uffff\1\u00f3"+
            "\1\u00f5\1\u00f1\1\u00f2\1\u00eb\1\u00ec\1\u00ed\1\u00ee\1\u00ea"+
            "\1\u00e9\1\u00e6\1\u00e7",
            "\1\u0128\1\u0129\1\u012a\1\u012b\1\uffff\1\u011f\1\u011e\1"+
            "\u0127\7\uffff\1\u0134\24\uffff\1\u0118\12\uffff\1\u0138\3\uffff"+
            "\1\u0120\1\u0121\14\uffff\1\u0137\12\uffff\1\u0131\1\u0130\1"+
            "\u0136\1\u0135\1\u0133\1\u0132\1\u0124\1\u0123\1\u0122\1\u012e"+
            "\1\u012d\1\u012c\u009b\uffff\1\u0125\1\uffff\1\u0117\2\uffff"+
            "\1\u0126\1\u010d\1\u011c\1\u0110\3\uffff\1\u012f\2\uffff\1\u011b"+
            "\1\u011d\1\u0119\1\u011a\1\u0113\1\u0114\1\u0115\1\u0116\1\u0112"+
            "\1\u0111\1\u010e\1\u010f",
            "\1\u015d\1\u015e\1\u015f\1\u0160\1\uffff\1\u0157\1\u0156\1"+
            "\u015c\7\uffff\1\u0166\24\uffff\1\u0150\12\uffff\1\u0139\3\uffff"+
            "\1\u0158\1\u0159\14\uffff\1\u0167\12\uffff\1\u0163\1\u0162\1"+
            "\u0169\1\u0168\1\u0165\1\u0164\1\u013c\1\u013b\1\u013a\1\u013f"+
            "\1\u013e\1\u013d\u009b\uffff\1\u015a\1\uffff\1\u014f\1\u0144"+
            "\1\u0142\1\u015b\1\u0145\1\u0154\1\u0148\1\u0143\1\u0141\1\uffff"+
            "\1\u0161\2\uffff\1\u0153\1\u0155\1\u0151\1\u0152\1\u014b\1\u014c"+
            "\1\u014d\1\u014e\1\u014a\1\u0149\1\u0146\1\u0147\4\uffff\1\u0140",
            "\1\u0186\1\u0187\1\u0188\1\u0189\1\uffff\1\u017d\1\u017c\1"+
            "\u0185\7\uffff\1\u0195\24\uffff\1\u0176\12\uffff\1\u016a\3\uffff"+
            "\1\u017e\1\u017f\14\uffff\1\u0192\12\uffff\1\u0190\1\u018f\1"+
            "\u018e\1\u018d\1\u0194\1\u0193\1\u0182\1\u0181\1\u0180\1\u018c"+
            "\1\u018b\1\u018a\u009b\uffff\1\u0183\1\uffff\1\u0175\2\uffff"+
            "\1\u0184\1\u016b\1\u017a\1\u016e\3\uffff\1\u0191\2\uffff\1\u0179"+
            "\1\u017b\1\u0177\1\u0178\1\u0171\1\u0172\1\u0173\1\u0174\1\u0170"+
            "\1\u016f\1\u016c\1\u016d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0197\4\uffff\1\u0197\23\uffff\1\u0196",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
    static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
    static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
    static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
    static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
    static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
    static final short[][] DFA223_transition;

    static {
        int numStates = DFA223_transitionS.length;
        DFA223_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = DFA223_eot;
            this.eof = DFA223_eof;
            this.min = DFA223_min;
            this.max = DFA223_max;
            this.accept = DFA223_accept;
            this.special = DFA223_special;
            this.transition = DFA223_transition;
        }
        public String getDescription() {
            return "1415:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA223_0 = input.LA(1);

                         
                        int index223_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_0==LAST) ) {s = 1;}

                        else if ( (LA223_0==LW) ) {s = 2;}

                        else if ( (LA223_0==NUM_INT) ) {s = 3;}

                        else if ( (LA223_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA223_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA223_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA223_0==IDENT) ) {s = 7;}

                        else if ( (LA223_0==QUESTION) ) {s = 8;}

                        else if ( (LA223_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA223_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA223_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA223_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA223_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA223_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA223_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA223_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA223_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA223_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA223_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA223_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA223_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA223_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA223_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA223_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA223_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA223_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA223_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA223_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA223_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA223_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA223_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA223_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA223_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA223_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA223_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA223_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA223_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA223_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA223_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA223_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA223_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA223_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA223_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA223_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA223_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA223_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA223_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA223_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA223_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA223_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA223_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA223_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA223_0==UPDATE) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA223_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA223_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA223_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA223_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA223_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA223_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA223_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA223_0==STAR) ) {s = 61;}

                        else if ( (LA223_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 62;}

                         
                        input.seek(index223_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA223_1 = input.LA(1);

                         
                        int index223_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 99;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index223_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA223_2 = input.LA(1);

                         
                        int index223_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 136;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index223_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA223_3 = input.LA(1);

                         
                        int index223_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA223_3==TIMEPERIOD_SECONDS) ) {s = 138;}

                        else if ( (LA223_3==TIMEPERIOD_SECOND) ) {s = 139;}

                        else if ( (LA223_3==TIMEPERIOD_SEC) ) {s = 140;}

                        else if ( (LA223_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA223_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA223_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA223_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA223_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA223_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA223_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA223_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA223_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA223_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA223_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA223_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA223_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA223_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA223_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA223_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA223_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA223_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA223_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA223_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA223_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA223_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA223_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA223_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA223_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA223_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA223_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA223_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA223_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA223_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA223_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA223_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA223_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA223_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA223_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA223_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA223_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA223_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA223_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA223_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                         
                        input.seek(index223_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA223_4 = input.LA(1);

                         
                        int index223_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA223_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA223_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA223_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA223_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA223_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA223_4==TIMEPERIOD_SECONDS) ) {s = 187;}

                        else if ( (LA223_4==TIMEPERIOD_SECOND) ) {s = 188;}

                        else if ( (LA223_4==TIMEPERIOD_SEC) ) {s = 189;}

                        else if ( (LA223_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA223_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA223_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA223_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA223_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA223_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA223_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA223_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA223_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA223_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA223_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA223_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA223_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA223_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA223_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA223_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA223_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA223_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA223_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA223_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA223_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA223_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA223_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA223_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA223_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA223_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA223_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA223_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA223_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA223_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA223_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA223_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA223_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA223_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA223_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 224;}

                         
                        input.seek(index223_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA223_5 = input.LA(1);

                         
                        int index223_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_5==TIMEPERIOD_SECONDS) ) {s = 225;}

                        else if ( (LA223_5==TIMEPERIOD_SECOND) ) {s = 226;}

                        else if ( (LA223_5==TIMEPERIOD_SEC) ) {s = 227;}

                        else if ( (LA223_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA223_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA223_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA223_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA223_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA223_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA223_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA223_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA223_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA223_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA223_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA223_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA223_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA223_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA223_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA223_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA223_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA223_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA223_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA223_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA223_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA223_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA223_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA223_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA223_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA223_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA223_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA223_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA223_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA223_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA223_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA223_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA223_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA223_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA223_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA223_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA223_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA223_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA223_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA223_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA223_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 268;}

                         
                        input.seek(index223_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA223_6 = input.LA(1);

                         
                        int index223_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA223_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA223_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA223_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA223_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA223_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA223_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA223_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA223_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA223_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA223_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA223_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA223_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA223_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA223_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA223_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA223_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA223_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA223_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA223_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA223_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA223_6==TIMEPERIOD_SECONDS) ) {s = 290;}

                        else if ( (LA223_6==TIMEPERIOD_SECOND) ) {s = 291;}

                        else if ( (LA223_6==TIMEPERIOD_SEC) ) {s = 292;}

                        else if ( (LA223_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA223_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA223_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA223_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA223_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA223_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA223_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA223_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA223_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA223_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA223_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA223_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA223_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA223_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA223_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA223_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA223_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA223_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA223_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA223_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 312;}

                         
                        input.seek(index223_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA223_7 = input.LA(1);

                         
                        int index223_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA223_7==TIMEPERIOD_SECONDS) ) {s = 314;}

                        else if ( (LA223_7==TIMEPERIOD_SECOND) ) {s = 315;}

                        else if ( (LA223_7==TIMEPERIOD_SEC) ) {s = 316;}

                        else if ( (LA223_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA223_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA223_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA223_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA223_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA223_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA223_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA223_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA223_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA223_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA223_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA223_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA223_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA223_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA223_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA223_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA223_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA223_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA223_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA223_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA223_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA223_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA223_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA223_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA223_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA223_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA223_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA223_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA223_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA223_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA223_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA223_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA223_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA223_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA223_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA223_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA223_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA223_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA223_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA223_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA223_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA223_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA223_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA223_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA223_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 361;}

                         
                        input.seek(index223_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA223_8 = input.LA(1);

                         
                        int index223_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA223_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA223_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA223_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA223_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA223_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA223_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA223_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA223_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA223_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA223_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA223_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA223_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA223_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA223_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA223_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA223_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA223_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA223_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA223_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA223_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA223_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA223_8==TIMEPERIOD_SECONDS) ) {s = 384;}

                        else if ( (LA223_8==TIMEPERIOD_SECOND) ) {s = 385;}

                        else if ( (LA223_8==TIMEPERIOD_SEC) ) {s = 386;}

                        else if ( (LA223_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA223_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA223_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA223_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA223_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA223_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA223_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA223_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA223_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA223_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA223_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA223_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA223_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA223_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA223_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA223_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA223_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA223_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA223_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 405;}

                         
                        input.seek(index223_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA223_61 = input.LA(1);

                         
                        int index223_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_61==DIV) && (synpred11_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA223_61==COMMA||LA223_61==RPAREN) ) {s = 407;}

                         
                        input.seek(index223_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA223_138 = input.LA(1);

                         
                        int index223_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_138);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA223_139 = input.LA(1);

                         
                        int index223_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_139);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA223_140 = input.LA(1);

                         
                        int index223_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_140);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA223_187 = input.LA(1);

                         
                        int index223_187 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_187);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA223_188 = input.LA(1);

                         
                        int index223_188 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_188);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA223_189 = input.LA(1);

                         
                        int index223_189 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_189);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA223_225 = input.LA(1);

                         
                        int index223_225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_225);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA223_226 = input.LA(1);

                         
                        int index223_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_226);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA223_227 = input.LA(1);

                         
                        int index223_227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_227);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA223_290 = input.LA(1);

                         
                        int index223_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_290);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA223_291 = input.LA(1);

                         
                        int index223_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_291);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA223_292 = input.LA(1);

                         
                        int index223_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_292);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA223_314 = input.LA(1);

                         
                        int index223_314 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_314);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA223_315 = input.LA(1);

                         
                        int index223_315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_315);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA223_316 = input.LA(1);

                         
                        int index223_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_316);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA223_384 = input.LA(1);

                         
                        int index223_384 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_384);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA223_385 = input.LA(1);

                         
                        int index223_385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_385);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA223_386 = input.LA(1);

                         
                        int index223_386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 393;}

                         
                        input.seek(index223_386);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 223, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA237_eotS =
        "\u01f3\uffff";
    static final String DFA237_eofS =
        "\1\53\4\uffff\1\1\20\uffff\1\1\13\uffff\2\1\1\uffff\2\1\u01cc\uffff";
    static final String DFA237_minS =
        "\1\5\4\uffff\1\6\20\uffff\1\6\13\uffff\2\6\1\uffff\2\6\u0080\uffff"+
        "\1\u00fa\u012e\uffff\1\u00fd\34\uffff";
    static final String DFA237_maxS =
        "\1\u0119\4\uffff\1\u0118\20\uffff\1\u0118\13\uffff\2\u0118\1\uffff"+
        "\1\u0118\1\u0119\u0080\uffff\1\u0107\u012e\uffff\1\u0103\34\uffff";
    static final String DFA237_acceptS =
        "\1\uffff\1\1\51\uffff\1\2\u01c7\uffff";
    static final String DFA237_specialS =
        "\u01f3\uffff}>";
    static final String[] DFA237_transitionS = {
            "\1\1\4\53\1\5\3\53\1\1\1\uffff\2\53\11\1\3\uffff\5\53\1\1\1"+
            "\53\1\46\1\42\1\43\1\45\1\uffff\1\53\1\uffff\2\53\1\uffff\1"+
            "\53\2\uffff\1\53\3\1\1\53\1\uffff\3\53\3\uffff\3\1\1\26\4\1"+
            "\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1\6\uffff\3\53\6\uffff\1"+
            "\53\1\uffff\1\1\2\53\3\1\1\53\u008f\uffff\1\53\1\1\13\53\2\uffff"+
            "\14\53\1\uffff\1\53\2\uffff\1\53\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u008f"+
            "\uffff\1\1\1\uffff\13\1\2\53\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u008f"+
            "\uffff\1\1\1\uffff\2\1\1\u00a7\10\1\2\uffff\14\1\1\uffff\1\1"+
            "\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\53\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u008f"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\53\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u008f"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\53\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u008f"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\u01d6\1\53\25\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1"+
            "\1\u008f\uffff\1\1\1\53\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff"+
            "\1\1\1\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\53\2\uffff\1\53\10\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\5\uffff\1\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA237_eot = DFA.unpackEncodedString(DFA237_eotS);
    static final short[] DFA237_eof = DFA.unpackEncodedString(DFA237_eofS);
    static final char[] DFA237_min = DFA.unpackEncodedStringToUnsignedChars(DFA237_minS);
    static final char[] DFA237_max = DFA.unpackEncodedStringToUnsignedChars(DFA237_maxS);
    static final short[] DFA237_accept = DFA.unpackEncodedString(DFA237_acceptS);
    static final short[] DFA237_special = DFA.unpackEncodedString(DFA237_specialS);
    static final short[][] DFA237_transition;

    static {
        int numStates = DFA237_transitionS.length;
        DFA237_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA237_transition[i] = DFA.unpackEncodedString(DFA237_transitionS[i]);
        }
    }

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = DFA237_eot;
            this.eof = DFA237_eof;
            this.min = DFA237_min;
            this.max = DFA237_max;
            this.accept = DFA237_accept;
            this.special = DFA237_special;
            this.transition = DFA237_transition;
        }
        public String getDescription() {
            return "1512:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1545 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0002000002000008L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1550 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1568 = new BitSet(new long[]{0x0040020008000010L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1574 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1604 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1634 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x4400080000000000L,0x000200000C5200C2L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1694 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x4400080000000000L,0x000200000E5200C2L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1806 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000080000000000L,0x000200000C5200C2L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1847 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0400080000000000L,0x000200000E5200C2L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1979 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0200080000000000L,0x000200000C7200C2L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1985 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000080000000000L,0x000200000C5200C2L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2027 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0600080000000000L,0x000200000E7200C2L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2033 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0400080000000000L,0x000200000E5200C2L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2111 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2114 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2120 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2123 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2130 = new BitSet(new long[]{0x0104300000010002L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2134 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2140 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2143 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2150 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2153 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2156 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2163 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2166 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2173 = new BitSet(new long[]{0x0030800080004000L,0x0000000000022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2176 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2183 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2186 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2189 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420002L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2217 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2221 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2229 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2235 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2247 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2250 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2306 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2310 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2331 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2336 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2344 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2394 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2396 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2402 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2404 = new BitSet(new long[]{0x0100300400010002L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2408 = new BitSet(new long[]{0x0100300000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2414 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2416 = new BitSet(new long[]{0x0100300000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2425 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2427 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2429 = new BitSet(new long[]{0x0100200000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2436 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2438 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2445 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2447 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2502 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2504 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2508 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2510 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2515 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2548 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2601 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2605 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2610 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2688 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2720 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2761 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2767 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x3400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2772 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x3400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2777 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x3400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2786 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2790 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2794 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2809 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2828 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2845 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2848 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2937 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x8400080000000000L,0x000200000E5200C2L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2940 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2973 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList3021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3098 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x8400080000000000L,0x000200000E5200C2L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3141 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3169 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3214 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3220 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList3265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3311 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3349 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3352 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3395 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3399 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3403 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3406 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3427 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3443 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3510 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3513 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3516 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3519 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3536 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3597 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3603 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3609 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectionList_in_selectClause3613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3643 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3646 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3693 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3696 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3760 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3798 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3802 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3806 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3810 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3819 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3824 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3835 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3841 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3848 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog3922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog3936 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog3942 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog3949 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog3954 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3960 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog3966 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog3972 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog3978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog3985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4022 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4024 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4029 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4060 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4065 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4092 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4131 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4177 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4181 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4185 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4189 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4193 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4404 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4506 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4508 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4537 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression4574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression4576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression4580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression4582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression4597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression4613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression4666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression4668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression4671 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression4676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_viewExpression4731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression4737 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression4739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression4742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr4784 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr4824 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement4851 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4936 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4940 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4944 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4948 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit4975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5006 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5012 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5057 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_outputLimit5059 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5062 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5193 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5199 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420002L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5276 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5280 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5284 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5288 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5292 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5297 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5333 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_whenClause5336 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5338 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_whenClause5341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5354 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_elseClause5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5384 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5387 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5390 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5404 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_caseExpression5406 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5408 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5411 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5449 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression5454 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5456 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5488 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression5493 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5495 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000301L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression5532 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression5535 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression5538 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000301L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression5563 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5579 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression5592 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5610 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5624 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression5626 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression5640 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression5654 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5684 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression5701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression5707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression5713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression5719 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression5721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression5724 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5729 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5857 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000F000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression5889 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression5893 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression5897 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression5901 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000F000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression5942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5960 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression5962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000F000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000F000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6066 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6105 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6111 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6136 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6165 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6370 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6422 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6424 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression6481 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery6545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6576 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6582 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression6630 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression6633 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression6656 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression6659 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression6662 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6681 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression6683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression6701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression6706 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_unaryExpression6709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression6735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression6745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression6784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression6806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr6841 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr6847 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr6850 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr6857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr6860 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr6868 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr6871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr6904 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6911 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6916 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr6923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6927 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6933 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr6940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression6984 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E7200C6L});
    public static final BitSet FOLLOW_expression_in_arrayExpression6987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression6990 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_arrayExpression6992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression6999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7025 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7029 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7034 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7049 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7053 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7058 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7073 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7085 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7090 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7125 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7129 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7134 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7149 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7153 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7158 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7173 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7177 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7182 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7207 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7212 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7218 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7234 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7240 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7261 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7279 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7306 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7309 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7332 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7367 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7372 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7378 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_firstAggregation7382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7412 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7417 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7423 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_lastAggregation7427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc7456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc7461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc7465 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_maxFunc7468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7471 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_maxFunc7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7477 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_maxFunc7480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc7487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction7506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction7511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction7524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction7526 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction7532 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction7535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction7539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent7569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent7576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent7588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs7606 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs7611 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs7618 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7635 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList7637 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x2400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression7668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression7685 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7726 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression7731 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7733 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7765 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression7770 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7772 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression7807 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression7816 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression7883 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression7889 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression7897 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression7903 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression7912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8027 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8032 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8076 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8082 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8086 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression8168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8171 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8232 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000080000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400010L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000080000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400010L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression8675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression8686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression8697 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression8699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression8702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression8714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic8792 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic8795 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic8797 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic8799 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic8803 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic8808 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic8813 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic8815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList8869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList8872 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList8875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement8901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement8917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement8922 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement8925 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector8975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector8977 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector8980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9053 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xE400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9058 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList9274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9277 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200C6L});
    public static final BitSet FOLLOW_expression_in_expressionList9280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9311 = new BitSet(new long[]{0xF87803E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xA400080000000000L,0x000200000E5200CEL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9314 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9447 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand9558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand9570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand9572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_number_in_frequencyOperand9575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand9579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand9581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand9630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand9639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_number_in_rangeOperand9642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator9762 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator9766 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator9768 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator9771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator9819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator9823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator9825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList9875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList9877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList9880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList9882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter9908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter9914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty9938 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic9975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic9979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic9981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10170 = new BitSet(new long[]{0xC03801E807FC4422L,0x000001C80003A7BFL,0x0000000000000000L,0x0400000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_keywordAllowedIdent10487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent10494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent10501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent10529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod10561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10563 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400080000000000L,0x000000000C420006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart10649 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart10653 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart10655 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart10659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart10663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart10712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart10716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart10718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart10722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart10726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart10775 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart10779 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart10781 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart10793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart10843 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart10847 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart10849 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart10857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart10861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart10911 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart10915 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart10917 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number10984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x000000000C420002L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x000000000C420002L});
    public static final BitSet FOLLOW_number_in_numberconstant11167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9426 = new BitSet(new long[]{0x0000000000000002L});

}