// $ANTLR 3.1.1 EsperEPL2Grammar.g 2010-04-01 18:20:54

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=169;
    public static final int FLOAT_SUFFIX=324;
    public static final int STAR=267;
    public static final int NUMERIC_PARAM_LIST=109;
    public static final int MOD=285;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=151;
    public static final int CREATE_COL_TYPE_LIST=224;
    public static final int BSR=306;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=175;
    public static final int TIMEPERIOD_MILLISECONDS=95;
    public static final int FULL_OUTERJOIN_EXPR=155;
    public static final int MATCHREC_PATTERN_CONCAT=249;
    public static final int INC=299;
    public static final int LNOT=295;
    public static final int RPAREN=264;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=272;
    public static final int BSR_ASSIGN=307;
    public static final int CAST_EXPR=204;
    public static final int MATCHES=106;
    public static final int STREAM_EXPR=150;
    public static final int TIMEPERIOD_SECONDS=92;
    public static final int NOT_EQUAL=277;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=118;
    public static final int LAST_AGGREG=231;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=112;
    public static final int FOLLOWED_BY=289;
    public static final int HOUR_PART=180;
    public static final int RBRACK=266;
    public static final int MATCHREC_PATTERN_NESTED=251;
    public static final int MATCH_UNTIL_RANGE_CLOSED=222;
    public static final int GE=281;
    public static final int METHOD_JOIN_EXPR=218;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=117;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=116;
    public static final int MINUS_ASSIGN=300;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=128;
    public static final int NUM_DOUBLE=245;
    public static final int INSERTINTO_STREAM_NAME=192;
    public static final int LCURLY=286;
    public static final int TIMEPERIOD_MILLISEC=93;
    public static final int UNARY_MINUS=176;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=190;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=126;
    public static final int WS=316;
    public static final int EMAILAT=315;
    public static final int SUBSELECT_GROUP_EXPR=196;
    public static final int ON_SELECT_INSERT_EXPR=213;
    public static final int ESCAPECHAR=290;
    public static final int EXPRCOL=173;
    public static final int SL_COMMENT=317;
    public static final int NULL_TYPE=244;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=220;
    public static final int GT=279;
    public static final int BNOT=296;
    public static final int WHERE_EXPR=137;
    public static final int END=33;
    public static final int LAND=313;
    public static final int INNERJOIN_EXPR=152;
    public static final int NOT_REGEXP=187;
    public static final int MATCH_UNTIL_EXPR=219;
    public static final int EVENT_PROP_EXPR=159;
    public static final int LBRACK=265;
    public static final int VIEW_EXPR=134;
    public static final int ANNOTATION=227;
    public static final int LONG_TYPE=239;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=119;
    public static final int MATCHREC_PATTERN=247;
    public static final int TIMEPERIOD_SEC=90;
    public static final int TICKED_STRING_LITERAL=291;
    public static final int ON_SELECT_EXPR=211;
    public static final int MINUTE_PART=181;
    public static final int PATTERN_NOT_EXPR=115;
    public static final int SQL_NE=276;
    public static final int SUM=18;
    public static final int HexDigit=322;
    public static final int UPDATE_EXPR=232;
    public static final int LPAREN=263;
    public static final int IN_SUBSELECT_EXPR=198;
    public static final int AT=82;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=96;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=253;
    public static final int NOT_IN_RANGE=194;
    public static final int OFFSET=100;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=69;
    public static final int SECOND_PART=182;
    public static final int MATCH_RECOGNIZE=102;
    public static final int IDENT=260;
    public static final int DATABASE_JOIN_EXPR=136;
    public static final int BXOR=275;
    public static final int PLUS=269;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=84;
    public static final int CREATE_SCHEMA_EXPR=234;
    public static final int EXISTS=71;
    public static final int EVENT_PROP_INDEXED=162;
    public static final int CREATE_INDEX_EXPR=205;
    public static final int TIMEPERIOD_MILLISECOND=94;
    public static final int EVAL_NOTEQUALS_EXPR=143;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=221;
    public static final int CREATE_VARIABLE_EXPR=217;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=254;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=113;
    public static final int RIGHT_OUTERJOIN_EXPR=154;
    public static final int NUMBERSETSTAR=226;
    public static final int LAST_OPERATOR=201;
    public static final int PATTERN_FILTER_EXPR=114;
    public static final int EVAL_AND_EXPR=140;
    public static final int LEFT_OUTERJOIN_EXPR=153;
    public static final int EPL_EXPR=246;
    public static final int GROUP_BY_EXPR=156;
    public static final int SET=79;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=74;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=160;
    public static final int MINUS=283;
    public static final int SEMI=314;
    public static final int STAR_ASSIGN=302;
    public static final int VARIANT_LIST=237;
    public static final int FIRST_AGGREG=230;
    public static final int COLON=271;
    public static final int EVAL_EQUALS_GROUP_EXPR=144;
    public static final int BAND_ASSIGN=312;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=170;
    public static final int VALUE_NULL=98;
    public static final int NOT_IN_SET=184;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=163;
    public static final int SL=308;
    public static final int NOT_IN_SUBSELECT_EXPR=199;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=132;
    public static final int SR=304;
    public static final int RCURLY=287;
    public static final int PLUS_ASSIGN=298;
    public static final int EXISTS_SUBSELECT_EXPR=197;
    public static final int DAY_PART=179;
    public static final int EVENT_FILTER_IN=127;
    public static final int DIV=284;
    public static final int OBJECT_PARAM_ORDERED_EXPR=111;
    public static final int OctalEscape=321;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=183;
    public static final int PRIOR=70;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=99;
    public static final int SELECTION_EXPR=147;
    public static final int LOR=282;
    public static final int CAST=75;
    public static final int LW=73;
    public static final int WILDCARD_SELECT=191;
    public static final int EXPONENT=323;
    public static final int LT=278;
    public static final int PATTERN_INCL_EXPR=135;
    public static final int ORDER_BY_EXPR=157;
    public static final int BOOL_TYPE=243;
    public static final int MOD_ASSIGN=303;
    public static final int ANNOTATION_ARRAY=228;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=200;
    public static final int EQUALS=261;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=297;
    public static final int SL_ASSIGN=309;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=252;
    public static final int WEEKDAY=72;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=212;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=178;
    public static final int CREATE_COL_TYPE=225;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=97;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=145;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=240;
    public static final int TIMEPERIOD_SECOND=91;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=129;
    public static final int ANNOTATION_VALUE=229;
    public static final int SUBSELECT_EXPR=195;
    public static final int NUMERIC_PARAM_RANGE=108;
    public static final int CONCAT=174;
    public static final int CLASS_IDENT=131;
    public static final int MATCHREC_PATTERN_ALTER=250;
    public static final int ON_EXPR=208;
    public static final int CREATE_WINDOW_EXPR=206;
    public static final int PROPERTY_SELECTION_STREAM=121;
    public static final int ON_DELETE_EXPR=210;
    public static final int NUM_LONG=292;
    public static final int ON=41;
    public static final int TIME_PERIOD=177;
    public static final int DOUBLE_TYPE=241;
    public static final int DELETE=77;
    public static final int INT_TYPE=238;
    public static final int MATCHREC_PARTITION=258;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=139;
    public static final int ORDER_ELEMENT_EXPR=158;
    public static final int TIMEPERIOD_HOURS=87;
    public static final int VARIABLE=80;
    public static final int SUBSTITUTION=203;
    public static final int UNTIL=81;
    public static final int STRING_TYPE=242;
    public static final int NUM_INT=288;
    public static final int MATCHREC_DEFINE_ITEM=255;
    public static final int ON_SET_EXPR=216;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=236;
    public static final int NUM_FLOAT=293;
    public static final int ON_EXPR_FROM=215;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=319;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=120;
    public static final int WEEKDAY_OPERATOR=202;
    public static final int DEC=301;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=310;
    public static final int NUMERIC_PARAM_FREQUENCY=110;
    public static final int SNAPSHOT=78;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=168;
    public static final int EVENT_FILTER_PARAM=124;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=165;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=101;
    public static final int ON_STREAM=209;
    public static final int DEFINE=104;
    public static final int TIMEPERIOD_DAYS=85;
    public static final int EVENT_FILTER_RANGE=125;
    public static final int ML_COMMENT=318;
    public static final int INDEX=83;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=164;
    public static final int BOR_ASSIGN=311;
    public static final int COMMA=259;
    public static final int IS=42;
    public static final int PARTITION=105;
    public static final int WHEN_LIMIT_EXPR=171;
    public static final int TIMEPERIOD_LIMIT_EXPR=167;
    public static final int SOME=49;
    public static final int EQUAL=294;
    public static final int BOR=268;
    public static final int MATCHREC_MEASURE_ITEM=257;
    public static final int TIMEPERIOD_HOUR=86;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=130;
    public static final int IN_RANGE=193;
    public static final int DOT=262;
    public static final int MATCHREC_MEASURES=256;
    public static final int CURRENT_TIMESTAMP=76;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=122;
    public static final int INSERTINTO_EXPR=172;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=138;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=223;
    public static final int EVAL_EQUALS_EXPR=142;
    public static final int TIMEPERIOD_MINUTES=89;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=186;
    public static final int EVENT_LIMIT_EXPR=166;
    public static final int TIMEPERIOD_MINUTE=88;
    public static final int NOT_BETWEEN=185;
    public static final int EVAL_OR_EXPR=141;
    public static final int ON_SELECT_INSERT_OUTPUT=214;
    public static final int MEASURES=103;
    public static final int AFTER=107;
    public static final int BAND=274;
    public static final int MATCHREC_PATTERN_ATOM=248;
    public static final int QUOTED_STRING_LITERAL=273;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=270;
    public static final int OBSERVER_EXPR=133;
    public static final int CREATE_SCHEMA_EXPR_QUAL=235;
    public static final int EVENT_FILTER_IDENT=123;
    public static final int EVENT_PROP_MAPPED=161;
    public static final int UnicodeEscape=320;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=188;
    public static final int SELECTION_ELEMENT_EXPR=148;
    public static final int CREATE_WINDOW_SELECT_EXPR=207;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=233;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=149;
    public static final int SR_ASSIGN=305;
    public static final int LE=280;
    public static final int DBFROM_CLAUSE=189;
    public static final int EVAL_IDENT=146;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after';");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:521:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:522:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:522:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:522:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:522:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1592);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1597);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1601); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:527:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:528:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:528:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:528:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:528:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1615);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1621);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: annotationEnum, eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 531:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:531:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:531:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:534:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:535:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:535:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1651);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1655); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:542:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:543:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:543:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1677);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:543:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:543:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:543:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:543:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1685);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:543:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1689);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairsNoEnum, elementValueNoEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 544:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:544:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:544:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:544:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:547:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:548:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:548:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1737);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:548:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:548:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:548:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:548:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1745);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:548:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1749);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueEnum, elementValuePairsEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:549:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:549:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:549:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:552:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:553:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:553:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1795);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:553:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:553:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1798); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1801);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:556:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:557:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:557:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1822);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:557:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:557:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1825); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1828);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:560:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:561:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:561:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1855);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 562:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:562:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:565:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:566:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:566:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1896);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 567:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:567:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:570:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:571:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:571:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1927);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:572:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:572:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:572:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1938);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 572:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:573:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1951);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:576:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:577:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:577:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1974);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:578:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:578:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:578:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1985);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 578:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:579:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1998);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:580:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2006);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:583:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:584:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:584:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:584:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:584:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2029);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:584:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:584:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2032); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2034);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:584:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:584:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 585:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:585:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:585:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:588:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:589:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:589:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:589:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:589:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2077);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:589:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:589:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2080); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2082);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:589:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:589:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 590:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:590:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:590:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:596:1: eplExpression : ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;

        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;



        try {
            // EsperEPL2Grammar.g:597:2: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr )
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }

                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:597:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2125);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:598:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2130);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:599:4: createIndexExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2135);
                    createIndexExpr52=createIndexExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:600:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2140);
                    createVariableExpr53=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:601:4: createSchemaExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2145);
                    createSchemaExpr54=createSchemaExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:602:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2150);
                    onExpr55=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:603:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression2155);
                    updateExpr56=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:606:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT57=null;
        Token SELECT59=null;
        Token FROM61=null;
        Token WHERE64=null;
        Token GROUP66=null;
        Token BY67=null;
        Token HAVING69=null;
        Token OUTPUT71=null;
        Token ORDER73=null;
        Token BY74=null;
        Token ROW_LIMIT_EXPR76=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr58 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause60 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause62 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog63 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause65 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr68 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause70 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit72 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr75 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit77 = null;


        CommonTree INSERT57_tree=null;
        CommonTree SELECT59_tree=null;
        CommonTree FROM61_tree=null;
        CommonTree WHERE64_tree=null;
        CommonTree GROUP66_tree=null;
        CommonTree BY67_tree=null;
        CommonTree HAVING69_tree=null;
        CommonTree OUTPUT71_tree=null;
        CommonTree ORDER73_tree=null;
        CommonTree BY74_tree=null;
        CommonTree ROW_LIMIT_EXPR76_tree=null;

        try {
            // EsperEPL2Grammar.g:607:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:607:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:607:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:607:5: INSERT insertIntoExpr
                    {
                    INSERT57=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2168); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2171);
                    insertIntoExpr58=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr58.getTree());

                    }
                    break;

            }

            SELECT59=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2177); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2180);
            selectClause60=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause60.getTree());
            FROM61=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2184); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2187);
            fromClause62=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause62.getTree());
            // EsperEPL2Grammar.g:610:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:610:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2191);
                    matchRecog63=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:611:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:611:4: WHERE whereClause
                    {
                    WHERE64=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2197); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2200);
                    whereClause65=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause65.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:612:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:612:4: GROUP BY groupByListExpr
                    {
                    GROUP66=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2207); if (state.failed) return retval;
                    BY67=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2210); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2213);
                    groupByListExpr68=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:613:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:613:4: HAVING havingClause
                    {
                    HAVING69=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2220); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2223);
                    havingClause70=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause70.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:614:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:614:4: OUTPUT outputLimit
                    {
                    OUTPUT71=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2230); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2233);
                    outputLimit72=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit72.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:615:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:615:4: ORDER BY orderByListExpr
                    {
                    ORDER73=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2240); if (state.failed) return retval;
                    BY74=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2243); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2246);
                    orderByListExpr75=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr75.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:616:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:616:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR76=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2253); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2256);
                    rowLimit77=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit77.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:619:1: onExpr : ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON78=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr79 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr80 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr81 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr82 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert83 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr84 = null;

        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr85 = null;


        CommonTree ON78_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            // EsperEPL2Grammar.g:620:2: ( ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) )
            // EsperEPL2Grammar.g:620:4: ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            {
            ON78=(Token)match(input,ON,FOLLOW_ON_in_onExpr2271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON78);

            pushFollow(FOLLOW_onStreamExpr_in_onExpr2273);
            onStreamExpr79=onStreamExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr79.getTree());
            // EsperEPL2Grammar.g:621:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            int alt29=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt29=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt29=2;
                }
                break;
            case SET:
                {
                alt29=3;
                }
                break;
            case UPDATE:
                {
                alt29=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // EsperEPL2Grammar.g:621:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2278);
                    onDeleteExpr80=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr80.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:621:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2282);
                    onSelectExpr81=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr81.getTree());
                    // EsperEPL2Grammar.g:621:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==INSERT) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // EsperEPL2Grammar.g:621:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:621:33: ( onSelectInsertExpr )+
                            int cnt26=0;
                            loop26:
                            do {
                                int alt26=2;
                                int LA26_0 = input.LA(1);

                                if ( (LA26_0==INSERT) ) {
                                    alt26=1;
                                }


                                switch (alt26) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:621:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2285);
                            	    onSelectInsertExpr82=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr82.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt26 >= 1 ) break loop26;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(26, input);
                                        throw eee;
                                }
                                cnt26++;
                            } while (true);

                            // EsperEPL2Grammar.g:621:53: ( outputClauseInsert )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==OUTPUT) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // EsperEPL2Grammar.g:621:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2288);
                                    outputClauseInsert83=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert83.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:621:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2295);
                    onSetExpr84=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr84.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:621:89: onUpdateExpr
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2299);
                    onUpdateExpr85=onUpdateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr85.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSelectInsertExpr, onStreamExpr, onSetExpr, onDeleteExpr, onUpdateExpr, outputClauseInsert, onSelectExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 622:3: -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
            {
                // EsperEPL2Grammar.g:622:6: ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                // EsperEPL2Grammar.g:622:29: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:622:43: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:622:57: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:622:77: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:622:97: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:622:108: ( onUpdateExpr )?
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());

                }
                stream_onUpdateExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onStreamExpr"
    // EsperEPL2Grammar.g:625:1: onStreamExpr : ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) ;
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS88=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression86 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression87 = null;


        CommonTree i_tree=null;
        CommonTree AS88_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:626:2: ( ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) )
            // EsperEPL2Grammar.g:626:4: ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )?
            {
            // EsperEPL2Grammar.g:626:4: ( eventFilterExpression | patternInclusionExpression )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==IDENT||LA30_0==TICKED_STRING_LITERAL) ) {
                alt30=1;
            }
            else if ( (LA30_0==PATTERN) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:626:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2342);
                    eventFilterExpression86=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression86.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:626:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2346);
                    patternInclusionExpression87=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression87.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:626:57: ( AS i= IDENT | i= IDENT )?
            int alt31=3;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==AS) ) {
                alt31=1;
            }
            else if ( (LA31_0==IDENT) ) {
                alt31=2;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:626:58: AS i= IDENT
                    {
                    AS88=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS88);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:626:71: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: patternInclusionExpression, eventFilterExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:3: -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
            {
                // EsperEPL2Grammar.g:627:6: ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);

                // EsperEPL2Grammar.g:627:18: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:627:41: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:627:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onStreamExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:630:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE89=null;
        Token ISTREAM90=null;
        Token AS92=null;
        Token SET93=null;
        Token COMMA95=null;
        Token WHERE97=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier91 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment94 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause98 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE89_tree=null;
        CommonTree ISTREAM90_tree=null;
        CommonTree AS92_tree=null;
        CommonTree SET93_tree=null;
        CommonTree COMMA95_tree=null;
        CommonTree WHERE97_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:631:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:631:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE89=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE89);

            ISTREAM90=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM90);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2395);
            classIdentifier91=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier91.getTree());
            // EsperEPL2Grammar.g:631:35: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:631:36: AS i= IDENT
                    {
                    AS92=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS92);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:631:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET93=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET93);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2416);
            onSetAssignment94=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment94.getTree());
            // EsperEPL2Grammar.g:632:23: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:632:24: COMMA onSetAssignment
            	    {
            	    COMMA95=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2419); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA95);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2421);
            	    onSetAssignment96=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // EsperEPL2Grammar.g:633:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:633:4: WHERE whereClause
                    {
                    WHERE97=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE97);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2431);
                    whereClause98=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause98.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, onSetAssignment, whereClause, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 634:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:634:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:634:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:634:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:637:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT99=null;
        Token SELECT101=null;
        Token DISTINCT102=null;
        Token WHERE105=null;
        Token GROUP107=null;
        Token BY108=null;
        Token HAVING110=null;
        Token ORDER112=null;
        Token BY113=null;
        Token ROW_LIMIT_EXPR115=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr100 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList103 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom104 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause106 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr109 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause111 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr114 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit116 = null;


        CommonTree INSERT99_tree=null;
        CommonTree SELECT101_tree=null;
        CommonTree DISTINCT102_tree=null;
        CommonTree WHERE105_tree=null;
        CommonTree GROUP107_tree=null;
        CommonTree BY108_tree=null;
        CommonTree HAVING110_tree=null;
        CommonTree ORDER112_tree=null;
        CommonTree BY113_tree=null;
        CommonTree ROW_LIMIT_EXPR115_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:640:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:640:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:640:4: ( INSERT insertIntoExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==INSERT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:640:5: INSERT insertIntoExpr
                    {
                    INSERT99=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT99);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2481);
                    insertIntoExpr100=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr100.getTree());

                    }
                    break;

            }

            SELECT101=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT101);

            // EsperEPL2Grammar.g:641:10: ( DISTINCT )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DISTINCT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:641:10: DISTINCT
                    {
                    DISTINCT102=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT102);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2492);
            selectionList103=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList103.getTree());
            // EsperEPL2Grammar.g:642:3: ( onExprFrom )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FROM) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:642:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2496);
                    onExprFrom104=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom104.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:643:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:643:4: WHERE whereClause
                    {
                    WHERE105=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE105);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2504);
                    whereClause106=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause106.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:644:3: ( GROUP BY groupByListExpr )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==GROUP) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:644:4: GROUP BY groupByListExpr
                    {
                    GROUP107=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP107);

                    BY108=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY108);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2517);
                    groupByListExpr109=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr109.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:645:3: ( HAVING havingClause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==HAVING) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:645:4: HAVING havingClause
                    {
                    HAVING110=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING110);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2526);
                    havingClause111=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause111.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:646:3: ( ORDER BY orderByListExpr )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ORDER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:646:4: ORDER BY orderByListExpr
                    {
                    ORDER112=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER112);

                    BY113=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY113);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2537);
                    orderByListExpr114=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr114.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:647:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ROW_LIMIT_EXPR) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:647:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR115=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR115);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2546);
                    rowLimit116=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit116.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: groupByListExpr, whereClause, onExprFrom, DISTINCT, insertIntoExpr, rowLimit, havingClause, selectionList, orderByListExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 648:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:648:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:648:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:648:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:648:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:648:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:648:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:648:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:648:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:648:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onUpdateExpr"
    // EsperEPL2Grammar.g:651:1: onUpdateExpr : UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token UPDATE117=null;
        Token AS118=null;
        Token SET119=null;
        Token COMMA121=null;
        Token WHERE123=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment120 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment122 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause124 = null;


        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE117_tree=null;
        CommonTree AS118_tree=null;
        CommonTree SET119_tree=null;
        CommonTree COMMA121_tree=null;
        CommonTree WHERE123_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            // EsperEPL2Grammar.g:654:2: ( UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:654:4: UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE117=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE117);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:655:11: ( AS i= IDENT | i= IDENT )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            else if ( (LA43_0==IDENT) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:655:12: AS i= IDENT
                    {
                    AS118=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS118);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:655:25: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET119=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET119);

            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2634);
            onSetAssignment120=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment120.getTree());
            // EsperEPL2Grammar.g:656:23: ( COMMA onSetAssignment )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // EsperEPL2Grammar.g:656:24: COMMA onSetAssignment
            	    {
            	    COMMA121=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2637); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA121);

            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2639);
            	    onSetAssignment122=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment122.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);

            // EsperEPL2Grammar.g:657:3: ( WHERE whereClause )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==WHERE) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:657:4: WHERE whereClause
                    {
                    WHERE123=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE123);

                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2648);
                    whereClause124=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause124.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, n, i, onSetAssignment
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 658:3: -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:658:6: ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);

                // EsperEPL2Grammar.g:658:23: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);

                adaptor.addChild(root_2, stream_n.nextNode());
                // EsperEPL2Grammar.g:658:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:658:63: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onUpdateExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:661:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT125=null;
        Token SELECT127=null;
        Token WHERE129=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr126 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList128 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause130 = null;


        CommonTree INSERT125_tree=null;
        CommonTree SELECT127_tree=null;
        CommonTree WHERE129_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:664:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:664:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT125=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT125);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2701);
            insertIntoExpr126=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr126.getTree());
            SELECT127=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT127);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2707);
            selectionList128=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList128.getTree());
            // EsperEPL2Grammar.g:666:3: ( WHERE whereClause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==WHERE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:666:4: WHERE whereClause
                    {
                    WHERE129=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE129);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2714);
                    whereClause130=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause130.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: selectionList, whereClause, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 667:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:667:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:667:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:670:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT131=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT131_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:671:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:671:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT131=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT131);

            // EsperEPL2Grammar.g:671:11: (f= FIRST | a= ALL )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==FIRST) ) {
                alt47=1;
            }
            else if ( (LA47_0==ALL) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:671:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:671:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:672:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:672:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:672:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:675:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE132=null;
        Token WHERE134=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom133 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause135 = null;


        CommonTree DELETE132_tree=null;
        CommonTree WHERE134_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:678:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:678:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE132=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE132);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2802);
            onExprFrom133=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom133.getTree());
            // EsperEPL2Grammar.g:680:3: ( WHERE whereClause )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==WHERE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:680:4: WHERE whereClause
                    {
                    WHERE134=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE134);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2809);
                    whereClause135=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause135.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 681:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:681:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:681:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:684:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET136=null;
        Token COMMA138=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment137 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment139 = null;


        CommonTree SET136_tree=null;
        CommonTree COMMA138_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:687:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:687:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET136=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET136);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2851);
            onSetAssignment137=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment137.getTree());
            // EsperEPL2Grammar.g:687:24: ( COMMA onSetAssignment )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // EsperEPL2Grammar.g:687:25: COMMA onSetAssignment
            	    {
            	    COMMA138=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2854); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA138);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2856);
            	    onSetAssignment139=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment139.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 688:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:688:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:691:1: onSetAssignment : eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS141=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty140 = null;

        EsperEPL2GrammarParser.expression_return expression142 = null;


        CommonTree EQUALS141_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:692:2: ( eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) )
            // EsperEPL2Grammar.g:692:4: eventProperty EQUALS expression
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment2881);
            eventProperty140=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty140.getTree());
            EQUALS141=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS141);

            pushFollow(FOLLOW_expression_in_onSetAssignment2885);
            expression142=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression142.getTree());


            // AST REWRITE
            // elements: eventProperty, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:3: -> ^( ON_SET_EXPR_ITEM eventProperty expression )
            {
                // EsperEPL2Grammar.g:693:6: ^( ON_SET_EXPR_ITEM eventProperty expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:696:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM143=null;
        Token AS144=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM143_tree=null;
        CommonTree AS144_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:697:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:697:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM143=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM143);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:697:17: ( AS i= IDENT | i= IDENT )?
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==AS) ) {
                alt50=1;
            }
            else if ( (LA50_0==IDENT) ) {
                alt50=2;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:697:18: AS i= IDENT
                    {
                    AS144=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS144);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:697:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:698:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:698:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:701:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE145=null;
        Token WINDOW146=null;
        Token DOT147=null;
        Token DOT149=null;
        Token AS151=null;
        Token LPAREN153=null;
        Token RPAREN155=null;
        Token WHERE156=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression148 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression150 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter152 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList154 = null;

        EsperEPL2GrammarParser.expression_return expression157 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE145_tree=null;
        CommonTree WINDOW146_tree=null;
        CommonTree DOT147_tree=null;
        CommonTree DOT149_tree=null;
        CommonTree AS151_tree=null;
        CommonTree LPAREN153_tree=null;
        CommonTree RPAREN155_tree=null;
        CommonTree WHERE156_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            // EsperEPL2Grammar.g:702:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:702:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE145=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE145);

            WINDOW146=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW146);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:702:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==DOT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:702:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT147=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT147);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2966);
                    viewExpression148=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression148.getTree());
                    // EsperEPL2Grammar.g:702:46: ( DOT viewExpression )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==DOT) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:702:47: DOT viewExpression
                    	    {
                    	    DOT149=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2969); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT149);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2971);
                    	    viewExpression150=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression150.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:702:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt53=3;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RETAINUNION) ) {
                alt53=1;
            }
            else if ( (LA53_0==RETAININTERSECTION) ) {
                alt53=2;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:702:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:702:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:702:110: ( AS )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AS) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:702:110: AS
                    {
                    AS151=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS151);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:703:5: ( createWindowExprModelAfter | LPAREN createColumnList RPAREN )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SELECT||LA55_0==IDENT||LA55_0==TICKED_STRING_LITERAL) ) {
                alt55=1;
            }
            else if ( (LA55_0==LPAREN) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:704:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3003);
                    createWindowExprModelAfter152=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter152.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:705:10: LPAREN createColumnList RPAREN
                    {
                    LPAREN153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN153);

                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3020);
                    createColumnList154=createColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList154.getTree());
                    RPAREN155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN155);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:707:5: (i1= INSERT ( WHERE expression )? )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==INSERT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:707:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:707:16: ( WHERE expression )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==WHERE) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // EsperEPL2Grammar.g:707:17: WHERE expression
                            {
                            WHERE156=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3042); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE156);

                            pushFollow(FOLLOW_expression_in_createWindowExpr3044);
                            expression157=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression157.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, ri, createColumnList, createColumnList, INSERT, viewExpression, expression, i, ri, createWindowExprModelAfter, createWindowExprModelAfter, i, viewExpression, ru
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 708:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:708:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:708:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:708:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:708:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:708:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:708:98: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:709:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:709:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 710:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:710:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:710:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:710:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:710:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:710:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:710:84: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:713:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT158=null;
        Token FROM160=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList159 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier161 = null;


        CommonTree SELECT158_tree=null;
        CommonTree FROM160_tree=null;

        try {
            // EsperEPL2Grammar.g:714:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:714:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:714:4: ( SELECT createSelectionList FROM )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SELECT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:714:5: SELECT createSelectionList FROM
                    {
                    SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3131); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3134);
                    createSelectionList159=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList159.getTree());
                    FROM160=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3136); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3141);
            classIdentifier161=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier161.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createIndexExpr"
    // EsperEPL2Grammar.g:717:1: createIndexExpr : CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) ;
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token w=null;
        Token CREATE162=null;
        Token INDEX163=null;
        Token ON164=null;
        Token LPAREN165=null;
        Token RPAREN167=null;
        EsperEPL2GrammarParser.columnList_return columnList166 = null;


        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE162_tree=null;
        CommonTree INDEX163_tree=null;
        CommonTree ON164_tree=null;
        CommonTree LPAREN165_tree=null;
        CommonTree RPAREN167_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:718:2: ( CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) )
            // EsperEPL2Grammar.g:718:4: CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN
            {
            CREATE162=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE162);

            INDEX163=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX163);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            ON164=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON164);

            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);

            LPAREN165=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN165);

            pushFollow(FOLLOW_columnList_in_createIndexExpr3170);
            columnList166=columnList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList166.getTree());
            RPAREN167=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN167);



            // AST REWRITE
            // elements: w, columnList, n
            // token labels: w, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:3: -> ^( CREATE_INDEX_EXPR $n $w columnList )
            {
                // EsperEPL2Grammar.g:719:6: ^( CREATE_INDEX_EXPR $n $w columnList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createIndexExpr"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:722:1: createVariableExpr : CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token CREATE168=null;
        Token VARIABLE169=null;
        Token EQUALS171=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier170 = null;

        EsperEPL2GrammarParser.expression_return expression172 = null;


        CommonTree n_tree=null;
        CommonTree CREATE168_tree=null;
        CommonTree VARIABLE169_tree=null;
        CommonTree EQUALS171_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:723:2: ( CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) )
            // EsperEPL2Grammar.g:723:4: CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )?
            {
            CREATE168=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE168);

            VARIABLE169=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE169);

            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3203);
            classIdentifier170=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier170.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:723:44: ( EQUALS expression )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==EQUALS) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:723:45: EQUALS expression
                    {
                    EQUALS171=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS171);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3212);
                    expression172=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression172.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, classIdentifier, expression
            // token labels: n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:3: -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
            {
                // EsperEPL2Grammar.g:724:6: ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:724:48: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnList"
    // EsperEPL2Grammar.g:727:1: createColumnList : createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA174=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement173 = null;

        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement175 = null;


        CommonTree COMMA174_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            // EsperEPL2Grammar.g:730:2: ( createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) )
            // EsperEPL2Grammar.g:730:4: createColumnListElement ( COMMA createColumnListElement )*
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3254);
            createColumnListElement173=createColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement173.getTree());
            // EsperEPL2Grammar.g:730:28: ( COMMA createColumnListElement )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // EsperEPL2Grammar.g:730:29: COMMA createColumnListElement
            	    {
            	    COMMA174=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3257); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA174);

            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3259);
            	    createColumnListElement175=createColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement175.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);



            // AST REWRITE
            // elements: createColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 731:3: -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:731:6: ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);

                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());

                }
                stream_createColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnList"

    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnListElement"
    // EsperEPL2Grammar.g:734:1: createColumnListElement : name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) ;
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token b=null;
        Token RBRACK177=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier176 = null;


        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK177_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:735:2: (name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) )
            // EsperEPL2Grammar.g:735:7: name= IDENT ( classIdentifier (b= LBRACK RBRACK )? )
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:735:18: ( classIdentifier (b= LBRACK RBRACK )? )
            // EsperEPL2Grammar.g:735:19: classIdentifier (b= LBRACK RBRACK )?
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3292);
            classIdentifier176=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier176.getTree());
            // EsperEPL2Grammar.g:735:35: (b= LBRACK RBRACK )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LBRACK) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // EsperEPL2Grammar.g:735:36: b= LBRACK RBRACK
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);

                    RBRACK177=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK177);


                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: name, b, classIdentifier
            // token labels: b, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 736:3: -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
            {
                // EsperEPL2Grammar.g:736:6: ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:736:46: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:739:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA179=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement178 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement180 = null;


        CommonTree COMMA179_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:742:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:742:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3343);
            createSelectionListElement178=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement178.getTree());
            // EsperEPL2Grammar.g:742:31: ( COMMA createSelectionListElement )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // EsperEPL2Grammar.g:742:32: COMMA createSelectionListElement
            	    {
            	    COMMA179=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3346); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA179);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3348);
            	    createSelectionListElement180=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement180.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 743:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:743:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:746:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS182=null;
        Token AS184=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty181 = null;

        EsperEPL2GrammarParser.constant_return constant183 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS182_tree=null;
        CommonTree AS184_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:747:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt64=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt64=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt64=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt64=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:747:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 748:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:749:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3389);
                    eventProperty181=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty181.getTree());
                    // EsperEPL2Grammar.g:749:18: ( AS i= IDENT )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==AS) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // EsperEPL2Grammar.g:749:19: AS i= IDENT
                            {
                            AS182=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3392); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS182);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3396); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 750:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:750:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:750:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:751:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3417);
                    constant183=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant183.getTree());
                    AS184=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS184);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: i, constant
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 752:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:752:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:752:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSchemaExpr"
    // EsperEPL2Grammar.g:755:1: createSchemaExpr : CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE185=null;
        Token SCHEMA186=null;
        Token AS187=null;
        Token LPAREN189=null;
        Token RPAREN191=null;
        EsperEPL2GrammarParser.variantList_return variantList188 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList190 = null;

        EsperEPL2GrammarParser.columnList_return columnList192 = null;


        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE185_tree=null;
        CommonTree SCHEMA186_tree=null;
        CommonTree AS187_tree=null;
        CommonTree LPAREN189_tree=null;
        CommonTree RPAREN191_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:756:2: ( CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:756:4: CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            {
            CREATE185=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE185);

            // EsperEPL2Grammar.g:756:18: (keyword= IDENT )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IDENT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:756:18: keyword= IDENT
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);


                    }
                    break;

            }

            SCHEMA186=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA186);

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:756:44: ( AS )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==AS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:756:44: AS
                    {
                    AS187=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS187);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:757:5: ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==IDENT||LA69_0==STAR||LA69_0==TICKED_STRING_LITERAL) ) {
                alt69=1;
            }
            else if ( (LA69_0==LPAREN) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:758:4: variantList
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3474);
                    variantList188=variantList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList188.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:759:10: LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )?
                    {
                    LPAREN189=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN189);

                    // EsperEPL2Grammar.g:759:17: ( createColumnList )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==IDENT) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // EsperEPL2Grammar.g:759:17: createColumnList
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3487);
                            createColumnList190=createColumnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList190.getTree());

                            }
                            break;

                    }

                    RPAREN191=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN191);

                    // EsperEPL2Grammar.g:759:42: (inherits= IDENT columnList )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==IDENT) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:759:43: inherits= IDENT columnList
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3495); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);

                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3497);
                            columnList192=columnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList192.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: name, name, keyword, variantList, createColumnList, inherits, name, variantList, createColumnList, columnList
            // token labels: inherits, keyword, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 761:3: -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
            if (inherits != null) {
                // EsperEPL2Grammar.g:761:27: ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:761:54: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:761:72: ^( CREATE_SCHEMA_EXPR_INH $inherits columnList )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);

                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 762:3: -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
            if (keyword != null) {
                // EsperEPL2Grammar.g:762:26: ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                // EsperEPL2Grammar.g:762:65: ^( CREATE_SCHEMA_EXPR_QUAL $keyword)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);

                adaptor.addChild(root_2, stream_keyword.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 763:3: -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:763:6: ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:763:33: ( variantList )?
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());

                }
                stream_variantList.reset();
                // EsperEPL2Grammar.g:763:46: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSchemaExpr"

    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantList"
    // EsperEPL2Grammar.g:766:1: variantList : variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) ;
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA194=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement193 = null;

        EsperEPL2GrammarParser.variantListElement_return variantListElement195 = null;


        CommonTree COMMA194_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            // EsperEPL2Grammar.g:767:2: ( variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) )
            // EsperEPL2Grammar.g:767:4: variantListElement ( COMMA variantListElement )*
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3586);
            variantListElement193=variantListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement193.getTree());
            // EsperEPL2Grammar.g:767:23: ( COMMA variantListElement )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // EsperEPL2Grammar.g:767:24: COMMA variantListElement
            	    {
            	    COMMA194=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3589); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA194);

            	    pushFollow(FOLLOW_variantListElement_in_variantList3591);
            	    variantListElement195=variantListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement195.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);



            // AST REWRITE
            // elements: variantListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 768:3: -> ^( VARIANT_LIST ( variantListElement )+ )
            {
                // EsperEPL2Grammar.g:768:6: ^( VARIANT_LIST ( variantListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);

                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());

                }
                stream_variantListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantList"

    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantListElement"
    // EsperEPL2Grammar.g:771:1: variantListElement : ( STAR | classIdentifier );
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR196=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier197 = null;


        CommonTree STAR196_tree=null;

        try {
            // EsperEPL2Grammar.g:772:2: ( STAR | classIdentifier )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==STAR) ) {
                alt71=1;
            }
            else if ( (LA71_0==IDENT||LA71_0==TICKED_STRING_LITERAL) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:772:7: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STAR196=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR196_tree = (CommonTree)adaptor.create(STAR196);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR196_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:773:4: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3624);
                    classIdentifier197=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier197.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:776:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO198=null;
        Token LPAREN199=null;
        Token RPAREN201=null;
        EsperEPL2GrammarParser.columnList_return columnList200 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO198_tree=null;
        CommonTree LPAREN199_tree=null;
        CommonTree RPAREN201_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:779:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) )
            // EsperEPL2Grammar.g:779:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )?
            {
            // EsperEPL2Grammar.g:779:4: (s= ISTREAM | s= RSTREAM )?
            int alt72=3;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==ISTREAM) ) {
                alt72=1;
            }
            else if ( (LA72_0==RSTREAM) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:779:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:779:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO198=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO198);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:779:42: ( LPAREN columnList RPAREN )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==LPAREN) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:779:43: LPAREN columnList RPAREN
                    {
                    LPAREN199=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN199);

                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3668);
                    columnList200=columnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList200.getTree());
                    RPAREN201=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN201);


                    }
                    break;

            }



            // AST REWRITE
            // elements: columnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
            {
                // EsperEPL2Grammar.g:780:6: ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:780:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:780:31: ( columnList )?
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());

                }
                stream_columnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columnList"
    // EsperEPL2Grammar.g:783:1: columnList : IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT202=null;
        Token COMMA203=null;
        Token IDENT204=null;

        CommonTree IDENT202_tree=null;
        CommonTree COMMA203_tree=null;
        CommonTree IDENT204_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // EsperEPL2Grammar.g:784:2: ( IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:784:5: IDENT ( COMMA IDENT )*
            {
            IDENT202=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT202);

            // EsperEPL2Grammar.g:784:11: ( COMMA IDENT )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // EsperEPL2Grammar.g:784:12: COMMA IDENT
            	    {
            	    COMMA203=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3707); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA203);

            	    IDENT204=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3709); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT204);


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 785:3: -> ^( EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:785:6: ^( EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:785:16: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:788:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression205 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin206 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList207 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:791:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:791:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3747);
            streamExpression205=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression205.getTree());
            // EsperEPL2Grammar.g:791:21: ( regularJoin | outerJoinList )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==EOF||LA75_0==WHERE||(LA75_0>=GROUP && LA75_0<=HAVING)||LA75_0==OUTPUT||LA75_0==ORDER||LA75_0==ROW_LIMIT_EXPR||LA75_0==MATCH_RECOGNIZE||LA75_0==COMMA) ) {
                alt75=1;
            }
            else if ( ((LA75_0>=INNER && LA75_0<=FULL)) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:791:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3750);
                    regularJoin206=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin206.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:791:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3754);
                    outerJoinList207=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList207.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:794:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA208=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression209 = null;


        CommonTree COMMA208_tree=null;

        try {
            // EsperEPL2Grammar.g:795:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:795:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:795:4: ( COMMA streamExpression )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // EsperEPL2Grammar.g:795:5: COMMA streamExpression
            	    {
            	    COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3768); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3771);
            	    streamExpression209=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression209.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:798:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin210 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin211 = null;



        try {
            // EsperEPL2Grammar.g:799:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:799:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3785);
            outerJoin210=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin210.getTree());
            // EsperEPL2Grammar.g:799:14: ( outerJoin )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( ((LA77_0>=INNER && LA77_0<=FULL)) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // EsperEPL2Grammar.g:799:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3788);
            	    outerJoin211=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin211.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:802:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER212=null;
        Token JOIN213=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression214 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent215 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER212_tree=null;
        CommonTree JOIN213_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:805:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:805:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:805:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=JOIN && LA80_0<=FULL)) ) {
                alt80=1;
            }
            else if ( (LA80_0==INNER) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:806:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:806:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( ((LA79_0>=LEFT && LA79_0<=FULL)) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // EsperEPL2Grammar.g:806:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:806:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt78=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt78=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt78=2;
                                }
                                break;
                            case FULL:
                                {
                                alt78=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 78, 0, input);

                                throw nvae;
                            }

                            switch (alt78) {
                                case 1 :
                                    // EsperEPL2Grammar.g:806:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3831); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:806:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3835); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:806:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3839); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER212=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3842); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER212);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:807:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:807:14: (i= INNER )
                    // EsperEPL2Grammar.g:807:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN213=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3877); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN213);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3879);
            streamExpression214=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression214.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3881);
            outerJoinIdent215=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent215.getTree());


            // AST REWRITE
            // elements: streamExpression, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 809:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:809:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 810:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:810:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 811:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:811:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 812:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:812:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:815:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON216=null;
        Token AND_EXPR218=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair217 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair219 = null;


        CommonTree ON216_tree=null;
        CommonTree AND_EXPR218_tree=null;

        try {
            // EsperEPL2Grammar.g:816:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:816:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON216=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3946); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3949);
            outerJoinIdentPair217=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair217.getTree());
            // EsperEPL2Grammar.g:816:27: ( AND_EXPR outerJoinIdentPair )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==AND_EXPR) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // EsperEPL2Grammar.g:816:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR218=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3952); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3955);
            	    outerJoinIdentPair219=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair219.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:819:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS221=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty220 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty222 = null;


        CommonTree EQUALS221_tree=null;

        try {
            // EsperEPL2Grammar.g:820:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:820:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3970);
            eventProperty220=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty220.getTree());
            EQUALS221=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3972); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3975);
            eventProperty222=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty222.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:823:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression223 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:826:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:826:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3997);
            evalOrExpression223=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression223.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 827:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:827:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:830:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList224 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:833:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:833:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:833:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt82=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt82=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt82=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt82=3;
                    }
                    break;
            }

            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:833:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:833:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:833:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:833:43: (d= DISTINCT )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==DISTINCT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:833:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause4054);
            selectionList224=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList224.getTree());


            // AST REWRITE
            // elements: d, selectionList, s
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 834:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:834:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:834:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:834:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:837:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA226=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement225 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement227 = null;


        CommonTree COMMA226_tree=null;

        try {
            // EsperEPL2Grammar.g:838:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:838:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList4085);
            selectionListElement225=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement225.getTree());
            // EsperEPL2Grammar.g:838:25: ( COMMA selectionListElement )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // EsperEPL2Grammar.g:838:26: COMMA selectionListElement
            	    {
            	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4088); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4091);
            	    selectionListElement227=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement227.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:841:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS230=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector228 = null;

        EsperEPL2GrammarParser.expression_return expression229 = null;


        CommonTree s_tree=null;
        CommonTree AS230_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:843:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt86=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt86=1;
                }
                break;
            case IDENT:
                {
                int LA86_2 = input.LA(2);

                if ( (LA86_2==DOT) ) {
                    int LA86_62 = input.LA(3);

                    if ( (LA86_62==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt86=2;
                    }
                    else if ( (LA86_62==WINDOW||LA86_62==ESCAPE||LA86_62==EVERY_EXPR||(LA86_62>=SUM && LA86_62<=COUNT)||LA86_62==OUTER||(LA86_62>=JOIN && LA86_62<=FULL)||(LA86_62>=EVENTS && LA86_62<=LAST)||(LA86_62>=UNIDIRECTIONAL && LA86_62<=PRIOR)||(LA86_62>=WEEKDAY && LA86_62<=CAST)||LA86_62==SNAPSHOT||(LA86_62>=VARIABLE && LA86_62<=INDEX)||(LA86_62>=DEFINE && LA86_62<=MATCHES)||LA86_62==IDENT||LA86_62==TICKED_STRING_LITERAL) ) {
                        alt86=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 62, input);

                        throw nvae;
                    }
                }
                else if ( (LA86_2==EOF||(LA86_2>=IN_SET && LA86_2<=REGEXP)||(LA86_2>=OR_EXPR && LA86_2<=NOT_EXPR)||(LA86_2>=WHERE && LA86_2<=AS)||LA86_2==FROM||LA86_2==IS||(LA86_2>=GROUP && LA86_2<=HAVING)||LA86_2==OUTPUT||LA86_2==INSERT||LA86_2==ORDER||LA86_2==ROW_LIMIT_EXPR||LA86_2==COMMA||LA86_2==EQUALS||LA86_2==LPAREN||LA86_2==LBRACK||(LA86_2>=STAR && LA86_2<=QUESTION)||(LA86_2>=BAND && LA86_2<=MOD)||LA86_2==ESCAPECHAR) ) {
                    alt86=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt86=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:843:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 843:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:844:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4133);
                    streamSelector228=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector228.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:845:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4138);
                    expression229=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression229.getTree());
                    // EsperEPL2Grammar.g:845:15: ( AS i= keywordAllowedIdent )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==AS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // EsperEPL2Grammar.g:845:16: AS i= keywordAllowedIdent
                            {
                            AS230=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4141); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS230);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4145);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 846:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:846:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 847:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:847:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 848:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:848:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:851:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT231=null;
        Token STAR232=null;
        Token AS233=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT231_tree=null;
        CommonTree STAR232_tree=null;
        CommonTree AS233_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:852:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:852:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT231=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT231);

            STAR232=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR232);

            // EsperEPL2Grammar.g:852:21: ( AS i= IDENT )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==AS) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:852:22: AS i= IDENT
                    {
                    AS233=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS233);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 853:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:853:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:853:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:857:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT238=null;
        Token DOT240=null;
        Token AS242=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression234 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression235 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression236 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression237 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression239 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression241 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT238_tree=null;
        CommonTree DOT240_tree=null;
        CommonTree AS242_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:858:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:858:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:858:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt88=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==EOF||(LA88_1>=WHERE && LA88_1<=AS)||(LA88_1>=INNER && LA88_1<=ON)||(LA88_1>=GROUP && LA88_1<=HAVING)||LA88_1==OUTPUT||LA88_1==ORDER||(LA88_1>=UNIDIRECTIONAL && LA88_1<=RETAININTERSECTION)||LA88_1==ROW_LIMIT_EXPR||LA88_1==MATCH_RECOGNIZE||(LA88_1>=COMMA && LA88_1<=LPAREN)||LA88_1==LBRACK) ) {
                    alt88=1;
                }
                else if ( (LA88_1==COLON) ) {
                    alt88=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt88=1;
                }
                break;
            case PATTERN:
                {
                alt88=2;
                }
                break;
            case SQL:
                {
                alt88=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:858:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4243);
                    eventFilterExpression234=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression234.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:858:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4247);
                    patternInclusionExpression235=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression235.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:858:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4251);
                    databaseJoinExpression236=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression236.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:858:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4255);
                    methodJoinExpression237=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression237.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:859:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DOT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // EsperEPL2Grammar.g:859:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT238=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT238);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression4264);
                    viewExpression239=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression239.getTree());
                    // EsperEPL2Grammar.g:859:23: ( DOT viewExpression )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==DOT) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:859:24: DOT viewExpression
                    	    {
                    	    DOT240=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4267); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT240);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4269);
                    	    viewExpression241=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression241.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:859:47: ( AS i= IDENT | i= IDENT )?
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==AS) ) {
                alt91=1;
            }
            else if ( (LA91_0==IDENT) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:859:48: AS i= IDENT
                    {
                    AS242=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS242);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:859:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:859:71: (u= UNIDIRECTIONAL )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==UNIDIRECTIONAL) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:859:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:859:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt93=3;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==RETAINUNION) ) {
                alt93=1;
            }
            else if ( (LA93_0==RETAININTERSECTION) ) {
                alt93=2;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:859:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:859:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: u, ru, viewExpression, methodJoinExpression, databaseJoinExpression, patternInclusionExpression, ri, i, eventFilterExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 860:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:860:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:860:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:860:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:860:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:860:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:861:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:861:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:861:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:861:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:861:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:872:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE243=null;
        Token LPAREN244=null;
        Token RPAREN252=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy245 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures246 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection247 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip248 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern249 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval250 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine251 = null;


        CommonTree MATCH_RECOGNIZE243_tree=null;
        CommonTree LPAREN244_tree=null;
        CommonTree RPAREN252_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:873:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:873:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE243=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE243);

            LPAREN244=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN244);

            // EsperEPL2Grammar.g:875:4: ( matchRecogPartitionBy )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==PARTITION) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:875:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4387);
                    matchRecogPartitionBy245=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy245.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4394);
            matchRecogMeasures246=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures246.getTree());
            // EsperEPL2Grammar.g:877:4: ( matchRecogMatchesSelection )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==ALL) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // EsperEPL2Grammar.g:877:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4399);
                    matchRecogMatchesSelection247=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection247.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:878:4: ( matchRecogMatchesAfterSkip )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==AFTER) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:878:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4405);
                    matchRecogMatchesAfterSkip248=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip248.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4411);
            matchRecogPattern249=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern249.getTree());
            // EsperEPL2Grammar.g:880:4: ( matchRecogMatchesInterval )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==IDENT) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:880:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4417);
                    matchRecogMatchesInterval250=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval250.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4423);
            matchRecogDefine251=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine251.getTree());
            RPAREN252=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN252);



            // AST REWRITE
            // elements: matchRecogDefine, matchRecogPartitionBy, matchRecogMatchesInterval, matchRecogPattern, matchRecogMeasures, matchRecogMatchesAfterSkip, MATCH_RECOGNIZE, matchRecogMatchesSelection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 883:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:883:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:883:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:883:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:883:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:883:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:886:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION253=null;
        Token BY254=null;
        Token COMMA256=null;
        EsperEPL2GrammarParser.expression_return expression255 = null;

        EsperEPL2GrammarParser.expression_return expression257 = null;


        CommonTree PARTITION253_tree=null;
        CommonTree BY254_tree=null;
        CommonTree COMMA256_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:887:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:887:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION253=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION253);

            BY254=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY254);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4471);
            expression255=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression255.getTree());
            // EsperEPL2Grammar.g:887:28: ( COMMA expression )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==COMMA) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // EsperEPL2Grammar.g:887:29: COMMA expression
            	    {
            	    COMMA256=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4474); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA256);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4476);
            	    expression257=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression257.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 888:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:888:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:891:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES258=null;
        Token COMMA260=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem259 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem261 = null;


        CommonTree MEASURES258_tree=null;
        CommonTree COMMA260_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:892:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:892:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES258=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES258);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4507);
            matchRecogMeasureItem259=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem259.getTree());
            // EsperEPL2Grammar.g:892:35: ( COMMA matchRecogMeasureItem )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // EsperEPL2Grammar.g:892:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA260=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4510); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA260);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4512);
            	    matchRecogMeasureItem261=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem261.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 893:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:893:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:893:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:896:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS263=null;
        EsperEPL2GrammarParser.expression_return expression262 = null;


        CommonTree i_tree=null;
        CommonTree AS263_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:897:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:897:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4537);
            expression262=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());
            // EsperEPL2Grammar.g:897:15: ( AS (i= IDENT )? )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==AS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // EsperEPL2Grammar.g:897:16: AS (i= IDENT )?
                    {
                    AS263=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS263);

                    // EsperEPL2Grammar.g:897:19: (i= IDENT )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==IDENT) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // EsperEPL2Grammar.g:897:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4545); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 898:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:898:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:898:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:901:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL264=null;
        Token MATCHES265=null;

        CommonTree ALL264_tree=null;
        CommonTree MATCHES265_tree=null;

        try {
            // EsperEPL2Grammar.g:902:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:902:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL264=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL264_tree = (CommonTree)adaptor.create(ALL264);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL264_tree, root_0);
            }
            MATCHES265=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4579); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:905:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN266=null;
        Token LPAREN267=null;
        Token RPAREN269=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration268 = null;


        CommonTree PATTERN266_tree=null;
        CommonTree LPAREN267_tree=null;
        CommonTree RPAREN269_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:906:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:906:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN266=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN266);

            LPAREN267=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN267);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4598);
            matchRecogPatternAlteration268=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration268.getTree());
            RPAREN269=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN269);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 907:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:907:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:910:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER270=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER270_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:911:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:911:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER270=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER270);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4626);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4630);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4634);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4638);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4642);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i1, i3, i4, i2, i5
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 912:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:912:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:915:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod271 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:916:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:916:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4680);
            timePeriod271=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod271.getTree());


            // AST REWRITE
            // elements: i, timePeriod
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 917:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:917:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:920:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat272 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat273 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:921:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:921:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4706);
            matchRecogPatternConcat272=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat272.getTree());
            // EsperEPL2Grammar.g:921:28: (o= BOR matchRecogPatternConcat )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==BOR) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:921:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4711); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4713);
            	    matchRecogPatternConcat273=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat273.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 922:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:922:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 923:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:926:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary274 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:927:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:927:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:927:4: ( matchRecogPatternUnary )+
            int cnt103=0;
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==IDENT||LA103_0==LPAREN) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // EsperEPL2Grammar.g:927:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4746);
            	    matchRecogPatternUnary274=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary274.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 928:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:928:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:931:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested275 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom276 = null;



        try {
            // EsperEPL2Grammar.g:932:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==LPAREN) ) {
                alt104=1;
            }
            else if ( (LA104_0==IDENT) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:932:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4771);
                    matchRecogPatternNested275=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested275.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:933:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4777);
                    matchRecogPatternAtom276=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom276.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:936:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN277=null;
        Token RPAREN279=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration278 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN277_tree=null;
        CommonTree RPAREN279_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:937:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:937:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN277=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN277);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4791);
            matchRecogPatternAlteration278=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration278.getTree());
            RPAREN279=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN279);

            // EsperEPL2Grammar.g:937:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt105=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt105=1;
                    }
                    break;
                case PLUS:
                    {
                    alt105=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt105=3;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // EsperEPL2Grammar.g:937:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:937:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:937:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: p, s, q, matchRecogPatternAlteration
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 938:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:938:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:938:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:938:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:938:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:941:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:942:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:942:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:942:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==STAR||(LA108_0>=PLUS && LA108_0<=QUESTION)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:942:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:942:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt106=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt106=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt106=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt106=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }

                    switch (alt106) {
                        case 1 :
                            // EsperEPL2Grammar.g:942:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4855); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:942:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:942:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4867); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:942:44: (reluctant= QUESTION )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==QUESTION) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // EsperEPL2Grammar.g:942:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, p, reluctant, s, i
            // token labels: s, reluctant, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 943:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:943:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:943:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:943:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:943:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:943:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:946:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE280=null;
        Token COMMA282=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem281 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem283 = null;


        CommonTree DEFINE280_tree=null;
        CommonTree COMMA282_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:947:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:947:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE280=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE280);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4919);
            matchRecogDefineItem281=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem281.getTree());
            // EsperEPL2Grammar.g:947:32: ( COMMA matchRecogDefineItem )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // EsperEPL2Grammar.g:947:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA282);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4924);
            	    matchRecogDefineItem283=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem283.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 948:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:948:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:951:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS284=null;
        EsperEPL2GrammarParser.expression_return expression285 = null;


        CommonTree i_tree=null;
        CommonTree AS284_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:952:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:952:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS284=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS284);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4955);
            expression285=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression285.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 953:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:953:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:956:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN286=null;
        Token LBRACK287=null;
        Token RBRACK289=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression288 = null;


        CommonTree PATTERN286_tree=null;
        CommonTree LBRACK287_tree=null;
        CommonTree RBRACK289_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:957:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:957:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN286=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN286);

            LBRACK287=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK287);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4984);
            patternExpression288=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression288.getTree());
            RBRACK289=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK289);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:958:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:961:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL290=null;
        Token COLON291=null;
        Token LBRACK292=null;
        Token METADATASQL293=null;
        Token RBRACK294=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL290_tree=null;
        CommonTree COLON291_tree=null;
        CommonTree LBRACK292_tree=null;
        CommonTree METADATASQL293_tree=null;
        CommonTree RBRACK294_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:964:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:964:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL290=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL290);

            COLON291=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON291);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK292=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK292);

            // EsperEPL2Grammar.g:964:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==STRING_LITERAL) ) {
                alt110=1;
            }
            else if ( (LA110_0==QUOTED_STRING_LITERAL) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // EsperEPL2Grammar.g:964:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:964:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:964:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==METADATASQL) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // EsperEPL2Grammar.g:964:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL293=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL293);

                    // EsperEPL2Grammar.g:964:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==STRING_LITERAL) ) {
                        alt111=1;
                    }
                    else if ( (LA111_0==QUOTED_STRING_LITERAL) ) {
                        alt111=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }
                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:964:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5047); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:964:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5053); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK294=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK294);



            // AST REWRITE
            // elements: i, s, s2
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:965:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:965:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:968:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON295=null;
        Token LPAREN297=null;
        Token RPAREN299=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier296 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList298 = null;


        CommonTree i_tree=null;
        CommonTree COLON295_tree=null;
        CommonTree LPAREN297_tree=null;
        CommonTree RPAREN299_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:971:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:971:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON295=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON295);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5113);
            classIdentifier296=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier296.getTree());
            // EsperEPL2Grammar.g:971:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LPAREN) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:971:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN297=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN297);

                    // EsperEPL2Grammar.g:971:49: ( expressionList )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==WINDOW||LA113_0==ESCAPE||(LA113_0>=NOT_EXPR && LA113_0<=EVERY_EXPR)||(LA113_0>=SUM && LA113_0<=COUNT)||LA113_0==CASE||LA113_0==OUTER||(LA113_0>=JOIN && LA113_0<=FULL)||(LA113_0>=EVENTS && LA113_0<=LAST)||(LA113_0>=UNIDIRECTIONAL && LA113_0<=CURRENT_TIMESTAMP)||LA113_0==SNAPSHOT||(LA113_0>=VARIABLE && LA113_0<=INDEX)||(LA113_0>=BOOLEAN_TRUE && LA113_0<=VALUE_NULL)||(LA113_0>=DEFINE && LA113_0<=MATCHES)||LA113_0==NUM_DOUBLE||LA113_0==IDENT||LA113_0==LPAREN||(LA113_0>=PLUS && LA113_0<=QUESTION)||(LA113_0>=STRING_LITERAL && LA113_0<=QUOTED_STRING_LITERAL)||LA113_0==MINUS||LA113_0==LCURLY||LA113_0==NUM_INT||(LA113_0>=TICKED_STRING_LITERAL && LA113_0<=NUM_FLOAT)) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // EsperEPL2Grammar.g:971:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5118);
                            expressionList298=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList298.getTree());

                            }
                            break;

                    }

                    RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN299);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 972:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:972:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:972:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:975:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON300=null;
        Token LPAREN301=null;
        Token RPAREN303=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList302 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON300_tree=null;
        CommonTree LPAREN301_tree=null;
        CommonTree RPAREN303_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:978:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:978:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON300=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON300);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN301);

            // EsperEPL2Grammar.g:978:35: ( expressionWithTimeList )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==WINDOW||LA115_0==ESCAPE||(LA115_0>=NOT_EXPR && LA115_0<=EVERY_EXPR)||(LA115_0>=SUM && LA115_0<=COUNT)||LA115_0==CASE||LA115_0==OUTER||(LA115_0>=JOIN && LA115_0<=FULL)||(LA115_0>=EVENTS && LA115_0<=LAST)||(LA115_0>=UNIDIRECTIONAL && LA115_0<=CURRENT_TIMESTAMP)||LA115_0==SNAPSHOT||(LA115_0>=VARIABLE && LA115_0<=INDEX)||(LA115_0>=BOOLEAN_TRUE && LA115_0<=VALUE_NULL)||(LA115_0>=DEFINE && LA115_0<=MATCHES)||LA115_0==NUM_DOUBLE||LA115_0==IDENT||LA115_0==LPAREN||LA115_0==LBRACK||LA115_0==STAR||(LA115_0>=PLUS && LA115_0<=QUESTION)||(LA115_0>=STRING_LITERAL && LA115_0<=QUOTED_STRING_LITERAL)||LA115_0==MINUS||LA115_0==LCURLY||LA115_0==NUM_INT||(LA115_0>=TICKED_STRING_LITERAL && LA115_0<=NUM_FLOAT)) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // EsperEPL2Grammar.g:978:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5184);
                    expressionWithTimeList302=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList302.getTree());

                    }
                    break;

            }

            RPAREN303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN303);



            // AST REWRITE
            // elements: ns, nm, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 979:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:979:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:979:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:982:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA305=null;
        EsperEPL2GrammarParser.expression_return expression304 = null;

        EsperEPL2GrammarParser.expression_return expression306 = null;


        CommonTree COMMA305_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:985:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:985:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5226);
            expression304=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression304.getTree());
            // EsperEPL2Grammar.g:985:15: ( COMMA expression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // EsperEPL2Grammar.g:985:16: COMMA expression
            	    {
            	    COMMA305=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5229); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA305);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr5231);
            	    expression306=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression306.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 986:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:986:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:989:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA308=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement307 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement309 = null;


        CommonTree COMMA308_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:992:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:992:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5266);
            orderByListElement307=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement307.getTree());
            // EsperEPL2Grammar.g:992:23: ( COMMA orderByListElement )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // EsperEPL2Grammar.g:992:24: COMMA orderByListElement
            	    {
            	    COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5269); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA308);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5271);
            	    orderByListElement309=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement309.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 993:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:993:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:996:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression310 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:997:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:997:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5296);
            expression310=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression310.getTree());
            // EsperEPL2Grammar.g:997:15: (d= ASC | d= DESC )?
            int alt118=3;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==ASC) ) {
                alt118=1;
            }
            else if ( (LA118_0==DESC) ) {
                alt118=2;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:997:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:997:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 998:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:998:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:998:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:1001:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression311 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:1004:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:1004:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5343);
            evalOrExpression311=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression311.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1005:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:1005:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:1008:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN317=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter312 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod313 = null;

        EsperEPL2GrammarParser.number_return number314 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet315 = null;

        EsperEPL2GrammarParser.expression_return expression316 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr318 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN317_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:1011:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:1011:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:1011:9: ( outputLimitAfter )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==AFTER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:1011:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5381);
                    outputLimitAfter312=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter312.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1012:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt120=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt120=1;
                    }
                    break;
                case FIRST:
                    {
                    alt120=2;
                    }
                    break;
                case LAST:
                    {
                    alt120=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt120=4;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // EsperEPL2Grammar.g:1012:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1012:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1012:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1012:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1013:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt124=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt124=1;
                }
                break;
            case AT:
                {
                alt124=2;
                }
                break;
            case WHEN:
                {
                alt124=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
                {
                alt124=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:1014:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:1014:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:1014:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:1015:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==NUM_INT) ) {
                        int LA122_1 = input.LA(2);

                        if ( (LA122_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_1==EVENTS) ) {
                            alt122=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA122_0==NUM_LONG) ) {
                        int LA122_2 = input.LA(2);

                        if ( (LA122_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==EVENTS) ) {
                            alt122=2;
                        }
                        else if ( (LA122_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA122_0==NUM_FLOAT) ) {
                        int LA122_3 = input.LA(2);

                        if ( (LA122_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_3==EVENTS) ) {
                            alt122=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA122_0==NUM_DOUBLE) ) {
                        int LA122_4 = input.LA(2);

                        if ( (LA122_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==EVENTS) ) {
                            alt122=2;
                        }
                        else if ( (LA122_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA122_0==IDENT) ) {
                        int LA122_5 = input.LA(2);

                        if ( (LA122_5==EVENTS) ) {
                            alt122=2;
                        }
                        else if ( (LA122_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else if ( (LA122_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt122=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA122_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt122=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 0, input);

                        throw nvae;
                    }
                    switch (alt122) {
                        case 1 :
                            // EsperEPL2Grammar.g:1016:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5465);
                            timePeriod313=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod313.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1017:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:1017:9: ( number | i= IDENT )
                            int alt121=2;
                            int LA121_0 = input.LA(1);

                            if ( (LA121_0==NUM_DOUBLE||LA121_0==NUM_INT||(LA121_0>=NUM_LONG && LA121_0<=NUM_FLOAT)) ) {
                                alt121=1;
                            }
                            else if ( (LA121_0==IDENT) ) {
                                alt121=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 121, 0, input);

                                throw nvae;
                            }
                            switch (alt121) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1017:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5476);
                                    number314=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number314.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1017:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5482); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1017:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:1017:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5488); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1021:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:1021:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:1021:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5521);
                    crontabLimitParameterSet315=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet315.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1023:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:1023:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:1023:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5540);
                    expression316=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression316.getTree());
                    // EsperEPL2Grammar.g:1023:26: ( THEN onSetExpr )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==THEN) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // EsperEPL2Grammar.g:1023:27: THEN onSetExpr
                            {
                            THEN317=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5543); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN317);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5545);
                            onSetExpr318=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr318.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1025:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: outputLimitAfter, crontabLimitParameterSet, outputLimitAfter, outputLimitAfter, k, onSetExpr, number, timePeriod, k, k, k, outputLimitAfter, outputLimitAfter, i, expression
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1026:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:1026:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1026:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:1026:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1026:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1026:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1027:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:1027:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1027:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:1027:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1028:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:1028:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1028:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:1028:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1029:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:1029:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1029:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1029:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:1029:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1030:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:1030:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:1033:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS321=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod319 = null;

        EsperEPL2GrammarParser.number_return number320 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS321_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1034:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:1034:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:1034:14: ( timePeriod | number EVENTS )
            int alt125=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==EVENTS) ) {
                    alt125=2;
                }
                else if ( (LA125_1==MIN||(LA125_1>=TIMEPERIOD_DAY && LA125_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt125=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA125_2 = input.LA(2);

                if ( (LA125_2==MIN||(LA125_2>=TIMEPERIOD_DAY && LA125_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt125=1;
                }
                else if ( (LA125_2==EVENTS) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA125_3 = input.LA(2);

                if ( (LA125_3==MIN||(LA125_3>=TIMEPERIOD_DAY && LA125_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt125=1;
                }
                else if ( (LA125_3==EVENTS) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA125_4 = input.LA(2);

                if ( (LA125_4==MIN||(LA125_4>=TIMEPERIOD_DAY && LA125_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt125=1;
                }
                else if ( (LA125_4==EVENTS) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt125=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5698);
                    timePeriod319=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod319.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1034:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5702);
                    number320=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number320.getTree());
                    EVENTS321=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS321);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, AFTER, timePeriod
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1035:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:1035:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:1035:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:1035:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:1038:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:1041:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:1041:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:1041:6: (n1= numberconstant | i1= IDENT )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==NUM_DOUBLE||LA126_0==PLUS||LA126_0==MINUS||LA126_0==NUM_INT||(LA126_0>=NUM_LONG && LA126_0<=NUM_FLOAT)) ) {
                alt126=1;
            }
            else if ( (LA126_0==IDENT) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // EsperEPL2Grammar.g:1041:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5750);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1041:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1041:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==OFFSET||LA129_0==COMMA) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1041:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:1041:38: (c= COMMA | o= OFFSET )
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==COMMA) ) {
                        alt127=1;
                    }
                    else if ( (LA127_0==OFFSET) ) {
                        alt127=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 0, input);

                        throw nvae;
                    }
                    switch (alt127) {
                        case 1 :
                            // EsperEPL2Grammar.g:1041:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5763); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1041:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5769); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1041:59: (n2= numberconstant | i2= IDENT )
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==NUM_DOUBLE||LA128_0==PLUS||LA128_0==MINUS||LA128_0==NUM_INT||(LA128_0>=NUM_LONG && LA128_0<=NUM_FLOAT)) ) {
                        alt128=1;
                    }
                    else if ( (LA128_0==IDENT) ) {
                        alt128=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 128, 0, input);

                        throw nvae;
                    }
                    switch (alt128) {
                        case 1 :
                            // EsperEPL2Grammar.g:1041:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5775);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1041:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n1, i2, n2, o, c, i1
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1042:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:1042:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1042:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:1042:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:1042:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:1042:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:1042:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:1042:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:1045:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN322=null;
        Token COMMA324=null;
        Token COMMA326=null;
        Token COMMA328=null;
        Token COMMA330=null;
        Token COMMA332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime323 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime325 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime327 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime329 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime331 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime333 = null;


        CommonTree LPAREN322_tree=null;
        CommonTree COMMA324_tree=null;
        CommonTree COMMA326_tree=null;
        CommonTree COMMA328_tree=null;
        CommonTree COMMA330_tree=null;
        CommonTree COMMA332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:1046:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:1046:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN322=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN322);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5835);
            expressionWithTime323=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime323.getTree());
            COMMA324=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA324);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5839);
            expressionWithTime325=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime325.getTree());
            COMMA326=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA326);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5843);
            expressionWithTime327=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime327.getTree());
            COMMA328=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA328);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5847);
            expressionWithTime329=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime329.getTree());
            COMMA330=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA330);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5851);
            expressionWithTime331=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime331.getTree());
            // EsperEPL2Grammar.g:1046:130: ( COMMA expressionWithTime )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==COMMA) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // EsperEPL2Grammar.g:1046:131: COMMA expressionWithTime
                    {
                    COMMA332=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA332);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5856);
                    expressionWithTime333=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime333.getTree());

                    }
                    break;

            }

            RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1047:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:1047:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:1047:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:1050:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN335=null;
        Token THEN337=null;
        EsperEPL2GrammarParser.expression_return expression336 = null;

        EsperEPL2GrammarParser.expression_return expression338 = null;


        CommonTree WHEN335_tree=null;
        CommonTree THEN337_tree=null;

        try {
            // EsperEPL2Grammar.g:1051:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:1051:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1051:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:1051:5: WHEN expression THEN expression
            {
            WHEN335=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5890); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5893);
            expression336=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression336.getTree());
            THEN337=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5895); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5898);
            expression338=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression338.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:1054:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE339=null;
        EsperEPL2GrammarParser.expression_return expression340 = null;


        CommonTree ELSE339_tree=null;

        try {
            // EsperEPL2Grammar.g:1055:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1055:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1055:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1055:5: ELSE expression
            {
            ELSE339=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5911); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5914);
            expression340=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression340.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1059:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression341 = null;



        try {
            // EsperEPL2Grammar.g:1060:2: ( caseExpression )
            // EsperEPL2Grammar.g:1060:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5927);
            caseExpression341=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression341.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1063:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE342=null;
        Token END345=null;
        Token CASE346=null;
        Token END350=null;
        EsperEPL2GrammarParser.whenClause_return whenClause343 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause344 = null;

        EsperEPL2GrammarParser.expression_return expression347 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause348 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause349 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression351 = null;


        CommonTree CASE342_tree=null;
        CommonTree END345_tree=null;
        CommonTree CASE346_tree=null;
        CommonTree END350_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1064:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt135=3;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==CASE) ) {
                int LA135_1 = input.LA(2);

                if ( (LA135_1==WHEN) ) {
                    alt135=1;
                }
                else if ( (LA135_1==WINDOW||LA135_1==ESCAPE||(LA135_1>=NOT_EXPR && LA135_1<=EVERY_EXPR)||(LA135_1>=SUM && LA135_1<=COUNT)||LA135_1==CASE||LA135_1==OUTER||(LA135_1>=JOIN && LA135_1<=FULL)||(LA135_1>=EVENTS && LA135_1<=LAST)||(LA135_1>=UNIDIRECTIONAL && LA135_1<=CURRENT_TIMESTAMP)||LA135_1==SNAPSHOT||(LA135_1>=VARIABLE && LA135_1<=INDEX)||(LA135_1>=BOOLEAN_TRUE && LA135_1<=VALUE_NULL)||(LA135_1>=DEFINE && LA135_1<=MATCHES)||LA135_1==NUM_DOUBLE||LA135_1==IDENT||LA135_1==LPAREN||(LA135_1>=PLUS && LA135_1<=QUESTION)||(LA135_1>=STRING_LITERAL && LA135_1<=QUOTED_STRING_LITERAL)||LA135_1==MINUS||LA135_1==LCURLY||LA135_1==NUM_INT||(LA135_1>=TICKED_STRING_LITERAL && LA135_1<=NUM_FLOAT)) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA135_0==WINDOW||LA135_0==ESCAPE||(LA135_0>=NOT_EXPR && LA135_0<=EVERY_EXPR)||(LA135_0>=SUM && LA135_0<=COUNT)||LA135_0==OUTER||(LA135_0>=JOIN && LA135_0<=FULL)||(LA135_0>=EVENTS && LA135_0<=LAST)||(LA135_0>=UNIDIRECTIONAL && LA135_0<=CURRENT_TIMESTAMP)||LA135_0==SNAPSHOT||(LA135_0>=VARIABLE && LA135_0<=INDEX)||(LA135_0>=BOOLEAN_TRUE && LA135_0<=VALUE_NULL)||(LA135_0>=DEFINE && LA135_0<=MATCHES)||LA135_0==NUM_DOUBLE||LA135_0==IDENT||LA135_0==LPAREN||(LA135_0>=PLUS && LA135_0<=QUESTION)||(LA135_0>=STRING_LITERAL && LA135_0<=QUOTED_STRING_LITERAL)||LA135_0==MINUS||LA135_0==LCURLY||LA135_0==NUM_INT||(LA135_0>=TICKED_STRING_LITERAL && LA135_0<=NUM_FLOAT)) ) {
                alt135=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // EsperEPL2Grammar.g:1064:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE342=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE342_tree = (CommonTree)adaptor.create(CASE342);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE342_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1064:52: ( whenClause )+
                    int cnt131=0;
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==WHEN) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1064:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5944);
                    	    whenClause343=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause343.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt131 >= 1 ) break loop131;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(131, input);
                                throw eee;
                        }
                        cnt131++;
                    } while (true);

                    // EsperEPL2Grammar.g:1064:64: ( elseClause )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ELSE) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // EsperEPL2Grammar.g:1064:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5947);
                            elseClause344=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause344.getTree());

                            }
                            break;

                    }

                    END345=(Token)match(input,END,FOLLOW_END_in_caseExpression5950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1065:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE346=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE346);

                    pushFollow(FOLLOW_expression_in_caseExpression5963);
                    expression347=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression347.getTree());
                    // EsperEPL2Grammar.g:1065:62: ( whenClause )+
                    int cnt133=0;
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==WHEN) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1065:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5965);
                    	    whenClause348=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt133 >= 1 ) break loop133;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(133, input);
                                throw eee;
                        }
                        cnt133++;
                    } while (true);

                    // EsperEPL2Grammar.g:1065:74: ( elseClause )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==ELSE) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // EsperEPL2Grammar.g:1065:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5968);
                            elseClause349=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause349.getTree());

                            }
                            break;

                    }

                    END350=(Token)match(input,END,FOLLOW_END_in_caseExpression5971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END350);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, expression, whenClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1066:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1066:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1066:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1067:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5995);
                    evalOrExpression351=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression351.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1070:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression352 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression353 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1071:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1071:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6006);
            evalAndExpression352=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression352.getTree());
            // EsperEPL2Grammar.g:1071:22: (op= OR_EXPR evalAndExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==OR_EXPR) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1071:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6011); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6013);
            	    evalAndExpression353=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression353.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1072:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1072:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1072:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1073:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1076:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression354 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression355 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1077:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1077:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6045);
            bitWiseExpression354=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression354.getTree());
            // EsperEPL2Grammar.g:1077:22: (op= AND_EXPR bitWiseExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==AND_EXPR) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1077:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6050); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6052);
            	    bitWiseExpression355=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression355.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1078:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1078:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1079:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1082:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND357=null;
        Token BOR358=null;
        Token BXOR359=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression356 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression360 = null;


        CommonTree BAND357_tree=null;
        CommonTree BOR358_tree=null;
        CommonTree BXOR359_tree=null;

        try {
            // EsperEPL2Grammar.g:1083:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1083:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6084);
            negatedExpression356=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression356.getTree());
            // EsperEPL2Grammar.g:1083:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==BOR||(LA139_0>=BAND && LA139_0<=BXOR)) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1083:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1083:24: ( BAND | BOR | BXOR )
            	    int alt138=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt138=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt138=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt138=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 138, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt138) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1083:25: BAND
            	            {
            	            BAND357=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6089); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND357_tree = (CommonTree)adaptor.create(BAND357);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND357_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1083:31: BOR
            	            {
            	            BOR358=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6092); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR358_tree = (CommonTree)adaptor.create(BOR358);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR358_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1083:36: BXOR
            	            {
            	            BXOR359=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6095); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR359_tree = (CommonTree)adaptor.create(BXOR359);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR359_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6099);
            	    negatedExpression360=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression360.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1086:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR362=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression361 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression363 = null;


        CommonTree NOT_EXPR362_tree=null;

        try {
            // EsperEPL2Grammar.g:1087:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==WINDOW||LA140_0==ESCAPE||LA140_0==EVERY_EXPR||(LA140_0>=SUM && LA140_0<=COUNT)||LA140_0==OUTER||(LA140_0>=JOIN && LA140_0<=FULL)||(LA140_0>=EVENTS && LA140_0<=LAST)||(LA140_0>=UNIDIRECTIONAL && LA140_0<=CURRENT_TIMESTAMP)||LA140_0==SNAPSHOT||(LA140_0>=VARIABLE && LA140_0<=INDEX)||(LA140_0>=BOOLEAN_TRUE && LA140_0<=VALUE_NULL)||(LA140_0>=DEFINE && LA140_0<=MATCHES)||LA140_0==NUM_DOUBLE||LA140_0==IDENT||LA140_0==LPAREN||(LA140_0>=PLUS && LA140_0<=QUESTION)||(LA140_0>=STRING_LITERAL && LA140_0<=QUOTED_STRING_LITERAL)||LA140_0==MINUS||LA140_0==LCURLY||LA140_0==NUM_INT||(LA140_0>=TICKED_STRING_LITERAL && LA140_0<=NUM_FLOAT)) ) {
                alt140=1;
            }
            else if ( (LA140_0==NOT_EXPR) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // EsperEPL2Grammar.g:1087:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6114);
                    evalEqualsExpression361=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression361.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1088:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR362=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR362_tree = (CommonTree)adaptor.create(NOT_EXPR362);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR362_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6123);
                    evalEqualsExpression363=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression363.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1091:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR365=null;
        Token LPAREN367=null;
        Token RPAREN369=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression364 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression366 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList368 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression370 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR365_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree RPAREN369_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1092:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1092:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6136);
            evalRelationalExpression364=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression364.getTree());
            // EsperEPL2Grammar.g:1092:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==IS||LA146_0==EQUALS||(LA146_0>=SQL_NE && LA146_0<=NOT_EQUAL)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1093:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1093:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt141=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt141=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA141_2 = input.LA(2);

            	        if ( (LA141_2==NOT_EXPR) ) {
            	            alt141=3;
            	        }
            	        else if ( (LA141_2==WINDOW||LA141_2==ESCAPE||LA141_2==EVERY_EXPR||(LA141_2>=SUM && LA141_2<=COUNT)||LA141_2==OUTER||(LA141_2>=JOIN && LA141_2<=FULL)||(LA141_2>=ALL && LA141_2<=SOME)||(LA141_2>=EVENTS && LA141_2<=LAST)||(LA141_2>=UNIDIRECTIONAL && LA141_2<=CURRENT_TIMESTAMP)||LA141_2==SNAPSHOT||(LA141_2>=VARIABLE && LA141_2<=INDEX)||(LA141_2>=BOOLEAN_TRUE && LA141_2<=VALUE_NULL)||(LA141_2>=DEFINE && LA141_2<=MATCHES)||LA141_2==NUM_DOUBLE||LA141_2==IDENT||LA141_2==LPAREN||(LA141_2>=PLUS && LA141_2<=QUESTION)||(LA141_2>=STRING_LITERAL && LA141_2<=QUOTED_STRING_LITERAL)||LA141_2==MINUS||LA141_2==LCURLY||LA141_2==NUM_INT||(LA141_2>=TICKED_STRING_LITERAL && LA141_2<=NUM_FLOAT)) ) {
            	            alt141=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 141, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt141=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt141=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 141, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt141) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1093:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6149); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1094:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6167); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1095:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6181); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR365=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6183); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR365);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1096:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6197); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1097:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6211); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1099:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt145=2;
            	    int LA145_0 = input.LA(1);

            	    if ( (LA145_0==WINDOW||LA145_0==ESCAPE||LA145_0==EVERY_EXPR||(LA145_0>=SUM && LA145_0<=COUNT)||LA145_0==OUTER||(LA145_0>=JOIN && LA145_0<=FULL)||(LA145_0>=EVENTS && LA145_0<=LAST)||(LA145_0>=UNIDIRECTIONAL && LA145_0<=CURRENT_TIMESTAMP)||LA145_0==SNAPSHOT||(LA145_0>=VARIABLE && LA145_0<=INDEX)||(LA145_0>=BOOLEAN_TRUE && LA145_0<=VALUE_NULL)||(LA145_0>=DEFINE && LA145_0<=MATCHES)||LA145_0==NUM_DOUBLE||LA145_0==IDENT||LA145_0==LPAREN||(LA145_0>=PLUS && LA145_0<=QUESTION)||(LA145_0>=STRING_LITERAL && LA145_0<=QUOTED_STRING_LITERAL)||LA145_0==MINUS||LA145_0==LCURLY||LA145_0==NUM_INT||(LA145_0>=TICKED_STRING_LITERAL && LA145_0<=NUM_FLOAT)) ) {
            	        alt145=1;
            	    }
            	    else if ( ((LA145_0>=ALL && LA145_0<=SOME)) ) {
            	        alt145=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 145, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt145) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1100:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6241);
            	            evalRelationalExpression366=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression366.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1101:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1101:13: (a= ANY | a= SOME | a= ALL )
            	            int alt142=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt142=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt142=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt142=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 142, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt142) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1101:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6258); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1101:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6264); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1101:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6270); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1101:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt144=2;
            	            int LA144_0 = input.LA(1);

            	            if ( (LA144_0==LPAREN) ) {
            	                int LA144_1 = input.LA(2);

            	                if ( (LA144_1==SELECT) ) {
            	                    alt144=2;
            	                }
            	                else if ( (LA144_1==WINDOW||LA144_1==ESCAPE||(LA144_1>=NOT_EXPR && LA144_1<=EVERY_EXPR)||(LA144_1>=SUM && LA144_1<=COUNT)||LA144_1==CASE||LA144_1==OUTER||(LA144_1>=JOIN && LA144_1<=FULL)||(LA144_1>=EVENTS && LA144_1<=LAST)||(LA144_1>=UNIDIRECTIONAL && LA144_1<=CURRENT_TIMESTAMP)||LA144_1==SNAPSHOT||(LA144_1>=VARIABLE && LA144_1<=INDEX)||(LA144_1>=BOOLEAN_TRUE && LA144_1<=VALUE_NULL)||(LA144_1>=DEFINE && LA144_1<=MATCHES)||LA144_1==NUM_DOUBLE||LA144_1==IDENT||(LA144_1>=LPAREN && LA144_1<=RPAREN)||(LA144_1>=PLUS && LA144_1<=QUESTION)||(LA144_1>=STRING_LITERAL && LA144_1<=QUOTED_STRING_LITERAL)||LA144_1==MINUS||LA144_1==LCURLY||LA144_1==NUM_INT||(LA144_1>=TICKED_STRING_LITERAL && LA144_1<=NUM_FLOAT)) ) {
            	                    alt144=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 144, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 144, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt144) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1101:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1101:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1101:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6276); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN367);

            	                    // EsperEPL2Grammar.g:1101:48: ( expressionList )?
            	                    int alt143=2;
            	                    int LA143_0 = input.LA(1);

            	                    if ( (LA143_0==WINDOW||LA143_0==ESCAPE||(LA143_0>=NOT_EXPR && LA143_0<=EVERY_EXPR)||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==CASE||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||LA143_0==SNAPSHOT||(LA143_0>=VARIABLE && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=MATCHES)||LA143_0==NUM_DOUBLE||LA143_0==IDENT||LA143_0==LPAREN||(LA143_0>=PLUS && LA143_0<=QUESTION)||(LA143_0>=STRING_LITERAL && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==LCURLY||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
            	                        alt143=1;
            	                    }
            	                    switch (alt143) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1101:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6278);
            	                            expressionList368=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList368.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6281); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN369);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1101:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6286);
            	                    subSelectGroupExpression370=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression370.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);



            // AST REWRITE
            // elements: subSelectGroupExpression, evalRelationalExpression, subSelectGroupExpression, expressionList, evalRelationalExpression, a, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, expressionList, a
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1104:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1104:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1105:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1105:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1105:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1105:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1106:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1106:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1107:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1107:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1107:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1107:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1108:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1111:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN373=null;
        Token RPAREN375=null;
        Token COMMA379=null;
        Token IN_SET381=null;
        Token BETWEEN383=null;
        Token LIKE385=null;
        Token ESCAPE387=null;
        Token REGEXP389=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr371 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr372 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList374 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression376 = null;

        EsperEPL2GrammarParser.expression_return expression377 = null;

        EsperEPL2GrammarParser.expression_return expression378 = null;

        EsperEPL2GrammarParser.expression_return expression380 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery382 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList384 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr386 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant388 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr390 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN373_tree=null;
        CommonTree RPAREN375_tree=null;
        CommonTree COMMA379_tree=null;
        CommonTree IN_SET381_tree=null;
        CommonTree BETWEEN383_tree=null;
        CommonTree LIKE385_tree=null;
        CommonTree ESCAPE387_tree=null;
        CommonTree REGEXP389_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1112:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1112:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6414);
            concatenationExpr371=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr371.getTree());
            // EsperEPL2Grammar.g:1113:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EOF||(LA160_0>=OR_EXPR && LA160_0<=AND_EXPR)||(LA160_0>=WHERE && LA160_0<=AS)||(LA160_0>=ELSE && LA160_0<=FROM)||LA160_0==IS||(LA160_0>=GROUP && LA160_0<=HAVING)||LA160_0==ALL||LA160_0==OUTPUT||LA160_0==INSERT||(LA160_0>=ORDER && LA160_0<=DESC)||LA160_0==PATTERN||(LA160_0>=TIMEPERIOD_SEC && LA160_0<=TIMEPERIOD_SECONDS)||LA160_0==ROW_LIMIT_EXPR||LA160_0==MEASURES||LA160_0==AFTER||LA160_0==COMMA||LA160_0==EQUALS||LA160_0==RPAREN||LA160_0==RBRACK||LA160_0==BOR||LA160_0==COLON||(LA160_0>=BAND && LA160_0<=GE)||LA160_0==RCURLY) ) {
                alt160=1;
            }
            else if ( ((LA160_0>=IN_SET && LA160_0<=REGEXP)||LA160_0==NOT_EXPR) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1114:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1114:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1115:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1115:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( ((LA152_0>=LT && LA152_0<=GE)) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1116:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1116:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt147=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt147=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt147=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt147=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt147=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 147, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt147) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1116:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6446); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1116:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6450); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1116:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6454); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1116:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6458); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1117:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt151=2;
                    	    int LA151_0 = input.LA(1);

                    	    if ( (LA151_0==WINDOW||LA151_0==ESCAPE||LA151_0==EVERY_EXPR||(LA151_0>=SUM && LA151_0<=COUNT)||LA151_0==OUTER||(LA151_0>=JOIN && LA151_0<=FULL)||(LA151_0>=EVENTS && LA151_0<=LAST)||(LA151_0>=UNIDIRECTIONAL && LA151_0<=CURRENT_TIMESTAMP)||LA151_0==SNAPSHOT||(LA151_0>=VARIABLE && LA151_0<=INDEX)||(LA151_0>=BOOLEAN_TRUE && LA151_0<=VALUE_NULL)||(LA151_0>=DEFINE && LA151_0<=MATCHES)||LA151_0==NUM_DOUBLE||LA151_0==IDENT||LA151_0==LPAREN||(LA151_0>=PLUS && LA151_0<=QUESTION)||(LA151_0>=STRING_LITERAL && LA151_0<=QUOTED_STRING_LITERAL)||LA151_0==MINUS||LA151_0==LCURLY||LA151_0==NUM_INT||(LA151_0>=TICKED_STRING_LITERAL && LA151_0<=NUM_FLOAT)) ) {
                    	        alt151=1;
                    	    }
                    	    else if ( ((LA151_0>=ALL && LA151_0<=SOME)) ) {
                    	        alt151=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 151, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt151) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1118:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6482);
                    	            concatenationExpr372=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr372.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1119:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1119:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt148=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt148=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt148=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt148=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 148, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt148) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1119:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6499); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1119:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6505); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1119:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6511); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1119:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt150=2;
                    	            int LA150_0 = input.LA(1);

                    	            if ( (LA150_0==LPAREN) ) {
                    	                int LA150_1 = input.LA(2);

                    	                if ( (LA150_1==SELECT) ) {
                    	                    alt150=2;
                    	                }
                    	                else if ( (LA150_1==WINDOW||LA150_1==ESCAPE||(LA150_1>=NOT_EXPR && LA150_1<=EVERY_EXPR)||(LA150_1>=SUM && LA150_1<=COUNT)||LA150_1==CASE||LA150_1==OUTER||(LA150_1>=JOIN && LA150_1<=FULL)||(LA150_1>=EVENTS && LA150_1<=LAST)||(LA150_1>=UNIDIRECTIONAL && LA150_1<=CURRENT_TIMESTAMP)||LA150_1==SNAPSHOT||(LA150_1>=VARIABLE && LA150_1<=INDEX)||(LA150_1>=BOOLEAN_TRUE && LA150_1<=VALUE_NULL)||(LA150_1>=DEFINE && LA150_1<=MATCHES)||LA150_1==NUM_DOUBLE||LA150_1==IDENT||(LA150_1>=LPAREN && LA150_1<=RPAREN)||(LA150_1>=PLUS && LA150_1<=QUESTION)||(LA150_1>=STRING_LITERAL && LA150_1<=QUOTED_STRING_LITERAL)||LA150_1==MINUS||LA150_1==LCURLY||LA150_1==NUM_INT||(LA150_1>=TICKED_STRING_LITERAL && LA150_1<=NUM_FLOAT)) ) {
                    	                    alt150=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 150, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 150, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt150) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1119:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1119:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1119:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6517); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN373);

                    	                    // EsperEPL2Grammar.g:1119:48: ( expressionList )?
                    	                    int alt149=2;
                    	                    int LA149_0 = input.LA(1);

                    	                    if ( (LA149_0==WINDOW||LA149_0==ESCAPE||(LA149_0>=NOT_EXPR && LA149_0<=EVERY_EXPR)||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==CASE||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||LA149_0==SNAPSHOT||(LA149_0>=VARIABLE && LA149_0<=INDEX)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||(LA149_0>=DEFINE && LA149_0<=MATCHES)||LA149_0==NUM_DOUBLE||LA149_0==IDENT||LA149_0==LPAREN||(LA149_0>=PLUS && LA149_0<=QUESTION)||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||LA149_0==MINUS||LA149_0==LCURLY||LA149_0==NUM_INT||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                    	                        alt149=1;
                    	                    }
                    	                    switch (alt149) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1119:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6519);
                    	                            expressionList374=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList374.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6522); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN375);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1119:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6527);
                    	                    subSelectGroupExpression376=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression376.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: g, subSelectGroupExpression, concatenationExpr, concatenationExpr, expressionList, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1123:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1123:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1124:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1124:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1124:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1124:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1125:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1127:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1127:6: (n= NOT_EXPR )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==NOT_EXPR) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // EsperEPL2Grammar.g:1127:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6623); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1128:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt159=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA159_1 = input.LA(2);

                        if ( (LA159_1==LPAREN) ) {
                            int LA159_5 = input.LA(3);

                            if ( (LA159_5==SELECT) ) {
                                alt159=2;
                            }
                            else if ( (LA159_5==WINDOW||LA159_5==ESCAPE||(LA159_5>=NOT_EXPR && LA159_5<=EVERY_EXPR)||(LA159_5>=SUM && LA159_5<=COUNT)||LA159_5==CASE||LA159_5==OUTER||(LA159_5>=JOIN && LA159_5<=FULL)||(LA159_5>=EVENTS && LA159_5<=LAST)||(LA159_5>=UNIDIRECTIONAL && LA159_5<=CURRENT_TIMESTAMP)||LA159_5==SNAPSHOT||(LA159_5>=VARIABLE && LA159_5<=INDEX)||(LA159_5>=BOOLEAN_TRUE && LA159_5<=VALUE_NULL)||(LA159_5>=DEFINE && LA159_5<=MATCHES)||LA159_5==NUM_DOUBLE||LA159_5==IDENT||LA159_5==LPAREN||(LA159_5>=PLUS && LA159_5<=QUESTION)||(LA159_5>=STRING_LITERAL && LA159_5<=QUOTED_STRING_LITERAL)||LA159_5==MINUS||LA159_5==LCURLY||LA159_5==NUM_INT||(LA159_5>=TICKED_STRING_LITERAL && LA159_5<=NUM_FLOAT)) ) {
                                alt159=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA159_1==LBRACK) ) {
                            alt159=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 159, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt159=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt159=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt159=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 0, input);

                        throw nvae;
                    }

                    switch (alt159) {
                        case 1 :
                            // EsperEPL2Grammar.g:1131:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1131:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1131:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6650); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1132:8: (l= LPAREN | l= LBRACK )
                            int alt154=2;
                            int LA154_0 = input.LA(1);

                            if ( (LA154_0==LPAREN) ) {
                                alt154=1;
                            }
                            else if ( (LA154_0==LBRACK) ) {
                                alt154=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 154, 0, input);

                                throw nvae;
                            }
                            switch (alt154) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1132:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6662); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1132:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6668); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6671);
                            expression377=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression377.getTree());
                            // EsperEPL2Grammar.g:1133:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt156=2;
                            int LA156_0 = input.LA(1);

                            if ( (LA156_0==COLON) ) {
                                alt156=1;
                            }
                            else if ( (LA156_0==COMMA||LA156_0==RPAREN||LA156_0==RBRACK) ) {
                                alt156=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 156, 0, input);

                                throw nvae;
                            }
                            switch (alt156) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1134:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1134:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1134:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6693); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1134:20: ( expression )
                                    // EsperEPL2Grammar.g:1134:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6696);
                                    expression378=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression378.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1136:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1136:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1136:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1136:10: ( COMMA expression )*
                                    loop155:
                                    do {
                                        int alt155=2;
                                        int LA155_0 = input.LA(1);

                                        if ( (LA155_0==COMMA) ) {
                                            alt155=1;
                                        }


                                        switch (alt155) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1136:11: COMMA expression
                                    	    {
                                    	    COMMA379=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6722); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA379);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6724);
                                    	    expression380=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression380.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop155;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1138:8: (r= RPAREN | r= RBRACK )
                            int alt157=2;
                            int LA157_0 = input.LA(1);

                            if ( (LA157_0==RPAREN) ) {
                                alt157=1;
                            }
                            else if ( (LA157_0==RBRACK) ) {
                                alt157=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);

                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1138:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6750); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1138:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6756); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: l, IN_SET, concatenationExpr, l, concatenationExpr, concatenationExpr, expression, expression, expression, expression, l, r, concatenationExpr, r, l, r, r
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1140:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1140:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1141:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1141:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1142:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1142:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1143:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1143:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1144:7: IN_SET inSubSelectQuery
                            {
                            IN_SET381=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6879); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET381);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6881);
                            inSubSelectQuery382=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery382.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, inSubSelectQuery, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1145:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1145:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1146:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1146:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1147:7: BETWEEN betweenList
                            {
                            BETWEEN383=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN383);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6929);
                            betweenList384=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList384.getTree());


                            // AST REWRITE
                            // elements: betweenList, concatenationExpr, BETWEEN, concatenationExpr, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1148:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1148:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1149:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1149:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1150:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE385=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6979); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE385);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6981);
                            concatenationExpr386=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr386.getTree());
                            // EsperEPL2Grammar.g:1150:30: ( ESCAPE stringconstant )?
                            int alt158=2;
                            int LA158_0 = input.LA(1);

                            if ( (LA158_0==ESCAPE) ) {
                                alt158=1;
                            }
                            switch (alt158) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1150:31: ESCAPE stringconstant
                                    {
                                    ESCAPE387=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6984); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE387);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6986);
                                    stringconstant388=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant388.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, LIKE, stringconstant, stringconstant, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1151:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1151:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1151:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1151:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1152:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1152:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1152:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1152:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1153:7: REGEXP concatenationExpr
                            {
                            REGEXP389=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7038); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP389);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7040);
                            concatenationExpr390=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr390.getTree());


                            // AST REWRITE
                            // elements: REGEXP, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1154:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1154:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1155:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1155:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1160:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr391 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1161:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1161:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7102);
            subQueryExpr391=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr391.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1162:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1162:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1165:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR394=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression392 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression393 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression395 = null;


        CommonTree c_tree=null;
        CommonTree LOR394_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1166:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1166:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7127);
            additiveExpression392=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression392.getTree());
            // EsperEPL2Grammar.g:1166:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LOR) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // EsperEPL2Grammar.g:1166:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7135);
                    additiveExpression393=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression393.getTree());
                    // EsperEPL2Grammar.g:1166:50: ( LOR additiveExpression )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==LOR) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1166:52: LOR additiveExpression
                    	    {
                    	    LOR394=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7139); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR394);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7141);
                    	    additiveExpression395=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression395.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1167:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1167:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1168:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1171:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS397=null;
        Token MINUS398=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression396 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression399 = null;


        CommonTree PLUS397_tree=null;
        CommonTree MINUS398_tree=null;

        try {
            // EsperEPL2Grammar.g:1172:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1172:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7182);
            multiplyExpression396=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression396.getTree());
            // EsperEPL2Grammar.g:1172:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==PLUS||LA164_0==MINUS) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1172:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1172:25: ( PLUS | MINUS )
            	    int alt163=2;
            	    int LA163_0 = input.LA(1);

            	    if ( (LA163_0==PLUS) ) {
            	        alt163=1;
            	    }
            	    else if ( (LA163_0==MINUS) ) {
            	        alt163=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 163, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt163) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1172:26: PLUS
            	            {
            	            PLUS397=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7187); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS397_tree = (CommonTree)adaptor.create(PLUS397);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS397_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1172:32: MINUS
            	            {
            	            MINUS398=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7190); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS398_tree = (CommonTree)adaptor.create(MINUS398);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS398_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7194);
            	    multiplyExpression399=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression399.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1175:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR401=null;
        Token DIV402=null;
        Token MOD403=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression400 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression404 = null;


        CommonTree STAR401_tree=null;
        CommonTree DIV402_tree=null;
        CommonTree MOD403_tree=null;

        try {
            // EsperEPL2Grammar.g:1176:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1176:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7208);
            unaryExpression400=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression400.getTree());
            // EsperEPL2Grammar.g:1176:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==STAR||(LA166_0>=DIV && LA166_0<=MOD)) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1176:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1176:22: ( STAR | DIV | MOD )
            	    int alt165=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt165=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt165=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt165=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 165, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt165) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1176:23: STAR
            	            {
            	            STAR401=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7213); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR401_tree = (CommonTree)adaptor.create(STAR401);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR401_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1176:29: DIV
            	            {
            	            DIV402=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7216); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV402_tree = (CommonTree)adaptor.create(DIV402);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV402_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1176:34: MOD
            	            {
            	            MOD403=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7219); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD403_tree = (CommonTree)adaptor.create(MOD403);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD403_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7223);
            	    unaryExpression404=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1179:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS405=null;
        Token LPAREN409=null;
        Token RPAREN411=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty406 = null;

        EsperEPL2GrammarParser.constant_return constant407 = null;

        EsperEPL2GrammarParser.substitution_return substitution408 = null;

        EsperEPL2GrammarParser.expression_return expression410 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction412 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc413 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression414 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression415 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression416 = null;


        CommonTree MINUS405_tree=null;
        CommonTree LPAREN409_tree=null;
        CommonTree RPAREN411_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1180:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt167=9;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1180:4: MINUS eventProperty
                    {
                    MINUS405=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS405);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7240);
                    eventProperty406=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty406.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1180:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1180:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1181:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression7253);
                    constant407=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant407.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1182:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression7258);
                    substitution408=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution408.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1183:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN409=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7263); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression7266);
                    expression410=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression410.getTree());
                    RPAREN411=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7268); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1184:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7274);
                    eventPropertyOrLibFunction412=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction412.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1185:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1185:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1185:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7286);
                    builtinFunc413=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc413.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1186:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7292);
                    arrayExpression414=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression414.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1187:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7297);
                    subSelectExpression415=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression415.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1188:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7302);
                    existsSubSelectExpression416=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression416.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1191:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr417 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1192:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1192:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7319);
            subQueryExpr417=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr417.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1193:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1193:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1196:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr418 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1197:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1197:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7341);
            subQueryExpr418=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr418.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1198:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1198:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1201:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS419=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr420 = null;


        CommonTree EXISTS419_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1202:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1202:4: EXISTS subQueryExpr
            {
            EXISTS419=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS419);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7365);
            subQueryExpr420=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr420.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1203:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1203:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1206:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN421=null;
        Token SELECT422=null;
        Token DISTINCT423=null;
        Token FROM425=null;
        Token WHERE427=null;
        Token RPAREN429=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement424 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr426 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause428 = null;


        CommonTree LPAREN421_tree=null;
        CommonTree SELECT422_tree=null;
        CommonTree DISTINCT423_tree=null;
        CommonTree FROM425_tree=null;
        CommonTree WHERE427_tree=null;
        CommonTree RPAREN429_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1209:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1209:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN421=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7398); if (state.failed) return retval;
            SELECT422=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7404); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1210:11: ( DISTINCT )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==DISTINCT) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // EsperEPL2Grammar.g:1210:11: DISTINCT
                    {
                    DISTINCT423=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT423_tree = (CommonTree)adaptor.create(DISTINCT423);
                    adaptor.addChild(root_0, DISTINCT423_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr7410);
            selectionListElement424=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement424.getTree());
            FROM425=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7417); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7420);
            subSelectFilterExpr426=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr426.getTree());
            // EsperEPL2Grammar.g:1212:6: ( WHERE whereClause )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==WHERE) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // EsperEPL2Grammar.g:1212:7: WHERE whereClause
                    {
                    WHERE427=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7428); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7431);
                    whereClause428=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause428.getTree());

                    }
                    break;

            }

            RPAREN429=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7440); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1216:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT431=null;
        Token DOT433=null;
        Token AS435=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression430 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression432 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression434 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT431_tree=null;
        CommonTree DOT433_tree=null;
        CommonTree AS435_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1219:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1219:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7464);
            eventFilterExpression430=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression430.getTree());
            // EsperEPL2Grammar.g:1220:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==DOT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT431=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT431);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7471);
                    viewExpression432=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression432.getTree());
                    // EsperEPL2Grammar.g:1220:23: ( DOT viewExpression )*
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==DOT) ) {
                            alt170=1;
                        }


                        switch (alt170) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1220:24: DOT viewExpression
                    	    {
                    	    DOT433=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7474); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT433);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7476);
                    	    viewExpression434=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression434.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1220:47: ( AS i= IDENT | i= IDENT )?
            int alt172=3;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==AS) ) {
                alt172=1;
            }
            else if ( (LA172_0==IDENT) ) {
                alt172=2;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:48: AS i= IDENT
                    {
                    AS435=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS435);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1220:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1220:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt173=3;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==RETAINUNION) ) {
                alt173=1;
            }
            else if ( (LA173_0==RETAININTERSECTION) ) {
                alt173=2;
            }
            switch (alt173) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1220:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, viewExpression, ri, eventFilterExpression, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1221:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1221:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1221:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1221:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1221:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1221:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1224:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY436=null;
        Token COMMA438=null;
        Token RCURLY440=null;
        EsperEPL2GrammarParser.expression_return expression437 = null;

        EsperEPL2GrammarParser.expression_return expression439 = null;


        CommonTree LCURLY436_tree=null;
        CommonTree COMMA438_tree=null;
        CommonTree RCURLY440_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1225:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1225:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY436=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY436);

            // EsperEPL2Grammar.g:1225:11: ( expression ( COMMA expression )* )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==WINDOW||LA175_0==ESCAPE||(LA175_0>=NOT_EXPR && LA175_0<=EVERY_EXPR)||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==CASE||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||LA175_0==SNAPSHOT||(LA175_0>=VARIABLE && LA175_0<=INDEX)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||(LA175_0>=DEFINE && LA175_0<=MATCHES)||LA175_0==NUM_DOUBLE||LA175_0==IDENT||LA175_0==LPAREN||(LA175_0>=PLUS && LA175_0<=QUESTION)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||LA175_0==MINUS||LA175_0==LCURLY||LA175_0==NUM_INT||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1225:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7547);
                    expression437=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression437.getTree());
                    // EsperEPL2Grammar.g:1225:23: ( COMMA expression )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==COMMA) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1225:24: COMMA expression
                    	    {
                    	    COMMA438=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7550); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA438);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7552);
                    	    expression439=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression439.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY440=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY440);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1226:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1226:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1226:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1229:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM441=null;
        Token LPAREN442=null;
        Token ALL443=null;
        Token DISTINCT444=null;
        Token RPAREN446=null;
        Token AVG447=null;
        Token LPAREN448=null;
        Token ALL449=null;
        Token DISTINCT450=null;
        Token RPAREN452=null;
        Token COUNT453=null;
        Token LPAREN454=null;
        Token ALL455=null;
        Token DISTINCT456=null;
        Token STAR458=null;
        Token RPAREN459=null;
        Token MEDIAN460=null;
        Token LPAREN461=null;
        Token ALL462=null;
        Token DISTINCT463=null;
        Token RPAREN465=null;
        Token STDDEV466=null;
        Token LPAREN467=null;
        Token ALL468=null;
        Token DISTINCT469=null;
        Token RPAREN471=null;
        Token AVEDEV472=null;
        Token LPAREN473=null;
        Token ALL474=null;
        Token DISTINCT475=null;
        Token RPAREN477=null;
        Token COALESCE480=null;
        Token LPAREN481=null;
        Token COMMA483=null;
        Token COMMA485=null;
        Token RPAREN487=null;
        Token PREVIOUS488=null;
        Token LPAREN489=null;
        Token COMMA491=null;
        Token RPAREN493=null;
        Token PRIOR494=null;
        Token LPAREN495=null;
        Token NUM_INT496=null;
        Token COMMA497=null;
        Token RPAREN499=null;
        Token INSTANCEOF500=null;
        Token LPAREN501=null;
        Token COMMA503=null;
        Token COMMA505=null;
        Token RPAREN507=null;
        Token CAST508=null;
        Token LPAREN509=null;
        Token COMMA511=null;
        Token AS512=null;
        Token RPAREN514=null;
        Token EXISTS515=null;
        Token LPAREN516=null;
        Token RPAREN518=null;
        Token CURRENT_TIMESTAMP519=null;
        Token LPAREN520=null;
        Token RPAREN521=null;
        EsperEPL2GrammarParser.expression_return expression445 = null;

        EsperEPL2GrammarParser.expression_return expression451 = null;

        EsperEPL2GrammarParser.expression_return expression457 = null;

        EsperEPL2GrammarParser.expression_return expression464 = null;

        EsperEPL2GrammarParser.expression_return expression470 = null;

        EsperEPL2GrammarParser.expression_return expression476 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation478 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation479 = null;

        EsperEPL2GrammarParser.expression_return expression482 = null;

        EsperEPL2GrammarParser.expression_return expression484 = null;

        EsperEPL2GrammarParser.expression_return expression486 = null;

        EsperEPL2GrammarParser.expression_return expression490 = null;

        EsperEPL2GrammarParser.expression_return expression492 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty498 = null;

        EsperEPL2GrammarParser.expression_return expression502 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier504 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier506 = null;

        EsperEPL2GrammarParser.expression_return expression510 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier513 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty517 = null;


        CommonTree SUM441_tree=null;
        CommonTree LPAREN442_tree=null;
        CommonTree ALL443_tree=null;
        CommonTree DISTINCT444_tree=null;
        CommonTree RPAREN446_tree=null;
        CommonTree AVG447_tree=null;
        CommonTree LPAREN448_tree=null;
        CommonTree ALL449_tree=null;
        CommonTree DISTINCT450_tree=null;
        CommonTree RPAREN452_tree=null;
        CommonTree COUNT453_tree=null;
        CommonTree LPAREN454_tree=null;
        CommonTree ALL455_tree=null;
        CommonTree DISTINCT456_tree=null;
        CommonTree STAR458_tree=null;
        CommonTree RPAREN459_tree=null;
        CommonTree MEDIAN460_tree=null;
        CommonTree LPAREN461_tree=null;
        CommonTree ALL462_tree=null;
        CommonTree DISTINCT463_tree=null;
        CommonTree RPAREN465_tree=null;
        CommonTree STDDEV466_tree=null;
        CommonTree LPAREN467_tree=null;
        CommonTree ALL468_tree=null;
        CommonTree DISTINCT469_tree=null;
        CommonTree RPAREN471_tree=null;
        CommonTree AVEDEV472_tree=null;
        CommonTree LPAREN473_tree=null;
        CommonTree ALL474_tree=null;
        CommonTree DISTINCT475_tree=null;
        CommonTree RPAREN477_tree=null;
        CommonTree COALESCE480_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree COMMA483_tree=null;
        CommonTree COMMA485_tree=null;
        CommonTree RPAREN487_tree=null;
        CommonTree PREVIOUS488_tree=null;
        CommonTree LPAREN489_tree=null;
        CommonTree COMMA491_tree=null;
        CommonTree RPAREN493_tree=null;
        CommonTree PRIOR494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree NUM_INT496_tree=null;
        CommonTree COMMA497_tree=null;
        CommonTree RPAREN499_tree=null;
        CommonTree INSTANCEOF500_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree COMMA503_tree=null;
        CommonTree COMMA505_tree=null;
        CommonTree RPAREN507_tree=null;
        CommonTree CAST508_tree=null;
        CommonTree LPAREN509_tree=null;
        CommonTree COMMA511_tree=null;
        CommonTree AS512_tree=null;
        CommonTree RPAREN514_tree=null;
        CommonTree EXISTS515_tree=null;
        CommonTree LPAREN516_tree=null;
        CommonTree RPAREN518_tree=null;
        CommonTree CURRENT_TIMESTAMP519_tree=null;
        CommonTree LPAREN520_tree=null;
        CommonTree RPAREN521_tree=null;

        try {
            // EsperEPL2Grammar.g:1230:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt188=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt188=1;
                }
                break;
            case AVG:
                {
                alt188=2;
                }
                break;
            case COUNT:
                {
                alt188=3;
                }
                break;
            case MEDIAN:
                {
                alt188=4;
                }
                break;
            case STDDEV:
                {
                alt188=5;
                }
                break;
            case AVEDEV:
                {
                alt188=6;
                }
                break;
            case FIRST:
                {
                alt188=7;
                }
                break;
            case LAST:
                {
                alt188=8;
                }
                break;
            case COALESCE:
                {
                alt188=9;
                }
                break;
            case PREVIOUS:
                {
                alt188=10;
                }
                break;
            case PRIOR:
                {
                alt188=11;
                }
                break;
            case INSTANCEOF:
                {
                alt188=12;
                }
                break;
            case CAST:
                {
                alt188=13;
                }
                break;
            case EXISTS:
                {
                alt188=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt188=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1230:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM441=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM441_tree = (CommonTree)adaptor.create(SUM441);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM441_tree, root_0);
                    }
                    LPAREN442=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7585); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1230:17: ( ALL | DISTINCT )?
                    int alt176=3;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==ALL) ) {
                        alt176=1;
                    }
                    else if ( (LA176_0==DISTINCT) ) {
                        alt176=2;
                    }
                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1230:18: ALL
                            {
                            ALL443=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7589); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1230:25: DISTINCT
                            {
                            DISTINCT444=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7594); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT444_tree = (CommonTree)adaptor.create(DISTINCT444);
                            adaptor.addChild(root_0, DISTINCT444_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7598);
                    expression445=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression445.getTree());
                    RPAREN446=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7600); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1231:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG447=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG447_tree = (CommonTree)adaptor.create(AVG447);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG447_tree, root_0);
                    }
                    LPAREN448=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7609); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1231:17: ( ALL | DISTINCT )?
                    int alt177=3;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==ALL) ) {
                        alt177=1;
                    }
                    else if ( (LA177_0==DISTINCT) ) {
                        alt177=2;
                    }
                    switch (alt177) {
                        case 1 :
                            // EsperEPL2Grammar.g:1231:18: ALL
                            {
                            ALL449=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7613); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1231:25: DISTINCT
                            {
                            DISTINCT450=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7618); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT450_tree = (CommonTree)adaptor.create(DISTINCT450);
                            adaptor.addChild(root_0, DISTINCT450_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7622);
                    expression451=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression451.getTree());
                    RPAREN452=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7624); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1232:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT453=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT453_tree = (CommonTree)adaptor.create(COUNT453);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT453_tree, root_0);
                    }
                    LPAREN454=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7633); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1233:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==WINDOW||LA179_0==ESCAPE||(LA179_0>=NOT_EXPR && LA179_0<=EVERY_EXPR)||(LA179_0>=SUM && LA179_0<=COUNT)||LA179_0==CASE||LA179_0==OUTER||(LA179_0>=JOIN && LA179_0<=FULL)||(LA179_0>=DISTINCT && LA179_0<=ALL)||(LA179_0>=EVENTS && LA179_0<=LAST)||(LA179_0>=UNIDIRECTIONAL && LA179_0<=CURRENT_TIMESTAMP)||LA179_0==SNAPSHOT||(LA179_0>=VARIABLE && LA179_0<=INDEX)||(LA179_0>=BOOLEAN_TRUE && LA179_0<=VALUE_NULL)||(LA179_0>=DEFINE && LA179_0<=MATCHES)||LA179_0==NUM_DOUBLE||LA179_0==IDENT||LA179_0==LPAREN||(LA179_0>=PLUS && LA179_0<=QUESTION)||(LA179_0>=STRING_LITERAL && LA179_0<=QUOTED_STRING_LITERAL)||LA179_0==MINUS||LA179_0==LCURLY||LA179_0==NUM_INT||(LA179_0>=TICKED_STRING_LITERAL && LA179_0<=NUM_FLOAT)) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==STAR) ) {
                        alt179=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 0, input);

                        throw nvae;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1234:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1234:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1234:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1234:5: ( ALL | DISTINCT )?
                            int alt178=3;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==ALL) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==DISTINCT) ) {
                                alt178=2;
                            }
                            switch (alt178) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1234:6: ALL
                                    {
                                    ALL455=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7645); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1234:13: DISTINCT
                                    {
                                    DISTINCT456=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7650); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT456_tree = (CommonTree)adaptor.create(DISTINCT456);
                                    adaptor.addChild(root_0, DISTINCT456_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7654);
                            expression457=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression457.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1236:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1236:4: ( STAR )
                            // EsperEPL2Grammar.g:1236:5: STAR
                            {
                            STAR458=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7665); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN459=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7676); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1239:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN460=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN460_tree = (CommonTree)adaptor.create(MEDIAN460);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN460_tree, root_0);
                    }
                    LPAREN461=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7685); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1239:20: ( ALL | DISTINCT )?
                    int alt180=3;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ALL) ) {
                        alt180=1;
                    }
                    else if ( (LA180_0==DISTINCT) ) {
                        alt180=2;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1239:21: ALL
                            {
                            ALL462=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7689); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1239:28: DISTINCT
                            {
                            DISTINCT463=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7694); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT463_tree = (CommonTree)adaptor.create(DISTINCT463);
                            adaptor.addChild(root_0, DISTINCT463_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7698);
                    expression464=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression464.getTree());
                    RPAREN465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7700); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1240:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV466=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV466_tree = (CommonTree)adaptor.create(STDDEV466);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV466_tree, root_0);
                    }
                    LPAREN467=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7709); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1240:20: ( ALL | DISTINCT )?
                    int alt181=3;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==ALL) ) {
                        alt181=1;
                    }
                    else if ( (LA181_0==DISTINCT) ) {
                        alt181=2;
                    }
                    switch (alt181) {
                        case 1 :
                            // EsperEPL2Grammar.g:1240:21: ALL
                            {
                            ALL468=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7713); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1240:28: DISTINCT
                            {
                            DISTINCT469=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7718); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT469_tree = (CommonTree)adaptor.create(DISTINCT469);
                            adaptor.addChild(root_0, DISTINCT469_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7722);
                    expression470=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression470.getTree());
                    RPAREN471=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7724); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1241:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV472=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV472_tree = (CommonTree)adaptor.create(AVEDEV472);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV472_tree, root_0);
                    }
                    LPAREN473=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7733); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1241:20: ( ALL | DISTINCT )?
                    int alt182=3;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==ALL) ) {
                        alt182=1;
                    }
                    else if ( (LA182_0==DISTINCT) ) {
                        alt182=2;
                    }
                    switch (alt182) {
                        case 1 :
                            // EsperEPL2Grammar.g:1241:21: ALL
                            {
                            ALL474=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7737); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1241:28: DISTINCT
                            {
                            DISTINCT475=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7742); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT475_tree = (CommonTree)adaptor.create(DISTINCT475);
                            adaptor.addChild(root_0, DISTINCT475_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7746);
                    expression476=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression476.getTree());
                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7748); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1242:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7754);
                    firstAggregation478=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation478.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1243:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7759);
                    lastAggregation479=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation479.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1244:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE480=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE480_tree = (CommonTree)adaptor.create(COALESCE480);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE480_tree, root_0);
                    }
                    LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7767); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7770);
                    expression482=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());
                    COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7772); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7775);
                    expression484=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());
                    // EsperEPL2Grammar.g:1244:51: ( COMMA expression )*
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);

                        if ( (LA183_0==COMMA) ) {
                            alt183=1;
                        }


                        switch (alt183) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1244:52: COMMA expression
                    	    {
                    	    COMMA485=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7778); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7781);
                    	    expression486=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression486.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop183;
                        }
                    } while (true);

                    RPAREN487=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7785); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1245:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS488=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS488_tree = (CommonTree)adaptor.create(PREVIOUS488);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS488_tree, root_0);
                    }
                    LPAREN489=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7794); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7797);
                    expression490=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
                    // EsperEPL2Grammar.g:1245:33: ( COMMA expression )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==COMMA) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // EsperEPL2Grammar.g:1245:34: COMMA expression
                            {
                            COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7800); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7803);
                            expression492=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());

                            }
                            break;

                    }

                    RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7807); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1246:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR494=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR494_tree = (CommonTree)adaptor.create(PRIOR494);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR494_tree, root_0);
                    }
                    LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7816); if (state.failed) return retval;
                    NUM_INT496=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT496_tree = (CommonTree)adaptor.create(NUM_INT496);
                    adaptor.addChild(root_0, NUM_INT496_tree);
                    }
                    COMMA497=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7821); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7824);
                    eventProperty498=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty498.getTree());
                    RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7826); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1249:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF500=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF500_tree = (CommonTree)adaptor.create(INSTANCEOF500);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF500_tree, root_0);
                    }
                    LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7839); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7842);
                    expression502=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression502.getTree());
                    COMMA503=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7844); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7847);
                    classIdentifier504=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier504.getTree());
                    // EsperEPL2Grammar.g:1249:58: ( COMMA classIdentifier )*
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==COMMA) ) {
                            alt185=1;
                        }


                        switch (alt185) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1249:59: COMMA classIdentifier
                    	    {
                    	    COMMA505=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7850); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7853);
                    	    classIdentifier506=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier506.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop185;
                        }
                    } while (true);

                    RPAREN507=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7857); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1250:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST508=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST508_tree = (CommonTree)adaptor.create(CAST508);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST508_tree, root_0);
                    }
                    LPAREN509=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7866); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7869);
                    expression510=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression510.getTree());
                    // EsperEPL2Grammar.g:1250:29: ( COMMA | AS )
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==COMMA) ) {
                        alt186=1;
                    }
                    else if ( (LA186_0==AS) ) {
                        alt186=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 186, 0, input);

                        throw nvae;
                    }
                    switch (alt186) {
                        case 1 :
                            // EsperEPL2Grammar.g:1250:30: COMMA
                            {
                            COMMA511=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7872); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1250:39: AS
                            {
                            AS512=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7877); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7881);
                    classIdentifier513=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier513.getTree());
                    RPAREN514=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7883); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1251:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS515=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS515_tree = (CommonTree)adaptor.create(EXISTS515);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS515_tree, root_0);
                    }
                    LPAREN516=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7892); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7895);
                    eventProperty517=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty517.getTree());
                    RPAREN518=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7897); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1252:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP519=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP519_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP519);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP519_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1252:23: ( LPAREN RPAREN )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==LPAREN) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // EsperEPL2Grammar.g:1252:24: LPAREN RPAREN
                            {
                            LPAREN520=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7907); if (state.failed) return retval;
                            RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7910); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1255:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST522=null;
        Token LPAREN523=null;
        Token RPAREN525=null;
        EsperEPL2GrammarParser.expression_return expression524 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST522_tree=null;
        CommonTree LPAREN523_tree=null;
        CommonTree RPAREN525_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1256:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1256:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST522=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST522);

            LPAREN523=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN523);

            // EsperEPL2Grammar.g:1256:17: (a= ALL | d= DISTINCT )?
            int alt189=3;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==ALL) ) {
                alt189=1;
            }
            else if ( (LA189_0==DISTINCT) ) {
                alt189=2;
            }
            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1256:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1256:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7942);
            expression524=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression524.getTree());
            RPAREN525=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN525);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1257:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1257:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1257:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1260:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST526=null;
        Token LPAREN527=null;
        Token RPAREN529=null;
        EsperEPL2GrammarParser.expression_return expression528 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST526_tree=null;
        CommonTree LPAREN527_tree=null;
        CommonTree RPAREN529_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1261:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1261:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST526=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST526);

            LPAREN527=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN527);

            // EsperEPL2Grammar.g:1261:16: (a= ALL | d= DISTINCT )?
            int alt190=3;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ALL) ) {
                alt190=1;
            }
            else if ( (LA190_0==DISTINCT) ) {
                alt190=2;
            }
            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1261:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1261:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7987);
            expression528=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression528.getTree());
            RPAREN529=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN529);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1262:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1262:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1262:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1265:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX530=null;
        Token MIN531=null;
        Token LPAREN532=null;
        Token COMMA534=null;
        Token COMMA536=null;
        Token RPAREN538=null;
        EsperEPL2GrammarParser.expression_return expression533 = null;

        EsperEPL2GrammarParser.expression_return expression535 = null;

        EsperEPL2GrammarParser.expression_return expression537 = null;


        CommonTree MAX530_tree=null;
        CommonTree MIN531_tree=null;
        CommonTree LPAREN532_tree=null;
        CommonTree COMMA534_tree=null;
        CommonTree COMMA536_tree=null;
        CommonTree RPAREN538_tree=null;

        try {
            // EsperEPL2Grammar.g:1266:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1266:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1266:4: ( MAX | MIN )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==MAX) ) {
                alt191=1;
            }
            else if ( (LA191_0==MIN) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1266:5: MAX
                    {
                    MAX530=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX530_tree = (CommonTree)adaptor.create(MAX530);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX530_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1266:12: MIN
                    {
                    MIN531=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8021); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN531_tree = (CommonTree)adaptor.create(MIN531);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN531_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN532=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8025); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8028);
            expression533=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
            // EsperEPL2Grammar.g:1266:37: ( COMMA expression ( COMMA expression )* )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==COMMA) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1266:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8031); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8034);
                    expression535=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());
                    // EsperEPL2Grammar.g:1266:56: ( COMMA expression )*
                    loop192:
                    do {
                        int alt192=2;
                        int LA192_0 = input.LA(1);

                        if ( (LA192_0==COMMA) ) {
                            alt192=1;
                        }


                        switch (alt192) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1266:57: COMMA expression
                    	    {
                    	    COMMA536=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8037); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8040);
                    	    expression537=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression537.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop192;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8047); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1269:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty539 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction540 = null;



        try {
            // EsperEPL2Grammar.g:1270:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt194=2;
            alt194 = dfa194.predict(input);
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1270:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8066);
                    eventProperty539=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty539.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1271:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8071);
                    libFunction540=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction540.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1274:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT542=null;
        Token LPAREN544=null;
        Token RPAREN546=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy541 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent543 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs545 = null;


        CommonTree DOT542_tree=null;
        CommonTree LPAREN544_tree=null;
        CommonTree RPAREN546_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1275:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1275:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1275:4: ( classIdentifierNonGreedy DOT )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==IDENT) ) {
                int LA195_1 = input.LA(2);

                if ( (LA195_1==DOT) ) {
                    alt195=1;
                }
            }
            else if ( (LA195_0==TICKED_STRING_LITERAL) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1275:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction8084);
                    classIdentifierNonGreedy541=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy541.getTree());
                    DOT542=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT542);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction8090);
            funcIdent543=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent543.getTree());
            LPAREN544=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction8092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN544);

            // EsperEPL2Grammar.g:1275:53: ( libFunctionArgs )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==WINDOW||LA196_0==ESCAPE||(LA196_0>=NOT_EXPR && LA196_0<=EVERY_EXPR)||(LA196_0>=SUM && LA196_0<=COUNT)||LA196_0==CASE||LA196_0==OUTER||(LA196_0>=JOIN && LA196_0<=FULL)||(LA196_0>=DISTINCT && LA196_0<=ALL)||(LA196_0>=EVENTS && LA196_0<=LAST)||(LA196_0>=UNIDIRECTIONAL && LA196_0<=CURRENT_TIMESTAMP)||LA196_0==SNAPSHOT||(LA196_0>=VARIABLE && LA196_0<=INDEX)||(LA196_0>=BOOLEAN_TRUE && LA196_0<=VALUE_NULL)||(LA196_0>=DEFINE && LA196_0<=MATCHES)||LA196_0==NUM_DOUBLE||LA196_0==IDENT||LA196_0==LPAREN||(LA196_0>=PLUS && LA196_0<=QUESTION)||(LA196_0>=STRING_LITERAL && LA196_0<=QUOTED_STRING_LITERAL)||LA196_0==MINUS||LA196_0==LCURLY||LA196_0==NUM_INT||(LA196_0>=TICKED_STRING_LITERAL && LA196_0<=NUM_FLOAT)) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1275:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction8095);
                    libFunctionArgs545=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs545.getTree());

                    }
                    break;

            }

            RPAREN546=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction8099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN546);



            // AST REWRITE
            // elements: libFunctionArgs, funcIdent, classIdentifierNonGreedy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1276:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1276:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1276:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1276:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1279:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT547=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT547_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1280:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt197=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt197=1;
                }
                break;
            case MAX:
                {
                alt197=2;
                }
                break;
            case MIN:
                {
                alt197=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1280:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT547=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent8129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT547_tree = (CommonTree)adaptor.create(IDENT547);
                    adaptor.addChild(root_0, IDENT547_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1281:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1281:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1282:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1282:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1285:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL548=null;
        Token DISTINCT549=null;
        Token COMMA551=null;
        EsperEPL2GrammarParser.expression_return expression550 = null;

        EsperEPL2GrammarParser.expression_return expression552 = null;


        CommonTree ALL548_tree=null;
        CommonTree DISTINCT549_tree=null;
        CommonTree COMMA551_tree=null;

        try {
            // EsperEPL2Grammar.g:1286:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1286:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1286:4: ( ALL | DISTINCT )?
            int alt198=3;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==ALL) ) {
                alt198=1;
            }
            else if ( (LA198_0==DISTINCT) ) {
                alt198=2;
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1286:5: ALL
                    {
                    ALL548=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8166); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1286:12: DISTINCT
                    {
                    DISTINCT549=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT549_tree = (CommonTree)adaptor.create(DISTINCT549);
                    adaptor.addChild(root_0, DISTINCT549_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs8175);
            expression550=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression550.getTree());
            // EsperEPL2Grammar.g:1286:34: ( COMMA expression )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==COMMA) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1286:35: COMMA expression
            	    {
            	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8178); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8181);
            	    expression552=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression552.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1289:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR554=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr553 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr555 = null;


        CommonTree AND_EXPR554_tree=null;

        try {
            // EsperEPL2Grammar.g:1290:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1290:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList8195);
            concatenationExpr553=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr553.getTree());
            AND_EXPR554=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8197); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8200);
            concatenationExpr555=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr555.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1299:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression556 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1302:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1302:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression8228);
            followedByExpression556=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression556.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1305:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression557 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression558 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1306:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1306:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8240);
            orExpression557=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression557.getTree());
            // EsperEPL2Grammar.g:1306:17: (f= FOLLOWED_BY orExpression )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==FOLLOWED_BY) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1306:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8245); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8247);
            	    orExpression558=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression558.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1307:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1307:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1308:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1311:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression559 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression560 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1312:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1312:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8286);
            andExpression559=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression559.getTree());
            // EsperEPL2Grammar.g:1312:18: (o= OR_EXPR andExpression )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==OR_EXPR) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1312:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8291); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression8293);
            	    andExpression560=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression560.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, OR_EXPR, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1313:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1313:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1314:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1317:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression561 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression562 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1318:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1318:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8325);
            matchUntilExpression561=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression561.getTree());
            // EsperEPL2Grammar.g:1318:25: (a= AND_EXPR matchUntilExpression )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==AND_EXPR) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1318:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8330); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8332);
            	    matchUntilExpression562=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression562.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1319:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1319:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1320:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1323:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression563 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression564 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1324:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1324:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1324:4: (r= matchUntilRange )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==LBRACK) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1324:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8367);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8371);
            qualifyExpression563=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression563.getTree());
            // EsperEPL2Grammar.g:1324:43: (a= UNTIL qualifyExpression )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==UNTIL) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1324:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8378);
                    qualifyExpression564=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression564.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1325:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1325:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1326:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1326:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1327:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1327:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1328:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1331:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList565 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix566 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1332:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1332:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1332:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( ((LA207_0>=NOT_EXPR && LA207_0<=EVERY_DISTINCT_EXPR)) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1332:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1332:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt205=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt205=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt205=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt205=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 0, input);

                        throw nvae;
                    }

                    switch (alt205) {
                        case 1 :
                            // EsperEPL2Grammar.g:1332:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8443); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1332:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8449); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1332:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8455); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8457);
                            distinctExpressionList565=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList565.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1332:80: (r= matchUntilRange )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==LBRACK) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // EsperEPL2Grammar.g:1332:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8463);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8472);
            guardPostFix566=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix566.getTree());


            // AST REWRITE
            // elements: matchUntilRange, guardPostFix, guardPostFix, guardPostFix, guardPostFix, guardPostFix, EVERY_EXPR, distinctExpressionList, guardPostFix, EVERY_EXPR, matchUntilRange, EVERY_DISTINCT_EXPR, distinctExpressionList, EVERY_DISTINCT_EXPR, matchUntilRange, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1334:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1334:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1335:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1335:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1336:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1336:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1337:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1337:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1337:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1338:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1338:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1338:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1339:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1339:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1339:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1340:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1343:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN567=null;
        Token COMMA569=null;
        Token RPAREN571=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom568 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom570 = null;


        CommonTree LPAREN567_tree=null;
        CommonTree COMMA569_tree=null;
        CommonTree RPAREN571_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1344:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1344:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN567);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8589);
            distinctExpressionAtom568=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom568.getTree());
            // EsperEPL2Grammar.g:1344:34: ( COMMA distinctExpressionAtom )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1344:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8592); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA569);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8594);
            	    distinctExpressionAtom570=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom570.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);

            RPAREN571=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN571);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1345:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1345:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1348:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression572 = null;



        try {
            // EsperEPL2Grammar.g:1349:2: ( expression )
            // EsperEPL2Grammar.g:1349:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8621);
            expression572=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression572.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1352:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN575=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression573 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression574 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression576 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN575_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1353:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1353:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1353:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENT||LA209_0==TICKED_STRING_LITERAL) ) {
                alt209=1;
            }
            else if ( (LA209_0==LPAREN) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1353:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8636);
                    atomicExpression573=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression573.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1353:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8644);
                    patternExpression574=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression574.getTree());
                    RPAREN575=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN575);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1353:59: (w= WHERE guardExpression )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==WHERE) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1353:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix8654);
                    guardExpression576=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression576.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: guardExpression, atomicExpression, atomicExpression, patternExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1354:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1354:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1354:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1354:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1355:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1355:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1355:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1358:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression577 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression578 = null;



        try {
            // EsperEPL2Grammar.g:1359:2: ( observerExpression | patternFilterExpression )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==IDENT) ) {
                int LA211_1 = input.LA(2);

                if ( (LA211_1==COLON) ) {
                    alt211=1;
                }
                else if ( (LA211_1==EOF||(LA211_1>=OR_EXPR && LA211_1<=AND_EXPR)||LA211_1==WHERE||LA211_1==UNTIL||(LA211_1>=EQUALS && LA211_1<=RBRACK)||LA211_1==FOLLOWED_BY) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA211_0==TICKED_STRING_LITERAL) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // EsperEPL2Grammar.g:1359:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8696);
                    observerExpression577=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression577.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1359:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8700);
                    patternFilterExpression578=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1362:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON579=null;
        Token LPAREN580=null;
        Token RPAREN582=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList581 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON579_tree=null;
        CommonTree LPAREN580_tree=null;
        CommonTree RPAREN582_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1363:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1363:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON579=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON579);

            // EsperEPL2Grammar.g:1363:19: (nm= IDENT | a= AT )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==IDENT) ) {
                alt212=1;
            }
            else if ( (LA212_0==AT) ) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1363:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1363:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN580=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN580);

            // EsperEPL2Grammar.g:1363:44: ( expressionWithTimeList )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==WINDOW||LA213_0==ESCAPE||(LA213_0>=NOT_EXPR && LA213_0<=EVERY_EXPR)||(LA213_0>=SUM && LA213_0<=COUNT)||LA213_0==CASE||LA213_0==OUTER||(LA213_0>=JOIN && LA213_0<=FULL)||(LA213_0>=EVENTS && LA213_0<=LAST)||(LA213_0>=UNIDIRECTIONAL && LA213_0<=CURRENT_TIMESTAMP)||LA213_0==SNAPSHOT||(LA213_0>=VARIABLE && LA213_0<=INDEX)||(LA213_0>=BOOLEAN_TRUE && LA213_0<=VALUE_NULL)||(LA213_0>=DEFINE && LA213_0<=MATCHES)||LA213_0==NUM_DOUBLE||LA213_0==IDENT||LA213_0==LPAREN||LA213_0==LBRACK||LA213_0==STAR||(LA213_0>=PLUS && LA213_0<=QUESTION)||(LA213_0>=STRING_LITERAL && LA213_0<=QUOTED_STRING_LITERAL)||LA213_0==MINUS||LA213_0==LCURLY||LA213_0==NUM_INT||(LA213_0>=TICKED_STRING_LITERAL && LA213_0<=NUM_FLOAT)) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1363:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8733);
                    expressionWithTimeList581=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList581.getTree());

                    }
                    break;

            }

            RPAREN582=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN582);



            // AST REWRITE
            // elements: nm, expressionWithTimeList, IDENT, expressionWithTimeList, ns, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1364:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1364:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1364:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1364:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1365:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1365:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1365:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1368:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT583=null;
        Token COLON584=null;
        Token IDENT585=null;
        Token LPAREN586=null;
        Token RPAREN588=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList587 = null;


        CommonTree IDENT583_tree=null;
        CommonTree COLON584_tree=null;
        CommonTree IDENT585_tree=null;
        CommonTree LPAREN586_tree=null;
        CommonTree RPAREN588_tree=null;

        try {
            // EsperEPL2Grammar.g:1369:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1369:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT583=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT583_tree = (CommonTree)adaptor.create(IDENT583);
            adaptor.addChild(root_0, IDENT583_tree);
            }
            COLON584=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8787); if (state.failed) return retval;
            IDENT585=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT585_tree = (CommonTree)adaptor.create(IDENT585);
            adaptor.addChild(root_0, IDENT585_tree);
            }
            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8792); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1369:31: ( expressionWithTimeList )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==WINDOW||LA214_0==ESCAPE||(LA214_0>=NOT_EXPR && LA214_0<=EVERY_EXPR)||(LA214_0>=SUM && LA214_0<=COUNT)||LA214_0==CASE||LA214_0==OUTER||(LA214_0>=JOIN && LA214_0<=FULL)||(LA214_0>=EVENTS && LA214_0<=LAST)||(LA214_0>=UNIDIRECTIONAL && LA214_0<=CURRENT_TIMESTAMP)||LA214_0==SNAPSHOT||(LA214_0>=VARIABLE && LA214_0<=INDEX)||(LA214_0>=BOOLEAN_TRUE && LA214_0<=VALUE_NULL)||(LA214_0>=DEFINE && LA214_0<=MATCHES)||LA214_0==NUM_DOUBLE||LA214_0==IDENT||LA214_0==LPAREN||LA214_0==LBRACK||LA214_0==STAR||(LA214_0>=PLUS && LA214_0<=QUESTION)||(LA214_0>=STRING_LITERAL && LA214_0<=QUOTED_STRING_LITERAL)||LA214_0==MINUS||LA214_0==LCURLY||LA214_0==NUM_INT||(LA214_0>=TICKED_STRING_LITERAL && LA214_0<=NUM_FLOAT)) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1369:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8796);
                    expressionWithTimeList587=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList587.getTree());

                    }
                    break;

            }

            RPAREN588=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8800); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1373:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK589=null;
        Token DOT590=null;
        Token DOT591=null;
        Token DOT592=null;
        Token DOT593=null;
        Token RBRACK594=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK589_tree=null;
        CommonTree DOT590_tree=null;
        CommonTree DOT591_tree=null;
        CommonTree DOT592_tree=null;
        CommonTree DOT593_tree=null;
        CommonTree RBRACK594_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1374:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1374:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK589=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK589);

            // EsperEPL2Grammar.g:1374:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt219=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt219=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt219=2;
                }
                break;
            case DOT:
                {
                int LA219_3 = input.LA(2);

                if ( (LA219_3==DOT) ) {
                    alt219=3;
                }
                else if ( (LA219_3==NUM_DOUBLE) ) {
                    alt219=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1375:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1375:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt216=3;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==DOT) ) {
                        alt216=1;
                    }
                    else if ( (LA216_0==COLON) ) {
                        alt216=2;
                    }
                    switch (alt216) {
                        case 1 :
                            // EsperEPL2Grammar.g:1375:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1375:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1375:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8831); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT590=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT590);

                            // EsperEPL2Grammar.g:1375:30: (r= NUM_INT )?
                            int alt215=2;
                            int LA215_0 = input.LA(1);

                            if ( (LA215_0==NUM_INT) ) {
                                alt215=1;
                            }
                            switch (alt215) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1375:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8837); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1376:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1376:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1376:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8865); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1378:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1378:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt218=3;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==DOT) ) {
                        alt218=1;
                    }
                    else if ( (LA218_0==NUM_DOUBLE) ) {
                        alt218=2;
                    }
                    switch (alt218) {
                        case 1 :
                            // EsperEPL2Grammar.g:1379:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8919); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1379:35: (r= NUM_INT )?
                            int alt217=2;
                            int LA217_0 = input.LA(1);

                            if ( (LA217_0==NUM_INT) ) {
                                alt217=1;
                            }
                            switch (alt217) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1379:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8923); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1381:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8983); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1383:8: DOT DOT r= NUM_INT
                    {
                    DOT591=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT591);

                    DOT592=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT592);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange9026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1384:8: DOT db3= NUM_DOUBLE
                    {
                    DOT593=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT593);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange9039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK594=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK594);



            // AST REWRITE
            // elements: db2, db, l, db, l, r, r, l, db, db, db3, r, l, r
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1387:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1387:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1388:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1388:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1389:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1389:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1390:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1390:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1391:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1391:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1392:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1392:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1393:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1393:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1394:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1394:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1395:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1395:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1396:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1396:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1404:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS595=null;
        Token LPAREN597=null;
        Token RPAREN599=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier596 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList598 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression600 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS595_tree=null;
        CommonTree LPAREN597_tree=null;
        CommonTree RPAREN599_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1407:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1407:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1407:9: (i= IDENT EQUALS )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==IDENT) ) {
                int LA220_1 = input.LA(2);

                if ( (LA220_1==EQUALS) ) {
                    alt220=1;
                }
            }
            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1407:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS595=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS595);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9246);
            classIdentifier596=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier596.getTree());
            // EsperEPL2Grammar.g:1409:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==LPAREN) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1409:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN597=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN597);

                    // EsperEPL2Grammar.g:1409:17: ( expressionList )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==WINDOW||LA221_0==ESCAPE||(LA221_0>=NOT_EXPR && LA221_0<=EVERY_EXPR)||(LA221_0>=SUM && LA221_0<=COUNT)||LA221_0==CASE||LA221_0==OUTER||(LA221_0>=JOIN && LA221_0<=FULL)||(LA221_0>=EVENTS && LA221_0<=LAST)||(LA221_0>=UNIDIRECTIONAL && LA221_0<=CURRENT_TIMESTAMP)||LA221_0==SNAPSHOT||(LA221_0>=VARIABLE && LA221_0<=INDEX)||(LA221_0>=BOOLEAN_TRUE && LA221_0<=VALUE_NULL)||(LA221_0>=DEFINE && LA221_0<=MATCHES)||LA221_0==NUM_DOUBLE||LA221_0==IDENT||LA221_0==LPAREN||(LA221_0>=PLUS && LA221_0<=QUESTION)||(LA221_0>=STRING_LITERAL && LA221_0<=QUOTED_STRING_LITERAL)||LA221_0==MINUS||LA221_0==LCURLY||LA221_0==NUM_INT||(LA221_0>=TICKED_STRING_LITERAL && LA221_0<=NUM_FLOAT)) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1409:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9259);
                            expressionList598=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList598.getTree());

                            }
                            break;

                    }

                    RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN599);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1410:9: ( propertyExpression )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LBRACK) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1410:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9274);
                    propertyExpression600=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression600.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, expressionList, propertyExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1411:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1411:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1411:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1411:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1411:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1414:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic601 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic602 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1415:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1415:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9319);
            propertyExpressionAtomic601=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic601.getTree());
            // EsperEPL2Grammar.g:1415:29: ( propertyExpressionAtomic )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==LBRACK) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1415:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9322);
            	    propertyExpressionAtomic602=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic602.getTree());

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1416:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1416:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1419:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK603=null;
        Token SELECT604=null;
        Token FROM606=null;
        Token AS608=null;
        Token IDENT609=null;
        Token WHERE610=null;
        Token RBRACK612=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList605 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty607 = null;

        EsperEPL2GrammarParser.expression_return expression611 = null;


        CommonTree LBRACK603_tree=null;
        CommonTree SELECT604_tree=null;
        CommonTree FROM606_tree=null;
        CommonTree AS608_tree=null;
        CommonTree IDENT609_tree=null;
        CommonTree WHERE610_tree=null;
        CommonTree RBRACK612_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1420:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1420:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK603=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK603);

            // EsperEPL2Grammar.g:1420:11: ( SELECT propertySelectionList FROM )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==SELECT) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1420:12: SELECT propertySelectionList FROM
                    {
                    SELECT604=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT604);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9357);
                    propertySelectionList605=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList605.getTree());
                    FROM606=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM606);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9363);
            eventProperty607=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty607.getTree());
            // EsperEPL2Grammar.g:1420:62: ( AS IDENT )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==AS) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1420:63: AS IDENT
                    {
                    AS608=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS608);

                    IDENT609=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT609);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1420:74: ( WHERE expression )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==WHERE) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1420:75: WHERE expression
                    {
                    WHERE610=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE610);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9375);
                    expression611=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression611.getTree());

                    }
                    break;

            }

            RBRACK612=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK612);



            // AST REWRITE
            // elements: eventProperty, IDENT, expression, propertySelectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1421:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1421:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1421:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1421:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1421:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1421:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1424:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA614=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement613 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement615 = null;


        CommonTree COMMA614_tree=null;

        try {
            // EsperEPL2Grammar.g:1425:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1425:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9429);
            propertySelectionListElement613=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement613.getTree());
            // EsperEPL2Grammar.g:1425:33: ( COMMA propertySelectionListElement )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==COMMA) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1425:34: COMMA propertySelectionListElement
            	    {
            	    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9432); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9435);
            	    propertySelectionListElement615=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement615.getTree());

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1428:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS618=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector616 = null;

        EsperEPL2GrammarParser.expression_return expression617 = null;


        CommonTree s_tree=null;
        CommonTree AS618_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1430:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt230=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt230=1;
                }
                break;
            case IDENT:
                {
                int LA230_2 = input.LA(2);

                if ( (LA230_2==DOT) ) {
                    int LA230_62 = input.LA(3);

                    if ( (LA230_62==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt230=2;
                    }
                    else if ( (LA230_62==WINDOW||LA230_62==ESCAPE||LA230_62==EVERY_EXPR||(LA230_62>=SUM && LA230_62<=COUNT)||LA230_62==OUTER||(LA230_62>=JOIN && LA230_62<=FULL)||(LA230_62>=EVENTS && LA230_62<=LAST)||(LA230_62>=UNIDIRECTIONAL && LA230_62<=PRIOR)||(LA230_62>=WEEKDAY && LA230_62<=CAST)||LA230_62==SNAPSHOT||(LA230_62>=VARIABLE && LA230_62<=INDEX)||(LA230_62>=DEFINE && LA230_62<=MATCHES)||LA230_62==IDENT||LA230_62==TICKED_STRING_LITERAL) ) {
                        alt230=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 62, input);

                        throw nvae;
                    }
                }
                else if ( ((LA230_2>=IN_SET && LA230_2<=REGEXP)||(LA230_2>=OR_EXPR && LA230_2<=NOT_EXPR)||LA230_2==AS||LA230_2==FROM||LA230_2==IS||LA230_2==COMMA||LA230_2==EQUALS||LA230_2==LPAREN||LA230_2==LBRACK||(LA230_2>=STAR && LA230_2<=QUESTION)||(LA230_2>=BAND && LA230_2<=MOD)||LA230_2==ESCAPECHAR) ) {
                    alt230=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt230=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1430:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1430:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1431:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9477);
                    propertyStreamSelector616=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector616.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1432:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9482);
                    expression617=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression617.getTree());
                    // EsperEPL2Grammar.g:1432:15: ( AS i= keywordAllowedIdent )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==AS) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // EsperEPL2Grammar.g:1432:16: AS i= keywordAllowedIdent
                            {
                            AS618=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9485); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS618);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9489);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1433:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1433:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1434:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1434:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1437:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT619=null;
        Token STAR620=null;
        Token AS621=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT619_tree=null;
        CommonTree STAR620_tree=null;
        CommonTree AS621_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1438:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1438:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT619=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT619);

            STAR620=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR620);

            // EsperEPL2Grammar.g:1438:21: ( AS i= IDENT )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==AS) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1438:22: AS i= IDENT
                    {
                    AS621=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS621);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1439:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1439:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1439:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1442:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS622=null;
        Token LPAREN624=null;
        Token RPAREN626=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier623 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList625 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression627 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS622_tree=null;
        CommonTree LPAREN624_tree=null;
        CommonTree RPAREN626_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1445:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1445:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1445:9: (i= IDENT EQUALS )?
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==IDENT) ) {
                int LA232_1 = input.LA(2);

                if ( (LA232_1==EQUALS) ) {
                    alt232=1;
                }
            }
            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1445:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS622=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS622);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9602);
            classIdentifier623=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier623.getTree());
            // EsperEPL2Grammar.g:1447:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==LPAREN) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1447:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN624=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN624);

                    // EsperEPL2Grammar.g:1447:17: ( expressionList )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==WINDOW||LA233_0==ESCAPE||(LA233_0>=NOT_EXPR && LA233_0<=EVERY_EXPR)||(LA233_0>=SUM && LA233_0<=COUNT)||LA233_0==CASE||LA233_0==OUTER||(LA233_0>=JOIN && LA233_0<=FULL)||(LA233_0>=EVENTS && LA233_0<=LAST)||(LA233_0>=UNIDIRECTIONAL && LA233_0<=CURRENT_TIMESTAMP)||LA233_0==SNAPSHOT||(LA233_0>=VARIABLE && LA233_0<=INDEX)||(LA233_0>=BOOLEAN_TRUE && LA233_0<=VALUE_NULL)||(LA233_0>=DEFINE && LA233_0<=MATCHES)||LA233_0==NUM_DOUBLE||LA233_0==IDENT||LA233_0==LPAREN||(LA233_0>=PLUS && LA233_0<=QUESTION)||(LA233_0>=STRING_LITERAL && LA233_0<=QUOTED_STRING_LITERAL)||LA233_0==MINUS||LA233_0==LCURLY||LA233_0==NUM_INT||(LA233_0>=TICKED_STRING_LITERAL && LA233_0<=NUM_FLOAT)) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // EsperEPL2Grammar.g:1447:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9615);
                            expressionList625=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList625.getTree());

                            }
                            break;

                    }

                    RPAREN626=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9618); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN626);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1448:9: ( propertyExpression )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==LBRACK) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1448:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9630);
                    propertyExpression627=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression627.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, propertyExpression, classIdentifier, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1449:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1449:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1449:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1449:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1449:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1453:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT628=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT628_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1455:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1455:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9685);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1456:6: ( DOT i2= escapableIdent )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==DOT) ) {
                    int LA236_20 = input.LA(2);

                    if ( (LA236_20==IDENT) ) {
                        int LA236_42 = input.LA(3);

                        if ( (LA236_42==EOF||LA236_42==CREATE||(LA236_42>=OR_EXPR && LA236_42<=AS)||LA236_42==SELECT||(LA236_42>=INNER && LA236_42<=ON)||(LA236_42>=GROUP && LA236_42<=HAVING)||LA236_42==OUTPUT||LA236_42==INSERT||LA236_42==ORDER||(LA236_42>=UNIDIRECTIONAL && LA236_42<=RETAININTERSECTION)||LA236_42==DELETE||LA236_42==SET||LA236_42==UNTIL||LA236_42==ROW_LIMIT_EXPR||(LA236_42>=UPDATE && LA236_42<=MATCH_RECOGNIZE)||(LA236_42>=COMMA && LA236_42<=IDENT)||(LA236_42>=DOT && LA236_42<=RBRACK)||LA236_42==RCURLY||LA236_42==FOLLOWED_BY||LA236_42==TICKED_STRING_LITERAL||LA236_42==EMAILAT) ) {
                            alt236=1;
                        }


                    }
                    else if ( (LA236_20==TICKED_STRING_LITERAL) ) {
                        alt236=1;
                    }


                }


                switch (alt236) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1457:8: DOT i2= escapableIdent
            	    {
            	    DOT628=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9704); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT628);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9708);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1459:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1459:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1462:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT629=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT629_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1464:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1464:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9753);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1465:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA237_2 = input.LA(3);

                        if ( (LA237_2==DOT) ) {
                            alt237=1;
                        }
                        else if ( (LA237_2==LPAREN) ) {
                            alt237=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt237=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt237=2;
                        }
                        break;

                    }

                }


                switch (alt237) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1467:8: DOT i2= escapableIdent
            	    {
            	    DOT629=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9788); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT629);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9792);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1469:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1469:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1472:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA631=null;
        EsperEPL2GrammarParser.expression_return expression630 = null;

        EsperEPL2GrammarParser.expression_return expression632 = null;


        CommonTree COMMA631_tree=null;

        try {
            // EsperEPL2Grammar.g:1473:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1473:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9834);
            expression630=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression630.getTree());
            // EsperEPL2Grammar.g:1473:22: ( COMMA expression )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==COMMA) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1473:23: COMMA expression
            	    {
            	    COMMA631=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9837); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9840);
            	    expression632=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression632.getTree());

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1476:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA634=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime633 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime635 = null;


        CommonTree COMMA634_tree=null;

        try {
            // EsperEPL2Grammar.g:1477:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1477:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9868);
            expressionWithTime633=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime633.getTree());
            // EsperEPL2Grammar.g:1477:30: ( COMMA expressionWithTime )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==COMMA) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1477:31: COMMA expressionWithTime
            	    {
            	    COMMA634=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9871); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9874);
            	    expressionWithTime635=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime635.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1480:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand636 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand637 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod638 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable639 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand640 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand641 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator642 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator643 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList644 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar645 = null;



        try {
            // EsperEPL2Grammar.g:1481:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt240=10;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    // EsperEPL2Grammar.g:1481:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9900);
                    lastOperand636=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand636.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1482:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9911);
                    lastWeekdayOperand637=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand637.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1483:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9922);
                    timePeriod638=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod638.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1484:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9933);
                    expressionQualifyable639=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable639.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1485:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9944);
                    rangeOperand640=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand640.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1486:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9956);
                    frequencyOperand641=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand641.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1487:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9967);
                    lastOperator642=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator642.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1488:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9979);
                    weekDayOperator643=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator643.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1489:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9991);
                    numericParameterList644=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList644.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1490:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9996);
                    numberSetStar645=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar645.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1493:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression646 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1494:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1494:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10007);
            expression646=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression646.getTree());
            // EsperEPL2Grammar.g:1494:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt241=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt241=1;
                    }
                    break;
                case DESC:
                    {
                    alt241=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt241=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt241=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt241=5;
                    }
                    break;
            }

            switch (alt241) {
                case 1 :
                    // EsperEPL2Grammar.g:1494:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1494:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1494:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1494:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1494:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d, a, expression, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1495:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1495:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1495:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1495:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1496:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1496:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1496:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1497:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1501:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR647=null;

        CommonTree STAR647_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1502:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1502:4: STAR
            {
            STAR647=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR647);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1503:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1503:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1506:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW648=null;

        CommonTree LW648_tree=null;

        try {
            // EsperEPL2Grammar.g:1507:2: ( LW )
            // EsperEPL2Grammar.g:1507:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW648=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW648_tree = (CommonTree)adaptor.create(LW648);
            root_0 = (CommonTree)adaptor.becomeRoot(LW648_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1510:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST649=null;

        CommonTree LAST649_tree=null;

        try {
            // EsperEPL2Grammar.g:1511:2: ( LAST )
            // EsperEPL2Grammar.g:1511:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST649=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST649_tree = (CommonTree)adaptor.create(LAST649);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST649_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1514:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR650=null;
        Token DIV651=null;
        EsperEPL2GrammarParser.number_return number652 = null;

        EsperEPL2GrammarParser.substitution_return substitution653 = null;


        CommonTree i_tree=null;
        CommonTree STAR650_tree=null;
        CommonTree DIV651_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1515:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1515:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR650=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR650);

            DIV651=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV651);

            // EsperEPL2Grammar.g:1515:13: ( number | i= IDENT | substitution )
            int alt242=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt242=1;
                }
                break;
            case IDENT:
                {
                alt242=2;
                }
                break;
            case QUESTION:
                {
                alt242=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }

            switch (alt242) {
                case 1 :
                    // EsperEPL2Grammar.g:1515:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10135);
                    number652=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number652.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1515:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1515:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10141);
                    substitution653=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution653.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1516:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1516:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1516:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1516:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1517:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1517:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1517:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1517:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1520:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON656=null;
        EsperEPL2GrammarParser.number_return number654 = null;

        EsperEPL2GrammarParser.substitution_return substitution655 = null;

        EsperEPL2GrammarParser.number_return number657 = null;

        EsperEPL2GrammarParser.substitution_return substitution658 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON656_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1521:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1521:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1521:4: ( number | i1= IDENT | substitution )
            int alt243=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt243=1;
                }
                break;
            case IDENT:
                {
                alt243=2;
                }
                break;
            case QUESTION:
                {
                alt243=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }

            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1521:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10190);
                    number654=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number654.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1521:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1521:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10196);
                    substitution655=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution655.getTree());

                    }
                    break;

            }

            COLON656=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON656);

            // EsperEPL2Grammar.g:1521:41: ( number | i2= IDENT | substitution )
            int alt244=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt244=1;
                }
                break;
            case IDENT:
                {
                alt244=2;
                }
                break;
            case QUESTION:
                {
                alt244=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }

            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1521:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10202);
                    number657=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number657.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1521:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1521:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10208);
                    substitution658=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution658.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, substitution, i2, i1, i2, number, substitution, number, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1522:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1522:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1522:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1522:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1522:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1522:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1523:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1523:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1523:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1523:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1523:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1523:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1524:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1524:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1524:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1524:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1524:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1524:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1525:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1525:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1525:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1525:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1528:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST661=null;
        EsperEPL2GrammarParser.number_return number659 = null;

        EsperEPL2GrammarParser.substitution_return substitution660 = null;


        CommonTree i_tree=null;
        CommonTree LAST661_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1529:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1529:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1529:4: ( number | i= IDENT | substitution )
            int alt245=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt245=1;
                }
                break;
            case IDENT:
                {
                alt245=2;
                }
                break;
            case QUESTION:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1529:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10322);
                    number659=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number659.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1529:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1529:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10328);
                    substitution660=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution660.getTree());

                    }
                    break;

            }

            LAST661=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST661);



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1530:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1530:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1530:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1530:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1531:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1531:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1531:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1531:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1534:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY664=null;
        EsperEPL2GrammarParser.number_return number662 = null;

        EsperEPL2GrammarParser.substitution_return substitution663 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY664_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1535:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1535:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1535:4: ( number | i= IDENT | substitution )
            int alt246=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt246=1;
                }
                break;
            case IDENT:
                {
                alt246=2;
                }
                break;
            case QUESTION:
                {
                alt246=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }

            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1535:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10379);
                    number662=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number662.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1535:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1535:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10385);
                    substitution663=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution663.getTree());

                    }
                    break;

            }

            WEEKDAY664=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY664);



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1536:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1536:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1536:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1536:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1537:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1537:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1537:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1537:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1540:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK665=null;
        Token COMMA667=null;
        Token RBRACK669=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter666 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter668 = null;


        CommonTree LBRACK665_tree=null;
        CommonTree COMMA667_tree=null;
        CommonTree RBRACK669_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1541:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1541:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK665=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK665);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10437);
            numericListParameter666=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter666.getTree());
            // EsperEPL2Grammar.g:1541:32: ( COMMA numericListParameter )*
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==COMMA) ) {
                    alt247=1;
                }


                switch (alt247) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1541:33: COMMA numericListParameter
            	    {
            	    COMMA667=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10440); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA667);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10442);
            	    numericListParameter668=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter668.getTree());

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);

            RBRACK669=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK669);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1542:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1542:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1545:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand670 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand671 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant672 = null;



        try {
            // EsperEPL2Grammar.g:1546:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt248=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA248_1 = input.LA(2);

                if ( (LA248_1==COLON) ) {
                    alt248=1;
                }
                else if ( (LA248_1==COMMA||LA248_1==RBRACK) ) {
                    alt248=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA248_2 = input.LA(2);

                if ( (LA248_2==COLON) ) {
                    alt248=1;
                }
                else if ( (LA248_2==COMMA||LA248_2==RBRACK) ) {
                    alt248=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA248_3 = input.LA(2);

                if ( (LA248_3==COLON) ) {
                    alt248=1;
                }
                else if ( (LA248_3==COMMA||LA248_3==RBRACK) ) {
                    alt248=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA248_4 = input.LA(2);

                if ( (LA248_4==COMMA||LA248_4==RBRACK) ) {
                    alt248=3;
                }
                else if ( (LA248_4==COLON) ) {
                    alt248=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt248=1;
                }
                break;
            case STAR:
                {
                alt248=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1546:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10468);
                    rangeOperand670=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand670.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1547:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10474);
                    frequencyOperand671=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand671.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1548:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10479);
                    numberconstant672=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant672.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1551:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT674=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic673 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic675 = null;


        CommonTree DOT674_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1552:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1552:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10495);
            eventPropertyAtomic673=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic673.getTree());
            // EsperEPL2Grammar.g:1552:24: ( DOT eventPropertyAtomic )*
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==DOT) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1552:25: DOT eventPropertyAtomic
            	    {
            	    DOT674=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10498); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT674);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10500);
            	    eventPropertyAtomic675=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic675.getTree());

            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1553:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1553:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1556:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK677=null;
        Token RPAREN678=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent676 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK677_tree=null;
        CommonTree RPAREN678_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1557:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1557:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10526);
            eventPropertyIdent676=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent676.getTree());
            // EsperEPL2Grammar.g:1557:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt253=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt253=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt253=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt253=3;
                    }
                    break;
            }

            switch (alt253) {
                case 1 :
                    // EsperEPL2Grammar.g:1558:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK677=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK677);

                    // EsperEPL2Grammar.g:1558:32: (q= QUESTION )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==QUESTION) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // EsperEPL2Grammar.g:1558:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10546); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1560:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1560:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==STRING_LITERAL) ) {
                        alt251=1;
                    }
                    else if ( (LA251_0==QUOTED_STRING_LITERAL) ) {
                        alt251=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 0, input);

                        throw nvae;
                    }
                    switch (alt251) {
                        case 1 :
                            // EsperEPL2Grammar.g:1560:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10565); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1560:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10571); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN678=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN678);

                    // EsperEPL2Grammar.g:1560:66: (q= QUESTION )?
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==QUESTION) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            // EsperEPL2Grammar.g:1560:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10579); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1562:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, s, s, eventPropertyIdent, eventPropertyIdent, ni, ni, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1565:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1565:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1566:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1566:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1567:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1567:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1568:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1568:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1569:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1569:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1570:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1570:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1573:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR679=null;
        Token DOT680=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR679_tree=null;
        CommonTree DOT680_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1575:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1575:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10716);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1576:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==ESCAPECHAR) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1577:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR679=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10728); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR679);

            	    DOT680=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10730); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT680);

            	    // EsperEPL2Grammar.g:1577:24: (ipi2= keywordAllowedIdent )?
            	    int alt254=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt254=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA254_5 = input.LA(2);

            	            if ( (LA254_5==EOF||(LA254_5>=IN_SET && LA254_5<=NOT_EXPR)||(LA254_5>=WHERE && LA254_5<=AS)||(LA254_5>=ELSE && LA254_5<=FROM)||(LA254_5>=INNER && LA254_5<=FULL)||LA254_5==IS||(LA254_5>=GROUP && LA254_5<=HAVING)||LA254_5==ALL||LA254_5==OUTPUT||LA254_5==INSERT||(LA254_5>=ORDER && LA254_5<=DESC)||LA254_5==PATTERN||(LA254_5>=TIMEPERIOD_SEC && LA254_5<=TIMEPERIOD_SECONDS)||LA254_5==ROW_LIMIT_EXPR||(LA254_5>=MATCH_RECOGNIZE && LA254_5<=MEASURES)||LA254_5==AFTER||LA254_5==COMMA||(LA254_5>=EQUALS && LA254_5<=COLON)||(LA254_5>=BAND && LA254_5<=MOD)||LA254_5==RCURLY||LA254_5==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA254_22 = input.LA(2);

            	            if ( (LA254_22==LPAREN) ) {
            	                int LA254_167 = input.LA(3);

            	                if ( ((LA254_167>=STRING_LITERAL && LA254_167<=QUOTED_STRING_LITERAL)) ) {
            	                    alt254=1;
            	                }
            	            }
            	            else if ( (LA254_22==EOF||(LA254_22>=IN_SET && LA254_22<=NOT_EXPR)||(LA254_22>=WHERE && LA254_22<=AS)||(LA254_22>=ELSE && LA254_22<=FROM)||(LA254_22>=INNER && LA254_22<=FULL)||LA254_22==IS||(LA254_22>=GROUP && LA254_22<=HAVING)||LA254_22==ALL||LA254_22==OUTPUT||LA254_22==INSERT||(LA254_22>=ORDER && LA254_22<=DESC)||LA254_22==PATTERN||(LA254_22>=TIMEPERIOD_SEC && LA254_22<=TIMEPERIOD_SECONDS)||LA254_22==ROW_LIMIT_EXPR||(LA254_22>=MATCH_RECOGNIZE && LA254_22<=MEASURES)||LA254_22==AFTER||LA254_22==COMMA||(LA254_22>=EQUALS && LA254_22<=DOT)||(LA254_22>=RPAREN && LA254_22<=COLON)||(LA254_22>=BAND && LA254_22<=MOD)||LA254_22==RCURLY||LA254_22==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA254_35 = input.LA(2);

            	            if ( (LA254_35==EOF||(LA254_35>=IN_SET && LA254_35<=NOT_EXPR)||(LA254_35>=WHERE && LA254_35<=AS)||(LA254_35>=ELSE && LA254_35<=FROM)||(LA254_35>=INNER && LA254_35<=FULL)||LA254_35==IS||(LA254_35>=GROUP && LA254_35<=HAVING)||LA254_35==ALL||LA254_35==OUTPUT||LA254_35==INSERT||(LA254_35>=ORDER && LA254_35<=DESC)||LA254_35==PATTERN||(LA254_35>=TIMEPERIOD_SEC && LA254_35<=TIMEPERIOD_SECONDS)||LA254_35==ROW_LIMIT_EXPR||(LA254_35>=MATCH_RECOGNIZE && LA254_35<=MEASURES)||LA254_35==AFTER||LA254_35==COMMA||(LA254_35>=EQUALS && LA254_35<=COLON)||(LA254_35>=BAND && LA254_35<=MOD)||LA254_35==RCURLY||LA254_35==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA254_36 = input.LA(2);

            	            if ( (LA254_36==EOF||(LA254_36>=IN_SET && LA254_36<=NOT_EXPR)||(LA254_36>=WHERE && LA254_36<=AS)||(LA254_36>=ELSE && LA254_36<=FROM)||(LA254_36>=INNER && LA254_36<=FULL)||LA254_36==IS||(LA254_36>=GROUP && LA254_36<=HAVING)||LA254_36==ALL||LA254_36==OUTPUT||LA254_36==INSERT||(LA254_36>=ORDER && LA254_36<=DESC)||LA254_36==PATTERN||(LA254_36>=TIMEPERIOD_SEC && LA254_36<=TIMEPERIOD_SECONDS)||LA254_36==ROW_LIMIT_EXPR||(LA254_36>=MATCH_RECOGNIZE && LA254_36<=MEASURES)||LA254_36==AFTER||LA254_36==COMMA||(LA254_36>=EQUALS && LA254_36<=COLON)||(LA254_36>=BAND && LA254_36<=MOD)||LA254_36==RCURLY||LA254_36==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA254_38 = input.LA(2);

            	            if ( (LA254_38==EOF||(LA254_38>=IN_SET && LA254_38<=NOT_EXPR)||(LA254_38>=WHERE && LA254_38<=AS)||(LA254_38>=ELSE && LA254_38<=FROM)||(LA254_38>=INNER && LA254_38<=FULL)||LA254_38==IS||(LA254_38>=GROUP && LA254_38<=HAVING)||LA254_38==ALL||LA254_38==OUTPUT||LA254_38==INSERT||(LA254_38>=ORDER && LA254_38<=DESC)||LA254_38==PATTERN||(LA254_38>=TIMEPERIOD_SEC && LA254_38<=TIMEPERIOD_SECONDS)||LA254_38==ROW_LIMIT_EXPR||(LA254_38>=MATCH_RECOGNIZE && LA254_38<=MEASURES)||LA254_38==AFTER||LA254_38==COMMA||(LA254_38>=EQUALS && LA254_38<=COLON)||(LA254_38>=BAND && LA254_38<=MOD)||LA254_38==RCURLY||LA254_38==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA254_39 = input.LA(2);

            	            if ( (LA254_39==EOF||(LA254_39>=IN_SET && LA254_39<=NOT_EXPR)||(LA254_39>=WHERE && LA254_39<=AS)||(LA254_39>=ELSE && LA254_39<=FROM)||(LA254_39>=INNER && LA254_39<=FULL)||LA254_39==IS||(LA254_39>=GROUP && LA254_39<=HAVING)||LA254_39==ALL||LA254_39==OUTPUT||LA254_39==INSERT||(LA254_39>=ORDER && LA254_39<=DESC)||(LA254_39>=TIMEPERIOD_SEC && LA254_39<=TIMEPERIOD_SECONDS)||LA254_39==ROW_LIMIT_EXPR||(LA254_39>=MATCH_RECOGNIZE && LA254_39<=MEASURES)||LA254_39==AFTER||LA254_39==COMMA||(LA254_39>=EQUALS && LA254_39<=COLON)||(LA254_39>=BAND && LA254_39<=MOD)||LA254_39==RCURLY||LA254_39==ESCAPECHAR) ) {
            	                alt254=1;
            	            }
            	            else if ( (LA254_39==PATTERN) ) {
            	                int LA254_470 = input.LA(3);

            	                if ( (LA254_470==LPAREN) ) {
            	                    alt254=1;
            	                }
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt254) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1577:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10734);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1579:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1579:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1582:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT681=null;
        Token COUNT682=null;
        Token ESCAPE683=null;
        Token EVERY_EXPR684=null;
        Token SUM685=null;
        Token AVG686=null;
        Token MAX687=null;
        Token MIN688=null;
        Token COALESCE689=null;
        Token MEDIAN690=null;
        Token STDDEV691=null;
        Token AVEDEV692=null;
        Token EVENTS693=null;
        Token FIRST694=null;
        Token LAST695=null;
        Token UNIDIRECTIONAL696=null;
        Token RETAINUNION697=null;
        Token RETAININTERSECTION698=null;
        Token UNTIL699=null;
        Token PATTERN700=null;
        Token SQL701=null;
        Token METADATASQL702=null;
        Token PREVIOUS703=null;
        Token PRIOR704=null;
        Token WEEKDAY705=null;
        Token LW706=null;
        Token INSTANCEOF707=null;
        Token CAST708=null;
        Token SNAPSHOT709=null;
        Token VARIABLE710=null;
        Token INDEX711=null;
        Token WINDOW712=null;
        Token LEFT713=null;
        Token RIGHT714=null;
        Token OUTER715=null;
        Token FULL716=null;
        Token JOIN717=null;
        Token DEFINE718=null;
        Token PARTITION719=null;
        Token MATCHES720=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT681_tree=null;
        CommonTree COUNT682_tree=null;
        CommonTree ESCAPE683_tree=null;
        CommonTree EVERY_EXPR684_tree=null;
        CommonTree SUM685_tree=null;
        CommonTree AVG686_tree=null;
        CommonTree MAX687_tree=null;
        CommonTree MIN688_tree=null;
        CommonTree COALESCE689_tree=null;
        CommonTree MEDIAN690_tree=null;
        CommonTree STDDEV691_tree=null;
        CommonTree AVEDEV692_tree=null;
        CommonTree EVENTS693_tree=null;
        CommonTree FIRST694_tree=null;
        CommonTree LAST695_tree=null;
        CommonTree UNIDIRECTIONAL696_tree=null;
        CommonTree RETAINUNION697_tree=null;
        CommonTree RETAININTERSECTION698_tree=null;
        CommonTree UNTIL699_tree=null;
        CommonTree PATTERN700_tree=null;
        CommonTree SQL701_tree=null;
        CommonTree METADATASQL702_tree=null;
        CommonTree PREVIOUS703_tree=null;
        CommonTree PRIOR704_tree=null;
        CommonTree WEEKDAY705_tree=null;
        CommonTree LW706_tree=null;
        CommonTree INSTANCEOF707_tree=null;
        CommonTree CAST708_tree=null;
        CommonTree SNAPSHOT709_tree=null;
        CommonTree VARIABLE710_tree=null;
        CommonTree INDEX711_tree=null;
        CommonTree WINDOW712_tree=null;
        CommonTree LEFT713_tree=null;
        CommonTree RIGHT714_tree=null;
        CommonTree OUTER715_tree=null;
        CommonTree FULL716_tree=null;
        CommonTree JOIN717_tree=null;
        CommonTree DEFINE718_tree=null;
        CommonTree PARTITION719_tree=null;
        CommonTree MATCHES720_tree=null;

        try {
            // EsperEPL2Grammar.g:1583:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt256=42;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt256=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt256=2;
                }
                break;
            case AT:
                {
                alt256=3;
                }
                break;
            case COUNT:
                {
                alt256=4;
                }
                break;
            case ESCAPE:
                {
                alt256=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt256=6;
                }
                break;
            case SUM:
                {
                alt256=7;
                }
                break;
            case AVG:
                {
                alt256=8;
                }
                break;
            case MAX:
                {
                alt256=9;
                }
                break;
            case MIN:
                {
                alt256=10;
                }
                break;
            case COALESCE:
                {
                alt256=11;
                }
                break;
            case MEDIAN:
                {
                alt256=12;
                }
                break;
            case STDDEV:
                {
                alt256=13;
                }
                break;
            case AVEDEV:
                {
                alt256=14;
                }
                break;
            case EVENTS:
                {
                alt256=15;
                }
                break;
            case FIRST:
                {
                alt256=16;
                }
                break;
            case LAST:
                {
                alt256=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt256=18;
                }
                break;
            case RETAINUNION:
                {
                alt256=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt256=20;
                }
                break;
            case UNTIL:
                {
                alt256=21;
                }
                break;
            case PATTERN:
                {
                alt256=22;
                }
                break;
            case SQL:
                {
                alt256=23;
                }
                break;
            case METADATASQL:
                {
                alt256=24;
                }
                break;
            case PREVIOUS:
                {
                alt256=25;
                }
                break;
            case PRIOR:
                {
                alt256=26;
                }
                break;
            case WEEKDAY:
                {
                alt256=27;
                }
                break;
            case LW:
                {
                alt256=28;
                }
                break;
            case INSTANCEOF:
                {
                alt256=29;
                }
                break;
            case CAST:
                {
                alt256=30;
                }
                break;
            case SNAPSHOT:
                {
                alt256=31;
                }
                break;
            case VARIABLE:
                {
                alt256=32;
                }
                break;
            case INDEX:
                {
                alt256=33;
                }
                break;
            case WINDOW:
                {
                alt256=34;
                }
                break;
            case LEFT:
                {
                alt256=35;
                }
                break;
            case RIGHT:
                {
                alt256=36;
                }
                break;
            case OUTER:
                {
                alt256=37;
                }
                break;
            case FULL:
                {
                alt256=38;
                }
                break;
            case JOIN:
                {
                alt256=39;
                }
                break;
            case DEFINE:
                {
                alt256=40;
                }
                break;
            case PARTITION:
                {
                alt256=41;
                }
                break;
            case MATCHES:
                {
                alt256=42;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1583:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1584:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1585:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT681=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT681_tree = (CommonTree)adaptor.create(AT681);
                    adaptor.addChild(root_0, AT681_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1586:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT682=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT682_tree = (CommonTree)adaptor.create(COUNT682);
                    adaptor.addChild(root_0, COUNT682_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1587:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE683=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE683_tree = (CommonTree)adaptor.create(ESCAPE683);
                    adaptor.addChild(root_0, ESCAPE683_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1588:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR684=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR684_tree = (CommonTree)adaptor.create(EVERY_EXPR684);
                    adaptor.addChild(root_0, EVERY_EXPR684_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1589:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM685=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM685_tree = (CommonTree)adaptor.create(SUM685);
                    adaptor.addChild(root_0, SUM685_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1590:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG686=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG686_tree = (CommonTree)adaptor.create(AVG686);
                    adaptor.addChild(root_0, AVG686_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1591:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX687=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX687_tree = (CommonTree)adaptor.create(MAX687);
                    adaptor.addChild(root_0, MAX687_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1592:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN688=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN688_tree = (CommonTree)adaptor.create(MIN688);
                    adaptor.addChild(root_0, MIN688_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1593:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE689=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE689_tree = (CommonTree)adaptor.create(COALESCE689);
                    adaptor.addChild(root_0, COALESCE689_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1594:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN690=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN690_tree = (CommonTree)adaptor.create(MEDIAN690);
                    adaptor.addChild(root_0, MEDIAN690_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1595:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV691=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV691_tree = (CommonTree)adaptor.create(STDDEV691);
                    adaptor.addChild(root_0, STDDEV691_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1596:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV692=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV692_tree = (CommonTree)adaptor.create(AVEDEV692);
                    adaptor.addChild(root_0, AVEDEV692_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1597:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS693=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS693_tree = (CommonTree)adaptor.create(EVENTS693);
                    adaptor.addChild(root_0, EVENTS693_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1598:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST694=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST694_tree = (CommonTree)adaptor.create(FIRST694);
                    adaptor.addChild(root_0, FIRST694_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1599:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST695=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST695_tree = (CommonTree)adaptor.create(LAST695);
                    adaptor.addChild(root_0, LAST695_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1600:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL696=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL696_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL696);
                    adaptor.addChild(root_0, UNIDIRECTIONAL696_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1601:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION697=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION697_tree = (CommonTree)adaptor.create(RETAINUNION697);
                    adaptor.addChild(root_0, RETAINUNION697_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1602:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION698=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION698_tree = (CommonTree)adaptor.create(RETAININTERSECTION698);
                    adaptor.addChild(root_0, RETAININTERSECTION698_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1603:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL699=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL699_tree = (CommonTree)adaptor.create(UNTIL699);
                    adaptor.addChild(root_0, UNTIL699_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1604:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN700=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN700_tree = (CommonTree)adaptor.create(PATTERN700);
                    adaptor.addChild(root_0, PATTERN700_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1605:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL701=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL701_tree = (CommonTree)adaptor.create(SQL701);
                    adaptor.addChild(root_0, SQL701_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1606:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL702=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL702_tree = (CommonTree)adaptor.create(METADATASQL702);
                    adaptor.addChild(root_0, METADATASQL702_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1607:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS703=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS703_tree = (CommonTree)adaptor.create(PREVIOUS703);
                    adaptor.addChild(root_0, PREVIOUS703_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1608:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR704=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR704_tree = (CommonTree)adaptor.create(PRIOR704);
                    adaptor.addChild(root_0, PRIOR704_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1609:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY705=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY705_tree = (CommonTree)adaptor.create(WEEKDAY705);
                    adaptor.addChild(root_0, WEEKDAY705_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1610:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW706=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW706_tree = (CommonTree)adaptor.create(LW706);
                    adaptor.addChild(root_0, LW706_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1611:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF707=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF707_tree = (CommonTree)adaptor.create(INSTANCEOF707);
                    adaptor.addChild(root_0, INSTANCEOF707_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1612:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST708=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST708_tree = (CommonTree)adaptor.create(CAST708);
                    adaptor.addChild(root_0, CAST708_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1613:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT709=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT709_tree = (CommonTree)adaptor.create(SNAPSHOT709);
                    adaptor.addChild(root_0, SNAPSHOT709_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1614:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE710=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE710_tree = (CommonTree)adaptor.create(VARIABLE710);
                    adaptor.addChild(root_0, VARIABLE710_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1615:4: INDEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INDEX711=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX711_tree = (CommonTree)adaptor.create(INDEX711);
                    adaptor.addChild(root_0, INDEX711_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1616:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW712=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW712_tree = (CommonTree)adaptor.create(WINDOW712);
                    adaptor.addChild(root_0, WINDOW712_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1617:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT713=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11021); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT713_tree = (CommonTree)adaptor.create(LEFT713);
                    adaptor.addChild(root_0, LEFT713_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1618:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT714=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT714_tree = (CommonTree)adaptor.create(RIGHT714);
                    adaptor.addChild(root_0, RIGHT714_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1619:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER715=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER715_tree = (CommonTree)adaptor.create(OUTER715);
                    adaptor.addChild(root_0, OUTER715_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1620:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL716=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11042); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL716_tree = (CommonTree)adaptor.create(FULL716);
                    adaptor.addChild(root_0, FULL716_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1621:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN717=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11049); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN717_tree = (CommonTree)adaptor.create(JOIN717);
                    adaptor.addChild(root_0, JOIN717_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1622:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE718=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE718_tree = (CommonTree)adaptor.create(DEFINE718);
                    adaptor.addChild(root_0, DEFINE718_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1623:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION719=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION719_tree = (CommonTree)adaptor.create(PARTITION719);
                    adaptor.addChild(root_0, PARTITION719_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1624:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES720=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES720_tree = (CommonTree)adaptor.create(MATCHES720);
                    adaptor.addChild(root_0, MATCHES720_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1627:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1628:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==IDENT) ) {
                alt257=1;
            }
            else if ( (LA257_0==TICKED_STRING_LITERAL) ) {
                alt257=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    // EsperEPL2Grammar.g:1628:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1629:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1632:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart721 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart722 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart723 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart724 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart725 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart726 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart727 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart728 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart729 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart730 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart731 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart732 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart733 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart734 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart735 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1633:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1634:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1634:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt268=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt268=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt268=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt268=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt268=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;
            }

            switch (alt268) {
                case 1 :
                    // EsperEPL2Grammar.g:1635:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11123);
                    dayPart721=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart721.getTree());
                    // EsperEPL2Grammar.g:1635:11: ( hourPart )?
                    int alt258=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA258_1 = input.LA(2);

                            if ( ((LA258_1>=TIMEPERIOD_HOUR && LA258_1<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA258_2 = input.LA(2);

                            if ( ((LA258_2>=TIMEPERIOD_HOUR && LA258_2<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA258_3 = input.LA(2);

                            if ( ((LA258_3>=TIMEPERIOD_HOUR && LA258_3<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA258_4 = input.LA(2);

                            if ( ((LA258_4>=TIMEPERIOD_HOUR && LA258_4<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA258_5 = input.LA(2);

                            if ( ((LA258_5>=TIMEPERIOD_HOUR && LA258_5<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA258_6 = input.LA(2);

                            if ( ((LA258_6>=TIMEPERIOD_HOUR && LA258_6<=TIMEPERIOD_HOURS)) ) {
                                alt258=1;
                            }
                            }
                            break;
                    }

                    switch (alt258) {
                        case 1 :
                            // EsperEPL2Grammar.g:1635:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11125);
                            hourPart722=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart722.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1635:21: ( minutePart )?
                    int alt259=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA259_1 = input.LA(2);

                            if ( (LA259_1==MIN||(LA259_1>=TIMEPERIOD_MINUTE && LA259_1<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA259_2 = input.LA(2);

                            if ( (LA259_2==MIN||(LA259_2>=TIMEPERIOD_MINUTE && LA259_2<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA259_3 = input.LA(2);

                            if ( (LA259_3==MIN||(LA259_3>=TIMEPERIOD_MINUTE && LA259_3<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA259_4 = input.LA(2);

                            if ( (LA259_4==MIN||(LA259_4>=TIMEPERIOD_MINUTE && LA259_4<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA259_5 = input.LA(2);

                            if ( (LA259_5==MIN||(LA259_5>=TIMEPERIOD_MINUTE && LA259_5<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA259_6 = input.LA(2);

                            if ( (LA259_6==MIN||(LA259_6>=TIMEPERIOD_MINUTE && LA259_6<=TIMEPERIOD_MINUTES)) ) {
                                alt259=1;
                            }
                            }
                            break;
                    }

                    switch (alt259) {
                        case 1 :
                            // EsperEPL2Grammar.g:1635:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11128);
                            minutePart723=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart723.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1635:33: ( secondPart )?
                    int alt260=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA260_1 = input.LA(2);

                            if ( ((LA260_1>=TIMEPERIOD_SEC && LA260_1<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA260_2 = input.LA(2);

                            if ( ((LA260_2>=TIMEPERIOD_SEC && LA260_2<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA260_3 = input.LA(2);

                            if ( ((LA260_3>=TIMEPERIOD_SEC && LA260_3<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA260_4 = input.LA(2);

                            if ( ((LA260_4>=TIMEPERIOD_SEC && LA260_4<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA260_5 = input.LA(2);

                            if ( ((LA260_5>=TIMEPERIOD_SEC && LA260_5<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA260_6 = input.LA(2);

                            if ( ((LA260_6>=TIMEPERIOD_SEC && LA260_6<=TIMEPERIOD_SECONDS)) ) {
                                alt260=1;
                            }
                            }
                            break;
                    }

                    switch (alt260) {
                        case 1 :
                            // EsperEPL2Grammar.g:1635:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11131);
                            secondPart724=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart724.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1635:45: ( millisecondPart )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==NUM_DOUBLE||LA261_0==IDENT||LA261_0==QUESTION||LA261_0==NUM_INT||(LA261_0>=NUM_LONG && LA261_0<=NUM_FLOAT)) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // EsperEPL2Grammar.g:1635:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11134);
                            millisecondPart725=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart725.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1636:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11140);
                    hourPart726=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart726.getTree());
                    // EsperEPL2Grammar.g:1636:13: ( minutePart )?
                    int alt262=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA262_1 = input.LA(2);

                            if ( (LA262_1==MIN||(LA262_1>=TIMEPERIOD_MINUTE && LA262_1<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA262_2 = input.LA(2);

                            if ( (LA262_2==MIN||(LA262_2>=TIMEPERIOD_MINUTE && LA262_2<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA262_3 = input.LA(2);

                            if ( (LA262_3==MIN||(LA262_3>=TIMEPERIOD_MINUTE && LA262_3<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA262_4 = input.LA(2);

                            if ( (LA262_4==MIN||(LA262_4>=TIMEPERIOD_MINUTE && LA262_4<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA262_5 = input.LA(2);

                            if ( (LA262_5==MIN||(LA262_5>=TIMEPERIOD_MINUTE && LA262_5<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA262_6 = input.LA(2);

                            if ( (LA262_6==MIN||(LA262_6>=TIMEPERIOD_MINUTE && LA262_6<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                    }

                    switch (alt262) {
                        case 1 :
                            // EsperEPL2Grammar.g:1636:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11142);
                            minutePart727=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart727.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1636:25: ( secondPart )?
                    int alt263=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA263_1 = input.LA(2);

                            if ( ((LA263_1>=TIMEPERIOD_SEC && LA263_1<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA263_2 = input.LA(2);

                            if ( ((LA263_2>=TIMEPERIOD_SEC && LA263_2<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA263_3 = input.LA(2);

                            if ( ((LA263_3>=TIMEPERIOD_SEC && LA263_3<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA263_4 = input.LA(2);

                            if ( ((LA263_4>=TIMEPERIOD_SEC && LA263_4<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA263_5 = input.LA(2);

                            if ( ((LA263_5>=TIMEPERIOD_SEC && LA263_5<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA263_6 = input.LA(2);

                            if ( ((LA263_6>=TIMEPERIOD_SEC && LA263_6<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                    }

                    switch (alt263) {
                        case 1 :
                            // EsperEPL2Grammar.g:1636:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11145);
                            secondPart728=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart728.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1636:37: ( millisecondPart )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==NUM_DOUBLE||LA264_0==IDENT||LA264_0==QUESTION||LA264_0==NUM_INT||(LA264_0>=NUM_LONG && LA264_0<=NUM_FLOAT)) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // EsperEPL2Grammar.g:1636:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11148);
                            millisecondPart729=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart729.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1637:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11154);
                    minutePart730=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart730.getTree());
                    // EsperEPL2Grammar.g:1637:15: ( secondPart )?
                    int alt265=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA265_1 = input.LA(2);

                            if ( ((LA265_1>=TIMEPERIOD_SEC && LA265_1<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA265_2 = input.LA(2);

                            if ( ((LA265_2>=TIMEPERIOD_SEC && LA265_2<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA265_3 = input.LA(2);

                            if ( ((LA265_3>=TIMEPERIOD_SEC && LA265_3<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA265_4 = input.LA(2);

                            if ( ((LA265_4>=TIMEPERIOD_SEC && LA265_4<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA265_5 = input.LA(2);

                            if ( ((LA265_5>=TIMEPERIOD_SEC && LA265_5<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA265_6 = input.LA(2);

                            if ( ((LA265_6>=TIMEPERIOD_SEC && LA265_6<=TIMEPERIOD_SECONDS)) ) {
                                alt265=1;
                            }
                            }
                            break;
                    }

                    switch (alt265) {
                        case 1 :
                            // EsperEPL2Grammar.g:1637:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11156);
                            secondPart731=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart731.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1637:27: ( millisecondPart )?
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==NUM_DOUBLE||LA266_0==IDENT||LA266_0==QUESTION||LA266_0==NUM_INT||(LA266_0>=NUM_LONG && LA266_0<=NUM_FLOAT)) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            // EsperEPL2Grammar.g:1637:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11159);
                            millisecondPart732=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart732.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1638:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11165);
                    secondPart733=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart733.getTree());
                    // EsperEPL2Grammar.g:1638:15: ( millisecondPart )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==NUM_DOUBLE||LA267_0==IDENT||LA267_0==QUESTION||LA267_0==NUM_INT||(LA267_0>=NUM_LONG && LA267_0<=NUM_FLOAT)) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // EsperEPL2Grammar.g:1638:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11167);
                            millisecondPart734=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart734.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1639:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11173);
                    millisecondPart735=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart735.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: secondPart, dayPart, minutePart, millisecondPart, hourPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1641:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1641:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1641:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1641:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1641:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1641:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1641:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1644:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS738=null;
        Token TIMEPERIOD_DAY739=null;
        EsperEPL2GrammarParser.number_return number736 = null;

        EsperEPL2GrammarParser.substitution_return substitution737 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS738_tree=null;
        CommonTree TIMEPERIOD_DAY739_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1645:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1645:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1645:4: ( number | i= IDENT | substitution )
            int alt269=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt269=1;
                }
                break;
            case IDENT:
                {
                alt269=2;
                }
                break;
            case QUESTION:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }

            switch (alt269) {
                case 1 :
                    // EsperEPL2Grammar.g:1645:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart11211);
                    number736=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number736.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1645:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1645:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11217);
                    substitution737=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution737.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1645:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==TIMEPERIOD_DAYS) ) {
                alt270=1;
            }
            else if ( (LA270_0==TIMEPERIOD_DAY) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    // EsperEPL2Grammar.g:1645:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS738=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS738);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1645:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY739=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY739);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1646:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1646:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1646:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1646:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1647:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1647:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1647:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1647:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1650:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS742=null;
        Token TIMEPERIOD_HOUR743=null;
        EsperEPL2GrammarParser.number_return number740 = null;

        EsperEPL2GrammarParser.substitution_return substitution741 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS742_tree=null;
        CommonTree TIMEPERIOD_HOUR743_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1651:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1651:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1651:4: ( number | i= IDENT | substitution )
            int alt271=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt271=1;
                }
                break;
            case IDENT:
                {
                alt271=2;
                }
                break;
            case QUESTION:
                {
                alt271=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }

            switch (alt271) {
                case 1 :
                    // EsperEPL2Grammar.g:1651:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart11274);
                    number740=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number740.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1651:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1651:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11280);
                    substitution741=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution741.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1651:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==TIMEPERIOD_HOURS) ) {
                alt272=1;
            }
            else if ( (LA272_0==TIMEPERIOD_HOUR) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    // EsperEPL2Grammar.g:1651:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS742=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS742);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1651:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR743=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR743);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1652:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1652:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1652:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1652:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1653:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1653:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1653:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1653:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1656:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES746=null;
        Token TIMEPERIOD_MINUTE747=null;
        Token MIN748=null;
        EsperEPL2GrammarParser.number_return number744 = null;

        EsperEPL2GrammarParser.substitution_return substitution745 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES746_tree=null;
        CommonTree TIMEPERIOD_MINUTE747_tree=null;
        CommonTree MIN748_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1657:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1657:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1657:4: ( number | i= IDENT | substitution )
            int alt273=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt273=1;
                }
                break;
            case IDENT:
                {
                alt273=2;
                }
                break;
            case QUESTION:
                {
                alt273=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }

            switch (alt273) {
                case 1 :
                    // EsperEPL2Grammar.g:1657:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart11337);
                    number744=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number744.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1657:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1657:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11343);
                    substitution745=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution745.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1657:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt274=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt274=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt274=2;
                }
                break;
            case MIN:
                {
                alt274=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }

            switch (alt274) {
                case 1 :
                    // EsperEPL2Grammar.g:1657:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES746=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES746);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1657:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE747=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE747);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1657:76: MIN
                    {
                    MIN748=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN748);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1658:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1658:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1658:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1658:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1659:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1659:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1659:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1659:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1662:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS751=null;
        Token TIMEPERIOD_SECOND752=null;
        Token TIMEPERIOD_SEC753=null;
        EsperEPL2GrammarParser.number_return number749 = null;

        EsperEPL2GrammarParser.substitution_return substitution750 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS751_tree=null;
        CommonTree TIMEPERIOD_SECOND752_tree=null;
        CommonTree TIMEPERIOD_SEC753_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1663:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1663:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1663:4: ( number | i= IDENT | substitution )
            int alt275=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt275=1;
                }
                break;
            case IDENT:
                {
                alt275=2;
                }
                break;
            case QUESTION:
                {
                alt275=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;
            }

            switch (alt275) {
                case 1 :
                    // EsperEPL2Grammar.g:1663:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart11405);
                    number749=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number749.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1663:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1663:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11411);
                    substitution750=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution750.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1663:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt276=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt276=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt276=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt276=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                throw nvae;
            }

            switch (alt276) {
                case 1 :
                    // EsperEPL2Grammar.g:1663:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS751=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS751);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1663:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND752=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND752);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1663:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC753=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC753);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1664:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1664:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1664:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1664:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1665:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1665:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1665:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1665:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1668:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS756=null;
        Token TIMEPERIOD_MILLISECOND757=null;
        Token TIMEPERIOD_MILLISEC758=null;
        EsperEPL2GrammarParser.number_return number754 = null;

        EsperEPL2GrammarParser.substitution_return substitution755 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS756_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND757_tree=null;
        CommonTree TIMEPERIOD_MILLISEC758_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1669:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1669:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1669:4: ( number | i= IDENT | substitution )
            int alt277=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt277=1;
                }
                break;
            case IDENT:
                {
                alt277=2;
                }
                break;
            case QUESTION:
                {
                alt277=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }

            switch (alt277) {
                case 1 :
                    // EsperEPL2Grammar.g:1669:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11473);
                    number754=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number754.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1669:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1669:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11479);
                    substitution755=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution755.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1669:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt278=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt278=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt278=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt278=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                throw nvae;
            }

            switch (alt278) {
                case 1 :
                    // EsperEPL2Grammar.g:1669:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS756=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS756);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1669:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND757=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND757);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1669:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC758=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC758);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1670:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1670:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1670:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1670:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1671:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1671:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1671:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1671:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1674:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1675:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt279=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt279=1;
                }
                break;
            case NUM_LONG:
                {
                alt279=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt279=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt279=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }

            switch (alt279) {
                case 1 :
                    // EsperEPL2Grammar.g:1675:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1675:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1676:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1676:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1677:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1677:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1678:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1678:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1681:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1682:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1682:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1682:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1685:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant759 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant760 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1686:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt280=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt280=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt280=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt280=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt280=4;
                }
                break;
            case VALUE_NULL:
                {
                alt280=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;
            }

            switch (alt280) {
                case 1 :
                    // EsperEPL2Grammar.g:1686:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11637);
                    numberconstant759=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant759.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1687:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11644);
                    stringconstant760=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant760.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1688:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1688:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1688:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1689:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1689:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1689:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1690:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1690:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1690:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1693:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number761 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1694:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1694:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1694:5: (m= MINUS | p= PLUS )?
            int alt281=3;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==MINUS) ) {
                alt281=1;
            }
            else if ( (LA281_0==PLUS) ) {
                alt281=2;
            }
            switch (alt281) {
                case 1 :
                    // EsperEPL2Grammar.g:1694:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1694:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11729);
            number761=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number761.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1695:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number761!=null?((CommonTree)number761.tree):null).getType(), "-" + (number761!=null?input.toString(number761.start,number761.stop):null)));

            }
            else // 1696:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1699:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1700:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==STRING_LITERAL) ) {
                alt282=1;
            }
            else if ( (LA282_0==QUOTED_STRING_LITERAL) ) {
                alt282=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    // EsperEPL2Grammar.g:1700:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1700:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1700:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1701:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1701:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1701:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:844:4: ( streamSelector )
        // EsperEPL2Grammar.g:844:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4128);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1016:9: ( timePeriod )
        // EsperEPL2Grammar.g:1016:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5460);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1185:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1185:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7280);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1270:4: ( eventProperty )
        // EsperEPL2Grammar.g:1270:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar8061);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1431:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1431:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9472);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1481:7: ( lastOperand )
        // EsperEPL2Grammar.g:1481:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9895);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1482:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1482:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9906);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1483:4: ( timePeriod )
        // EsperEPL2Grammar.g:1483:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9917);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1484:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1484:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9928);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1485:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1485:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9939);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1486:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1486:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9951);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1487:4: ( lastOperator )
        // EsperEPL2Grammar.g:1487:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9962);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1488:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1488:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9973);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1489:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1489:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9986);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA167 dfa167 = new DFA167(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA240 dfa240 = new DFA240(this);
    static final String DFA167_eotS =
        "\u090a\uffff";
    static final String DFA167_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u08de\uffff";
    static final String DFA167_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\14\uffff\1\u0107\155\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\u0110\71"+
        "\uffff\1\5\71\uffff\1\5\71\uffff\1\5\11\uffff\2\6\75\uffff\2\6\74"+
        "\uffff\2\6\63\uffff\2\6\72\uffff\2\6\74\uffff\2\6\74\uffff\2\6\74"+
        "\uffff\2\6\74\uffff\2\6\103\uffff\2\6\66\uffff\2\6\101\uffff\2\6"+
        "\161\uffff\1\0\5\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1"+
        "\0\5\uffff\1\0\137\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA167_maxS =
        "\2\u0125\13\uffff\1\u0125\3\uffff\1\u0122\2\uffff\2\u0122\2\uffff"+
        "\4\u0122\1\uffff\2\u0122\7\uffff\2\u0122\2\uffff\2\u0122\14\uffff"+
        "\1\u0107\155\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0125\71"+
        "\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0125"+
        "\71\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0120"+
        "\71\uffff\1\u0125\71\uffff\1\u0125\71\uffff\1\u0123\11\uffff\2\u011d"+
        "\75\uffff\2\u011d\74\uffff\2\u011d\63\uffff\2\u011d\72\uffff\2\u011d"+
        "\74\uffff\2\u011d\74\uffff\2\u011d\74\uffff\2\u011d\74\uffff\2\u011d"+
        "\103\uffff\2\u011d\66\uffff\2\u011d\101\uffff\2\u011d\161\uffff"+
        "\1\0\5\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff"+
        "\1\0\137\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA167_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\52\uffff\1\6\1\7\1\1\55\uffff"+
        "\1\10\1\4\u032e\uffff\11\6\2\uffff\75\6\2\uffff\74\6\2\uffff\63"+
        "\6\2\uffff\72\6\2\uffff\74\6\2\uffff\74\6\2\uffff\74\6\2\uffff\74"+
        "\6\2\uffff\103\6\2\uffff\64\6\4\uffff\101\6\2\uffff\63\6\1\11\75"+
        "\6\1\uffff\5\6\1\uffff\53\6\1\uffff\30\6\1\uffff\30\6\1\uffff\5"+
        "\6\1\uffff\61\6\1\uffff\31\6\1\uffff\23\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\36"+
        "\6\1\uffff\31\6\1\uffff\32\6\1\uffff\32\6\1\uffff";
    static final String DFA167_specialS =
        "\1\0\u00a5\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1\4\71"+
        "\uffff\1\5\71\uffff\1\6\71\uffff\1\7\71\uffff\1\10\71\uffff\1\11"+
        "\71\uffff\1\12\71\uffff\1\13\71\uffff\1\14\71\uffff\1\15\71\uffff"+
        "\1\16\11\uffff\1\17\1\20\75\uffff\1\21\1\22\74\uffff\1\23\1\24\63"+
        "\uffff\1\25\1\26\72\uffff\1\27\1\30\74\uffff\1\31\1\32\74\uffff"+
        "\1\33\1\34\74\uffff\1\35\1\36\74\uffff\1\37\1\40\103\uffff\1\41"+
        "\1\42\66\uffff\1\43\1\44\101\uffff\1\45\1\46\161\uffff\1\47\5\uffff"+
        "\1\50\53\uffff\1\51\30\uffff\1\52\30\uffff\1\53\5\uffff\1\54\137"+
        "\uffff\1\55\30\uffff\1\56\30\uffff\1\57\30\uffff\1\60\30\uffff\1"+
        "\61\30\uffff\1\62\30\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff"+
        "\1\66\31\uffff\1\67\31\uffff\1\70\157\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\46\1\47\1\70\2\16\1\52\1\53\1\71"+
            "\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff\3\16\u008a\uffff"+
            "\1\2\16\uffff\1\16\2\uffff\1\15\5\uffff\1\2\1\14\1\uffff\2\2"+
            "\11\uffff\1\1\2\uffff\1\72\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\73\4\uffff\1\73\3\uffff\1\73\3\uffff\11\73\10\uffff\1\73"+
            "\1\uffff\4\73\12\uffff\3\73\11\uffff\10\73\1\uffff\4\73\2\uffff"+
            "\1\73\1\uffff\4\73\24\uffff\3\73\u008a\uffff\1\2\16\uffff\1"+
            "\73\33\uffff\1\2\2\uffff\1\73\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\152\4\uffff\1\152\2\uffff\2\152\3\uffff\11\152\1\151\1"+
            "\152\6\uffff\1\152\1\uffff\4\152\12\uffff\3\152\11\uffff\16"+
            "\152\1\uffff\1\152\1\uffff\4\152\14\uffff\3\152\5\uffff\3\152"+
            "\u008a\uffff\1\152\16\uffff\1\152\2\uffff\1\152\5\uffff\2\152"+
            "\1\uffff\2\152\11\uffff\1\152\2\uffff\1\152\1\uffff\1\152\2"+
            "\uffff\3\152",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u00a6\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u00e0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u011a\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u0154\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u018e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u01c8\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u0202\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u023c\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u0276\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u02b0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u02ea\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u0324\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0097"+
            "\uffff\1\16\1\uffff\2\16\1\u035e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0398",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ca\4\uffff\1\u03ad\2\uffff\1\u03d6\1\u03ae\3\uffff\1"+
            "\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u03b4\1\u03b5\1\u03b6"+
            "\1\u03ac\1\uffff\1\u039b\6\uffff\1\u03cd\1\uffff\1\u03cf\1\u03cb"+
            "\1\u03cc\1\u03ce\5\uffff\1\u039a\1\u0399\3\uffff\1\u03b7\1\u03b8"+
            "\1\u03b9\11\uffff\1\u03ba\1\u03bb\1\u03bc\1\u03be\1\u03bf\1"+
            "\u03c0\1\u03c1\1\u03c2\1\u03d3\1\u03c3\1\u03c4\1\u03c5\1\u03c6"+
            "\1\u03d4\1\uffff\1\u03c7\1\uffff\1\u03c8\1\u03bd\1\u03ab\1\u03c9"+
            "\14\uffff\1\u03a4\1\u03a5\1\u03a6\5\uffff\1\u03d0\1\u03d1\1"+
            "\u03d2\u008a\uffff\1\u03a1\16\uffff\1\u03a9\2\uffff\1\u03a8"+
            "\3\uffff\1\u03d7\1\uffff\1\u039d\1\u03a7\1\uffff\1\u03a2\1\u03a3"+
            "\11\uffff\1\u039c\2\uffff\1\u03d5\1\uffff\1\u039e\2\uffff\1"+
            "\u03aa\1\u039f\1\u03a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0409\4\uffff\1\u03ec\2\uffff\1\u0415\1\u03ed\3\uffff\1"+
            "\u03ee\1\u03ef\1\u03f0\1\u03f1\1\u03f2\1\u03f3\1\u03f4\1\u03f5"+
            "\1\u03eb\1\uffff\1\u03da\6\uffff\1\u040c\1\uffff\1\u040e\1\u040a"+
            "\1\u040b\1\u040d\5\uffff\1\u03d9\1\u03d8\3\uffff\1\u03f6\1\u03f7"+
            "\1\u03f8\11\uffff\1\u03f9\1\u03fa\1\u03fb\1\u03fd\1\u03fe\1"+
            "\u03ff\1\u0400\1\u0401\1\u0412\1\u0402\1\u0403\1\u0404\1\u0405"+
            "\1\u0413\1\uffff\1\u0406\1\uffff\1\u0407\1\u03fc\1\u03ea\1\u0408"+
            "\14\uffff\1\u03e3\1\u03e4\1\u03e5\5\uffff\1\u040f\1\u0410\1"+
            "\u0411\u008a\uffff\1\u03e0\16\uffff\1\u03e8\2\uffff\1\u03e7"+
            "\5\uffff\1\u03dc\1\u03e6\1\uffff\1\u03e1\1\u03e2\11\uffff\1"+
            "\u03db\2\uffff\1\u0414\1\uffff\1\u03dd\2\uffff\1\u03e9\1\u03de"+
            "\1\u03df",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0447\4\uffff\1\u042a\2\uffff\1\u0453\1\u042b\3\uffff\1"+
            "\u042c\1\u042d\1\u042e\1\u042f\1\u0430\1\u0431\1\u0432\1\u0433"+
            "\1\u0429\1\uffff\1\u0418\6\uffff\1\u044a\1\uffff\1\u044c\1\u0448"+
            "\1\u0449\1\u044b\5\uffff\1\u0417\1\u0416\3\uffff\1\u0434\1\u0435"+
            "\1\u0436\11\uffff\1\u0437\1\u0438\1\u0439\1\u043b\1\u043c\1"+
            "\u043d\1\u043e\1\u043f\1\u0450\1\u0440\1\u0441\1\u0442\1\u0443"+
            "\1\u0451\1\uffff\1\u0444\1\uffff\1\u0445\1\u043a\1\u0428\1\u0446"+
            "\14\uffff\1\u0421\1\u0422\1\u0423\5\uffff\1\u044d\1\u044e\1"+
            "\u044f\u008a\uffff\1\u041e\16\uffff\1\u0426\2\uffff\1\u0425"+
            "\5\uffff\1\u041a\1\u0424\1\uffff\1\u041f\1\u0420\11\uffff\1"+
            "\u0419\2\uffff\1\u0452\1\uffff\1\u041b\2\uffff\1\u0427\1\u041c"+
            "\1\u041d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0483\4\uffff\1\u0466\2\uffff\1\u048f\1\u0467\3\uffff\1"+
            "\u0468\1\u0469\1\u046a\1\u046b\1\u046c\1\u046d\1\u046e\1\u046f"+
            "\1\u0465\1\uffff\1\u0456\6\uffff\1\u0486\1\uffff\1\u0488\1\u0484"+
            "\1\u0485\1\u0487\12\uffff\1\u0470\1\u0471\1\u0472\11\uffff\1"+
            "\u0473\1\u0474\1\u0475\1\u0477\1\u0478\1\u0479\1\u047a\1\u047b"+
            "\1\u048c\1\u047c\1\u047d\1\u047e\1\u047f\1\u048d\1\uffff\1\u0480"+
            "\1\uffff\1\u0481\1\u0476\1\u0464\1\u0482\14\uffff\1\u045d\1"+
            "\u045e\1\u045f\5\uffff\1\u0489\1\u048a\1\u048b\u008a\uffff\1"+
            "\u045c\16\uffff\1\u0462\2\uffff\1\u0461\5\uffff\1\u0458\1\u0460"+
            "\1\uffff\1\u0454\1\u0455\11\uffff\1\u0457\2\uffff\1\u048e\1"+
            "\uffff\1\u0459\2\uffff\1\u0463\1\u045a\1\u045b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04c1\4\uffff\1\u04a4\2\uffff\1\u04cd\1\u04a5\3\uffff\1"+
            "\u04a6\1\u04a7\1\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04ad"+
            "\1\u04a3\1\uffff\1\u0494\6\uffff\1\u04c4\1\uffff\1\u04c6\1\u04c2"+
            "\1\u04c3\1\u04c5\5\uffff\1\u0493\1\u0492\3\uffff\1\u04ae\1\u04af"+
            "\1\u04b0\11\uffff\1\u04b1\1\u04b2\1\u04b3\1\u04b5\1\u04b6\1"+
            "\u04b7\1\u04b8\1\u04b9\1\u04ca\1\u04ba\1\u04bb\1\u04bc\1\u04bd"+
            "\1\u04cb\1\uffff\1\u04be\1\uffff\1\u04bf\1\u04b4\1\u04a2\1\u04c0"+
            "\14\uffff\1\u049b\1\u049c\1\u049d\5\uffff\1\u04c7\1\u04c8\1"+
            "\u04c9\u008a\uffff\1\u049a\16\uffff\1\u04a0\2\uffff\1\u049f"+
            "\5\uffff\1\u0496\1\u049e\1\uffff\1\u0490\1\u0491\11\uffff\1"+
            "\u0495\2\uffff\1\u04cc\1\uffff\1\u0497\2\uffff\1\u04a1\1\u0498"+
            "\1\u0499",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ff\4\uffff\1\u04e2\2\uffff\1\u050b\1\u04e3\3\uffff\1"+
            "\u04e4\1\u04e5\1\u04e6\1\u04e7\1\u04e8\1\u04e9\1\u04ea\1\u04eb"+
            "\1\u04e1\1\uffff\1\u04d2\6\uffff\1\u0502\1\uffff\1\u0504\1\u0500"+
            "\1\u0501\1\u0503\5\uffff\1\u04d1\1\u04d0\3\uffff\1\u04ec\1\u04ed"+
            "\1\u04ee\11\uffff\1\u04ef\1\u04f0\1\u04f1\1\u04f3\1\u04f4\1"+
            "\u04f5\1\u04f6\1\u04f7\1\u0508\1\u04f8\1\u04f9\1\u04fa\1\u04fb"+
            "\1\u0509\1\uffff\1\u04fc\1\uffff\1\u04fd\1\u04f2\1\u04e0\1\u04fe"+
            "\14\uffff\1\u04d9\1\u04da\1\u04db\5\uffff\1\u0505\1\u0506\1"+
            "\u0507\u008a\uffff\1\u04d8\16\uffff\1\u04de\2\uffff\1\u04dd"+
            "\5\uffff\1\u04d4\1\u04dc\1\uffff\1\u04ce\1\u04cf\11\uffff\1"+
            "\u04d3\2\uffff\1\u050a\1\uffff\1\u04d5\2\uffff\1\u04df\1\u04d6"+
            "\1\u04d7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053d\4\uffff\1\u0520\2\uffff\1\u0549\1\u0521\3\uffff\1"+
            "\u0522\1\u0523\1\u0524\1\u0525\1\u0526\1\u0527\1\u0528\1\u0529"+
            "\1\u051f\1\uffff\1\u0510\6\uffff\1\u0540\1\uffff\1\u0542\1\u053e"+
            "\1\u053f\1\u0541\5\uffff\1\u050f\1\u050e\3\uffff\1\u052a\1\u052b"+
            "\1\u052c\11\uffff\1\u052d\1\u052e\1\u052f\1\u0531\1\u0532\1"+
            "\u0533\1\u0534\1\u0535\1\u0546\1\u0536\1\u0537\1\u0538\1\u0539"+
            "\1\u0547\1\uffff\1\u053a\1\uffff\1\u053b\1\u0530\1\u051e\1\u053c"+
            "\14\uffff\1\u0517\1\u0518\1\u0519\5\uffff\1\u0543\1\u0544\1"+
            "\u0545\u008a\uffff\1\u0516\16\uffff\1\u051c\2\uffff\1\u051b"+
            "\5\uffff\1\u0512\1\u051a\1\uffff\1\u050c\1\u050d\11\uffff\1"+
            "\u0511\2\uffff\1\u0548\1\uffff\1\u0513\2\uffff\1\u051d\1\u0514"+
            "\1\u0515",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057b\4\uffff\1\u055e\2\uffff\1\u0587\1\u055f\3\uffff\1"+
            "\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565\1\u0566\1\u0567"+
            "\1\u055d\1\uffff\1\u054e\6\uffff\1\u057e\1\uffff\1\u0580\1\u057c"+
            "\1\u057d\1\u057f\5\uffff\1\u054d\1\u054c\3\uffff\1\u0568\1\u0569"+
            "\1\u056a\11\uffff\1\u056b\1\u056c\1\u056d\1\u056f\1\u0570\1"+
            "\u0571\1\u0572\1\u0573\1\u0584\1\u0574\1\u0575\1\u0576\1\u0577"+
            "\1\u0585\1\uffff\1\u0578\1\uffff\1\u0579\1\u056e\1\u055c\1\u057a"+
            "\14\uffff\1\u0555\1\u0556\1\u0557\5\uffff\1\u0581\1\u0582\1"+
            "\u0583\u008a\uffff\1\u0554\16\uffff\1\u055a\2\uffff\1\u0559"+
            "\5\uffff\1\u0550\1\u0558\1\uffff\1\u054a\1\u054b\11\uffff\1"+
            "\u054f\2\uffff\1\u0586\1\uffff\1\u0551\2\uffff\1\u055b\1\u0552"+
            "\1\u0553",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b9\4\uffff\1\u059c\2\uffff\1\u05c5\1\u059d\3\uffff\1"+
            "\u059e\1\u059f\1\u05a0\1\u05a1\1\u05a2\1\u05a3\1\u05a4\1\u05a5"+
            "\1\u059b\1\uffff\1\u058c\6\uffff\1\u05bc\1\uffff\1\u05be\1\u05ba"+
            "\1\u05bb\1\u05bd\5\uffff\1\u058b\1\u058a\3\uffff\1\u05a6\1\u05a7"+
            "\1\u05a8\11\uffff\1\u05a9\1\u05aa\1\u05ab\1\u05ad\1\u05ae\1"+
            "\u05af\1\u05b0\1\u05b1\1\u05c2\1\u05b2\1\u05b3\1\u05b4\1\u05b5"+
            "\1\u05c3\1\uffff\1\u05b6\1\uffff\1\u05b7\1\u05ac\1\u059a\1\u05b8"+
            "\14\uffff\1\u0593\1\u0594\1\u0595\5\uffff\1\u05bf\1\u05c0\1"+
            "\u05c1\u008a\uffff\1\u0592\16\uffff\1\u0598\2\uffff\1\u0597"+
            "\5\uffff\1\u058e\1\u0596\1\uffff\1\u0588\1\u0589\11\uffff\1"+
            "\u058d\2\uffff\1\u05c4\1\uffff\1\u058f\2\uffff\1\u0599\1\u0590"+
            "\1\u0591",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f5\4\uffff\1\u05d8\2\uffff\1\u0601\1\u05d9\3\uffff\1"+
            "\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0\1\u05e1"+
            "\1\u05d7\1\uffff\1\u05c6\6\uffff\1\u05f8\1\uffff\1\u05fa\1\u05f6"+
            "\1\u05f7\1\u05f9\12\uffff\1\u05e2\1\u05e3\1\u05e4\11\uffff\1"+
            "\u05e5\1\u05e6\1\u05e7\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed"+
            "\1\u05fe\1\u05ee\1\u05ef\1\u05f0\1\u05f1\1\u05ff\1\uffff\1\u05f2"+
            "\1\uffff\1\u05f3\1\u05e8\1\u05d6\1\u05f4\14\uffff\1\u05cf\1"+
            "\u05d0\1\u05d1\5\uffff\1\u05fb\1\u05fc\1\u05fd\u008a\uffff\1"+
            "\u05cc\16\uffff\1\u05d4\2\uffff\1\u05d3\5\uffff\1\u05c8\1\u05d2"+
            "\1\uffff\1\u05cd\1\u05ce\11\uffff\1\u05c7\2\uffff\1\u0600\1"+
            "\uffff\1\u05c9\2\uffff\1\u05d5\1\u05ca\1\u05cb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0602",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0634\4\uffff\1\u0617\2\uffff\1\u0640\1\u0618\3\uffff\1"+
            "\u0619\1\u061a\1\u061b\1\u061c\1\u061d\1\u061e\1\u061f\1\u0620"+
            "\1\u0616\1\uffff\1\u0607\6\uffff\1\u0637\1\uffff\1\u0639\1\u0635"+
            "\1\u0636\1\u0638\12\uffff\1\u0621\1\u0622\1\u0623\11\uffff\1"+
            "\u0624\1\u0625\1\u0626\1\u0628\1\u0629\1\u062a\1\u062b\1\u062c"+
            "\1\u063d\1\u062d\1\u062e\1\u062f\1\u0630\1\u063e\1\uffff\1\u0631"+
            "\1\uffff\1\u0632\1\u0627\1\u0615\1\u0633\14\uffff\1\u060e\1"+
            "\u060f\1\u0610\5\uffff\1\u063a\1\u063b\1\u063c\u008a\uffff\1"+
            "\u060d\16\uffff\1\u0613\2\uffff\1\u0612\5\uffff\1\u0609\1\u0611"+
            "\1\uffff\1\u0605\1\u0606\11\uffff\1\u0608\2\uffff\1\u063f\1"+
            "\uffff\1\u060a\2\uffff\1\u0614\1\u060b\1\u060c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0670\4\uffff\1\u0653\2\uffff\1\u067c\1\u0654\3\uffff\1"+
            "\u0655\1\u0656\1\u0657\1\u0658\1\u0659\1\u065a\1\u065b\1\u065c"+
            "\1\u0652\1\uffff\1\u0641\6\uffff\1\u0673\1\uffff\1\u0675\1\u0671"+
            "\1\u0672\1\u0674\12\uffff\1\u065d\1\u065e\1\u065f\11\uffff\1"+
            "\u0660\1\u0661\1\u0662\1\u0664\1\u0665\1\u0666\1\u0667\1\u0668"+
            "\1\u0679\1\u0669\1\u066a\1\u066b\1\u066c\1\u067a\1\uffff\1\u066d"+
            "\1\uffff\1\u066e\1\u0663\1\u0651\1\u066f\14\uffff\1\u064a\1"+
            "\u064b\1\u064c\5\uffff\1\u0676\1\u0677\1\u0678\u008a\uffff\1"+
            "\u0647\16\uffff\1\u064f\2\uffff\1\u064e\5\uffff\1\u0643\1\u064d"+
            "\1\uffff\1\u0648\1\u0649\11\uffff\1\u0642\2\uffff\1\u067b\1"+
            "\uffff\1\u0644\2\uffff\1\u0650\1\u0645\1\u0646",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u069f\4\uffff\1\u0682\3\uffff\1\u0683\3\uffff\1\u0684\1"+
            "\u0685\1\u0686\1\u0687\1\u0688\1\u0689\1\u068a\1\u068b\1\u0681"+
            "\1\u067d\7\uffff\1\u06a2\1\uffff\1\u06a4\1\u06a0\1\u06a1\1\u06a3"+
            "\12\uffff\1\u068c\1\u068d\1\u068e\11\uffff\1\u068f\1\u0690\1"+
            "\u0691\1\u0693\1\u0694\1\u0695\1\u0696\1\u0697\1\uffff\1\u0698"+
            "\1\u0699\1\u069a\1\u069b\2\uffff\1\u069c\1\uffff\1\u069d\1\u0692"+
            "\1\u0680\1\u069e\24\uffff\1\u06a5\1\u06a6\1\u06a7\u0099\uffff"+
            "\1\u067e\36\uffff\1\u067f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06bd\1\u06be\1\u06bf\1\u06c0\1\uffff\1\u06ba\1\u06b9\1"+
            "\u06bc\34\uffff\1\u06b3\u00da\uffff\1\u06b2\2\uffff\1\u06bb"+
            "\2\uffff\1\u06a8\1\u06b7\1\u06ab\4\uffff\1\u06b6\1\u06b8\1\u06b4"+
            "\1\u06b5\1\u06ae\1\u06af\1\u06b0\1\u06b1\1\u06ad\1\u06ac\1\u06a9"+
            "\1\u06aa",
            "\1\u06d6\1\u06d7\1\u06d8\1\u06d9\1\uffff\1\u06d4\1\u06d3\1"+
            "\u06d5\34\uffff\1\u06cd\u00da\uffff\1\u06cc\2\uffff\1\u06c1"+
            "\2\uffff\1\u06c2\1\u06d1\1\u06c5\4\uffff\1\u06d0\1\u06d2\1\u06ce"+
            "\1\u06cf\1\u06c8\1\u06c9\1\u06ca\1\u06cb\1\u06c7\1\u06c6\1\u06c3"+
            "\1\u06c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ef\1\u06f0\1\u06f1\1\u06f2\1\uffff\1\u06ec\1\u06eb\1"+
            "\u06ee\34\uffff\1\u06e5\u00da\uffff\1\u06e4\2\uffff\1\u06ed"+
            "\2\uffff\1\u06da\1\u06e9\1\u06dd\4\uffff\1\u06e8\1\u06ea\1\u06e6"+
            "\1\u06e7\1\u06e0\1\u06e1\1\u06e2\1\u06e3\1\u06df\1\u06de\1\u06db"+
            "\1\u06dc",
            "\1\u0708\1\u0709\1\u070a\1\u070b\1\uffff\1\u0705\1\u0704\1"+
            "\u0707\34\uffff\1\u06fe\u00da\uffff\1\u06fd\2\uffff\1\u0706"+
            "\2\uffff\1\u06f3\1\u0702\1\u06f6\4\uffff\1\u0701\1\u0703\1\u06ff"+
            "\1\u0700\1\u06f9\1\u06fa\1\u06fb\1\u06fc\1\u06f8\1\u06f7\1\u06f4"+
            "\1\u06f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0721\1\u0722\1\u0723\1\u0724\1\uffff\1\u071e\1\u071d\1"+
            "\u0720\34\uffff\1\u0717\u00da\uffff\1\u0716\2\uffff\1\u071f"+
            "\2\uffff\1\u070c\1\u071b\1\u070f\4\uffff\1\u071a\1\u071c\1\u0718"+
            "\1\u0719\1\u0712\1\u0713\1\u0714\1\u0715\1\u0711\1\u0710\1\u070d"+
            "\1\u070e",
            "\1\u073a\1\u073b\1\u073c\1\u073d\1\uffff\1\u0738\1\u0737\1"+
            "\u0739\34\uffff\1\u0731\u00da\uffff\1\u0730\2\uffff\1\u0725"+
            "\2\uffff\1\u0726\1\u0735\1\u0729\4\uffff\1\u0734\1\u0736\1\u0732"+
            "\1\u0733\1\u072c\1\u072d\1\u072e\1\u072f\1\u072b\1\u072a\1\u0727"+
            "\1\u0728",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0753\1\u0754\1\u0755\1\u0756\1\uffff\1\u0750\1\u074f\1"+
            "\u0752\34\uffff\1\u0749\u00d8\uffff\1\u0751\1\uffff\1\u0748"+
            "\2\uffff\1\16\2\uffff\1\u073e\1\u074d\1\u0741\4\uffff\1\u074c"+
            "\1\u074e\1\u074a\1\u074b\1\u0744\1\u0745\1\u0746\1\u0747\1\u0743"+
            "\1\u0742\1\u073f\1\u0740",
            "\1\u076d\1\u076e\1\u076f\1\u0770\1\uffff\1\u076a\1\u0769\1"+
            "\u076c\34\uffff\1\u0763\u00d8\uffff\1\u076b\1\uffff\1\u0762"+
            "\2\uffff\1\16\2\uffff\1\u0758\1\u0767\1\u075b\4\uffff\1\u0766"+
            "\1\u0768\1\u0764\1\u0765\1\u075e\1\u075f\1\u0760\1\u0761\1\u075d"+
            "\1\u075c\1\u0759\1\u075a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0787\1\u0788\1\u0789\1\u078a\1\uffff\1\u0784\1\u0783\1"+
            "\u0786\34\uffff\1\u077d\u00da\uffff\1\u077c\2\uffff\1\u0785"+
            "\2\uffff\1\u0772\1\u0781\1\u0775\4\uffff\1\u0780\1\u0782\1\u077e"+
            "\1\u077f\1\u0778\1\u0779\1\u077a\1\u077b\1\u0777\1\u0776\1\u0773"+
            "\1\u0774",
            "\1\u07a0\1\u07a1\1\u07a2\1\u07a3\1\uffff\1\u079d\1\u079c\1"+
            "\u079f\34\uffff\1\u0796\u00da\uffff\1\u0795\2\uffff\1\u079e"+
            "\2\uffff\1\u078b\1\u079a\1\u078e\4\uffff\1\u0799\1\u079b\1\u0797"+
            "\1\u0798\1\u0791\1\u0792\1\u0793\1\u0794\1\u0790\1\u078f\1\u078c"+
            "\1\u078d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07b9\1\u07ba\1\u07bb\1\u07bc\1\uffff\1\u07b6\1\u07b5\1"+
            "\u07b8\34\uffff\1\u07af\u00da\uffff\1\u07ae\2\uffff\1\u07b7"+
            "\2\uffff\1\u07a4\1\u07b3\1\u07a7\4\uffff\1\u07b2\1\u07b4\1\u07b0"+
            "\1\u07b1\1\u07aa\1\u07ab\1\u07ac\1\u07ad\1\u07a9\1\u07a8\1\u07a5"+
            "\1\u07a6",
            "\1\u07d2\1\u07d3\1\u07d4\1\u07d5\1\uffff\1\u07cf\1\u07ce\1"+
            "\u07d1\34\uffff\1\u07c8\u00da\uffff\1\u07c7\2\uffff\1\u07d0"+
            "\2\uffff\1\u07bd\1\u07cc\1\u07c0\4\uffff\1\u07cb\1\u07cd\1\u07c9"+
            "\1\u07ca\1\u07c3\1\u07c4\1\u07c5\1\u07c6\1\u07c2\1\u07c1\1\u07be"+
            "\1\u07bf",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07eb\1\u07ec\1\u07ed\1\u07ee\1\uffff\1\u07e8\1\u07e7\1"+
            "\u07ea\34\uffff\1\u07e1\u00da\uffff\1\u07e0\2\uffff\1\u07e9"+
            "\2\uffff\1\u07d6\1\u07e5\1\u07d9\4\uffff\1\u07e4\1\u07e6\1\u07e2"+
            "\1\u07e3\1\u07dc\1\u07dd\1\u07de\1\u07df\1\u07db\1\u07da\1\u07d7"+
            "\1\u07d8",
            "\1\u0804\1\u0805\1\u0806\1\u0807\1\uffff\1\u0801\1\u0800\1"+
            "\u0803\34\uffff\1\u07fa\u00da\uffff\1\u07f9\2\uffff\1\u0802"+
            "\2\uffff\1\u07ef\1\u07fe\1\u07f2\4\uffff\1\u07fd\1\u07ff\1\u07fb"+
            "\1\u07fc\1\u07f5\1\u07f6\1\u07f7\1\u07f8\1\u07f4\1\u07f3\1\u07f0"+
            "\1\u07f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081d\1\u081e\1\u081f\1\u0820\1\uffff\1\u081a\1\u0819\1"+
            "\u081c\34\uffff\1\u0813\u00da\uffff\1\u0812\2\uffff\1\u081b"+
            "\2\uffff\1\u0808\1\u0817\1\u080b\4\uffff\1\u0816\1\u0818\1\u0814"+
            "\1\u0815\1\u080e\1\u080f\1\u0810\1\u0811\1\u080d\1\u080c\1\u0809"+
            "\1\u080a",
            "\1\u0836\1\u0837\1\u0838\1\u0839\1\uffff\1\u0833\1\u0832\1"+
            "\u0835\34\uffff\1\u082c\u00da\uffff\1\u082b\2\uffff\1\u0834"+
            "\2\uffff\1\u0821\1\u0830\1\u0824\4\uffff\1\u082f\1\u0831\1\u082d"+
            "\1\u082e\1\u0827\1\u0828\1\u0829\1\u082a\1\u0826\1\u0825\1\u0822"+
            "\1\u0823",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u084f\1\u0850\1\u0851\1\u0852\1\uffff\1\u084c\1\u084b\1"+
            "\u084e\34\uffff\1\u0845\u00da\uffff\1\u0844\2\uffff\1\u084d"+
            "\2\uffff\1\u083a\1\u0849\1\u083d\4\uffff\1\u0848\1\u084a\1\u0846"+
            "\1\u0847\1\u0840\1\u0841\1\u0842\1\u0843\1\u083f\1\u083e\1\u083b"+
            "\1\u083c",
            "\1\u0868\1\u0869\1\u086a\1\u086b\1\uffff\1\u0865\1\u0864\1"+
            "\u0867\34\uffff\1\u085e\u00da\uffff\1\u085d\2\uffff\1\u0866"+
            "\2\uffff\1\u0853\1\u0862\1\u0856\4\uffff\1\u0861\1\u0863\1\u085f"+
            "\1\u0860\1\u0859\1\u085a\1\u085b\1\u085c\1\u0858\1\u0857\1\u0854"+
            "\1\u0855",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0882\1\u0883\1\u0884\1\u0885\1\uffff\1\u087e\1\u087d\1"+
            "\u0881\34\uffff\1\u0877\u00d8\uffff\1\u087f\1\uffff\1\u0876"+
            "\2\uffff\1\u0880\2\uffff\1\u086c\1\u087b\1\u086f\4\uffff\1\u087a"+
            "\1\u087c\1\u0878\1\u0879\1\u0872\1\u0873\1\u0874\1\u0875\1\u0871"+
            "\1\u0870\1\u086d\1\u086e",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0898\1\u0897\1"+
            "\u089b\34\uffff\1\u0891\u00d8\uffff\1\u0899\1\uffff\1\u0890"+
            "\2\uffff\1\u089a\2\uffff\1\u0886\1\u0895\1\u0889\4\uffff\1\u0894"+
            "\1\u0896\1\u0892\1\u0893\1\u088c\1\u088d\1\u088e\1\u088f\1\u088b"+
            "\1\u088a\1\u0887\1\u0888",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b5\1\u08b6\1\u08b7\1\u08b8\1\uffff\1\u08b2\1\u08b1\1"+
            "\u08b4\34\uffff\1\u08ab\u00d8\uffff\1\u08b3\1\uffff\1\u08aa"+
            "\2\uffff\1\16\2\uffff\1\u08a0\1\u08af\1\u08a3\4\uffff\1\u08ae"+
            "\1\u08b0\1\u08ac\1\u08ad\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\u08a5"+
            "\1\u08a4\1\u08a1\1\u08a2",
            "\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\uffff\1\u08cc\1\u08cb\1"+
            "\u08ce\34\uffff\1\u08c5\u00d8\uffff\1\u08cd\1\uffff\1\u08c4"+
            "\2\uffff\1\16\2\uffff\1\u08ba\1\u08c9\1\u08bd\4\uffff\1\u08c8"+
            "\1\u08ca\1\u08c6\1\u08c7\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\u08bf"+
            "\1\u08be\1\u08bb\1\u08bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08ea\1\u08eb\1\u08ec\1\u08ed\1\uffff\1\u08e6\1\u08e5\1"+
            "\u08e9\3\uffff\1\u08e8\30\uffff\1\u08df\u00d8\uffff\1\u08e7"+
            "\1\uffff\1\u08de\2\uffff\1\16\2\uffff\1\u08d4\1\u08e3\1\u08d7"+
            "\4\uffff\1\u08e2\1\u08e4\1\u08e0\1\u08e1\1\u08da\1\u08db\1\u08dc"+
            "\1\u08dd\1\u08d9\1\u08d8\1\u08d5\1\u08d6",
            "\1\u0905\1\u0906\1\u0907\1\u0908\1\uffff\1\u0901\1\u0900\1"+
            "\u0904\3\uffff\1\u0903\30\uffff\1\u08fa\u00d8\uffff\1\u0902"+
            "\1\uffff\1\u08f9\2\uffff\1\16\2\uffff\1\u08ef\1\u08fe\1\u08f2"+
            "\4\uffff\1\u08fd\1\u08ff\1\u08fb\1\u08fc\1\u08f5\1\u08f6\1\u08f7"+
            "\1\u08f8\1\u08f4\1\u08f3\1\u08f0\1\u08f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "1179:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_0 = input.LA(1);

                         
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_0==MINUS) ) {s = 1;}

                        else if ( ((LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||LA167_0==NUM_DOUBLE||LA167_0==PLUS||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==NUM_INT||(LA167_0>=NUM_LONG && LA167_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA167_0==QUESTION) ) {s = 12;}

                        else if ( (LA167_0==LPAREN) ) {s = 13;}

                        else if ( (LA167_0==WINDOW||LA167_0==ESCAPE||LA167_0==EVERY_EXPR||(LA167_0>=MAX && LA167_0<=MIN)||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||LA167_0==EVENTS||(LA167_0>=UNIDIRECTIONAL && LA167_0<=METADATASQL)||(LA167_0>=WEEKDAY && LA167_0<=LW)||LA167_0==SNAPSHOT||(LA167_0>=VARIABLE && LA167_0<=INDEX)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==IDENT||LA167_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA167_0==COUNT) ) {s = 17;}

                        else if ( (LA167_0==SUM) ) {s = 20;}

                        else if ( (LA167_0==AVG) ) {s = 21;}

                        else if ( (LA167_0==COALESCE) ) {s = 24;}

                        else if ( (LA167_0==MEDIAN) ) {s = 25;}

                        else if ( (LA167_0==STDDEV) ) {s = 26;}

                        else if ( (LA167_0==AVEDEV) ) {s = 27;}

                        else if ( (LA167_0==FIRST) ) {s = 29;}

                        else if ( (LA167_0==LAST) ) {s = 30;}

                        else if ( (LA167_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA167_0==PRIOR) ) {s = 39;}

                        else if ( (LA167_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA167_0==CAST) ) {s = 43;}

                        else if ( (LA167_0==EXISTS) ) {s = 56;}

                        else if ( (LA167_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA167_0==LCURLY) ) {s = 58;}

                         
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA167_166 = input.LA(1);

                         
                        int index167_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_166==ALL) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA167_166==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA167_166==CASE) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA167_166==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA167_166==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA167_166==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA167_166==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA167_166==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA167_166==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA167_166==STRING_LITERAL) ) {s = 930;}

                        else if ( (LA167_166==QUOTED_STRING_LITERAL) ) {s = 931;}

                        else if ( (LA167_166==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA167_166==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA167_166==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA167_166==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA167_166==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA167_166==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA167_166==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA167_166==AT) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA167_166==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA167_166==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA167_166==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA167_166==SUM) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA167_166==AVG) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA167_166==MAX) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA167_166==MIN) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA167_166==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA167_166==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA167_166==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA167_166==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA167_166==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA167_166==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA167_166==LAST) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA167_166==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA167_166==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA167_166==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA167_166==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA167_166==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA167_166==SQL) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA167_166==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA167_166==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA167_166==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA167_166==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA167_166==LW) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA167_166==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA167_166==CAST) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA167_166==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA167_166==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA167_166==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA167_166==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA167_166==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA167_166==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA167_166==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA167_166==FULL) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA167_166==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA167_166==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA167_166==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA167_166==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA167_166==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA167_166==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA167_166==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA167_166==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA167_166==STAR) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                         
                        input.seek(index167_166);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA167_224 = input.LA(1);

                         
                        int index167_224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_224==ALL) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA167_224==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA167_224==CASE) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA167_224==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA167_224==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA167_224==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA167_224==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA167_224==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA167_224==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA167_224==STRING_LITERAL) ) {s = 993;}

                        else if ( (LA167_224==QUOTED_STRING_LITERAL) ) {s = 994;}

                        else if ( (LA167_224==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA167_224==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA167_224==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA167_224==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA167_224==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA167_224==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA167_224==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA167_224==AT) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA167_224==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA167_224==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA167_224==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA167_224==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA167_224==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA167_224==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA167_224==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA167_224==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA167_224==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA167_224==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA167_224==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA167_224==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA167_224==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA167_224==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA167_224==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA167_224==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA167_224==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA167_224==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA167_224==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA167_224==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA167_224==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA167_224==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA167_224==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA167_224==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA167_224==LW) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA167_224==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA167_224==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA167_224==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA167_224==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA167_224==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA167_224==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA167_224==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA167_224==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA167_224==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA167_224==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA167_224==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA167_224==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA167_224==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA167_224==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA167_224==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA167_224==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA167_224==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA167_224==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                         
                        input.seek(index167_224);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA167_282 = input.LA(1);

                         
                        int index167_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_282==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA167_282==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA167_282==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA167_282==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA167_282==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA167_282==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA167_282==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA167_282==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA167_282==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA167_282==STRING_LITERAL) ) {s = 1055;}

                        else if ( (LA167_282==QUOTED_STRING_LITERAL) ) {s = 1056;}

                        else if ( (LA167_282==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA167_282==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA167_282==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA167_282==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA167_282==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA167_282==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA167_282==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA167_282==AT) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA167_282==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA167_282==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA167_282==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA167_282==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA167_282==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA167_282==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA167_282==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA167_282==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA167_282==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA167_282==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA167_282==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA167_282==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA167_282==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA167_282==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA167_282==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA167_282==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA167_282==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA167_282==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA167_282==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA167_282==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA167_282==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA167_282==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA167_282==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA167_282==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA167_282==LW) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA167_282==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA167_282==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA167_282==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA167_282==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA167_282==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA167_282==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA167_282==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA167_282==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA167_282==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA167_282==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA167_282==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA167_282==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA167_282==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA167_282==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA167_282==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA167_282==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA167_282==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA167_282==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                         
                        input.seek(index167_282);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA167_340 = input.LA(1);

                         
                        int index167_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_340==STRING_LITERAL) ) {s = 1108;}

                        else if ( (LA167_340==QUOTED_STRING_LITERAL) ) {s = 1109;}

                        else if ( (LA167_340==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA167_340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA167_340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA167_340==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA167_340==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA167_340==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA167_340==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA167_340==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA167_340==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA167_340==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA167_340==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA167_340==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA167_340==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA167_340==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA167_340==AT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA167_340==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA167_340==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA167_340==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA167_340==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA167_340==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA167_340==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA167_340==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA167_340==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA167_340==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA167_340==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA167_340==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA167_340==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA167_340==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA167_340==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA167_340==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA167_340==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA167_340==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA167_340==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA167_340==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA167_340==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA167_340==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA167_340==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA167_340==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA167_340==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA167_340==LW) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA167_340==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA167_340==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA167_340==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA167_340==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA167_340==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA167_340==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA167_340==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA167_340==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA167_340==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA167_340==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA167_340==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA167_340==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA167_340==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA167_340==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA167_340==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA167_340==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA167_340==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA167_340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                         
                        input.seek(index167_340);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA167_398 = input.LA(1);

                         
                        int index167_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_398==STRING_LITERAL) ) {s = 1168;}

                        else if ( (LA167_398==QUOTED_STRING_LITERAL) ) {s = 1169;}

                        else if ( (LA167_398==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA167_398==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA167_398==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA167_398==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA167_398==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA167_398==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA167_398==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA167_398==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA167_398==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA167_398==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA167_398==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA167_398==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA167_398==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA167_398==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA167_398==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA167_398==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA167_398==AT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA167_398==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA167_398==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA167_398==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA167_398==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA167_398==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA167_398==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA167_398==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA167_398==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA167_398==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA167_398==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA167_398==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA167_398==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA167_398==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA167_398==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA167_398==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA167_398==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA167_398==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA167_398==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA167_398==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA167_398==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA167_398==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA167_398==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA167_398==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA167_398==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA167_398==LW) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA167_398==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA167_398==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA167_398==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA167_398==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA167_398==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA167_398==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA167_398==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA167_398==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA167_398==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA167_398==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA167_398==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA167_398==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA167_398==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA167_398==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA167_398==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA167_398==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA167_398==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA167_398==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                         
                        input.seek(index167_398);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA167_456 = input.LA(1);

                         
                        int index167_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_456==STRING_LITERAL) ) {s = 1230;}

                        else if ( (LA167_456==QUOTED_STRING_LITERAL) ) {s = 1231;}

                        else if ( (LA167_456==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA167_456==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA167_456==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA167_456==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA167_456==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA167_456==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA167_456==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA167_456==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA167_456==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA167_456==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA167_456==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA167_456==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA167_456==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA167_456==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA167_456==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA167_456==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA167_456==AT) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA167_456==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA167_456==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA167_456==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA167_456==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA167_456==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA167_456==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA167_456==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA167_456==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA167_456==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA167_456==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA167_456==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA167_456==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA167_456==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA167_456==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA167_456==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA167_456==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA167_456==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA167_456==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA167_456==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA167_456==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA167_456==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA167_456==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA167_456==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA167_456==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA167_456==LW) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA167_456==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA167_456==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA167_456==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA167_456==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA167_456==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA167_456==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA167_456==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA167_456==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA167_456==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA167_456==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA167_456==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA167_456==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA167_456==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA167_456==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA167_456==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA167_456==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA167_456==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA167_456==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                         
                        input.seek(index167_456);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA167_514 = input.LA(1);

                         
                        int index167_514 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_514==STRING_LITERAL) ) {s = 1292;}

                        else if ( (LA167_514==QUOTED_STRING_LITERAL) ) {s = 1293;}

                        else if ( (LA167_514==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA167_514==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA167_514==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA167_514==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA167_514==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA167_514==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA167_514==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA167_514==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA167_514==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA167_514==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA167_514==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA167_514==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA167_514==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA167_514==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA167_514==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA167_514==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA167_514==AT) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA167_514==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA167_514==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA167_514==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA167_514==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA167_514==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA167_514==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA167_514==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA167_514==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA167_514==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA167_514==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA167_514==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA167_514==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA167_514==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA167_514==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA167_514==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA167_514==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA167_514==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA167_514==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA167_514==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA167_514==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA167_514==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA167_514==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA167_514==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA167_514==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA167_514==LW) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA167_514==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA167_514==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA167_514==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA167_514==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA167_514==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA167_514==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA167_514==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA167_514==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA167_514==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA167_514==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA167_514==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA167_514==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA167_514==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA167_514==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA167_514==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA167_514==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA167_514==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA167_514==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                         
                        input.seek(index167_514);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA167_572 = input.LA(1);

                         
                        int index167_572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_572==STRING_LITERAL) ) {s = 1354;}

                        else if ( (LA167_572==QUOTED_STRING_LITERAL) ) {s = 1355;}

                        else if ( (LA167_572==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA167_572==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA167_572==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA167_572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA167_572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA167_572==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA167_572==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA167_572==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA167_572==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA167_572==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA167_572==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA167_572==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA167_572==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA167_572==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA167_572==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA167_572==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA167_572==AT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA167_572==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA167_572==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA167_572==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA167_572==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA167_572==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA167_572==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA167_572==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA167_572==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA167_572==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA167_572==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA167_572==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA167_572==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA167_572==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA167_572==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA167_572==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA167_572==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA167_572==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA167_572==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA167_572==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA167_572==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA167_572==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA167_572==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA167_572==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA167_572==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA167_572==LW) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA167_572==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA167_572==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA167_572==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA167_572==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA167_572==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA167_572==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA167_572==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA167_572==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA167_572==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA167_572==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA167_572==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA167_572==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA167_572==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA167_572==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA167_572==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA167_572==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA167_572==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA167_572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                         
                        input.seek(index167_572);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA167_630 = input.LA(1);

                         
                        int index167_630 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_630==STRING_LITERAL) ) {s = 1416;}

                        else if ( (LA167_630==QUOTED_STRING_LITERAL) ) {s = 1417;}

                        else if ( (LA167_630==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA167_630==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA167_630==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA167_630==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA167_630==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA167_630==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA167_630==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA167_630==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA167_630==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA167_630==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA167_630==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA167_630==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA167_630==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA167_630==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA167_630==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA167_630==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA167_630==AT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA167_630==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA167_630==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA167_630==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA167_630==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA167_630==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA167_630==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA167_630==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA167_630==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA167_630==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA167_630==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA167_630==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA167_630==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA167_630==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA167_630==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA167_630==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA167_630==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA167_630==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA167_630==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA167_630==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA167_630==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA167_630==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA167_630==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA167_630==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA167_630==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA167_630==LW) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA167_630==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA167_630==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA167_630==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA167_630==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA167_630==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA167_630==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA167_630==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA167_630==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA167_630==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA167_630==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA167_630==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA167_630==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA167_630==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA167_630==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA167_630==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA167_630==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA167_630==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA167_630==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                         
                        input.seek(index167_630);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA167_688 = input.LA(1);

                         
                        int index167_688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_688==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA167_688==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA167_688==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA167_688==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA167_688==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA167_688==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA167_688==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA167_688==STRING_LITERAL) ) {s = 1485;}

                        else if ( (LA167_688==QUOTED_STRING_LITERAL) ) {s = 1486;}

                        else if ( (LA167_688==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA167_688==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA167_688==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA167_688==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA167_688==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA167_688==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA167_688==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA167_688==AT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA167_688==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA167_688==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA167_688==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA167_688==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA167_688==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA167_688==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA167_688==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA167_688==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA167_688==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA167_688==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA167_688==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA167_688==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA167_688==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA167_688==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA167_688==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA167_688==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA167_688==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA167_688==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA167_688==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA167_688==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA167_688==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA167_688==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA167_688==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA167_688==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA167_688==LW) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA167_688==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA167_688==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA167_688==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA167_688==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA167_688==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA167_688==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA167_688==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA167_688==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA167_688==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA167_688==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA167_688==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA167_688==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA167_688==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA167_688==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA167_688==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA167_688==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA167_688==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA167_688==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                         
                        input.seek(index167_688);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA167_746 = input.LA(1);

                         
                        int index167_746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_746==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( ((LA167_746>=STRING_LITERAL && LA167_746<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index167_746);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA167_804 = input.LA(1);

                         
                        int index167_804 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_804==STRING_LITERAL) ) {s = 1541;}

                        else if ( (LA167_804==QUOTED_STRING_LITERAL) ) {s = 1542;}

                        else if ( (LA167_804==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA167_804==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA167_804==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA167_804==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA167_804==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA167_804==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA167_804==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA167_804==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA167_804==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA167_804==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA167_804==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA167_804==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA167_804==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA167_804==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA167_804==AT) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA167_804==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA167_804==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA167_804==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA167_804==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA167_804==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA167_804==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA167_804==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA167_804==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA167_804==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA167_804==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA167_804==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA167_804==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA167_804==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA167_804==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA167_804==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA167_804==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA167_804==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA167_804==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA167_804==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA167_804==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA167_804==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA167_804==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA167_804==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA167_804==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA167_804==LW) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA167_804==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA167_804==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA167_804==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA167_804==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA167_804==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA167_804==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA167_804==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA167_804==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA167_804==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA167_804==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA167_804==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA167_804==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA167_804==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA167_804==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA167_804==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA167_804==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA167_804==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA167_804==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                         
                        input.seek(index167_804);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA167_862 = input.LA(1);

                         
                        int index167_862 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_862==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA167_862==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA167_862==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA167_862==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA167_862==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA167_862==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA167_862==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA167_862==STRING_LITERAL) ) {s = 1608;}

                        else if ( (LA167_862==QUOTED_STRING_LITERAL) ) {s = 1609;}

                        else if ( (LA167_862==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA167_862==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA167_862==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA167_862==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA167_862==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA167_862==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA167_862==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA167_862==AT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA167_862==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA167_862==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA167_862==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA167_862==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA167_862==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA167_862==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA167_862==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA167_862==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA167_862==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA167_862==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA167_862==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA167_862==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA167_862==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA167_862==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA167_862==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA167_862==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA167_862==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA167_862==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA167_862==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA167_862==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA167_862==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA167_862==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA167_862==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA167_862==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA167_862==LW) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA167_862==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA167_862==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA167_862==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA167_862==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA167_862==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA167_862==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA167_862==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA167_862==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA167_862==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA167_862==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA167_862==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA167_862==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA167_862==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA167_862==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA167_862==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA167_862==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA167_862==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA167_862==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                         
                        input.seek(index167_862);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA167_920 = input.LA(1);

                         
                        int index167_920 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_920==SELECT) ) {s = 1661;}

                        else if ( (LA167_920==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA167_920==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA167_920==AT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA167_920==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA167_920==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA167_920==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA167_920==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA167_920==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA167_920==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA167_920==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA167_920==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA167_920==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA167_920==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA167_920==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA167_920==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA167_920==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA167_920==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA167_920==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA167_920==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA167_920==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA167_920==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA167_920==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA167_920==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA167_920==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA167_920==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA167_920==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA167_920==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA167_920==LW) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA167_920==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA167_920==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA167_920==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA167_920==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA167_920==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA167_920==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA167_920==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA167_920==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA167_920==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA167_920==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA167_920==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA167_920==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA167_920==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA167_920==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                         
                        input.seek(index167_920);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA167_930 = input.LA(1);

                         
                        int index167_930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_930==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA167_930==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA167_930==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA167_930==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA167_930==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA167_930==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA167_930==LT) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA167_930==GT) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA167_930==LE) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA167_930==GE) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA167_930==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA167_930==IS) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA167_930==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA167_930==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA167_930==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA167_930==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA167_930==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA167_930==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA167_930==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA167_930==RPAREN) ) {s = 1723;}

                        else if ( (LA167_930==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA167_930==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA167_930==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA167_930==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA167_930==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                         
                        input.seek(index167_930);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA167_931 = input.LA(1);

                         
                        int index167_931 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_931==RPAREN) ) {s = 1729;}

                        else if ( (LA167_931==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA167_931==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA167_931==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA167_931==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA167_931==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA167_931==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA167_931==LT) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA167_931==GT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA167_931==LE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA167_931==GE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA167_931==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA167_931==IS) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA167_931==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA167_931==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA167_931==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA167_931==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA167_931==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA167_931==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA167_931==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA167_931==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA167_931==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA167_931==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA167_931==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA167_931==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                         
                        input.seek(index167_931);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA167_993 = input.LA(1);

                         
                        int index167_993 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_993==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA167_993==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA167_993==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA167_993==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA167_993==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA167_993==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA167_993==LT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA167_993==GT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA167_993==LE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA167_993==GE) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA167_993==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA167_993==IS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA167_993==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA167_993==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA167_993==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA167_993==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA167_993==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA167_993==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA167_993==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA167_993==RPAREN) ) {s = 1773;}

                        else if ( (LA167_993==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA167_993==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA167_993==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA167_993==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA167_993==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                         
                        input.seek(index167_993);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA167_994 = input.LA(1);

                         
                        int index167_994 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_994==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA167_994==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA167_994==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA167_994==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA167_994==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA167_994==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA167_994==LT) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA167_994==GT) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA167_994==LE) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA167_994==GE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA167_994==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA167_994==IS) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA167_994==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA167_994==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA167_994==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA167_994==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA167_994==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA167_994==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA167_994==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA167_994==RPAREN) ) {s = 1798;}

                        else if ( (LA167_994==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA167_994==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA167_994==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA167_994==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA167_994==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                         
                        input.seek(index167_994);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA167_1055 = input.LA(1);

                         
                        int index167_1055 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1055==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA167_1055==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA167_1055==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA167_1055==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA167_1055==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA167_1055==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA167_1055==LT) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA167_1055==GT) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA167_1055==LE) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA167_1055==GE) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA167_1055==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA167_1055==IS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA167_1055==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA167_1055==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA167_1055==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA167_1055==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA167_1055==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA167_1055==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA167_1055==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA167_1055==RPAREN) ) {s = 1823;}

                        else if ( (LA167_1055==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA167_1055==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA167_1055==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA167_1055==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA167_1055==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                         
                        input.seek(index167_1055);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA167_1056 = input.LA(1);

                         
                        int index167_1056 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1056==RPAREN) ) {s = 1829;}

                        else if ( (LA167_1056==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA167_1056==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA167_1056==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA167_1056==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA167_1056==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA167_1056==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA167_1056==LT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA167_1056==GT) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA167_1056==LE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA167_1056==GE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA167_1056==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA167_1056==IS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA167_1056==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA167_1056==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA167_1056==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA167_1056==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA167_1056==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA167_1056==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA167_1056==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA167_1056==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA167_1056==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA167_1056==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA167_1056==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA167_1056==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                         
                        input.seek(index167_1056);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA167_1108 = input.LA(1);

                         
                        int index167_1108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1108==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA167_1108==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA167_1108==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA167_1108==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA167_1108==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA167_1108==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA167_1108==LT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA167_1108==GT) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA167_1108==LE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA167_1108==GE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA167_1108==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA167_1108==IS) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA167_1108==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA167_1108==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA167_1108==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA167_1108==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA167_1108==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA167_1108==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA167_1108==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA167_1108==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA167_1108==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA167_1108==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA167_1108==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA167_1108==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA167_1108==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA167_1108==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1108);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA167_1109 = input.LA(1);

                         
                        int index167_1109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1109==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA167_1109==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA167_1109==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA167_1109==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA167_1109==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA167_1109==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA167_1109==LT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA167_1109==GT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA167_1109==LE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA167_1109==GE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA167_1109==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA167_1109==IS) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA167_1109==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA167_1109==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA167_1109==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA167_1109==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA167_1109==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA167_1109==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA167_1109==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA167_1109==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA167_1109==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA167_1109==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA167_1109==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA167_1109==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA167_1109==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA167_1109==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1109);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA167_1168 = input.LA(1);

                         
                        int index167_1168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1168==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA167_1168==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA167_1168==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA167_1168==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA167_1168==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA167_1168==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA167_1168==LT) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA167_1168==GT) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA167_1168==LE) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA167_1168==GE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA167_1168==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA167_1168==IS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA167_1168==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA167_1168==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA167_1168==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA167_1168==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA167_1168==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA167_1168==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA167_1168==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA167_1168==RPAREN) ) {s = 1925;}

                        else if ( (LA167_1168==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA167_1168==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA167_1168==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA167_1168==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA167_1168==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                         
                        input.seek(index167_1168);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA167_1169 = input.LA(1);

                         
                        int index167_1169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA167_1169==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA167_1169==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA167_1169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA167_1169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA167_1169==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA167_1169==LT) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA167_1169==GT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA167_1169==LE) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA167_1169==GE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA167_1169==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA167_1169==IS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA167_1169==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA167_1169==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA167_1169==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA167_1169==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA167_1169==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA167_1169==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA167_1169==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA167_1169==RPAREN) ) {s = 1950;}

                        else if ( (LA167_1169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA167_1169==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA167_1169==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA167_1169==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA167_1169==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                         
                        input.seek(index167_1169);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA167_1230 = input.LA(1);

                         
                        int index167_1230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1230==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA167_1230==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA167_1230==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA167_1230==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA167_1230==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA167_1230==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA167_1230==LT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA167_1230==GT) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA167_1230==LE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA167_1230==GE) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA167_1230==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA167_1230==IS) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA167_1230==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA167_1230==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA167_1230==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA167_1230==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA167_1230==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA167_1230==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA167_1230==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA167_1230==RPAREN) ) {s = 1975;}

                        else if ( (LA167_1230==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA167_1230==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA167_1230==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA167_1230==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA167_1230==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                         
                        input.seek(index167_1230);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA167_1231 = input.LA(1);

                         
                        int index167_1231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1231==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA167_1231==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA167_1231==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA167_1231==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA167_1231==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA167_1231==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA167_1231==LT) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA167_1231==GT) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA167_1231==LE) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA167_1231==GE) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA167_1231==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA167_1231==IS) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA167_1231==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA167_1231==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA167_1231==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA167_1231==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA167_1231==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA167_1231==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA167_1231==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA167_1231==RPAREN) ) {s = 2000;}

                        else if ( (LA167_1231==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA167_1231==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA167_1231==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA167_1231==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA167_1231==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                         
                        input.seek(index167_1231);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA167_1292 = input.LA(1);

                         
                        int index167_1292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1292==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA167_1292==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA167_1292==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA167_1292==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA167_1292==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA167_1292==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA167_1292==LT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA167_1292==GT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA167_1292==LE) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA167_1292==GE) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA167_1292==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA167_1292==IS) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA167_1292==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA167_1292==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA167_1292==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA167_1292==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA167_1292==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA167_1292==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA167_1292==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA167_1292==RPAREN) ) {s = 2025;}

                        else if ( (LA167_1292==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA167_1292==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA167_1292==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA167_1292==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA167_1292==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                         
                        input.seek(index167_1292);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA167_1293 = input.LA(1);

                         
                        int index167_1293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1293==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA167_1293==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA167_1293==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA167_1293==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA167_1293==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA167_1293==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA167_1293==LT) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA167_1293==GT) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA167_1293==LE) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA167_1293==GE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA167_1293==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA167_1293==IS) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA167_1293==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA167_1293==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA167_1293==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA167_1293==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA167_1293==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA167_1293==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA167_1293==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA167_1293==RPAREN) ) {s = 2050;}

                        else if ( (LA167_1293==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA167_1293==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA167_1293==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA167_1293==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA167_1293==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                         
                        input.seek(index167_1293);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA167_1354 = input.LA(1);

                         
                        int index167_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA167_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA167_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA167_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA167_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA167_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA167_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA167_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA167_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA167_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA167_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA167_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA167_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA167_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA167_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA167_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA167_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA167_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA167_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA167_1354==RPAREN) ) {s = 2075;}

                        else if ( (LA167_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA167_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA167_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA167_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA167_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                         
                        input.seek(index167_1354);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA167_1355 = input.LA(1);

                         
                        int index167_1355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1355==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA167_1355==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA167_1355==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA167_1355==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA167_1355==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA167_1355==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA167_1355==LT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA167_1355==GT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA167_1355==LE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA167_1355==GE) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA167_1355==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA167_1355==IS) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA167_1355==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA167_1355==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA167_1355==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA167_1355==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA167_1355==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA167_1355==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA167_1355==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA167_1355==RPAREN) ) {s = 2100;}

                        else if ( (LA167_1355==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA167_1355==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA167_1355==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA167_1355==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA167_1355==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                         
                        input.seek(index167_1355);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA167_1416 = input.LA(1);

                         
                        int index167_1416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1416==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA167_1416==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA167_1416==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA167_1416==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA167_1416==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA167_1416==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA167_1416==LT) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA167_1416==GT) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA167_1416==LE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA167_1416==GE) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA167_1416==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA167_1416==IS) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA167_1416==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA167_1416==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA167_1416==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA167_1416==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA167_1416==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA167_1416==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA167_1416==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA167_1416==RPAREN) ) {s = 2125;}

                        else if ( (LA167_1416==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA167_1416==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA167_1416==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA167_1416==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA167_1416==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                         
                        input.seek(index167_1416);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA167_1417 = input.LA(1);

                         
                        int index167_1417 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1417==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA167_1417==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA167_1417==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA167_1417==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA167_1417==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA167_1417==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA167_1417==LT) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA167_1417==GT) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA167_1417==LE) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA167_1417==GE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA167_1417==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA167_1417==IS) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA167_1417==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA167_1417==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA167_1417==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA167_1417==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA167_1417==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA167_1417==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA167_1417==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA167_1417==RPAREN) ) {s = 2150;}

                        else if ( (LA167_1417==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA167_1417==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA167_1417==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA167_1417==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA167_1417==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                         
                        input.seek(index167_1417);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA167_1485 = input.LA(1);

                         
                        int index167_1485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1485==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA167_1485==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA167_1485==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA167_1485==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA167_1485==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA167_1485==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA167_1485==LT) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA167_1485==GT) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA167_1485==LE) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA167_1485==GE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA167_1485==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA167_1485==IS) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA167_1485==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA167_1485==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA167_1485==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA167_1485==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA167_1485==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA167_1485==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA167_1485==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA167_1485==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA167_1485==RPAREN) ) {s = 2176;}

                        else if ( (LA167_1485==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA167_1485==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA167_1485==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA167_1485==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA167_1485==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                         
                        input.seek(index167_1485);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA167_1486 = input.LA(1);

                         
                        int index167_1486 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1486==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA167_1486==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA167_1486==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA167_1486==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA167_1486==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA167_1486==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA167_1486==LT) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA167_1486==GT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA167_1486==LE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA167_1486==GE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA167_1486==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA167_1486==IS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA167_1486==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA167_1486==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA167_1486==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA167_1486==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA167_1486==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA167_1486==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA167_1486==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA167_1486==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA167_1486==RPAREN) ) {s = 2202;}

                        else if ( (LA167_1486==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA167_1486==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA167_1486==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA167_1486==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA167_1486==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                         
                        input.seek(index167_1486);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA167_1541 = input.LA(1);

                         
                        int index167_1541 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1541==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA167_1541==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA167_1541==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA167_1541==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA167_1541==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA167_1541==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA167_1541==LT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA167_1541==GT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA167_1541==LE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA167_1541==GE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA167_1541==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA167_1541==IS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA167_1541==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA167_1541==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA167_1541==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA167_1541==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA167_1541==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA167_1541==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA167_1541==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA167_1541==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA167_1541==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA167_1541==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA167_1541==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA167_1541==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA167_1541==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA167_1541==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1541);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA167_1542 = input.LA(1);

                         
                        int index167_1542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1542==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA167_1542==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA167_1542==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA167_1542==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA167_1542==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA167_1542==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA167_1542==LT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA167_1542==GT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA167_1542==LE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA167_1542==GE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA167_1542==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA167_1542==IS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA167_1542==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA167_1542==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA167_1542==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA167_1542==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA167_1542==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA167_1542==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA167_1542==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA167_1542==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA167_1542==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA167_1542==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA167_1542==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA167_1542==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA167_1542==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA167_1542==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1542);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA167_1608 = input.LA(1);

                         
                        int index167_1608 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1608==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA167_1608==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA167_1608==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA167_1608==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA167_1608==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA167_1608==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA167_1608==LT) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA167_1608==GT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA167_1608==LE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA167_1608==GE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA167_1608==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA167_1608==IS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA167_1608==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA167_1608==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA167_1608==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA167_1608==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA167_1608==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA167_1608==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA167_1608==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA167_1608==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA167_1608==AS) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA167_1608==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA167_1608==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA167_1608==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA167_1608==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA167_1608==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA167_1608==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1608);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA167_1609 = input.LA(1);

                         
                        int index167_1609 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA167_1609==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA167_1609==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA167_1609==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA167_1609==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA167_1609==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA167_1609==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA167_1609==LT) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA167_1609==GT) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA167_1609==LE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA167_1609==GE) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA167_1609==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA167_1609==IS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                        else if ( (LA167_1609==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2299;}

                        else if ( (LA167_1609==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA167_1609==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA167_1609==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA167_1609==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA167_1609==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA167_1609==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA167_1609==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA167_1609==AS) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                        else if ( (LA167_1609==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA167_1609==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA167_1609==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA167_1609==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA167_1609==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA167_1609==RPAREN) ) {s = 14;}

                         
                        input.seek(index167_1609);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA167_1723 = input.LA(1);

                         
                        int index167_1723 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1723);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA167_1729 = input.LA(1);

                         
                        int index167_1729 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1729);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA167_1773 = input.LA(1);

                         
                        int index167_1773 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1773);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA167_1798 = input.LA(1);

                         
                        int index167_1798 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1798);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA167_1823 = input.LA(1);

                         
                        int index167_1823 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1823);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA167_1829 = input.LA(1);

                         
                        int index167_1829 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1829);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA167_1925 = input.LA(1);

                         
                        int index167_1925 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1925);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA167_1950 = input.LA(1);

                         
                        int index167_1950 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1950);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA167_1975 = input.LA(1);

                         
                        int index167_1975 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_1975);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA167_2000 = input.LA(1);

                         
                        int index167_2000 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2000);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA167_2025 = input.LA(1);

                         
                        int index167_2025 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2025);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA167_2050 = input.LA(1);

                         
                        int index167_2050 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2050);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA167_2075 = input.LA(1);

                         
                        int index167_2075 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2075);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA167_2100 = input.LA(1);

                         
                        int index167_2100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2100);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA167_2125 = input.LA(1);

                         
                        int index167_2125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2125);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA167_2150 = input.LA(1);

                         
                        int index167_2150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2150);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA167_2176 = input.LA(1);

                         
                        int index167_2176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2176);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA167_2202 = input.LA(1);

                         
                        int index167_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2312;}

                         
                        input.seek(index167_2202);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA194_eotS =
        "\u0490\uffff";
    static final String DFA194_eofS =
        "\1\uffff\1\110\1\u0082\6\uffff\1\u00bc\1\u00f6\u0147\uffff\1\u0275"+
        "\1\u02ae\1\u02e8\1\u0323\46\uffff\1\u035d\1\u0396\1\u03d0\1\u040b"+
        "\u0310\uffff";
    static final String DFA194_minS =
        "\1\5\2\6\6\uffff\2\6\40\uffff\2\5\74\uffff\1\5\65\uffff\1\5\73"+
        "\uffff\1\5\100\uffff\2\6\64\uffff\4\6\46\uffff\4\6\57\uffff\2\6"+
        "\75\uffff\2\6\110\uffff\1\0\31\uffff\1\0\5\uffff\2\0\70\uffff\1"+
        "\0\71\uffff\1\0\71\uffff\1\0\71\uffff\2\0\70\uffff\1\0\71\uffff"+
        "\1\0\71\uffff\1\0\115\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff";
    static final String DFA194_maxS =
        "\1\u0123\2\u0122\6\uffff\2\u0122\40\uffff\1\u0125\1\u0123\74\uffff"+
        "\1\u0123\65\uffff\1\u0125\73\uffff\1\u0125\100\uffff\2\u011d\64"+
        "\uffff\4\u0122\46\uffff\4\u0122\57\uffff\2\u011d\75\uffff\2\u011d"+
        "\110\uffff\1\0\31\uffff\1\0\5\uffff\2\0\70\uffff\1\0\71\uffff\1"+
        "\0\71\uffff\1\0\71\uffff\2\0\70\uffff\1\0\71\uffff\1\0\71\uffff"+
        "\1\0\115\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff";
    static final String DFA194_acceptS =
        "\3\uffff\6\1\2\uffff\40\1\2\uffff\74\1\1\uffff\65\1\1\uffff\73"+
        "\1\1\uffff\67\1\1\2\102\uffff\46\1\4\uffff\46\1\u00b4\uffff\70\1"+
        "\1\uffff\71\1\1\uffff\71\1\1\uffff\71\1\2\uffff\70\1\1\uffff\71"+
        "\1\1\uffff\71\1\1\uffff\71\1\150\uffff";
    static final String DFA194_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\41\uffff\1\5\74\uffff\1\6\u00e8\uffff"+
        "\1\7\1\10\1\11\1\12\46\uffff\1\13\1\14\1\15\1\16\u00b8\uffff\1\17"+
        "\31\uffff\1\20\5\uffff\1\21\1\22\70\uffff\1\23\71\uffff\1\24\71"+
        "\uffff\1\25\71\uffff\1\26\1\27\70\uffff\1\30\71\uffff\1\31\71\uffff"+
        "\1\32\115\uffff\1\33\31\uffff\1\34\31\uffff\1\35\31\uffff\1\36\5"+
        "\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\42\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\45\1\uffff\1\47\1\43\1\44"+
            "\1\46\12\uffff\1\17\1\20\1\21\11\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\1\41\24\uffff\1\50\1\51\1\52\u0099\uffff"+
            "\1\1\36\uffff\1\2",
            "\1\140\1\141\1\142\1\143\1\144\1\102\1\101\1\137\2\uffff\1"+
            "\114\1\115\14\uffff\1\126\1\130\1\125\1\127\1\116\7\uffff\1"+
            "\73\1\uffff\1\103\1\104\1\uffff\1\120\2\uffff\1\105\3\uffff"+
            "\1\111\1\uffff\1\106\1\123\1\124\7\uffff\1\122\27\uffff\1\136"+
            "\1\135\1\134\6\uffff\1\107\3\uffff\1\117\3\uffff\1\121\u0097"+
            "\uffff\1\113\1\uffff\1\72\1\54\1\53\1\112\1\56\1\132\1\60\1"+
            "\77\1\63\1\57\1\131\2\uffff\1\76\1\100\1\74\1\75\1\66\1\67\1"+
            "\70\1\71\1\65\1\64\1\61\1\62\1\uffff\1\133\2\uffff\1\55",
            "\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\174\1\173\1\u0099"+
            "\2\uffff\1\u0086\1\u0087\14\uffff\1\u0090\1\u0092\1\u008f\1"+
            "\u0091\1\u0088\7\uffff\1\165\1\uffff\1\175\1\176\1\uffff\1\u008a"+
            "\2\uffff\1\177\3\uffff\1\u0083\1\uffff\1\u0080\1\u008d\1\u008e"+
            "\7\uffff\1\u008c\27\uffff\1\u0098\1\u0097\1\u0096\6\uffff\1"+
            "\u0081\3\uffff\1\u0089\3\uffff\1\u008b\u0097\uffff\1\u0085\1"+
            "\uffff\1\164\1\151\1\147\1\u0084\1\146\1\u0094\1\152\1\171\1"+
            "\155\1\150\1\u0093\2\uffff\1\170\1\172\1\166\1\167\1\160\1\161"+
            "\1\162\1\163\1\157\1\156\1\153\1\154\1\uffff\1\u0095\2\uffff"+
            "\1\145",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\u00b6\1\u00b5\1"+
            "\u00d3\2\uffff\1\u00c0\1\u00c1\14\uffff\1\u00ca\1\u00cc\1\u00c9"+
            "\1\u00cb\1\u00c2\7\uffff\1\u00af\1\uffff\1\u00b7\1\u00b8\1\uffff"+
            "\1\u00c4\2\uffff\1\u00b9\3\uffff\1\u00bd\1\uffff\1\u00ba\1\u00c7"+
            "\1\u00c8\7\uffff\1\u00c6\27\uffff\1\u00d2\1\u00d1\1\u00d0\6"+
            "\uffff\1\u00bb\3\uffff\1\u00c3\3\uffff\1\u00c5\u0097\uffff\1"+
            "\u00bf\1\uffff\1\u00ae\1\u00a3\1\u009f\1\u00be\1\u00a1\1\u00ce"+
            "\1\u00a4\1\u00b3\1\u00a7\1\u00a2\1\u00cd\2\uffff\1\u00b2\1\u00b4"+
            "\1\u00b0\1\u00b1\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00a9\1\u00a8"+
            "\1\u00a5\1\u00a6\1\uffff\1\u00cf\2\uffff\1\u00a0",
            "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u00f0\1\u00ef\1"+
            "\u010d\2\uffff\1\u00fa\1\u00fb\14\uffff\1\u0104\1\u0106\1\u0103"+
            "\1\u0105\1\u00fc\7\uffff\1\u00e9\1\uffff\1\u00f1\1\u00f2\1\uffff"+
            "\1\u00fe\2\uffff\1\u00f3\3\uffff\1\u00f7\1\uffff\1\u00f4\1\u0101"+
            "\1\u0102\7\uffff\1\u0100\27\uffff\1\u010c\1\u010b\1\u010a\6"+
            "\uffff\1\u00f5\3\uffff\1\u00fd\3\uffff\1\u00ff\u0097\uffff\1"+
            "\u00f9\1\uffff\1\u00e8\1\u00dd\1\u00db\1\u00f8\1\u00da\1\u0108"+
            "\1\u00de\1\u00ed\1\u00e1\1\u00dc\1\u0107\2\uffff\1\u00ec\1\u00ee"+
            "\1\u00ea\1\u00eb\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e3\1\u00e2"+
            "\1\u00df\1\u00e0\1\uffff\1\u0109\2\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\11\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u008a\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\4\uffff\2\u0113\1\uffff\1"+
            "\u011c\1\u011d\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "\1\u0173\4\uffff\1\u0158\3\uffff\1\u0159\3\uffff\1\u015a\1"+
            "\u015b\1\u0153\1\u0154\1\u015c\1\u015d\1\u015e\1\u015f\1\u0157"+
            "\10\uffff\1\u0176\1\uffff\1\u0178\1\u0174\1\u0175\1\u0177\12"+
            "\uffff\1\u0160\1\u0161\1\u0162\11\uffff\1\u0163\1\u0164\1\u0165"+
            "\1\u0167\1\u0168\1\u0169\1\u016a\1\u016b\1\uffff\1\u016c\1\u016d"+
            "\1\u016e\1\u016f\2\uffff\1\u0170\1\uffff\1\u0171\1\u0166\1\u0156"+
            "\1\u0172\24\uffff\1\u0179\1\u017a\1\u017b\u0099\uffff\1\u0152"+
            "\36\uffff\1\u0155",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u019d\4\uffff\1\u0182\3\uffff\1\u0183\3\uffff\1\u0184\1"+
            "\u0185\1\u017d\1\u017e\1\u0186\1\u0187\1\u0188\1\u0189\1\u0181"+
            "\10\uffff\1\u01a0\1\uffff\1\u01a2\1\u019e\1\u019f\1\u01a1\12"+
            "\uffff\1\u018a\1\u018b\1\u018c\11\uffff\1\u018d\1\u018e\1\u018f"+
            "\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\uffff\1\u0196\1\u0197"+
            "\1\u0198\1\u0199\2\uffff\1\u019a\1\uffff\1\u019b\1\u0190\1\u0180"+
            "\1\u019c\24\uffff\1\u01a3\1\u01a4\1\u01a5\u0099\uffff\1\u017c"+
            "\36\uffff\1\u017f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\11\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u008a\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\4\uffff\2\u0113\1\uffff\1"+
            "\u01af\1\u01b0\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\11\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u008a\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\4\uffff\2\u0113\1\uffff\1"+
            "\u01ee\1\u01ef\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0238\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0252\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u028d\1\u028e\1\u028f\1\u0290\1\u0291\1\u026f\1\u026e\1"+
            "\u028c\2\uffff\1\u0279\1\u027a\14\uffff\1\u0283\1\u0285\1\u0282"+
            "\1\u0284\1\u027b\7\uffff\1\u0268\1\uffff\1\u0270\1\u0271\1\uffff"+
            "\1\u027d\2\uffff\1\u0272\3\uffff\1\u0276\1\uffff\1\u0273\1\u0280"+
            "\1\u0281\7\uffff\1\u027f\27\uffff\1\u028b\1\u028a\1\u0289\6"+
            "\uffff\1\u0274\3\uffff\1\u027c\3\uffff\1\u027e\u0097\uffff\1"+
            "\u0278\1\uffff\1\u0267\1\u0259\1\u0258\1\u0277\1\u025b\1\u0287"+
            "\1\u025d\1\u026c\1\u0260\1\u025c\1\u0286\2\uffff\1\u026b\1\u026d"+
            "\1\u0269\1\u026a\1\u0263\1\u0264\1\u0265\1\u0266\1\u0262\1\u0261"+
            "\1\u025e\1\u025f\1\uffff\1\u0288\2\uffff\1\u025a",
            "\1\u02c6\1\u02c7\1\u02c8\1\u02c9\1\u02ca\1\u02a8\1\u02a7\1"+
            "\u02c5\2\uffff\1\u02b2\1\u02b3\14\uffff\1\u02bc\1\u02be\1\u02bb"+
            "\1\u02bd\1\u02b4\7\uffff\1\u02a1\1\uffff\1\u02a9\1\u02aa\1\uffff"+
            "\1\u02b6\2\uffff\1\u02ab\3\uffff\1\u02af\1\uffff\1\u02ac\1\u02b9"+
            "\1\u02ba\7\uffff\1\u02b8\27\uffff\1\u02c4\1\u02c3\1\u02c2\6"+
            "\uffff\1\u02ad\3\uffff\1\u02b5\3\uffff\1\u02b7\u0097\uffff\1"+
            "\u02b1\1\uffff\1\u02a0\1\u02cb\1\u0292\1\u02b0\1\u0294\1\u02c0"+
            "\1\u0296\1\u02a5\1\u0299\1\u0295\1\u02bf\2\uffff\1\u02a4\1\u02a6"+
            "\1\u02a2\1\u02a3\1\u029c\1\u029d\1\u029e\1\u029f\1\u029b\1\u029a"+
            "\1\u0297\1\u0298\1\uffff\1\u02c1\2\uffff\1\u0293",
            "\1\u0300\1\u0301\1\u0302\1\u0303\1\u0304\1\u02e2\1\u02e1\1"+
            "\u02ff\2\uffff\1\u02ec\1\u02ed\14\uffff\1\u02f6\1\u02f8\1\u02f5"+
            "\1\u02f7\1\u02ee\7\uffff\1\u02db\1\uffff\1\u02e3\1\u02e4\1\uffff"+
            "\1\u02f0\2\uffff\1\u02e5\3\uffff\1\u02e9\1\uffff\1\u02e6\1\u02f3"+
            "\1\u02f4\7\uffff\1\u02f2\27\uffff\1\u02fe\1\u02fd\1\u02fc\6"+
            "\uffff\1\u02e7\3\uffff\1\u02ef\3\uffff\1\u02f1\u0097\uffff\1"+
            "\u02eb\1\uffff\1\u02da\1\u0305\1\u02cc\1\u02ea\1\u02ce\1\u02fa"+
            "\1\u02d0\1\u02df\1\u02d3\1\u02cf\1\u02f9\2\uffff\1\u02de\1\u02e0"+
            "\1\u02dc\1\u02dd\1\u02d6\1\u02d7\1\u02d8\1\u02d9\1\u02d5\1\u02d4"+
            "\1\u02d1\1\u02d2\1\uffff\1\u02fb\2\uffff\1\u02cd",
            "\1\u033b\1\u033c\1\u033d\1\u033e\1\u033f\1\u031d\1\u031c\1"+
            "\u033a\2\uffff\1\u0327\1\u0328\14\uffff\1\u0331\1\u0333\1\u0330"+
            "\1\u0332\1\u0329\7\uffff\1\u0316\1\uffff\1\u031e\1\u031f\1\uffff"+
            "\1\u032b\2\uffff\1\u0320\3\uffff\1\u0324\1\uffff\1\u0321\1\u032e"+
            "\1\u032f\7\uffff\1\u032d\27\uffff\1\u0339\1\u0338\1\u0337\6"+
            "\uffff\1\u0322\3\uffff\1\u032a\3\uffff\1\u032c\u0097\uffff\1"+
            "\u0326\1\uffff\1\u0315\1\u0306\1\u0309\1\u0325\1\u0308\1\u0335"+
            "\1\u030b\1\u031a\1\u030e\1\u030a\1\u0334\2\uffff\1\u0319\1\u031b"+
            "\1\u0317\1\u0318\1\u0311\1\u0312\1\u0313\1\u0314\1\u0310\1\u030f"+
            "\1\u030c\1\u030d\1\uffff\1\u0336\2\uffff\1\u0307",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0375\1\u0376\1\u0377\1\u0378\1\u0379\1\u0357\1\u0356\1"+
            "\u0374\2\uffff\1\u0361\1\u0362\14\uffff\1\u036b\1\u036d\1\u036a"+
            "\1\u036c\1\u0363\7\uffff\1\u0350\1\uffff\1\u0358\1\u0359\1\uffff"+
            "\1\u0365\2\uffff\1\u035a\3\uffff\1\u035e\1\uffff\1\u035b\1\u0368"+
            "\1\u0369\7\uffff\1\u0367\27\uffff\1\u0373\1\u0372\1\u0371\6"+
            "\uffff\1\u035c\3\uffff\1\u0364\3\uffff\1\u0366\u0097\uffff\1"+
            "\u0360\1\uffff\1\u034f\1\u0341\1\u0340\1\u035f\1\u0343\1\u036f"+
            "\1\u0345\1\u0354\1\u0348\1\u0344\1\u036e\2\uffff\1\u0353\1\u0355"+
            "\1\u0351\1\u0352\1\u034b\1\u034c\1\u034d\1\u034e\1\u034a\1\u0349"+
            "\1\u0346\1\u0347\1\uffff\1\u0370\2\uffff\1\u0342",
            "\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u0390\1\u038f\1"+
            "\u03ad\2\uffff\1\u039a\1\u039b\14\uffff\1\u03a4\1\u03a6\1\u03a3"+
            "\1\u03a5\1\u039c\7\uffff\1\u0389\1\uffff\1\u0391\1\u0392\1\uffff"+
            "\1\u039e\2\uffff\1\u0393\3\uffff\1\u0397\1\uffff\1\u0394\1\u03a1"+
            "\1\u03a2\7\uffff\1\u03a0\27\uffff\1\u03ac\1\u03ab\1\u03aa\6"+
            "\uffff\1\u0395\3\uffff\1\u039d\3\uffff\1\u039f\u0097\uffff\1"+
            "\u0399\1\uffff\1\u0388\1\u03b3\1\u037a\1\u0398\1\u037c\1\u03a8"+
            "\1\u037e\1\u038d\1\u0381\1\u037d\1\u03a7\2\uffff\1\u038c\1\u038e"+
            "\1\u038a\1\u038b\1\u0384\1\u0385\1\u0386\1\u0387\1\u0383\1\u0382"+
            "\1\u037f\1\u0380\1\uffff\1\u03a9\2\uffff\1\u037b",
            "\1\u03e8\1\u03e9\1\u03ea\1\u03eb\1\u03ec\1\u03ca\1\u03c9\1"+
            "\u03e7\2\uffff\1\u03d4\1\u03d5\14\uffff\1\u03de\1\u03e0\1\u03dd"+
            "\1\u03df\1\u03d6\7\uffff\1\u03c3\1\uffff\1\u03cb\1\u03cc\1\uffff"+
            "\1\u03d8\2\uffff\1\u03cd\3\uffff\1\u03d1\1\uffff\1\u03ce\1\u03db"+
            "\1\u03dc\7\uffff\1\u03da\27\uffff\1\u03e6\1\u03e5\1\u03e4\6"+
            "\uffff\1\u03cf\3\uffff\1\u03d7\3\uffff\1\u03d9\u0097\uffff\1"+
            "\u03d3\1\uffff\1\u03c2\1\u03ed\1\u03b4\1\u03d2\1\u03b6\1\u03e2"+
            "\1\u03b8\1\u03c7\1\u03bb\1\u03b7\1\u03e1\2\uffff\1\u03c6\1\u03c8"+
            "\1\u03c4\1\u03c5\1\u03be\1\u03bf\1\u03c0\1\u03c1\1\u03bd\1\u03bc"+
            "\1\u03b9\1\u03ba\1\uffff\1\u03e3\2\uffff\1\u03b5",
            "\1\u0423\1\u0424\1\u0425\1\u0426\1\u0427\1\u0405\1\u0404\1"+
            "\u0422\2\uffff\1\u040f\1\u0410\14\uffff\1\u0419\1\u041b\1\u0418"+
            "\1\u041a\1\u0411\7\uffff\1\u03fe\1\uffff\1\u0406\1\u0407\1\uffff"+
            "\1\u0413\2\uffff\1\u0408\3\uffff\1\u040c\1\uffff\1\u0409\1\u0416"+
            "\1\u0417\7\uffff\1\u0415\27\uffff\1\u0421\1\u0420\1\u041f\6"+
            "\uffff\1\u040a\3\uffff\1\u0412\3\uffff\1\u0414\u0097\uffff\1"+
            "\u040e\1\uffff\1\u03fd\1\u03ee\1\u03f1\1\u040d\1\u03f0\1\u041d"+
            "\1\u03f3\1\u0402\1\u03f6\1\u03f2\1\u041c\2\uffff\1\u0401\1\u0403"+
            "\1\u03ff\1\u0400\1\u03f9\1\u03fa\1\u03fb\1\u03fc\1\u03f8\1\u03f7"+
            "\1\u03f4\1\u03f5\1\uffff\1\u041e\2\uffff\1\u03ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u043c\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0456\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0470\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d8\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u048a\2\uffff\3\u0113\4\uffff\14"+
            "\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "1269:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_0 = input.LA(1);

                         
                        int index194_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_0==IDENT) ) {s = 1;}

                        else if ( (LA194_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA194_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA194_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA194_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA194_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA194_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA194_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA194_0==MAX) ) {s = 9;}

                        else if ( (LA194_0==MIN) ) {s = 10;}

                        else if ( (LA194_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA194_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA194_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA194_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA194_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA194_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA194_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA194_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA194_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA194_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA194_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA194_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA194_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA194_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA194_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA194_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA194_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA194_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA194_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA194_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA194_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA194_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA194_0==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA194_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA194_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA194_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA194_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA194_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA194_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA194_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA194_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA194_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                         
                        input.seek(index194_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_1 = input.LA(1);

                         
                        int index194_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_1==LPAREN) ) {s = 43;}

                        else if ( (LA194_1==DOT) ) {s = 44;}

                        else if ( (LA194_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA194_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA194_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA194_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA194_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA194_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA194_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA194_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA194_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA194_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA194_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA194_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA194_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA194_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA194_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA194_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA194_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA194_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA194_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA194_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA194_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA194_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA194_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA194_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA194_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA194_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA194_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA194_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA194_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA194_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA194_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA194_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA194_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA194_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA194_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA194_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA194_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA194_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA194_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA194_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA194_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA194_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA194_1==END) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA194_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA194_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA194_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA194_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA194_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA194_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA194_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA194_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA194_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA194_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA194_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA194_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA194_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                         
                        input.seek(index194_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA194_2 = input.LA(1);

                         
                        int index194_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA194_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA194_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA194_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA194_2==DOT) ) {s = 105;}

                        else if ( (LA194_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA194_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA194_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA194_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA194_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA194_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA194_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA194_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA194_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA194_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA194_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA194_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA194_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA194_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA194_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA194_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA194_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA194_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA194_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA194_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA194_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA194_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA194_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA194_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA194_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA194_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA194_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA194_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA194_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA194_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA194_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA194_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA194_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA194_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA194_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA194_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA194_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA194_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA194_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA194_2==END) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA194_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA194_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA194_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA194_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA194_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA194_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA194_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA194_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA194_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA194_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA194_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA194_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA194_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                         
                        input.seek(index194_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA194_9 = input.LA(1);

                         
                        int index194_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_9==LPAREN) ) {s = 159;}

                        else if ( (LA194_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA194_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA194_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA194_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA194_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA194_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA194_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA194_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA194_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA194_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA194_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA194_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA194_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA194_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA194_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA194_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA194_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA194_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA194_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA194_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA194_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA194_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA194_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA194_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA194_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA194_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA194_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA194_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA194_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA194_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA194_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA194_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA194_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA194_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA194_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA194_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA194_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA194_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA194_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA194_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA194_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA194_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA194_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA194_9==END) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA194_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA194_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA194_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA194_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA194_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA194_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA194_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA194_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA194_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA194_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA194_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA194_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA194_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                         
                        input.seek(index194_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA194_10 = input.LA(1);

                         
                        int index194_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA194_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA194_10==LPAREN) ) {s = 219;}

                        else if ( (LA194_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA194_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA194_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA194_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA194_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA194_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA194_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA194_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA194_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA194_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA194_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA194_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA194_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA194_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA194_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA194_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA194_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA194_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA194_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA194_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA194_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA194_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA194_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA194_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA194_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA194_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA194_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA194_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA194_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA194_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA194_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA194_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA194_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA194_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA194_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA194_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA194_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA194_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA194_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA194_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA194_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA194_10==END) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA194_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA194_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA194_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA194_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA194_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA194_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA194_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA194_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA194_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA194_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA194_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA194_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA194_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                         
                        input.seek(index194_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA194_44 = input.LA(1);

                         
                        int index194_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_44==IDENT) ) {s = 338;}

                        else if ( (LA194_44==MAX) ) {s = 339;}

                        else if ( (LA194_44==MIN) ) {s = 340;}

                        else if ( (LA194_44==TICKED_STRING_LITERAL) ) {s = 341;}

                        else if ( (LA194_44==AT) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA194_44==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA194_44==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA194_44==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA194_44==SUM) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA194_44==AVG) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA194_44==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA194_44==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA194_44==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA194_44==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA194_44==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA194_44==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA194_44==LAST) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA194_44==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA194_44==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA194_44==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA194_44==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA194_44==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA194_44==SQL) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA194_44==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA194_44==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA194_44==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA194_44==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA194_44==LW) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA194_44==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA194_44==CAST) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA194_44==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA194_44==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA194_44==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA194_44==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA194_44==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA194_44==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA194_44==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA194_44==FULL) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA194_44==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA194_44==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA194_44==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA194_44==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                         
                        input.seek(index194_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA194_105 = input.LA(1);

                         
                        int index194_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_105==IDENT) ) {s = 380;}

                        else if ( (LA194_105==MAX) ) {s = 381;}

                        else if ( (LA194_105==MIN) ) {s = 382;}

                        else if ( (LA194_105==TICKED_STRING_LITERAL) ) {s = 383;}

                        else if ( (LA194_105==AT) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA194_105==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA194_105==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA194_105==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA194_105==SUM) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA194_105==AVG) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA194_105==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA194_105==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA194_105==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA194_105==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA194_105==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA194_105==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA194_105==LAST) && (synpred4_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA194_105==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA194_105==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA194_105==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA194_105==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA194_105==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA194_105==SQL) && (synpred4_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA194_105==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA194_105==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA194_105==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA194_105==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA194_105==LW) && (synpred4_EsperEPL2Grammar())) {s = 407;}

                        else if ( (LA194_105==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 408;}

                        else if ( (LA194_105==CAST) && (synpred4_EsperEPL2Grammar())) {s = 409;}

                        else if ( (LA194_105==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 410;}

                        else if ( (LA194_105==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 411;}

                        else if ( (LA194_105==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 412;}

                        else if ( (LA194_105==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 413;}

                        else if ( (LA194_105==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 414;}

                        else if ( (LA194_105==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 415;}

                        else if ( (LA194_105==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 416;}

                        else if ( (LA194_105==FULL) && (synpred4_EsperEPL2Grammar())) {s = 417;}

                        else if ( (LA194_105==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 418;}

                        else if ( (LA194_105==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 419;}

                        else if ( (LA194_105==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 420;}

                        else if ( (LA194_105==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 421;}

                         
                        input.seek(index194_105);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA194_338 = input.LA(1);

                         
                        int index194_338 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_338==LPAREN) ) {s = 600;}

                        else if ( (LA194_338==DOT) ) {s = 601;}

                        else if ( (LA194_338==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA194_338==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA194_338==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA194_338==STAR) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA194_338==DIV) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA194_338==MOD) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA194_338==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA194_338==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA194_338==LOR) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA194_338==LT) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA194_338==GT) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA194_338==LE) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA194_338==GE) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA194_338==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA194_338==IS) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA194_338==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA194_338==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA194_338==BAND) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA194_338==BOR) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA194_338==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA194_338==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA194_338==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA194_338==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA194_338==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA194_338==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA194_338==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA194_338==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA194_338==EOF) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA194_338==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA194_338==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA194_338==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA194_338==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA194_338==AS) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA194_338==FROM) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA194_338==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA194_338==ALL) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA194_338==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA194_338==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA194_338==ASC) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA194_338==DESC) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA194_338==THEN) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA194_338==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA194_338==END) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA194_338==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA194_338==COLON) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA194_338==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA194_338==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA194_338==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA194_338==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA194_338==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA194_338==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA194_338==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA194_338==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA194_338==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA194_338==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA194_338==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                         
                        input.seek(index194_338);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA194_339 = input.LA(1);

                         
                        int index194_339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_339==LPAREN) ) {s = 658;}

                        else if ( (LA194_339==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA194_339==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA194_339==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA194_339==STAR) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA194_339==DIV) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA194_339==MOD) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA194_339==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA194_339==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA194_339==LOR) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA194_339==LT) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA194_339==GT) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA194_339==LE) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA194_339==GE) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA194_339==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA194_339==IS) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA194_339==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA194_339==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA194_339==BAND) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA194_339==BOR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA194_339==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA194_339==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA194_339==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA194_339==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA194_339==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA194_339==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA194_339==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA194_339==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA194_339==EOF) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA194_339==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA194_339==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA194_339==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA194_339==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA194_339==AS) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA194_339==FROM) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA194_339==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA194_339==ALL) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA194_339==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA194_339==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA194_339==ASC) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA194_339==DESC) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA194_339==THEN) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA194_339==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA194_339==END) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA194_339==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA194_339==COLON) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA194_339==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA194_339==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA194_339==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA194_339==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA194_339==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA194_339==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA194_339==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA194_339==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA194_339==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA194_339==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA194_339==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA194_339==DOT) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                         
                        input.seek(index194_339);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA194_340 = input.LA(1);

                         
                        int index194_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_340==LPAREN) ) {s = 716;}

                        else if ( (LA194_340==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA194_340==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA194_340==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA194_340==STAR) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA194_340==DIV) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA194_340==MOD) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA194_340==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA194_340==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA194_340==LOR) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA194_340==LT) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA194_340==GT) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA194_340==LE) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA194_340==GE) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA194_340==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA194_340==IS) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA194_340==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA194_340==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA194_340==BAND) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA194_340==BOR) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA194_340==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA194_340==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA194_340==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA194_340==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA194_340==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA194_340==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA194_340==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA194_340==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA194_340==EOF) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA194_340==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA194_340==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA194_340==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA194_340==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA194_340==AS) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA194_340==FROM) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA194_340==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA194_340==ALL) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA194_340==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA194_340==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA194_340==ASC) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA194_340==DESC) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA194_340==THEN) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA194_340==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA194_340==END) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA194_340==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA194_340==COLON) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA194_340==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA194_340==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA194_340==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA194_340==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA194_340==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA194_340==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA194_340==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA194_340==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA194_340==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA194_340==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA194_340==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA194_340==DOT) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                         
                        input.seek(index194_340);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA194_341 = input.LA(1);

                         
                        int index194_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_341==DOT) ) {s = 774;}

                        else if ( (LA194_341==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA194_341==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA194_341==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA194_341==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA194_341==STAR) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA194_341==DIV) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA194_341==MOD) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA194_341==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA194_341==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA194_341==LOR) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA194_341==LT) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA194_341==GT) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA194_341==LE) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA194_341==GE) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA194_341==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA194_341==IS) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA194_341==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA194_341==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA194_341==BAND) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA194_341==BOR) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA194_341==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA194_341==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA194_341==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA194_341==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA194_341==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA194_341==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA194_341==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA194_341==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA194_341==EOF) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA194_341==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA194_341==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA194_341==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA194_341==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA194_341==AS) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA194_341==FROM) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA194_341==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA194_341==ALL) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA194_341==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA194_341==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA194_341==ASC) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA194_341==DESC) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA194_341==THEN) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA194_341==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA194_341==END) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA194_341==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA194_341==COLON) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA194_341==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA194_341==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA194_341==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA194_341==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA194_341==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA194_341==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA194_341==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA194_341==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA194_341==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA194_341==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA194_341==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                         
                        input.seek(index194_341);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA194_380 = input.LA(1);

                         
                        int index194_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_380==LPAREN) ) {s = 832;}

                        else if ( (LA194_380==DOT) ) {s = 833;}

                        else if ( (LA194_380==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA194_380==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA194_380==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA194_380==STAR) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA194_380==DIV) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA194_380==MOD) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA194_380==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA194_380==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA194_380==LOR) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA194_380==LT) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA194_380==GT) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA194_380==LE) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA194_380==GE) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA194_380==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA194_380==IS) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA194_380==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA194_380==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA194_380==BAND) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA194_380==BOR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA194_380==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA194_380==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA194_380==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA194_380==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA194_380==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA194_380==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA194_380==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA194_380==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA194_380==EOF) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA194_380==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA194_380==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA194_380==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA194_380==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA194_380==AS) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA194_380==FROM) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA194_380==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA194_380==ALL) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA194_380==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA194_380==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA194_380==ASC) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA194_380==DESC) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA194_380==THEN) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA194_380==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA194_380==END) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA194_380==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA194_380==COLON) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA194_380==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA194_380==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA194_380==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA194_380==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA194_380==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA194_380==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA194_380==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA194_380==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA194_380==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA194_380==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA194_380==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                         
                        input.seek(index194_380);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA194_381 = input.LA(1);

                         
                        int index194_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_381==LPAREN) ) {s = 890;}

                        else if ( (LA194_381==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA194_381==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA194_381==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA194_381==STAR) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA194_381==DIV) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA194_381==MOD) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA194_381==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA194_381==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA194_381==LOR) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA194_381==LT) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA194_381==GT) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA194_381==LE) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA194_381==GE) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA194_381==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA194_381==IS) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA194_381==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA194_381==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA194_381==BAND) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA194_381==BOR) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA194_381==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA194_381==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA194_381==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA194_381==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA194_381==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA194_381==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA194_381==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA194_381==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA194_381==EOF) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA194_381==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA194_381==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA194_381==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA194_381==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA194_381==AS) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA194_381==FROM) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA194_381==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA194_381==ALL) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA194_381==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA194_381==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA194_381==ASC) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA194_381==DESC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA194_381==THEN) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA194_381==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA194_381==END) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA194_381==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA194_381==COLON) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA194_381==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA194_381==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA194_381==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA194_381==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA194_381==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA194_381==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA194_381==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA194_381==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA194_381==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA194_381==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA194_381==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA194_381==DOT) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                         
                        input.seek(index194_381);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA194_382 = input.LA(1);

                         
                        int index194_382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_382==LPAREN) ) {s = 948;}

                        else if ( (LA194_382==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA194_382==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA194_382==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA194_382==STAR) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA194_382==DIV) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA194_382==MOD) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA194_382==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA194_382==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA194_382==LOR) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA194_382==LT) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA194_382==GT) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA194_382==LE) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA194_382==GE) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA194_382==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA194_382==IS) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA194_382==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA194_382==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA194_382==BAND) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA194_382==BOR) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA194_382==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA194_382==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA194_382==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA194_382==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA194_382==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA194_382==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA194_382==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA194_382==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA194_382==EOF) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA194_382==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA194_382==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA194_382==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA194_382==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA194_382==AS) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA194_382==FROM) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA194_382==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA194_382==ALL) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA194_382==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA194_382==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA194_382==ASC) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA194_382==DESC) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA194_382==THEN) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA194_382==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA194_382==END) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA194_382==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA194_382==COLON) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA194_382==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA194_382==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA194_382==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA194_382==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA194_382==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA194_382==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA194_382==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA194_382==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA194_382==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA194_382==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA194_382==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA194_382==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                         
                        input.seek(index194_382);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA194_383 = input.LA(1);

                         
                        int index194_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_383==DOT) ) {s = 1006;}

                        else if ( (LA194_383==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA194_383==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA194_383==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA194_383==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA194_383==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA194_383==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA194_383==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA194_383==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA194_383==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA194_383==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA194_383==LT) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA194_383==GT) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA194_383==LE) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA194_383==GE) && (synpred4_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA194_383==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA194_383==IS) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA194_383==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA194_383==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA194_383==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA194_383==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA194_383==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA194_383==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA194_383==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA194_383==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA194_383==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA194_383==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA194_383==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA194_383==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA194_383==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA194_383==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA194_383==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA194_383==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA194_383==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA194_383==AS) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA194_383==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA194_383==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA194_383==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA194_383==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA194_383==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA194_383==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA194_383==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA194_383==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA194_383==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA194_383==END) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA194_383==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA194_383==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA194_383==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA194_383==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA194_383==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA194_383==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA194_383==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA194_383==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA194_383==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA194_383==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA194_383==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA194_383==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA194_383==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1063;}

                         
                        input.seek(index194_383);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA194_568 = input.LA(1);

                         
                        int index194_568 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_568);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA194_594 = input.LA(1);

                         
                        int index194_594 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_594);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA194_600 = input.LA(1);

                         
                        int index194_600 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_600);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA194_601 = input.LA(1);

                         
                        int index194_601 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_601);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA194_658 = input.LA(1);

                         
                        int index194_658 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_658);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA194_716 = input.LA(1);

                         
                        int index194_716 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_716);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA194_774 = input.LA(1);

                         
                        int index194_774 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_774);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA194_832 = input.LA(1);

                         
                        int index194_832 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_832);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA194_833 = input.LA(1);

                         
                        int index194_833 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_833);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA194_890 = input.LA(1);

                         
                        int index194_890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_890);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA194_948 = input.LA(1);

                         
                        int index194_948 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_948);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA194_1006 = input.LA(1);

                         
                        int index194_1006 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_1006);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA194_1084 = input.LA(1);

                         
                        int index194_1084 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_1084);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA194_1110 = input.LA(1);

                         
                        int index194_1110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_1110);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA194_1136 = input.LA(1);

                         
                        int index194_1136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_1136);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA194_1162 = input.LA(1);

                         
                        int index194_1162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index194_1162);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA240_eotS =
        "\u0229\uffff";
    static final String DFA240_eofS =
        "\u0229\uffff";
    static final String DFA240_minS =
        "\1\5\2\0\6\6\64\uffff\1\u0103\125\uffff\3\0\64\uffff\3\0\54\uffff"+
        "\3\0\47\uffff\3\0\55\uffff\3\0\51\uffff\3\0\u00a7\uffff";
    static final String DFA240_maxS =
        "\1\u0125\2\0\4\u011d\1\u0122\1\u011d\64\uffff\1\u011c\125\uffff"+
        "\3\0\64\uffff\3\0\54\uffff\3\0\47\uffff\3\0\55\uffff\3\0\51\uffff"+
        "\3\0\u00a7\uffff";
    static final String DFA240_acceptS =
        "\11\uffff\64\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\7\1\10"+
        "\10\3\3\uffff\2\3\1\5\61\4\3\uffff\7\4\2\3\1\7\2\3\1\10\6\3\1\5"+
        "\2\3\1\5\25\4\3\uffff\7\4\1\7\1\10\10\3\1\5\25\4\3\uffff\7\4\2\3"+
        "\1\7\5\3\1\10\3\3\32\4\3\uffff\7\4\10\3\1\10\1\5\2\3\1\7\25\4\3"+
        "\uffff\7\4\1\10\2\3\1\7\5\3\1\5\3\3\1\6\1\12\u0091\uffff";
    static final String DFA240_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\64\uffff\1\11\125\uffff\1"+
        "\12\1\13\1\14\64\uffff\1\15\1\16\1\17\54\uffff\1\20\1\21\1\22\47"+
        "\uffff\1\23\1\24\1\25\55\uffff\1\26\1\27\1\30\51\uffff\1\31\1\32"+
        "\1\33\u00a7\uffff}>";
    static final String[] DFA240_transitionS = {
            "\1\60\4\uffff\1\25\2\uffff\1\74\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\63\1\uffff"+
            "\1\65\1\61\1\62\1\64\12\uffff\1\37\1\40\1\1\11\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\71\1\52\1\2\1\53\1\54\1"+
            "\72\1\uffff\1\55\1\uffff\1\56\1\44\1\23\1\57\14\uffff\1\16\1"+
            "\17\1\20\5\uffff\1\66\1\67\1\70\u008a\uffff\1\6\16\uffff\1\7"+
            "\2\uffff\1\21\1\uffff\1\76\1\uffff\1\75\1\uffff\1\13\1\10\1"+
            "\uffff\1\14\1\15\11\uffff\1\12\2\uffff\1\73\1\uffff\1\3\2\uffff"+
            "\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\uffff\1\u00ab\1\u00aa\1"+
            "\u00b0\7\uffff\1\u008f\24\uffff\1\u00a4\12\uffff\1\u0089\3\uffff"+
            "\1\u00ac\1\u00ad\15\uffff\1\u008a\13\uffff\1\u008c\1\u008b\1"+
            "\u0097\1\u0096\1\u008e\1\u008d\1\u0095\1\u0094\1\u0093\1\u0092"+
            "\1\u0091\1\u0090\u00a3\uffff\1\u00ae\1\uffff\1\u00a3\2\uffff"+
            "\1\u00af\2\uffff\1\u0099\1\u00a8\1\u009c\1\uffff\1\u0098\2\uffff"+
            "\1\u00a7\1\u00a9\1\u00a5\1\u00a6\1\u009f\1\u00a0\1\u00a1\1\u00a2"+
            "\1\u009e\1\u009d\1\u009a\1\u009b",
            "\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\uffff\1\u00c7\1\u00c6\1"+
            "\u00cf\7\uffff\1\u00dc\24\uffff\1\u00c0\12\uffff\1\u00d6\3\uffff"+
            "\1\u00c8\1\u00c9\15\uffff\1\u00d9\13\uffff\1\u00d8\1\u00d7\1"+
            "\u00d5\1\u00d4\1\u00db\1\u00da\1\u00cc\1\u00cb\1\u00ca\1\u00df"+
            "\1\u00de\1\u00dd\u00a3\uffff\1\u00cd\1\uffff\1\u00bf\2\uffff"+
            "\1\u00ce\2\uffff\1\u00b5\1\u00c4\1\u00b8\1\uffff\1\u00e0\2\uffff"+
            "\1\u00c3\1\u00c5\1\u00c1\1\u00c2\1\u00bb\1\u00bc\1\u00bd\1\u00be"+
            "\1\u00ba\1\u00b9\1\u00b6\1\u00b7",
            "\1\u00ff\1\u0100\1\u0101\1\u0102\1\uffff\1\u00f6\1\u00f5\1"+
            "\u00fe\7\uffff\1\u010c\24\uffff\1\u00ef\12\uffff\1\u0103\3\uffff"+
            "\1\u00f7\1\u00f8\15\uffff\1\u0104\13\uffff\1\u0106\1\u0105\1"+
            "\u00e2\1\u00e1\1\u010b\1\u010a\1\u00fb\1\u00fa\1\u00f9\1\u0109"+
            "\1\u0108\1\u0107\u00a3\uffff\1\u00fc\1\uffff\1\u00ee\2\uffff"+
            "\1\u00fd\2\uffff\1\u00e4\1\u00f3\1\u00e7\1\uffff\1\u00e3\2\uffff"+
            "\1\u00f2\1\u00f4\1\u00f0\1\u00f1\1\u00ea\1\u00eb\1\u00ec\1\u00ed"+
            "\1\u00e9\1\u00e8\1\u00e5\1\u00e6",
            "\1\u0129\1\u012a\1\u012b\1\u012c\1\uffff\1\u0120\1\u011f\1"+
            "\u0128\7\uffff\1\u0138\24\uffff\1\u0119\12\uffff\1\u012f\3\uffff"+
            "\1\u0121\1\u0122\15\uffff\1\u0135\13\uffff\1\u0131\1\u0130\1"+
            "\u012e\1\u012d\1\u0137\1\u0136\1\u0125\1\u0124\1\u0123\1\u0134"+
            "\1\u0133\1\u0132\u00a3\uffff\1\u0126\1\uffff\1\u0118\2\uffff"+
            "\1\u0127\2\uffff\1\u010e\1\u011d\1\u0111\1\uffff\1\u010d\2\uffff"+
            "\1\u011c\1\u011e\1\u011a\1\u011b\1\u0114\1\u0115\1\u0116\1\u0117"+
            "\1\u0113\1\u0112\1\u010f\1\u0110",
            "\1\u0159\1\u015a\1\u015b\1\u015c\1\uffff\1\u0150\1\u014f\1"+
            "\u0158\7\uffff\1\u015f\24\uffff\1\u0149\12\uffff\1\u0169\3\uffff"+
            "\1\u0151\1\u0152\15\uffff\1\u0165\13\uffff\1\u0161\1\u0160\1"+
            "\u0168\1\u0167\1\u015e\1\u015d\1\u0155\1\u0154\1\u0153\1\u0164"+
            "\1\u0163\1\u0162\u00a3\uffff\1\u0156\1\uffff\1\u0148\1\u013d"+
            "\1\u013b\1\u0157\1\u013a\1\uffff\1\u013e\1\u014d\1\u0141\1\u013c"+
            "\1\u0166\2\uffff\1\u014c\1\u014e\1\u014a\1\u014b\1\u0144\1\u0145"+
            "\1\u0146\1\u0147\1\u0143\1\u0142\1\u013f\1\u0140\4\uffff\1\u0139",
            "\1\u0185\1\u0186\1\u0187\1\u0188\1\uffff\1\u017c\1\u017b\1"+
            "\u0184\7\uffff\1\u0195\24\uffff\1\u0175\12\uffff\1\u018c\3\uffff"+
            "\1\u017d\1\u017e\15\uffff\1\u0189\13\uffff\1\u0191\1\u0190\1"+
            "\u018b\1\u018a\1\u0194\1\u0193\1\u0181\1\u0180\1\u017f\1\u018f"+
            "\1\u018e\1\u018d\u00a3\uffff\1\u0182\1\uffff\1\u0174\2\uffff"+
            "\1\u0183\2\uffff\1\u016a\1\u0179\1\u016d\1\uffff\1\u0192\2\uffff"+
            "\1\u0178\1\u017a\1\u0176\1\u0177\1\u0170\1\u0171\1\u0172\1\u0173"+
            "\1\u016f\1\u016e\1\u016b\1\u016c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0197\4\uffff\1\u0197\23\uffff\1\u0196",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
    static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
    static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
    static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
    static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
    static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
    static final short[][] DFA240_transition;

    static {
        int numStates = DFA240_transitionS.length;
        DFA240_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
        }
    }

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = DFA240_eot;
            this.eof = DFA240_eof;
            this.min = DFA240_min;
            this.max = DFA240_max;
            this.accept = DFA240_accept;
            this.special = DFA240_special;
            this.transition = DFA240_transition;
        }
        public String getDescription() {
            return "1480:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_0 = input.LA(1);

                         
                        int index240_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_0==LAST) ) {s = 1;}

                        else if ( (LA240_0==LW) ) {s = 2;}

                        else if ( (LA240_0==NUM_INT) ) {s = 3;}

                        else if ( (LA240_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA240_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA240_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA240_0==IDENT) ) {s = 7;}

                        else if ( (LA240_0==QUESTION) ) {s = 8;}

                        else if ( (LA240_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA240_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA240_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA240_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA240_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA240_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA240_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA240_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA240_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA240_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA240_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA240_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA240_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA240_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA240_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA240_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA240_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA240_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA240_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA240_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA240_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA240_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA240_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA240_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA240_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA240_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA240_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA240_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA240_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA240_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA240_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA240_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA240_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA240_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA240_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA240_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA240_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA240_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA240_0==INDEX) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA240_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA240_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA240_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA240_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA240_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA240_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA240_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA240_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA240_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA240_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA240_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA240_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA240_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA240_0==STAR) ) {s = 61;}

                        else if ( (LA240_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 62;}

                         
                        input.seek(index240_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA240_1 = input.LA(1);

                         
                        int index240_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 99;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index240_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA240_2 = input.LA(1);

                         
                        int index240_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 136;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index240_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA240_3 = input.LA(1);

                         
                        int index240_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA240_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA240_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA240_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA240_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA240_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA240_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA240_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA240_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA240_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA240_3==TIMEPERIOD_SECONDS) ) {s = 147;}

                        else if ( (LA240_3==TIMEPERIOD_SECOND) ) {s = 148;}

                        else if ( (LA240_3==TIMEPERIOD_SEC) ) {s = 149;}

                        else if ( (LA240_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA240_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA240_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA240_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA240_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA240_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA240_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA240_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA240_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA240_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA240_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA240_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA240_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA240_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA240_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA240_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA240_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA240_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA240_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA240_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA240_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA240_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA240_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA240_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA240_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA240_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA240_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA240_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA240_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA240_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA240_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 180;}

                         
                        input.seek(index240_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA240_4 = input.LA(1);

                         
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA240_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA240_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA240_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA240_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA240_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA240_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA240_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA240_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA240_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA240_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA240_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA240_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA240_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA240_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA240_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA240_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA240_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA240_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA240_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA240_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA240_4==TIMEPERIOD_SECONDS) ) {s = 202;}

                        else if ( (LA240_4==TIMEPERIOD_SECOND) ) {s = 203;}

                        else if ( (LA240_4==TIMEPERIOD_SEC) ) {s = 204;}

                        else if ( (LA240_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA240_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA240_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA240_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA240_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA240_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA240_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA240_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA240_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA240_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA240_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA240_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA240_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA240_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA240_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA240_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA240_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA240_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA240_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA240_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 224;}

                         
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA240_5 = input.LA(1);

                         
                        int index240_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA240_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA240_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA240_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA240_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA240_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA240_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA240_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA240_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA240_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA240_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA240_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA240_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA240_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA240_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA240_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA240_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA240_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA240_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA240_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA240_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA240_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA240_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA240_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA240_5==TIMEPERIOD_SECONDS) ) {s = 249;}

                        else if ( (LA240_5==TIMEPERIOD_SECOND) ) {s = 250;}

                        else if ( (LA240_5==TIMEPERIOD_SEC) ) {s = 251;}

                        else if ( (LA240_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA240_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA240_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA240_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA240_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA240_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA240_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA240_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA240_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA240_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA240_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA240_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA240_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA240_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA240_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA240_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA240_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 268;}

                         
                        input.seek(index240_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA240_6 = input.LA(1);

                         
                        int index240_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA240_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA240_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA240_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA240_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA240_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA240_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA240_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA240_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA240_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA240_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA240_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA240_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA240_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA240_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA240_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA240_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA240_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA240_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA240_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA240_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA240_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA240_6==TIMEPERIOD_SECONDS) ) {s = 291;}

                        else if ( (LA240_6==TIMEPERIOD_SECOND) ) {s = 292;}

                        else if ( (LA240_6==TIMEPERIOD_SEC) ) {s = 293;}

                        else if ( (LA240_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA240_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA240_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA240_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA240_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA240_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA240_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA240_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA240_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA240_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA240_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA240_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA240_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA240_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA240_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA240_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA240_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA240_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA240_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 312;}

                         
                        input.seek(index240_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA240_7 = input.LA(1);

                         
                        int index240_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA240_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA240_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA240_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA240_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA240_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA240_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA240_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA240_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA240_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA240_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA240_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA240_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA240_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA240_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA240_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA240_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA240_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA240_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA240_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA240_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA240_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA240_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA240_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA240_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA240_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA240_7==TIMEPERIOD_SECONDS) ) {s = 339;}

                        else if ( (LA240_7==TIMEPERIOD_SECOND) ) {s = 340;}

                        else if ( (LA240_7==TIMEPERIOD_SEC) ) {s = 341;}

                        else if ( (LA240_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA240_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA240_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA240_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA240_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA240_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA240_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA240_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA240_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA240_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA240_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA240_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA240_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA240_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA240_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA240_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA240_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA240_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA240_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA240_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 361;}

                         
                        input.seek(index240_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA240_8 = input.LA(1);

                         
                        int index240_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA240_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA240_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA240_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA240_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA240_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA240_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA240_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA240_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA240_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA240_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA240_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA240_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA240_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA240_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA240_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA240_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA240_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA240_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA240_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA240_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA240_8==TIMEPERIOD_SECONDS) ) {s = 383;}

                        else if ( (LA240_8==TIMEPERIOD_SECOND) ) {s = 384;}

                        else if ( (LA240_8==TIMEPERIOD_SEC) ) {s = 385;}

                        else if ( (LA240_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA240_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA240_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA240_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA240_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA240_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA240_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA240_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA240_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA240_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA240_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA240_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA240_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA240_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA240_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA240_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA240_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA240_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA240_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA240_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 405;}

                         
                        input.seek(index240_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA240_61 = input.LA(1);

                         
                        int index240_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_61==DIV) && (synpred11_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA240_61==COMMA||LA240_61==RPAREN) ) {s = 407;}

                         
                        input.seek(index240_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA240_147 = input.LA(1);

                         
                        int index240_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_147);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA240_148 = input.LA(1);

                         
                        int index240_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_148);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA240_149 = input.LA(1);

                         
                        int index240_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_149);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA240_202 = input.LA(1);

                         
                        int index240_202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_202);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA240_203 = input.LA(1);

                         
                        int index240_203 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_203);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA240_204 = input.LA(1);

                         
                        int index240_204 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_204);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA240_249 = input.LA(1);

                         
                        int index240_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_249);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA240_250 = input.LA(1);

                         
                        int index240_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_250);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA240_251 = input.LA(1);

                         
                        int index240_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_251);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA240_291 = input.LA(1);

                         
                        int index240_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_291);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA240_292 = input.LA(1);

                         
                        int index240_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_292);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA240_293 = input.LA(1);

                         
                        int index240_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_293);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA240_339 = input.LA(1);

                         
                        int index240_339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_339);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA240_340 = input.LA(1);

                         
                        int index240_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_340);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA240_341 = input.LA(1);

                         
                        int index240_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_341);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA240_383 = input.LA(1);

                         
                        int index240_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_383);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA240_384 = input.LA(1);

                         
                        int index240_384 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_384);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA240_385 = input.LA(1);

                         
                        int index240_385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index240_385);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1592 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000800000290L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1597 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1615 = new BitSet(new long[]{0x0040020008000010L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1621 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1651 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1681 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003148032110L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1737 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1741 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003948032110L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1853 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003148032000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1894 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003948032010L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2026 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x08000031C8032008L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2032 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003148032000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2074 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x08000039C8032018L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2080 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0020000000000000L,0x0800003948032010L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2168 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2171 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2177 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2180 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2184 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2187 = new BitSet(new long[]{0x0104300000010002L,0x0000004800000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2191 = new BitSet(new long[]{0x0104300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2197 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2200 = new BitSet(new long[]{0x0104300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2207 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2210 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2213 = new BitSet(new long[]{0x0104200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2220 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2223 = new BitSet(new long[]{0x0104000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2230 = new BitSet(new long[]{0x0130800080004000L,0x0000080800044000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2233 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2240 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2243 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2246 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002010L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2273 = new BitSet(new long[]{0x0040000008000000L,0x000000200000A000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2282 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2285 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2342 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2346 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2391 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2395 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_updateExpr2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2414 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2416 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2419 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2421 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2429 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2479 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2481 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2487 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2489 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2492 = new BitSet(new long[]{0x0100300400010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2496 = new BitSet(new long[]{0x0100300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2502 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2504 = new BitSet(new long[]{0x0100300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2513 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2515 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2517 = new BitSet(new long[]{0x0100200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2524 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2526 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2533 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2535 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2537 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002010L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2613 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2632 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2634 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2637 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2639 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2646 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2699 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2701 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2705 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2707 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2712 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2745 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2798 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2802 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2807 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2849 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2854 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment2881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2883 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2914 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2955 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2961 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00000008000000D0L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2966 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00000008000000D0L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2971 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00000008000000D0L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2980 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000090L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2984 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000090L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2988 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000090L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3003 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3022 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3039 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3042 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3131 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F4F7FL,0x0000000000000000L,0x0020000000000000L,0x0800003948032810L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3134 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3160 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3210 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3346 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F4F7FL,0x0000000000000000L,0x0020000000000000L,0x0800003948032810L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3389 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3417 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3448 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3452 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3459 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000890L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000890L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000110L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_variantList3589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000810L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3649 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3655 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_columnList3707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_columnList3709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3747 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3768 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3785 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3788 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3831 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3835 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3839 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3842 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3863 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3877 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3879 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3946 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3949 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3952 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3955 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3972 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4033 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4039 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4045 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4051 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4088 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4138 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4141 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4205 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4243 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4247 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4251 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4255 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4264 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4269 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_AS_in_streamExpression4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4280 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4286 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4381 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4387 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4394 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4399 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4405 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4411 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4417 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4467 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4469 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4474 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4505 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4510 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4537 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4576 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4622 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4626 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4630 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4634 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4638 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006800L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006800L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4951 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4953 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4982 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5116 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5182 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036B90L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5229 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5269 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5296 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5381 = new BitSet(new long[]{0x0030800080004002L,0x0000000000044000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5396 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5400 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5404 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5408 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5476 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5482 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5538 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_outputLimit5540 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5702 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5750 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5756 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002010L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002010L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5833 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5837 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5841 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5845 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5849 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5854 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5890 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_whenClause5893 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5895 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_whenClause5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5911 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_elseClause5914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5941 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5944 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5947 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5961 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_caseExpression5963 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5965 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5968 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6006 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6011 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6013 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6045 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6050 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6052 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C1000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6089 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6092 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6095 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C1000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6120 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6136 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300020L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6149 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6167 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6181 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6183 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6197 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6211 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6241 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300020L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6276 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6281 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300020L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6286 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300020L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6414 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6446 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6450 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6454 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6458 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6517 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6623 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6662 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6668 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008508L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6693 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6722 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000508L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6927 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6979 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6981 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7038 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7133 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7139 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008002000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7187 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7190 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008002000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030000800L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7213 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7216 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7219 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030000800L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7238 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7263 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7398 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7404 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7407 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr7410 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7420 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7428 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7464 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7471 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7476 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7487 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7544 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x08000039C8036890L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7550 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000008L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7585 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7589 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7594 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7609 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7613 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7618 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7633 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7645 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7650 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7685 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7689 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7694 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7709 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7713 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7718 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7733 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7737 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7742 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7767 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7772 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7778 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7794 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7800 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7821 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7839 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7866 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7869 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7892 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7927 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7932 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7938 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_firstAggregation7942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7972 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7977 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7983 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_lastAggregation7987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8025 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_maxFunc8028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8031 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_maxFunc8034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8037 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_maxFunc8040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_libFunction8086 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction8090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction8092 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction8099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent8129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8171 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8178 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8195 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8197 = new BitSet(new long[]{0x807803E80FFC4430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036090L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8245 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8286 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8291 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8293 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8325 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8330 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8332 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8367 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8376 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8443 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8449 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8457 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8463 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8587 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8592 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8636 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8642 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000290L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8646 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix8654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AT_in_observerExpression8728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8731 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036B90L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8792 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036B90L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000100000040L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008440L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange9026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange9039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9257 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9352 = new BitSet(new long[]{0x803801E80FFC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9355 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9357 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9359 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9363 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9368 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9373 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9432 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9482 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9485 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9537 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9613 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036990L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_expression_in_expressionList9834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9837 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036890L});
    public static final BitSet FOLLOW_expression_in_expressionList9840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9871 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00000727000F5FFFL,0x0000000000000000L,0x0020000000000000L,0x0800003948036A90L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10007 = new BitSet(new long[]{0x0600000000000002L,0x000000001C000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_number_in_rangeOperand10202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10322 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10326 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10328 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006810L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006810L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10498 = new BitSet(new long[]{0x803801E807FC4420L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000800000010L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004280L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10730 = new BitSet(new long[]{0x803801E807FC4422L,0x00000700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000000C00000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108006010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11337 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11341 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11343 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11405 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11409 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11411 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11473 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11477 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11479 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000003108002000L});
    public static final BitSet FOLLOW_number_in_numberconstant11729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9986 = new BitSet(new long[]{0x0000000000000002L});

}