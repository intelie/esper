// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-07-23 16:33:46

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "BOR", "PLUS", "QUESTION", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=165;
    public static final int FLOAT_SUFFIX=311;
    public static final int STAR=252;
    public static final int NUMERIC_PARAM_LIST=106;
    public static final int MOD=272;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=148;
    public static final int BSR=293;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=171;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=152;
    public static final int MATCHREC_PATTERN_CONCAT=236;
    public static final int INC=286;
    public static final int LNOT=282;
    public static final int RPAREN=251;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=259;
    public static final int BSR_ASSIGN=294;
    public static final int CAST_EXPR=200;
    public static final int MATCHES=103;
    public static final int STREAM_EXPR=147;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=264;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=115;
    public static final int LAST_AGGREG=224;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=109;
    public static final int FOLLOWED_BY=276;
    public static final int HOUR_PART=176;
    public static final int RBRACK=257;
    public static final int MATCHREC_PATTERN_NESTED=238;
    public static final int MATCH_UNTIL_RANGE_CLOSED=215;
    public static final int GE=268;
    public static final int METHOD_JOIN_EXPR=211;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=114;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=113;
    public static final int MINUS_ASSIGN=287;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=125;
    public static final int NUM_DOUBLE=232;
    public static final int INSERTINTO_STREAM_NAME=188;
    public static final int LCURLY=273;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=172;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=186;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=123;
    public static final int WS=303;
    public static final int EMAILAT=302;
    public static final int SUBSELECT_GROUP_EXPR=192;
    public static final int ON_SELECT_INSERT_EXPR=206;
    public static final int ESCAPECHAR=277;
    public static final int SL_COMMENT=304;
    public static final int NULL_TYPE=231;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=213;
    public static final int GT=266;
    public static final int BNOT=283;
    public static final int WHERE_EXPR=134;
    public static final int END=33;
    public static final int LAND=300;
    public static final int INNERJOIN_EXPR=149;
    public static final int NOT_REGEXP=183;
    public static final int MATCH_UNTIL_EXPR=212;
    public static final int EVENT_PROP_EXPR=156;
    public static final int LBRACK=256;
    public static final int VIEW_EXPR=131;
    public static final int ANNOTATION=220;
    public static final int LONG_TYPE=226;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=116;
    public static final int MATCHREC_PATTERN=234;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=278;
    public static final int ON_SELECT_EXPR=205;
    public static final int MINUTE_PART=177;
    public static final int PATTERN_NOT_EXPR=112;
    public static final int SQL_NE=263;
    public static final int SUM=18;
    public static final int HexDigit=309;
    public static final int LPAREN=250;
    public static final int IN_SUBSELECT_EXPR=194;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=240;
    public static final int NOT_IN_RANGE=190;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=178;
    public static final int MATCH_RECOGNIZE=99;
    public static final int IDENT=247;
    public static final int DATABASE_JOIN_EXPR=133;
    public static final int BXOR=262;
    public static final int PLUS=254;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=159;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=140;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=214;
    public static final int CREATE_VARIABLE_EXPR=210;
    public static final int CREATE_WINDOW_COL_TYPE=218;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=241;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=110;
    public static final int RIGHT_OUTERJOIN_EXPR=151;
    public static final int NUMBERSETSTAR=219;
    public static final int LAST_OPERATOR=197;
    public static final int PATTERN_FILTER_EXPR=111;
    public static final int EVAL_AND_EXPR=137;
    public static final int LEFT_OUTERJOIN_EXPR=150;
    public static final int EPL_EXPR=233;
    public static final int GROUP_BY_EXPR=153;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=157;
    public static final int MINUS=270;
    public static final int SEMI=301;
    public static final int STAR_ASSIGN=289;
    public static final int FIRST_AGGREG=223;
    public static final int COLON=258;
    public static final int EVAL_EQUALS_GROUP_EXPR=141;
    public static final int BAND_ASSIGN=299;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=166;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=180;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=160;
    public static final int SL=295;
    public static final int NOT_IN_SUBSELECT_EXPR=195;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=129;
    public static final int SR=291;
    public static final int RCURLY=274;
    public static final int PLUS_ASSIGN=285;
    public static final int EXISTS_SUBSELECT_EXPR=193;
    public static final int DAY_PART=175;
    public static final int EVENT_FILTER_IN=124;
    public static final int DIV=271;
    public static final int OBJECT_PARAM_ORDERED_EXPR=108;
    public static final int OctalEscape=308;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=179;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=144;
    public static final int LOR=269;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=187;
    public static final int EXPONENT=310;
    public static final int LT=265;
    public static final int PATTERN_INCL_EXPR=132;
    public static final int ORDER_BY_EXPR=154;
    public static final int BOOL_TYPE=230;
    public static final int MOD_ASSIGN=290;
    public static final int ANNOTATION_ARRAY=221;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=196;
    public static final int EQUALS=248;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=284;
    public static final int SL_ASSIGN=296;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int MATCHREC_AFTER_SKIP=239;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=174;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=142;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=227;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=126;
    public static final int ANNOTATION_VALUE=222;
    public static final int SUBSELECT_EXPR=191;
    public static final int NUMERIC_PARAM_RANGE=105;
    public static final int CONCAT=170;
    public static final int CLASS_IDENT=128;
    public static final int MATCHREC_PATTERN_ALTER=237;
    public static final int ON_EXPR=203;
    public static final int CREATE_WINDOW_EXPR=201;
    public static final int PROPERTY_SELECTION_STREAM=118;
    public static final int ON_DELETE_EXPR=204;
    public static final int NUM_LONG=279;
    public static final int ON=41;
    public static final int TIME_PERIOD=173;
    public static final int DOUBLE_TYPE=228;
    public static final int DELETE=76;
    public static final int INT_TYPE=225;
    public static final int MATCHREC_PARTITION=245;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=136;
    public static final int ORDER_ELEMENT_EXPR=155;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=199;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=229;
    public static final int NUM_INT=275;
    public static final int MATCHREC_DEFINE_ITEM=242;
    public static final int ON_SET_EXPR=209;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=280;
    public static final int ON_EXPR_FROM=208;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=306;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=117;
    public static final int WEEKDAY_OPERATOR=198;
    public static final int DEC=288;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=217;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=297;
    public static final int NUMERIC_PARAM_FREQUENCY=107;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=121;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=162;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int DEFINE=101;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=122;
    public static final int ML_COMMENT=305;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=161;
    public static final int BOR_ASSIGN=298;
    public static final int COMMA=246;
    public static final int IS=42;
    public static final int PARTITION=102;
    public static final int WHEN_LIMIT_EXPR=167;
    public static final int TIMEPERIOD_LIMIT_EXPR=164;
    public static final int SOME=49;
    public static final int EQUAL=281;
    public static final int BOR=253;
    public static final int MATCHREC_MEASURE_ITEM=244;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=127;
    public static final int IN_RANGE=189;
    public static final int DOT=249;
    public static final int MATCHREC_MEASURES=243;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=119;
    public static final int INSERTINTO_EXPR=168;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=135;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=216;
    public static final int EVAL_EQUALS_EXPR=139;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=182;
    public static final int EVENT_LIMIT_EXPR=163;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=181;
    public static final int EVAL_OR_EXPR=138;
    public static final int ON_SELECT_INSERT_OUTPUT=207;
    public static final int MEASURES=100;
    public static final int AFTER=104;
    public static final int BAND=261;
    public static final int MATCHREC_PATTERN_ATOM=235;
    public static final int QUOTED_STRING_LITERAL=260;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=255;
    public static final int OBSERVER_EXPR=130;
    public static final int EVENT_FILTER_IDENT=120;
    public static final int EVENT_PROP_MAPPED=158;
    public static final int UnicodeEscape=307;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=184;
    public static final int SELECTION_ELEMENT_EXPR=145;
    public static final int CREATE_WINDOW_SELECT_EXPR=202;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=169;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=146;
    public static final int SR_ASSIGN=292;
    public static final int LE=267;
    public static final int DBFROM_CLAUSE=185;
    public static final int EVAL_IDENT=143;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:499:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:500:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:500:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:500:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:500:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1532);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1537);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1541); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:505:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:506:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:506:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:506:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:506:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1555);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1561);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 509:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:509:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:509:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:512:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:513:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:513:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1591);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1595); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:520:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:521:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:521:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1617);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:521:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:521:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:521:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:521:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1625);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:521:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1629);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueNoEnum, elementValuePairsNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 522:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:522:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:522:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:522:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:525:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:526:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:526:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1677);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:526:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:526:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:526:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:526:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1685);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:526:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1689);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueEnum, elementValuePairsEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 527:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:527:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:527:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:527:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:530:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:531:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:531:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1735);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:531:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:531:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1738); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1741);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:534:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:535:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:535:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1762);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:535:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:535:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1765); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1768);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:538:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:539:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:539:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1795);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 540:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:540:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:543:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:544:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:544:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1836);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: i, elementValueEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:545:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:548:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:549:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:549:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1867);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:550:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:550:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:550:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1878);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 550:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:551:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1891);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:554:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:555:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:555:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1914);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:556:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:556:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:556:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1925);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 556:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:557:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1938);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:558:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1946);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:561:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:562:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:562:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:562:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:562:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1969);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:562:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:562:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1972); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1974);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:562:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:562:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum1985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:563:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:563:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:566:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:567:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:567:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:567:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:567:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2017);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:567:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:567:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2020); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2022);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:567:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:567:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 568:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:568:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:568:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:574:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr52 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr53 = null;



        try {
            // EsperEPL2Grammar.g:575:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt17=4;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                int LA17_3 = input.LA(2);

                if ( (LA17_3==WINDOW) ) {
                    alt17=2;
                }
                else if ( (LA17_3==VARIABLE) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:575:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2065);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:576:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2070);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:577:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2075);
                    createVariableExpr52=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:578:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2080);
                    onExpr53=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr53.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:581:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT54=null;
        Token SELECT56=null;
        Token FROM58=null;
        Token WHERE61=null;
        Token GROUP63=null;
        Token BY64=null;
        Token HAVING66=null;
        Token OUTPUT68=null;
        Token ORDER70=null;
        Token BY71=null;
        Token ROW_LIMIT_EXPR73=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr55 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause57 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause59 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog60 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause62 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr65 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause67 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit69 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr72 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit74 = null;


        CommonTree INSERT54_tree=null;
        CommonTree SELECT56_tree=null;
        CommonTree FROM58_tree=null;
        CommonTree WHERE61_tree=null;
        CommonTree GROUP63_tree=null;
        CommonTree BY64_tree=null;
        CommonTree HAVING66_tree=null;
        CommonTree OUTPUT68_tree=null;
        CommonTree ORDER70_tree=null;
        CommonTree BY71_tree=null;
        CommonTree ROW_LIMIT_EXPR73_tree=null;

        try {
            // EsperEPL2Grammar.g:582:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:582:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:582:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:582:5: INSERT insertIntoExpr
                    {
                    INSERT54=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2093); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2096);
                    insertIntoExpr55=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr55.getTree());

                    }
                    break;

            }

            SELECT56=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2102); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2105);
            selectClause57=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause57.getTree());
            FROM58=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2109); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2112);
            fromClause59=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause59.getTree());
            // EsperEPL2Grammar.g:585:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:585:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2116);
                    matchRecog60=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog60.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:586:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:586:4: WHERE whereClause
                    {
                    WHERE61=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2122); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2125);
                    whereClause62=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause62.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:587:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:587:4: GROUP BY groupByListExpr
                    {
                    GROUP63=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2132); if (state.failed) return retval;
                    BY64=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2135); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2138);
                    groupByListExpr65=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr65.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:588:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:588:4: HAVING havingClause
                    {
                    HAVING66=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2145); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2148);
                    havingClause67=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause67.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:589:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:589:4: OUTPUT outputLimit
                    {
                    OUTPUT68=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2155); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2158);
                    outputLimit69=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:590:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:590:4: ORDER BY orderByListExpr
                    {
                    ORDER70=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2165); if (state.failed) return retval;
                    BY71=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2168); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2171);
                    orderByListExpr72=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr72.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:591:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:591:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR73=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2178); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2181);
                    rowLimit74=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit74.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:594:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON75=null;
        Token AS78=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression76 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression77 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr79 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr80 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr81 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert82 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr83 = null;


        CommonTree i_tree=null;
        CommonTree ON75_tree=null;
        CommonTree AS78_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:595:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:595:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON75=(Token)match(input,ON,FOLLOW_ON_in_onExpr2196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON75);

            // EsperEPL2Grammar.g:595:7: ( eventFilterExpression | patternInclusionExpression )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENT||LA26_0==TICKED_STRING_LITERAL) ) {
                alt26=1;
            }
            else if ( (LA26_0==PATTERN) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:595:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2199);
                    eventFilterExpression76=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression76.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:595:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2203);
                    patternInclusionExpression77=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression77.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:595:60: ( AS i= IDENT | i= IDENT )?
            int alt27=3;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==AS) ) {
                alt27=1;
            }
            else if ( (LA27_0==IDENT) ) {
                alt27=2;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:595:61: AS i= IDENT
                    {
                    AS78=(Token)match(input,AS,FOLLOW_AS_in_onExpr2207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS78);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:595:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:596:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt31=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt31=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt31=2;
                }
                break;
            case SET:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:596:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2225);
                    onDeleteExpr79=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr79.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:596:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2229);
                    onSelectExpr80=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr80.getTree());
                    // EsperEPL2Grammar.g:596:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==INSERT) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // EsperEPL2Grammar.g:596:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:596:33: ( onSelectInsertExpr )+
                            int cnt28=0;
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( (LA28_0==INSERT) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:596:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2232);
                            	    onSelectInsertExpr81=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr81.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt28 >= 1 ) break loop28;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(28, input);
                                        throw eee;
                                }
                                cnt28++;
                            } while (true);

                            // EsperEPL2Grammar.g:596:53: ( outputClauseInsert )?
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==OUTPUT) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    // EsperEPL2Grammar.g:596:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2235);
                                    outputClauseInsert82=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert82.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:596:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2242);
                    onSetExpr83=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr83.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: patternInclusionExpression, outputClauseInsert, i, eventFilterExpression, onDeleteExpr, onSelectExpr, onSetExpr, onSelectInsertExpr
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 597:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:597:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:597:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:597:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:597:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:597:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:597:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:597:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:597:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:597:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:600:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT84=null;
        Token SELECT86=null;
        Token WHERE89=null;
        Token GROUP91=null;
        Token BY92=null;
        Token HAVING94=null;
        Token ORDER96=null;
        Token BY97=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr85 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList87 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom88 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause90 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr93 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause95 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr98 = null;


        CommonTree INSERT84_tree=null;
        CommonTree SELECT86_tree=null;
        CommonTree WHERE89_tree=null;
        CommonTree GROUP91_tree=null;
        CommonTree BY92_tree=null;
        CommonTree HAVING94_tree=null;
        CommonTree ORDER96_tree=null;
        CommonTree BY97_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:603:2: ( ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:603:4: ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:603:4: ( INSERT insertIntoExpr )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==INSERT) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:603:5: INSERT insertIntoExpr
                    {
                    INSERT84=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT84);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2303);
                    insertIntoExpr85=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr85.getTree());

                    }
                    break;

            }

            SELECT86=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT86);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2311);
            selectionList87=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList87.getTree());
            // EsperEPL2Grammar.g:605:3: ( onExprFrom )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==FROM) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:605:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2315);
                    onExprFrom88=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom88.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:606:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:606:4: WHERE whereClause
                    {
                    WHERE89=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE89);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2323);
                    whereClause90=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause90.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:607:3: ( GROUP BY groupByListExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==GROUP) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:607:4: GROUP BY groupByListExpr
                    {
                    GROUP91=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP91);

                    BY92=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY92);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2336);
                    groupByListExpr93=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr93.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:608:3: ( HAVING havingClause )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==HAVING) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:608:4: HAVING havingClause
                    {
                    HAVING94=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING94);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2345);
                    havingClause95=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause95.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:609:3: ( ORDER BY orderByListExpr )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==ORDER) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:609:4: ORDER BY orderByListExpr
                    {
                    ORDER96=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER96);

                    BY97=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY97);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2356);
                    orderByListExpr98=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr98.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: havingClause, orderByListExpr, insertIntoExpr, groupByListExpr, whereClause, onExprFrom, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 610:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:610:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:610:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:610:53: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:610:65: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:610:78: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:610:95: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:610:109: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:613:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT99=null;
        Token SELECT101=null;
        Token WHERE103=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr100 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList102 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause104 = null;


        CommonTree INSERT99_tree=null;
        CommonTree SELECT101_tree=null;
        CommonTree WHERE103_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:616:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:616:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT99=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT99);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2411);
            insertIntoExpr100=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr100.getTree());
            SELECT101=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT101);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2417);
            selectionList102=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList102.getTree());
            // EsperEPL2Grammar.g:618:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:618:4: WHERE whereClause
                    {
                    WHERE103=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE103);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2424);
                    whereClause104=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause104.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoExpr, selectionList, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 619:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:619:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:619:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:622:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT105=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT105_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:623:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:623:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT105=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT105);

            // EsperEPL2Grammar.g:623:11: (f= FIRST | a= ALL )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==FIRST) ) {
                alt39=1;
            }
            else if ( (LA39_0==ALL) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:623:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:623:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: f, a
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 624:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:624:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:624:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:624:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:627:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE106=null;
        Token WHERE108=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom107 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause109 = null;


        CommonTree DELETE106_tree=null;
        CommonTree WHERE108_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:630:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:630:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE106=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE106);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2512);
            onExprFrom107=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom107.getTree());
            // EsperEPL2Grammar.g:632:3: ( WHERE whereClause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==WHERE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:632:4: WHERE whereClause
                    {
                    WHERE108=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE108);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2519);
                    whereClause109=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause109.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 633:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:633:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:633:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:636:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET110=null;
        Token COMMA112=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment111 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment113 = null;


        CommonTree SET110_tree=null;
        CommonTree COMMA112_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:639:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:639:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET110=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET110);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2561);
            onSetAssignment111=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment111.getTree());
            // EsperEPL2Grammar.g:639:24: ( COMMA onSetAssignment )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==COMMA) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // EsperEPL2Grammar.g:639:25: COMMA onSetAssignment
            	    {
            	    COMMA112=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2564); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA112);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2566);
            	    onSetAssignment113=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment113.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:640:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:643:1: onSetAssignment : IDENT EQUALS expression ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT114=null;
        Token EQUALS115=null;
        EsperEPL2GrammarParser.expression_return expression116 = null;


        CommonTree IDENT114_tree=null;
        CommonTree EQUALS115_tree=null;

        try {
            // EsperEPL2Grammar.g:644:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:644:4: IDENT EQUALS expression
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT114=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT114_tree = (CommonTree)adaptor.create(IDENT114);
            adaptor.addChild(root_0, IDENT114_tree);
            }
            EQUALS115=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2593); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_onSetAssignment2596);
            expression116=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:647:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM117=null;
        Token AS118=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM117_tree=null;
        CommonTree AS118_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:648:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:648:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM117=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM117);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:648:17: ( AS i= IDENT | i= IDENT )?
            int alt42=3;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:648:18: AS i= IDENT
                    {
                    AS118=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS118);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:648:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:649:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:649:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:652:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE119=null;
        Token WINDOW120=null;
        Token DOT121=null;
        Token DOT123=null;
        Token AS125=null;
        Token LPAREN127=null;
        Token RPAREN129=null;
        Token WHERE130=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression122 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression124 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter126 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList128 = null;

        EsperEPL2GrammarParser.expression_return expression131 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE119_tree=null;
        CommonTree WINDOW120_tree=null;
        CommonTree DOT121_tree=null;
        CommonTree DOT123_tree=null;
        CommonTree AS125_tree=null;
        CommonTree LPAREN127_tree=null;
        CommonTree RPAREN129_tree=null;
        CommonTree WHERE130_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:653:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:653:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE119=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE119);

            WINDOW120=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW120);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:653:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==DOT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:653:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT121=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT121);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2665);
                    viewExpression122=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression122.getTree());
                    // EsperEPL2Grammar.g:653:46: ( DOT viewExpression )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==DOT) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:653:47: DOT viewExpression
                    	    {
                    	    DOT123=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2668); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT123);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2670);
                    	    viewExpression124=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression124.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:653:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt45=3;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==RETAINUNION) ) {
                alt45=1;
            }
            else if ( (LA45_0==RETAININTERSECTION) ) {
                alt45=2;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:653:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:653:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:653:110: ( AS )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:653:110: AS
                    {
                    AS125=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS125);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:654:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SELECT||LA47_0==IDENT||LA47_0==TICKED_STRING_LITERAL) ) {
                alt47=1;
            }
            else if ( (LA47_0==LPAREN) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:655:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2702);
                    createWindowExprModelAfter126=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter126.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:656:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN127=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN127);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2719);
                    createWindowColumnList128=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList128.getTree());
                    RPAREN129=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN129);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:658:5: (i1= INSERT ( WHERE expression )? )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==INSERT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:658:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:658:16: ( WHERE expression )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==WHERE) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // EsperEPL2Grammar.g:658:17: WHERE expression
                            {
                            WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2743);
                            expression131=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression131.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, createWindowColumnList, expression, INSERT, ru, createWindowExprModelAfter, i, viewExpression, createWindowExprModelAfter, viewExpression, ri, ri, i, createWindowColumnList
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 659:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:659:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:659:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:659:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:659:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:659:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:659:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:660:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:660:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 661:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:661:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:661:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:661:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:661:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:661:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:661:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:664:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT132=null;
        Token FROM134=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList133 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier135 = null;


        CommonTree SELECT132_tree=null;
        CommonTree FROM134_tree=null;

        try {
            // EsperEPL2Grammar.g:665:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:665:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:665:4: ( SELECT createSelectionList FROM )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SELECT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:665:5: SELECT createSelectionList FROM
                    {
                    SELECT132=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2830); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2833);
                    createSelectionList133=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList133.getTree());
                    FROM134=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2835); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2840);
            classIdentifier135=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier135.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:668:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE136=null;
        Token VARIABLE137=null;
        Token EQUALS138=null;
        EsperEPL2GrammarParser.expression_return expression139 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE136_tree=null;
        CommonTree VARIABLE137_tree=null;
        CommonTree EQUALS138_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:669:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:669:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE136=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE136);

            VARIABLE137=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE137);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:669:36: ( EQUALS expression )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==EQUALS) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:669:37: EQUALS expression
                    {
                    EQUALS138=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS138);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2868);
                    expression139=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression139.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, t, n
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 670:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:670:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:670:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:673:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA141=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement140 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement142 = null;


        CommonTree COMMA141_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:676:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:676:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2911);
            createWindowColumnListElement140=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement140.getTree());
            // EsperEPL2Grammar.g:676:34: ( COMMA createWindowColumnListElement )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==COMMA) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // EsperEPL2Grammar.g:676:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2914); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA141);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2916);
            	    createWindowColumnListElement142=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement142.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 677:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:677:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:680:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:681:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:681:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 682:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:682:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:685:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA144=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement143 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement145 = null;


        CommonTree COMMA144_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:688:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:688:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2988);
            createSelectionListElement143=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement143.getTree());
            // EsperEPL2Grammar.g:688:31: ( COMMA createSelectionListElement )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // EsperEPL2Grammar.g:688:32: COMMA createSelectionListElement
            	    {
            	    COMMA144=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2991); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA144);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2993);
            	    createSelectionListElement145=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement145.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 689:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:689:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:692:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS147=null;
        Token AS149=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty146 = null;

        EsperEPL2GrammarParser.constant_return constant148 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS147_tree=null;
        CommonTree AS149_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:693:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt55=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt55=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:693:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 694:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:695:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3034);
                    eventProperty146=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty146.getTree());
                    // EsperEPL2Grammar.g:695:18: ( AS i= IDENT )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==AS) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // EsperEPL2Grammar.g:695:19: AS i= IDENT
                            {
                            AS147=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3037); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS147);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3041); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 696:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:696:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:696:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:697:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3062);
                    constant148=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant148.getTree());
                    AS149=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS149);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 698:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:698:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:698:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:701:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO150=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList151 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO150_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:704:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:704:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:704:4: (s= ISTREAM | s= RSTREAM )?
            int alt56=3;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==ISTREAM) ) {
                alt56=1;
            }
            else if ( (LA56_0==RSTREAM) ) {
                alt56=2;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:704:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:704:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO150=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO150);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:704:42: ( insertIntoColumnList )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==LPAREN) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:704:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr3124);
                    insertIntoColumnList151=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList151.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoColumnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:705:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:705:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:705:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:708:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN152=null;
        Token IDENT153=null;
        Token COMMA154=null;
        Token IDENT155=null;
        Token RPAREN156=null;

        CommonTree LPAREN152_tree=null;
        CommonTree IDENT153_tree=null;
        CommonTree COMMA154_tree=null;
        CommonTree IDENT155_tree=null;
        CommonTree RPAREN156_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:709:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:709:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN152=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList3158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN152);

            IDENT153=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT153);

            // EsperEPL2Grammar.g:709:18: ( COMMA IDENT )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==COMMA) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // EsperEPL2Grammar.g:709:19: COMMA IDENT
            	    {
            	    COMMA154=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3163); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA154);

            	    IDENT155=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3165); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT155);


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            RPAREN156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN156);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 710:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:710:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:710:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:713:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression157 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin158 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList159 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:716:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:716:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3204);
            streamExpression157=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression157.getTree());
            // EsperEPL2Grammar.g:716:21: ( regularJoin | outerJoinList )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==EOF||LA59_0==WHERE||(LA59_0>=GROUP && LA59_0<=HAVING)||LA59_0==OUTPUT||LA59_0==ORDER||LA59_0==ROW_LIMIT_EXPR||LA59_0==MATCH_RECOGNIZE||LA59_0==COMMA) ) {
                alt59=1;
            }
            else if ( ((LA59_0>=INNER && LA59_0<=FULL)) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:716:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3207);
                    regularJoin158=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin158.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:716:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3211);
                    outerJoinList159=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList159.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:719:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA160=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression161 = null;


        CommonTree COMMA160_tree=null;

        try {
            // EsperEPL2Grammar.g:720:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:720:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:720:4: ( COMMA streamExpression )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // EsperEPL2Grammar.g:720:5: COMMA streamExpression
            	    {
            	    COMMA160=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3225); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3228);
            	    streamExpression161=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression161.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:723:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin162 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin163 = null;



        try {
            // EsperEPL2Grammar.g:724:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:724:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3242);
            outerJoin162=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin162.getTree());
            // EsperEPL2Grammar.g:724:14: ( outerJoin )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( ((LA61_0>=INNER && LA61_0<=FULL)) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:724:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3245);
            	    outerJoin163=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin163.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:727:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER164=null;
        Token JOIN165=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression166 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent167 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER164_tree=null;
        CommonTree JOIN165_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:730:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:730:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:730:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=JOIN && LA64_0<=FULL)) ) {
                alt64=1;
            }
            else if ( (LA64_0==INNER) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:731:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:731:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( ((LA63_0>=LEFT && LA63_0<=FULL)) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // EsperEPL2Grammar.g:731:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:731:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt62=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt62=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt62=2;
                                }
                                break;
                            case FULL:
                                {
                                alt62=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 0, input);

                                throw nvae;
                            }

                            switch (alt62) {
                                case 1 :
                                    // EsperEPL2Grammar.g:731:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3288); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:731:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3292); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:731:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3296); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER164=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3299); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER164);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:732:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:732:14: (i= INNER )
                    // EsperEPL2Grammar.g:732:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN165=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN165);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3336);
            streamExpression166=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression166.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3338);
            outerJoinIdent167=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent167.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 734:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:734:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 735:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:735:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 736:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:736:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 737:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:737:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:740:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON168=null;
        Token AND_EXPR170=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair169 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair171 = null;


        CommonTree ON168_tree=null;
        CommonTree AND_EXPR170_tree=null;

        try {
            // EsperEPL2Grammar.g:741:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:741:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON168=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3403); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3406);
            outerJoinIdentPair169=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair169.getTree());
            // EsperEPL2Grammar.g:741:27: ( AND_EXPR outerJoinIdentPair )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==AND_EXPR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // EsperEPL2Grammar.g:741:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR170=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3409); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3412);
            	    outerJoinIdentPair171=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair171.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:744:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS173=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty172 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty174 = null;


        CommonTree EQUALS173_tree=null;

        try {
            // EsperEPL2Grammar.g:745:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:745:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3427);
            eventProperty172=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty172.getTree());
            EQUALS173=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3429); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3432);
            eventProperty174=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty174.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:748:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression175 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:751:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:751:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3454);
            evalOrExpression175=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression175.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:752:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:755:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList176 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:758:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:758:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:758:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt66=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt66=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt66=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt66=3;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:758:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:758:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:758:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3506);
            selectionList176=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList176.getTree());


            // AST REWRITE
            // elements: s, selectionList
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 759:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:759:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:759:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:762:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA178=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement177 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement179 = null;


        CommonTree COMMA178_tree=null;

        try {
            // EsperEPL2Grammar.g:763:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:763:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3533);
            selectionListElement177=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement177.getTree());
            // EsperEPL2Grammar.g:763:25: ( COMMA selectionListElement )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==COMMA) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // EsperEPL2Grammar.g:763:26: COMMA selectionListElement
            	    {
            	    COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3536); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3539);
            	    selectionListElement179=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement179.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:766:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS182=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector180 = null;

        EsperEPL2GrammarParser.expression_return expression181 = null;


        CommonTree s_tree=null;
        CommonTree AS182_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:768:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt69=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt69=1;
                }
                break;
            case IDENT:
                {
                int LA69_2 = input.LA(2);

                if ( (LA69_2==DOT) ) {
                    int LA69_58 = input.LA(3);

                    if ( (LA69_58==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt69=2;
                    }
                    else if ( (LA69_58==WINDOW||LA69_58==ESCAPE||LA69_58==EVERY_EXPR||(LA69_58>=SUM && LA69_58<=COUNT)||LA69_58==OUTER||(LA69_58>=JOIN && LA69_58<=FULL)||(LA69_58>=EVENTS && LA69_58<=LAST)||(LA69_58>=UNIDIRECTIONAL && LA69_58<=PRIOR)||(LA69_58>=WEEKDAY && LA69_58<=CAST)||LA69_58==SNAPSHOT||(LA69_58>=VARIABLE && LA69_58<=AT)||LA69_58==IDENT||LA69_58==TICKED_STRING_LITERAL) ) {
                        alt69=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 69, 58, input);

                        throw nvae;
                    }
                }
                else if ( (LA69_2==EOF||(LA69_2>=IN_SET && LA69_2<=REGEXP)||(LA69_2>=OR_EXPR && LA69_2<=NOT_EXPR)||(LA69_2>=WHERE && LA69_2<=AS)||LA69_2==FROM||LA69_2==IS||(LA69_2>=GROUP && LA69_2<=HAVING)||LA69_2==OUTPUT||LA69_2==INSERT||LA69_2==ORDER||LA69_2==COMMA||LA69_2==EQUALS||LA69_2==LPAREN||(LA69_2>=STAR && LA69_2<=LBRACK)||(LA69_2>=BAND && LA69_2<=MOD)||LA69_2==ESCAPECHAR) ) {
                    alt69=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:768:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 768:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:769:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3581);
                    streamSelector180=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector180.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:770:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3586);
                    expression181=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression181.getTree());
                    // EsperEPL2Grammar.g:770:15: ( AS i= keywordAllowedIdent )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==AS) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:770:16: AS i= keywordAllowedIdent
                            {
                            AS182=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3589); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS182);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3593);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 771:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:771:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 772:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:772:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 773:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:773:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:776:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT183=null;
        Token STAR184=null;
        Token AS185=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT183_tree=null;
        CommonTree STAR184_tree=null;
        CommonTree AS185_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:777:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:777:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT183=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT183);

            STAR184=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR184);

            // EsperEPL2Grammar.g:777:21: ( AS i= IDENT )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==AS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:777:22: AS i= IDENT
                    {
                    AS185=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS185);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 778:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:778:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:778:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:782:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT190=null;
        Token DOT192=null;
        Token AS194=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression186 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression187 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression188 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression189 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression191 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression193 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT190_tree=null;
        CommonTree DOT192_tree=null;
        CommonTree AS194_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:783:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:783:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:783:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt71=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==EOF||(LA71_1>=WHERE && LA71_1<=AS)||(LA71_1>=INNER && LA71_1<=ON)||(LA71_1>=GROUP && LA71_1<=HAVING)||LA71_1==OUTPUT||LA71_1==ORDER||(LA71_1>=UNIDIRECTIONAL && LA71_1<=RETAININTERSECTION)||LA71_1==ROW_LIMIT_EXPR||LA71_1==MATCH_RECOGNIZE||(LA71_1>=COMMA && LA71_1<=LPAREN)||LA71_1==LBRACK) ) {
                    alt71=1;
                }
                else if ( (LA71_1==COLON) ) {
                    alt71=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 71, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt71=1;
                }
                break;
            case PATTERN:
                {
                alt71=2;
                }
                break;
            case SQL:
                {
                alt71=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }

            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:783:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3691);
                    eventFilterExpression186=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression186.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:783:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3695);
                    patternInclusionExpression187=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression187.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:783:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3699);
                    databaseJoinExpression188=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression188.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:783:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3703);
                    methodJoinExpression189=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression189.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:784:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==DOT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:784:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT190=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT190);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3712);
                    viewExpression191=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression191.getTree());
                    // EsperEPL2Grammar.g:784:23: ( DOT viewExpression )*
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);

                        if ( (LA72_0==DOT) ) {
                            alt72=1;
                        }


                        switch (alt72) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:784:24: DOT viewExpression
                    	    {
                    	    DOT192=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3715); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT192);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3717);
                    	    viewExpression193=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression193.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop72;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:784:47: ( AS i= IDENT | i= IDENT )?
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==AS) ) {
                alt74=1;
            }
            else if ( (LA74_0==IDENT) ) {
                alt74=2;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:784:48: AS i= IDENT
                    {
                    AS194=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS194);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:784:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:784:71: (u= UNIDIRECTIONAL )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==UNIDIRECTIONAL) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:784:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:784:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt76=3;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==RETAINUNION) ) {
                alt76=1;
            }
            else if ( (LA76_0==RETAININTERSECTION) ) {
                alt76=2;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:784:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:784:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, u, eventFilterExpression, databaseJoinExpression, patternInclusionExpression, i, viewExpression, methodJoinExpression, ru
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 785:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:785:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:785:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:785:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:785:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:785:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:786:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:786:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:786:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:786:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:786:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:797:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE195=null;
        Token LPAREN196=null;
        Token RPAREN204=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy197 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures198 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection199 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip200 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern201 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval202 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine203 = null;


        CommonTree MATCH_RECOGNIZE195_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN204_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:798:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:798:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE195=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog3815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE195);

            LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog3829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);

            // EsperEPL2Grammar.g:800:4: ( matchRecogPartitionBy )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==PARTITION) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:800:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog3835);
                    matchRecogPartitionBy197=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy197.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog3842);
            matchRecogMeasures198=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures198.getTree());
            // EsperEPL2Grammar.g:802:4: ( matchRecogMatchesSelection )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ALL) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:802:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog3847);
                    matchRecogMatchesSelection199=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection199.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:4: ( matchRecogMatchesAfterSkip )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AFTER) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:803:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3853);
                    matchRecogMatchesAfterSkip200=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip200.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog3859);
            matchRecogPattern201=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern201.getTree());
            // EsperEPL2Grammar.g:805:4: ( matchRecogMatchesInterval )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==IDENT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:805:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog3865);
                    matchRecogMatchesInterval202=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval202.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog3871);
            matchRecogDefine203=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine203.getTree());
            RPAREN204=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog3878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN204);



            // AST REWRITE
            // elements: matchRecogMatchesInterval, matchRecogMatchesSelection, matchRecogDefine, MATCH_RECOGNIZE, matchRecogPartitionBy, matchRecogPattern, matchRecogMatchesAfterSkip, matchRecogMeasures
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 808:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:808:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:808:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:808:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:808:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:808:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:811:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION205=null;
        Token BY206=null;
        Token COMMA208=null;
        EsperEPL2GrammarParser.expression_return expression207 = null;

        EsperEPL2GrammarParser.expression_return expression209 = null;


        CommonTree PARTITION205_tree=null;
        CommonTree BY206_tree=null;
        CommonTree COMMA208_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:812:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:812:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION205=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION205);

            BY206=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy3917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY206);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy3919);
            expression207=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression207.getTree());
            // EsperEPL2Grammar.g:812:28: ( COMMA expression )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // EsperEPL2Grammar.g:812:29: COMMA expression
            	    {
            	    COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy3922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA208);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy3924);
            	    expression209=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression209.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 813:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:813:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:816:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES210=null;
        Token COMMA212=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem211 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem213 = null;


        CommonTree MEASURES210_tree=null;
        CommonTree COMMA212_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:817:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:817:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES210=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures3953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES210);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures3955);
            matchRecogMeasureItem211=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem211.getTree());
            // EsperEPL2Grammar.g:817:35: ( COMMA matchRecogMeasureItem )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // EsperEPL2Grammar.g:817:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures3958); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA212);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures3960);
            	    matchRecogMeasureItem213=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem213.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 818:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:818:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:818:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:821:1: matchRecogMeasureItem : expression AS i= IDENT -> ^( MATCHREC_MEASURE_ITEM expression $i) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS215=null;
        EsperEPL2GrammarParser.expression_return expression214 = null;


        CommonTree i_tree=null;
        CommonTree AS215_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:822:2: ( expression AS i= IDENT -> ^( MATCHREC_MEASURE_ITEM expression $i) )
            // EsperEPL2Grammar.g:822:4: expression AS i= IDENT
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem3985);
            expression214=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression214.getTree());
            AS215=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem3987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS215);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem3991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);



            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 823:3: -> ^( MATCHREC_MEASURE_ITEM expression $i)
            {
                // EsperEPL2Grammar.g:823:6: ^( MATCHREC_MEASURE_ITEM expression $i)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:826:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL216=null;
        Token MATCHES217=null;

        CommonTree ALL216_tree=null;
        CommonTree MATCHES217_tree=null;

        try {
            // EsperEPL2Grammar.g:827:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:827:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL216=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL216_tree = (CommonTree)adaptor.create(ALL216);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL216_tree, root_0);
            }
            MATCHES217=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4019); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:830:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN218=null;
        Token LPAREN219=null;
        Token RPAREN221=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration220 = null;


        CommonTree PATTERN218_tree=null;
        CommonTree LPAREN219_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:831:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:831:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN218=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN218);

            LPAREN219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN219);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4038);
            matchRecogPatternAlteration220=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration220.getTree());
            RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:832:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:835:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER222=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER222_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:836:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:836:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER222=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER222);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4066);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4070);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4074);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4078);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4082);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i2, i4, i5, i3, i1
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 837:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:837:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:840:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod223 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:841:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:841:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4120);
            timePeriod223=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod223.getTree());


            // AST REWRITE
            // elements: timePeriod, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 842:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:842:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:845:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat224 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat225 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:846:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:846:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4146);
            matchRecogPatternConcat224=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat224.getTree());
            // EsperEPL2Grammar.g:846:28: (o= BOR matchRecogPatternConcat )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==BOR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // EsperEPL2Grammar.g:846:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4151); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4153);
            	    matchRecogPatternConcat225=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat225.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 847:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:847:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 848:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:851:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary226 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:852:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:852:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:852:4: ( matchRecogPatternUnary )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==IDENT||LA84_0==LPAREN) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // EsperEPL2Grammar.g:852:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4186);
            	    matchRecogPatternUnary226=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary226.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 853:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:853:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:856:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested227 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom228 = null;



        try {
            // EsperEPL2Grammar.g:857:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==LPAREN) ) {
                alt85=1;
            }
            else if ( (LA85_0==IDENT) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // EsperEPL2Grammar.g:857:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4211);
                    matchRecogPatternNested227=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested227.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:858:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4217);
                    matchRecogPatternAtom228=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom228.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:861:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN229=null;
        Token RPAREN231=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration230 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN229_tree=null;
        CommonTree RPAREN231_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:862:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:862:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN229);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4231);
            matchRecogPatternAlteration230=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration230.getTree());
            RPAREN231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN231);

            // EsperEPL2Grammar.g:862:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt86=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt86=1;
                    }
                    break;
                case PLUS:
                    {
                    alt86=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt86=3;
                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:862:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:862:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:862:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, s, matchRecogPatternAlteration, p
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 863:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:863:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:863:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:863:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:863:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:866:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:867:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:867:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:867:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==STAR||(LA89_0>=PLUS && LA89_0<=QUESTION)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:867:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:867:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt87=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt87=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt87=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt87=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 0, input);

                        throw nvae;
                    }

                    switch (alt87) {
                        case 1 :
                            // EsperEPL2Grammar.g:867:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4295); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:867:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4301); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:867:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4307); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:867:44: (reluctant= QUESTION )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==QUESTION) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // EsperEPL2Grammar.g:867:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4313); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: reluctant, q, i, s, p
            // token labels: s, reluctant, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 868:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:868:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:868:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:868:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:868:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:868:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:871:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE232=null;
        Token COMMA234=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem233 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem235 = null;


        CommonTree DEFINE232_tree=null;
        CommonTree COMMA234_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:872:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:872:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE232=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE232);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4359);
            matchRecogDefineItem233=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem233.getTree());
            // EsperEPL2Grammar.g:872:32: ( COMMA matchRecogDefineItem )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==COMMA) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // EsperEPL2Grammar.g:872:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA234=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4362); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA234);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4364);
            	    matchRecogDefineItem235=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem235.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 873:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:873:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:876:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS236=null;
        EsperEPL2GrammarParser.expression_return expression237 = null;


        CommonTree i_tree=null;
        CommonTree AS236_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:877:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:877:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS236=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS236);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4395);
            expression237=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression237.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 878:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:878:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:881:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN238=null;
        Token LBRACK239=null;
        Token RBRACK241=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression240 = null;


        CommonTree PATTERN238_tree=null;
        CommonTree LBRACK239_tree=null;
        CommonTree RBRACK241_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:882:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:882:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN238=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN238);

            LBRACK239=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK239);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4424);
            patternExpression240=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression240.getTree());
            RBRACK241=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK241);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 883:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:883:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:886:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL242=null;
        Token COLON243=null;
        Token LBRACK244=null;
        Token METADATASQL245=null;
        Token RBRACK246=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL242_tree=null;
        CommonTree COLON243_tree=null;
        CommonTree LBRACK244_tree=null;
        CommonTree METADATASQL245_tree=null;
        CommonTree RBRACK246_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:889:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:889:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL242=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression4459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL242);

            COLON243=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression4461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON243);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK244=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression4467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK244);

            // EsperEPL2Grammar.g:889:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==STRING_LITERAL) ) {
                alt91=1;
            }
            else if ( (LA91_0==QUOTED_STRING_LITERAL) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:889:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:889:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:889:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==METADATASQL) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:889:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL245=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression4482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL245);

                    // EsperEPL2Grammar.g:889:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==STRING_LITERAL) ) {
                        alt92=1;
                    }
                    else if ( (LA92_0==QUOTED_STRING_LITERAL) ) {
                        alt92=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 0, input);

                        throw nvae;
                    }
                    switch (alt92) {
                        case 1 :
                            // EsperEPL2Grammar.g:889:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4487); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:889:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4493); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK246=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK246);



            // AST REWRITE
            // elements: s2, s, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 890:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:890:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:890:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:893:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON247=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier248 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList250 = null;


        CommonTree i_tree=null;
        CommonTree COLON247_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:896:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:896:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression4549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON247=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression4551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON247);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression4553);
            classIdentifier248=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier248.getTree());
            // EsperEPL2Grammar.g:896:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==LPAREN) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // EsperEPL2Grammar.g:896:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression4556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);

                    // EsperEPL2Grammar.g:896:49: ( expressionList )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==WINDOW||LA94_0==ESCAPE||(LA94_0>=NOT_EXPR && LA94_0<=EVERY_EXPR)||(LA94_0>=SUM && LA94_0<=COUNT)||LA94_0==CASE||LA94_0==OUTER||(LA94_0>=JOIN && LA94_0<=FULL)||(LA94_0>=EVENTS && LA94_0<=LAST)||(LA94_0>=UNIDIRECTIONAL && LA94_0<=CURRENT_TIMESTAMP)||LA94_0==SNAPSHOT||(LA94_0>=VARIABLE && LA94_0<=AT)||(LA94_0>=BOOLEAN_TRUE && LA94_0<=VALUE_NULL)||LA94_0==NUM_DOUBLE||LA94_0==IDENT||LA94_0==LPAREN||(LA94_0>=PLUS && LA94_0<=QUESTION)||(LA94_0>=STRING_LITERAL && LA94_0<=QUOTED_STRING_LITERAL)||LA94_0==MINUS||LA94_0==LCURLY||LA94_0==NUM_INT||(LA94_0>=TICKED_STRING_LITERAL && LA94_0<=NUM_FLOAT)) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // EsperEPL2Grammar.g:896:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression4558);
                            expressionList250=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList250.getTree());

                            }
                            break;

                    }

                    RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression4561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expressionList, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 897:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:897:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:897:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:900:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON252=null;
        Token LPAREN253=null;
        Token RPAREN255=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList254 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON252_tree=null;
        CommonTree LPAREN253_tree=null;
        CommonTree RPAREN255_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:903:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:903:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON252=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression4616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON252);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN253=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression4622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN253);

            // EsperEPL2Grammar.g:903:35: ( expressionWithTimeList )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==WINDOW||LA96_0==ESCAPE||(LA96_0>=NOT_EXPR && LA96_0<=EVERY_EXPR)||(LA96_0>=SUM && LA96_0<=COUNT)||LA96_0==CASE||LA96_0==OUTER||(LA96_0>=JOIN && LA96_0<=FULL)||(LA96_0>=EVENTS && LA96_0<=LAST)||(LA96_0>=UNIDIRECTIONAL && LA96_0<=CURRENT_TIMESTAMP)||LA96_0==SNAPSHOT||(LA96_0>=VARIABLE && LA96_0<=AT)||(LA96_0>=BOOLEAN_TRUE && LA96_0<=VALUE_NULL)||LA96_0==NUM_DOUBLE||LA96_0==IDENT||LA96_0==LPAREN||LA96_0==STAR||(LA96_0>=PLUS && LA96_0<=LBRACK)||(LA96_0>=STRING_LITERAL && LA96_0<=QUOTED_STRING_LITERAL)||LA96_0==MINUS||LA96_0==LCURLY||LA96_0==NUM_INT||(LA96_0>=TICKED_STRING_LITERAL && LA96_0<=NUM_FLOAT)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:903:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression4624);
                    expressionWithTimeList254=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList254.getTree());

                    }
                    break;

            }

            RPAREN255=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression4627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN255);



            // AST REWRITE
            // elements: nm, ns, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 904:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:904:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:904:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:907:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA257=null;
        EsperEPL2GrammarParser.expression_return expression256 = null;

        EsperEPL2GrammarParser.expression_return expression258 = null;


        CommonTree COMMA257_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:910:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:910:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr4666);
            expression256=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression256.getTree());
            // EsperEPL2Grammar.g:910:15: ( COMMA expression )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // EsperEPL2Grammar.g:910:16: COMMA expression
            	    {
            	    COMMA257=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr4669); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA257);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr4671);
            	    expression258=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression258.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 911:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:911:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:914:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA260=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement259 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement261 = null;


        CommonTree COMMA260_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:917:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:917:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4706);
            orderByListElement259=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement259.getTree());
            // EsperEPL2Grammar.g:917:23: ( COMMA orderByListElement )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==COMMA) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // EsperEPL2Grammar.g:917:24: COMMA orderByListElement
            	    {
            	    COMMA260=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr4709); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA260);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4711);
            	    orderByListElement261=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement261.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 918:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:918:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:921:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression262 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:922:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:922:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement4736);
            expression262=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());
            // EsperEPL2Grammar.g:922:15: (d= ASC | d= DESC )?
            int alt99=3;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==ASC) ) {
                alt99=1;
            }
            else if ( (LA99_0==DESC) ) {
                alt99=2;
            }
            switch (alt99) {
                case 1 :
                    // EsperEPL2Grammar.g:922:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement4741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:922:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement4745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 923:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:923:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:923:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:926:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression263 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:929:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:929:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4783);
            evalOrExpression263=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression263.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 930:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:930:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:933:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN268=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod264 = null;

        EsperEPL2GrammarParser.number_return number265 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet266 = null;

        EsperEPL2GrammarParser.expression_return expression267 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr269 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN268_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:936:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:936:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:936:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt100=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt100=1;
                    }
                    break;
                case FIRST:
                    {
                    alt100=2;
                    }
                    break;
                case LAST:
                    {
                    alt100=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt100=4;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:936:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:936:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:936:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:936:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:937:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt104=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt104=1;
                }
                break;
            case AT:
                {
                alt104=2;
                }
                break;
            case WHEN:
                {
                alt104=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:938:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:938:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:938:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit4860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:939:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==NUM_INT) ) {
                        int LA102_1 = input.LA(2);

                        if ( (LA102_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==EVENTS) ) {
                            alt102=2;
                        }
                        else if ( (LA102_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA102_0==NUM_LONG) ) {
                        int LA102_2 = input.LA(2);

                        if ( (LA102_2==EVENTS) ) {
                            alt102=2;
                        }
                        else if ( (LA102_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA102_0==NUM_FLOAT) ) {
                        int LA102_3 = input.LA(2);

                        if ( (LA102_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==EVENTS) ) {
                            alt102=2;
                        }
                        else if ( (LA102_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA102_0==NUM_DOUBLE) ) {
                        int LA102_4 = input.LA(2);

                        if ( (LA102_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==EVENTS) ) {
                            alt102=2;
                        }
                        else if ( (LA102_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA102_0==IDENT) ) {
                        int LA102_5 = input.LA(2);

                        if ( (LA102_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==EVENTS) ) {
                            alt102=2;
                        }
                        else if ( (LA102_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else if ( (LA102_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA102_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt102=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);

                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            // EsperEPL2Grammar.g:940:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit4882);
                            timePeriod264=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod264.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:941:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:941:7: ( number | i= IDENT )
                            int alt101=2;
                            int LA101_0 = input.LA(1);

                            if ( (LA101_0==NUM_DOUBLE||LA101_0==NUM_INT||(LA101_0>=NUM_LONG && LA101_0<=NUM_FLOAT)) ) {
                                alt101=1;
                            }
                            else if ( (LA101_0==IDENT) ) {
                                alt101=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 101, 0, input);

                                throw nvae;
                            }
                            switch (alt101) {
                                case 1 :
                                    // EsperEPL2Grammar.g:941:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit4891);
                                    number265=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number265.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:941:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit4897); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:941:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:941:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit4903); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:945:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:945:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:945:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit4926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit4928);
                    crontabLimitParameterSet266=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet266.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:947:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:947:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:947:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit4942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit4944);
                    expression267=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
                    // EsperEPL2Grammar.g:947:24: ( THEN onSetExpr )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==THEN) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // EsperEPL2Grammar.g:947:25: THEN onSetExpr
                            {
                            THEN268=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit4947); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN268);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit4949);
                            onSetExpr269=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr269.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: k, i, k, k, timePeriod, expression, crontabLimitParameterSet, k, onSetExpr, number
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 949:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:949:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:949:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:949:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:949:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 950:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:950:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:950:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 951:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:951:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:951:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 952:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:952:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:952:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:952:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:955:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:958:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:958:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:958:6: (n1= numberconstant | i1= IDENT )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==NUM_DOUBLE||LA105_0==PLUS||LA105_0==MINUS||LA105_0==NUM_INT||(LA105_0>=NUM_LONG && LA105_0<=NUM_FLOAT)) ) {
                alt105=1;
            }
            else if ( (LA105_0==IDENT) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // EsperEPL2Grammar.g:958:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5078);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:958:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:958:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==OFFSET||LA108_0==COMMA) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:958:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:958:38: (c= COMMA | o= OFFSET )
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==COMMA) ) {
                        alt106=1;
                    }
                    else if ( (LA106_0==OFFSET) ) {
                        alt106=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }
                    switch (alt106) {
                        case 1 :
                            // EsperEPL2Grammar.g:958:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5091); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:958:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5097); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:958:59: (n2= numberconstant | i2= IDENT )
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==NUM_DOUBLE||LA107_0==PLUS||LA107_0==MINUS||LA107_0==NUM_INT||(LA107_0>=NUM_LONG && LA107_0<=NUM_FLOAT)) ) {
                        alt107=1;
                    }
                    else if ( (LA107_0==IDENT) ) {
                        alt107=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        throw nvae;
                    }
                    switch (alt107) {
                        case 1 :
                            // EsperEPL2Grammar.g:958:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5103);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:958:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5109); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, n1, o, c, n2, i1
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 959:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:959:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:959:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:959:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:959:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:959:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:959:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:959:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:962:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN270=null;
        Token COMMA272=null;
        Token COMMA274=null;
        Token COMMA276=null;
        Token COMMA278=null;
        Token COMMA280=null;
        Token RPAREN282=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime271 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime273 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime275 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime277 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime279 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime281 = null;


        CommonTree LPAREN270_tree=null;
        CommonTree COMMA272_tree=null;
        CommonTree COMMA274_tree=null;
        CommonTree COMMA276_tree=null;
        CommonTree COMMA278_tree=null;
        CommonTree COMMA280_tree=null;
        CommonTree RPAREN282_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:963:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:963:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN270=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN270);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5163);
            expressionWithTime271=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime271.getTree());
            COMMA272=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA272);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5167);
            expressionWithTime273=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime273.getTree());
            COMMA274=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA274);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5171);
            expressionWithTime275=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime275.getTree());
            COMMA276=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA276);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5175);
            expressionWithTime277=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime277.getTree());
            COMMA278=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA278);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5179);
            expressionWithTime279=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime279.getTree());
            // EsperEPL2Grammar.g:963:130: ( COMMA expressionWithTime )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==COMMA) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // EsperEPL2Grammar.g:963:131: COMMA expressionWithTime
                    {
                    COMMA280=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA280);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5184);
                    expressionWithTime281=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime281.getTree());

                    }
                    break;

            }

            RPAREN282=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN282);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 964:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:964:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:964:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:967:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN283=null;
        Token THEN285=null;
        EsperEPL2GrammarParser.expression_return expression284 = null;

        EsperEPL2GrammarParser.expression_return expression286 = null;


        CommonTree WHEN283_tree=null;
        CommonTree THEN285_tree=null;

        try {
            // EsperEPL2Grammar.g:968:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:968:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:968:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:968:5: WHEN expression THEN expression
            {
            WHEN283=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5218); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5221);
            expression284=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression284.getTree());
            THEN285=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5223); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5226);
            expression286=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression286.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:971:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE287=null;
        EsperEPL2GrammarParser.expression_return expression288 = null;


        CommonTree ELSE287_tree=null;

        try {
            // EsperEPL2Grammar.g:972:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:972:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:972:4: ( ELSE expression )
            // EsperEPL2Grammar.g:972:5: ELSE expression
            {
            ELSE287=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5239); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5242);
            expression288=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression288.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:976:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression289 = null;



        try {
            // EsperEPL2Grammar.g:977:2: ( caseExpression )
            // EsperEPL2Grammar.g:977:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5255);
            caseExpression289=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression289.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:980:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE290=null;
        Token END293=null;
        Token CASE294=null;
        Token END298=null;
        EsperEPL2GrammarParser.whenClause_return whenClause291 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause292 = null;

        EsperEPL2GrammarParser.expression_return expression295 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause296 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause297 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression299 = null;


        CommonTree CASE290_tree=null;
        CommonTree END293_tree=null;
        CommonTree CASE294_tree=null;
        CommonTree END298_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:981:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt114=3;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==CASE) ) {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==WHEN) ) {
                    alt114=1;
                }
                else if ( (LA114_1==WINDOW||LA114_1==ESCAPE||(LA114_1>=NOT_EXPR && LA114_1<=EVERY_EXPR)||(LA114_1>=SUM && LA114_1<=COUNT)||LA114_1==CASE||LA114_1==OUTER||(LA114_1>=JOIN && LA114_1<=FULL)||(LA114_1>=EVENTS && LA114_1<=LAST)||(LA114_1>=UNIDIRECTIONAL && LA114_1<=CURRENT_TIMESTAMP)||LA114_1==SNAPSHOT||(LA114_1>=VARIABLE && LA114_1<=AT)||(LA114_1>=BOOLEAN_TRUE && LA114_1<=VALUE_NULL)||LA114_1==NUM_DOUBLE||LA114_1==IDENT||LA114_1==LPAREN||(LA114_1>=PLUS && LA114_1<=QUESTION)||(LA114_1>=STRING_LITERAL && LA114_1<=QUOTED_STRING_LITERAL)||LA114_1==MINUS||LA114_1==LCURLY||LA114_1==NUM_INT||(LA114_1>=TICKED_STRING_LITERAL && LA114_1<=NUM_FLOAT)) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA114_0==WINDOW||LA114_0==ESCAPE||(LA114_0>=NOT_EXPR && LA114_0<=EVERY_EXPR)||(LA114_0>=SUM && LA114_0<=COUNT)||LA114_0==OUTER||(LA114_0>=JOIN && LA114_0<=FULL)||(LA114_0>=EVENTS && LA114_0<=LAST)||(LA114_0>=UNIDIRECTIONAL && LA114_0<=CURRENT_TIMESTAMP)||LA114_0==SNAPSHOT||(LA114_0>=VARIABLE && LA114_0<=AT)||(LA114_0>=BOOLEAN_TRUE && LA114_0<=VALUE_NULL)||LA114_0==NUM_DOUBLE||LA114_0==IDENT||LA114_0==LPAREN||(LA114_0>=PLUS && LA114_0<=QUESTION)||(LA114_0>=STRING_LITERAL && LA114_0<=QUOTED_STRING_LITERAL)||LA114_0==MINUS||LA114_0==LCURLY||LA114_0==NUM_INT||(LA114_0>=TICKED_STRING_LITERAL && LA114_0<=NUM_FLOAT)) ) {
                alt114=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:981:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE290=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE290_tree = (CommonTree)adaptor.create(CASE290);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE290_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:981:52: ( whenClause )+
                    int cnt110=0;
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==WHEN) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:981:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5272);
                    	    whenClause291=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause291.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt110 >= 1 ) break loop110;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(110, input);
                                throw eee;
                        }
                        cnt110++;
                    } while (true);

                    // EsperEPL2Grammar.g:981:64: ( elseClause )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==ELSE) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:981:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5275);
                            elseClause292=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause292.getTree());

                            }
                            break;

                    }

                    END293=(Token)match(input,END,FOLLOW_END_in_caseExpression5278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:982:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE294=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE294);

                    pushFollow(FOLLOW_expression_in_caseExpression5291);
                    expression295=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression295.getTree());
                    // EsperEPL2Grammar.g:982:62: ( whenClause )+
                    int cnt112=0;
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==WHEN) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:982:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5293);
                    	    whenClause296=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause296.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                throw eee;
                        }
                        cnt112++;
                    } while (true);

                    // EsperEPL2Grammar.g:982:74: ( elseClause )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==ELSE) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // EsperEPL2Grammar.g:982:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5296);
                            elseClause297=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause297.getTree());

                            }
                            break;

                    }

                    END298=(Token)match(input,END,FOLLOW_END_in_caseExpression5299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END298);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, whenClause, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 983:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:983:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:983:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:984:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5323);
                    evalOrExpression299=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:987:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression300 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression301 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:988:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:988:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5334);
            evalAndExpression300=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression300.getTree());
            // EsperEPL2Grammar.g:988:22: (op= OR_EXPR evalAndExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==OR_EXPR) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // EsperEPL2Grammar.g:988:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression5339); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5341);
            	    evalAndExpression301=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression301.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:989:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:989:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 990:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:993:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression302 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression303 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:994:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:994:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5373);
            bitWiseExpression302=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression302.getTree());
            // EsperEPL2Grammar.g:994:22: (op= AND_EXPR bitWiseExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==AND_EXPR) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // EsperEPL2Grammar.g:994:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression5378); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5380);
            	    bitWiseExpression303=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression303.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 995:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:995:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 996:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:999:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND305=null;
        Token BOR306=null;
        Token BXOR307=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression304 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression308 = null;


        CommonTree BAND305_tree=null;
        CommonTree BOR306_tree=null;
        CommonTree BXOR307_tree=null;

        try {
            // EsperEPL2Grammar.g:1000:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1000:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5412);
            negatedExpression304=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression304.getTree());
            // EsperEPL2Grammar.g:1000:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==BOR||(LA118_0>=BAND && LA118_0<=BXOR)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1000:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1000:24: ( BAND | BOR | BXOR )
            	    int alt117=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt117=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt117=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt117=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 117, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt117) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1000:25: BAND
            	            {
            	            BAND305=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression5417); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND305_tree = (CommonTree)adaptor.create(BAND305);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND305_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1000:31: BOR
            	            {
            	            BOR306=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression5420); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR306_tree = (CommonTree)adaptor.create(BOR306);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR306_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1000:36: BXOR
            	            {
            	            BXOR307=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression5423); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR307_tree = (CommonTree)adaptor.create(BXOR307);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR307_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5427);
            	    negatedExpression308=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression308.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1003:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR310=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression309 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression311 = null;


        CommonTree NOT_EXPR310_tree=null;

        try {
            // EsperEPL2Grammar.g:1004:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==WINDOW||LA119_0==ESCAPE||LA119_0==EVERY_EXPR||(LA119_0>=SUM && LA119_0<=COUNT)||LA119_0==OUTER||(LA119_0>=JOIN && LA119_0<=FULL)||(LA119_0>=EVENTS && LA119_0<=LAST)||(LA119_0>=UNIDIRECTIONAL && LA119_0<=CURRENT_TIMESTAMP)||LA119_0==SNAPSHOT||(LA119_0>=VARIABLE && LA119_0<=AT)||(LA119_0>=BOOLEAN_TRUE && LA119_0<=VALUE_NULL)||LA119_0==NUM_DOUBLE||LA119_0==IDENT||LA119_0==LPAREN||(LA119_0>=PLUS && LA119_0<=QUESTION)||(LA119_0>=STRING_LITERAL && LA119_0<=QUOTED_STRING_LITERAL)||LA119_0==MINUS||LA119_0==LCURLY||LA119_0==NUM_INT||(LA119_0>=TICKED_STRING_LITERAL && LA119_0<=NUM_FLOAT)) ) {
                alt119=1;
            }
            else if ( (LA119_0==NOT_EXPR) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:1004:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5442);
                    evalEqualsExpression309=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression309.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1005:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR310=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression5448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR310_tree = (CommonTree)adaptor.create(NOT_EXPR310);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR310_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5451);
                    evalEqualsExpression311=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression311.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1008:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR313=null;
        Token LPAREN315=null;
        Token RPAREN317=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression312 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression314 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList316 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression318 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR313_tree=null;
        CommonTree LPAREN315_tree=null;
        CommonTree RPAREN317_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1009:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1009:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5464);
            evalRelationalExpression312=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression312.getTree());
            // EsperEPL2Grammar.g:1009:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==IS||LA125_0==EQUALS||(LA125_0>=SQL_NE && LA125_0<=NOT_EQUAL)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1010:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1010:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt120=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt120=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA120_2 = input.LA(2);

            	        if ( (LA120_2==NOT_EXPR) ) {
            	            alt120=3;
            	        }
            	        else if ( (LA120_2==WINDOW||LA120_2==ESCAPE||LA120_2==EVERY_EXPR||(LA120_2>=SUM && LA120_2<=COUNT)||LA120_2==OUTER||(LA120_2>=JOIN && LA120_2<=FULL)||(LA120_2>=ALL && LA120_2<=SOME)||(LA120_2>=EVENTS && LA120_2<=LAST)||(LA120_2>=UNIDIRECTIONAL && LA120_2<=CURRENT_TIMESTAMP)||LA120_2==SNAPSHOT||(LA120_2>=VARIABLE && LA120_2<=AT)||(LA120_2>=BOOLEAN_TRUE && LA120_2<=VALUE_NULL)||LA120_2==NUM_DOUBLE||LA120_2==IDENT||LA120_2==LPAREN||(LA120_2>=PLUS && LA120_2<=QUESTION)||(LA120_2>=STRING_LITERAL && LA120_2<=QUOTED_STRING_LITERAL)||LA120_2==MINUS||LA120_2==LCURLY||LA120_2==NUM_INT||(LA120_2>=TICKED_STRING_LITERAL && LA120_2<=NUM_FLOAT)) ) {
            	            alt120=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 120, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt120=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt120=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 120, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt120) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1010:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression5477); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1011:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5495); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1012:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5509); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR313=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression5511); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR313);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1013:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression5525); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1014:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression5539); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1016:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt124=2;
            	    int LA124_0 = input.LA(1);

            	    if ( (LA124_0==WINDOW||LA124_0==ESCAPE||LA124_0==EVERY_EXPR||(LA124_0>=SUM && LA124_0<=COUNT)||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=CURRENT_TIMESTAMP)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=AT)||(LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||LA124_0==NUM_DOUBLE||LA124_0==IDENT||LA124_0==LPAREN||(LA124_0>=PLUS && LA124_0<=QUESTION)||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==MINUS||LA124_0==LCURLY||LA124_0==NUM_INT||(LA124_0>=TICKED_STRING_LITERAL && LA124_0<=NUM_FLOAT)) ) {
            	        alt124=1;
            	    }
            	    else if ( ((LA124_0>=ALL && LA124_0<=SOME)) ) {
            	        alt124=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 124, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt124) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1017:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5569);
            	            evalRelationalExpression314=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression314.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1018:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1018:13: (a= ANY | a= SOME | a= ALL )
            	            int alt121=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt121=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt121=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt121=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 121, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt121) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1018:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression5586); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1018:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression5592); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1018:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression5598); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1018:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt123=2;
            	            int LA123_0 = input.LA(1);

            	            if ( (LA123_0==LPAREN) ) {
            	                int LA123_1 = input.LA(2);

            	                if ( (LA123_1==SELECT) ) {
            	                    alt123=2;
            	                }
            	                else if ( (LA123_1==WINDOW||LA123_1==ESCAPE||(LA123_1>=NOT_EXPR && LA123_1<=EVERY_EXPR)||(LA123_1>=SUM && LA123_1<=COUNT)||LA123_1==CASE||LA123_1==OUTER||(LA123_1>=JOIN && LA123_1<=FULL)||(LA123_1>=EVENTS && LA123_1<=LAST)||(LA123_1>=UNIDIRECTIONAL && LA123_1<=CURRENT_TIMESTAMP)||LA123_1==SNAPSHOT||(LA123_1>=VARIABLE && LA123_1<=AT)||(LA123_1>=BOOLEAN_TRUE && LA123_1<=VALUE_NULL)||LA123_1==NUM_DOUBLE||LA123_1==IDENT||(LA123_1>=LPAREN && LA123_1<=RPAREN)||(LA123_1>=PLUS && LA123_1<=QUESTION)||(LA123_1>=STRING_LITERAL && LA123_1<=QUOTED_STRING_LITERAL)||LA123_1==MINUS||LA123_1==LCURLY||LA123_1==NUM_INT||(LA123_1>=TICKED_STRING_LITERAL && LA123_1<=NUM_FLOAT)) ) {
            	                    alt123=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 123, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 123, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt123) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1018:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1018:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1018:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN315=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression5604); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN315);

            	                    // EsperEPL2Grammar.g:1018:48: ( expressionList )?
            	                    int alt122=2;
            	                    int LA122_0 = input.LA(1);

            	                    if ( (LA122_0==WINDOW||LA122_0==ESCAPE||(LA122_0>=NOT_EXPR && LA122_0<=EVERY_EXPR)||(LA122_0>=SUM && LA122_0<=COUNT)||LA122_0==CASE||LA122_0==OUTER||(LA122_0>=JOIN && LA122_0<=FULL)||(LA122_0>=EVENTS && LA122_0<=LAST)||(LA122_0>=UNIDIRECTIONAL && LA122_0<=CURRENT_TIMESTAMP)||LA122_0==SNAPSHOT||(LA122_0>=VARIABLE && LA122_0<=AT)||(LA122_0>=BOOLEAN_TRUE && LA122_0<=VALUE_NULL)||LA122_0==NUM_DOUBLE||LA122_0==IDENT||LA122_0==LPAREN||(LA122_0>=PLUS && LA122_0<=QUESTION)||(LA122_0>=STRING_LITERAL && LA122_0<=QUOTED_STRING_LITERAL)||LA122_0==MINUS||LA122_0==LCURLY||LA122_0==NUM_INT||(LA122_0>=TICKED_STRING_LITERAL && LA122_0<=NUM_FLOAT)) ) {
            	                        alt122=1;
            	                    }
            	                    switch (alt122) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1018:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression5606);
            	                            expressionList316=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList316.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN317=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression5609); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN317);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1018:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5614);
            	                    subSelectGroupExpression318=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression318.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);



            // AST REWRITE
            // elements: expressionList, a, evalRelationalExpression, a, evalRelationalExpression, subSelectGroupExpression, evalRelationalExpression, expressionList, evalRelationalExpression, subSelectGroupExpression, evalRelationalExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1021:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1021:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1022:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1022:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1022:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1022:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1023:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1023:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1024:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1024:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1024:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1024:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1025:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1028:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN321=null;
        Token RPAREN323=null;
        Token COMMA327=null;
        Token IN_SET329=null;
        Token BETWEEN331=null;
        Token LIKE333=null;
        Token ESCAPE335=null;
        Token REGEXP337=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr319 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr320 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList322 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression324 = null;

        EsperEPL2GrammarParser.expression_return expression325 = null;

        EsperEPL2GrammarParser.expression_return expression326 = null;

        EsperEPL2GrammarParser.expression_return expression328 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery330 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList332 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr334 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant336 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr338 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN321_tree=null;
        CommonTree RPAREN323_tree=null;
        CommonTree COMMA327_tree=null;
        CommonTree IN_SET329_tree=null;
        CommonTree BETWEEN331_tree=null;
        CommonTree LIKE333_tree=null;
        CommonTree ESCAPE335_tree=null;
        CommonTree REGEXP337_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1029:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1029:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5742);
            concatenationExpr319=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr319.getTree());
            // EsperEPL2Grammar.g:1030:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==EOF||(LA139_0>=OR_EXPR && LA139_0<=AND_EXPR)||(LA139_0>=WHERE && LA139_0<=AS)||(LA139_0>=ELSE && LA139_0<=FROM)||LA139_0==IS||(LA139_0>=GROUP && LA139_0<=HAVING)||LA139_0==OUTPUT||LA139_0==INSERT||(LA139_0>=ORDER && LA139_0<=DESC)||(LA139_0>=TIMEPERIOD_SEC && LA139_0<=TIMEPERIOD_SECONDS)||LA139_0==ROW_LIMIT_EXPR||LA139_0==MEASURES||LA139_0==COMMA||LA139_0==EQUALS||LA139_0==RPAREN||LA139_0==BOR||(LA139_0>=RBRACK && LA139_0<=COLON)||(LA139_0>=BAND && LA139_0<=GE)||LA139_0==RCURLY) ) {
                alt139=1;
            }
            else if ( ((LA139_0>=IN_SET && LA139_0<=REGEXP)||LA139_0==NOT_EXPR) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // EsperEPL2Grammar.g:1031:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1031:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1032:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1032:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( ((LA131_0>=LT && LA131_0<=GE)) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1033:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1033:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt126=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt126=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt126=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt126=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt126=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 126, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt126) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1033:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression5774); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1033:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression5778); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1033:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression5782); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1033:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression5786); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1034:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt130=2;
                    	    int LA130_0 = input.LA(1);

                    	    if ( (LA130_0==WINDOW||LA130_0==ESCAPE||LA130_0==EVERY_EXPR||(LA130_0>=SUM && LA130_0<=COUNT)||LA130_0==OUTER||(LA130_0>=JOIN && LA130_0<=FULL)||(LA130_0>=EVENTS && LA130_0<=LAST)||(LA130_0>=UNIDIRECTIONAL && LA130_0<=CURRENT_TIMESTAMP)||LA130_0==SNAPSHOT||(LA130_0>=VARIABLE && LA130_0<=AT)||(LA130_0>=BOOLEAN_TRUE && LA130_0<=VALUE_NULL)||LA130_0==NUM_DOUBLE||LA130_0==IDENT||LA130_0==LPAREN||(LA130_0>=PLUS && LA130_0<=QUESTION)||(LA130_0>=STRING_LITERAL && LA130_0<=QUOTED_STRING_LITERAL)||LA130_0==MINUS||LA130_0==LCURLY||LA130_0==NUM_INT||(LA130_0>=TICKED_STRING_LITERAL && LA130_0<=NUM_FLOAT)) ) {
                    	        alt130=1;
                    	    }
                    	    else if ( ((LA130_0>=ALL && LA130_0<=SOME)) ) {
                    	        alt130=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 130, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt130) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1035:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5810);
                    	            concatenationExpr320=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr320.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1036:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1036:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt127=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt127=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt127=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt127=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 127, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt127) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1036:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression5827); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1036:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression5833); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1036:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression5839); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1036:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt129=2;
                    	            int LA129_0 = input.LA(1);

                    	            if ( (LA129_0==LPAREN) ) {
                    	                int LA129_1 = input.LA(2);

                    	                if ( (LA129_1==SELECT) ) {
                    	                    alt129=2;
                    	                }
                    	                else if ( (LA129_1==WINDOW||LA129_1==ESCAPE||(LA129_1>=NOT_EXPR && LA129_1<=EVERY_EXPR)||(LA129_1>=SUM && LA129_1<=COUNT)||LA129_1==CASE||LA129_1==OUTER||(LA129_1>=JOIN && LA129_1<=FULL)||(LA129_1>=EVENTS && LA129_1<=LAST)||(LA129_1>=UNIDIRECTIONAL && LA129_1<=CURRENT_TIMESTAMP)||LA129_1==SNAPSHOT||(LA129_1>=VARIABLE && LA129_1<=AT)||(LA129_1>=BOOLEAN_TRUE && LA129_1<=VALUE_NULL)||LA129_1==NUM_DOUBLE||LA129_1==IDENT||(LA129_1>=LPAREN && LA129_1<=RPAREN)||(LA129_1>=PLUS && LA129_1<=QUESTION)||(LA129_1>=STRING_LITERAL && LA129_1<=QUOTED_STRING_LITERAL)||LA129_1==MINUS||LA129_1==LCURLY||LA129_1==NUM_INT||(LA129_1>=TICKED_STRING_LITERAL && LA129_1<=NUM_FLOAT)) ) {
                    	                    alt129=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 129, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 129, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt129) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1036:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1036:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1036:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN321=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5845); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN321);

                    	                    // EsperEPL2Grammar.g:1036:48: ( expressionList )?
                    	                    int alt128=2;
                    	                    int LA128_0 = input.LA(1);

                    	                    if ( (LA128_0==WINDOW||LA128_0==ESCAPE||(LA128_0>=NOT_EXPR && LA128_0<=EVERY_EXPR)||(LA128_0>=SUM && LA128_0<=COUNT)||LA128_0==CASE||LA128_0==OUTER||(LA128_0>=JOIN && LA128_0<=FULL)||(LA128_0>=EVENTS && LA128_0<=LAST)||(LA128_0>=UNIDIRECTIONAL && LA128_0<=CURRENT_TIMESTAMP)||LA128_0==SNAPSHOT||(LA128_0>=VARIABLE && LA128_0<=AT)||(LA128_0>=BOOLEAN_TRUE && LA128_0<=VALUE_NULL)||LA128_0==NUM_DOUBLE||LA128_0==IDENT||LA128_0==LPAREN||(LA128_0>=PLUS && LA128_0<=QUESTION)||(LA128_0>=STRING_LITERAL && LA128_0<=QUOTED_STRING_LITERAL)||LA128_0==MINUS||LA128_0==LCURLY||LA128_0==NUM_INT||(LA128_0>=TICKED_STRING_LITERAL && LA128_0<=NUM_FLOAT)) ) {
                    	                        alt128=1;
                    	                    }
                    	                    switch (alt128) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1036:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression5847);
                    	                            expressionList322=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList322.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN323=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5850); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN323);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1036:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5855);
                    	                    subSelectGroupExpression324=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression324.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, concatenationExpr, g, concatenationExpr, expressionList, subSelectGroupExpression
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1040:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1040:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1041:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1041:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1041:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1041:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1042:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1044:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1044:6: (n= NOT_EXPR )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==NOT_EXPR) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // EsperEPL2Grammar.g:1044:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression5951); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1045:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt138=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA138_1 = input.LA(2);

                        if ( (LA138_1==LPAREN) ) {
                            int LA138_5 = input.LA(3);

                            if ( (LA138_5==SELECT) ) {
                                alt138=2;
                            }
                            else if ( (LA138_5==WINDOW||LA138_5==ESCAPE||(LA138_5>=NOT_EXPR && LA138_5<=EVERY_EXPR)||(LA138_5>=SUM && LA138_5<=COUNT)||LA138_5==CASE||LA138_5==OUTER||(LA138_5>=JOIN && LA138_5<=FULL)||(LA138_5>=EVENTS && LA138_5<=LAST)||(LA138_5>=UNIDIRECTIONAL && LA138_5<=CURRENT_TIMESTAMP)||LA138_5==SNAPSHOT||(LA138_5>=VARIABLE && LA138_5<=AT)||(LA138_5>=BOOLEAN_TRUE && LA138_5<=VALUE_NULL)||LA138_5==NUM_DOUBLE||LA138_5==IDENT||LA138_5==LPAREN||(LA138_5>=PLUS && LA138_5<=QUESTION)||(LA138_5>=STRING_LITERAL && LA138_5<=QUOTED_STRING_LITERAL)||LA138_5==MINUS||LA138_5==LCURLY||LA138_5==NUM_INT||(LA138_5>=TICKED_STRING_LITERAL && LA138_5<=NUM_FLOAT)) ) {
                                alt138=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 138, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA138_1==LBRACK) ) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt138=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt138=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt138=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);

                        throw nvae;
                    }

                    switch (alt138) {
                        case 1 :
                            // EsperEPL2Grammar.g:1048:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1048:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1048:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5978); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1049:8: (l= LPAREN | l= LBRACK )
                            int alt133=2;
                            int LA133_0 = input.LA(1);

                            if ( (LA133_0==LPAREN) ) {
                                alt133=1;
                            }
                            else if ( (LA133_0==LBRACK) ) {
                                alt133=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 133, 0, input);

                                throw nvae;
                            }
                            switch (alt133) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1049:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5990); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1049:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression5996); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression5999);
                            expression325=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression325.getTree());
                            // EsperEPL2Grammar.g:1050:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt135=2;
                            int LA135_0 = input.LA(1);

                            if ( (LA135_0==COLON) ) {
                                alt135=1;
                            }
                            else if ( (LA135_0==COMMA||LA135_0==RPAREN||LA135_0==RBRACK) ) {
                                alt135=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);

                                throw nvae;
                            }
                            switch (alt135) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1051:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1051:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1051:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6021); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1051:20: ( expression )
                                    // EsperEPL2Grammar.g:1051:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6024);
                                    expression326=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression326.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1053:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1053:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1053:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1053:10: ( COMMA expression )*
                                    loop134:
                                    do {
                                        int alt134=2;
                                        int LA134_0 = input.LA(1);

                                        if ( (LA134_0==COMMA) ) {
                                            alt134=1;
                                        }


                                        switch (alt134) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1053:11: COMMA expression
                                    	    {
                                    	    COMMA327=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6050); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA327);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6052);
                                    	    expression328=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop134;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1055:8: (r= RPAREN | r= RBRACK )
                            int alt136=2;
                            int LA136_0 = input.LA(1);

                            if ( (LA136_0==RPAREN) ) {
                                alt136=1;
                            }
                            else if ( (LA136_0==RBRACK) ) {
                                alt136=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 136, 0, input);

                                throw nvae;
                            }
                            switch (alt136) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1055:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6078); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1055:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6084); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: r, expression, expression, l, concatenationExpr, r, expression, l, r, l, r, l, IN_SET, concatenationExpr, concatenationExpr, expression, concatenationExpr
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1057:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1057:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1058:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1058:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1059:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1059:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1060:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1060:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1061:7: IN_SET inSubSelectQuery
                            {
                            IN_SET329=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6207); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET329);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6209);
                            inSubSelectQuery330=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery330.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, inSubSelectQuery, concatenationExpr, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1062:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1062:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1063:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1063:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1064:7: BETWEEN betweenList
                            {
                            BETWEEN331=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6255); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN331);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6257);
                            betweenList332=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList332.getTree());


                            // AST REWRITE
                            // elements: BETWEEN, concatenationExpr, betweenList, concatenationExpr, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1065:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1065:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1066:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1066:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1067:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE333=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6307); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE333);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6309);
                            concatenationExpr334=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr334.getTree());
                            // EsperEPL2Grammar.g:1067:30: ( ESCAPE stringconstant )?
                            int alt137=2;
                            int LA137_0 = input.LA(1);

                            if ( (LA137_0==ESCAPE) ) {
                                alt137=1;
                            }
                            switch (alt137) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1067:31: ESCAPE stringconstant
                                    {
                                    ESCAPE335=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6312); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE335);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6314);
                                    stringconstant336=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant336.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, LIKE, concatenationExpr, concatenationExpr, stringconstant
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1068:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1068:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1068:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1068:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1069:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1069:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1069:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1069:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1070:7: REGEXP concatenationExpr
                            {
                            REGEXP337=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression6366); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP337);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6368);
                            concatenationExpr338=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr338.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, REGEXP, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1071:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1071:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1072:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1072:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1077:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr339 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1078:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1078:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery6430);
            subQueryExpr339=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr339.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1079:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1079:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1082:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR342=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression340 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression341 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression343 = null;


        CommonTree c_tree=null;
        CommonTree LOR342_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1083:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1083:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6455);
            additiveExpression340=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression340.getTree());
            // EsperEPL2Grammar.g:1083:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==LOR) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // EsperEPL2Grammar.g:1083:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6463);
                    additiveExpression341=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression341.getTree());
                    // EsperEPL2Grammar.g:1083:50: ( LOR additiveExpression )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==LOR) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1083:52: LOR additiveExpression
                    	    {
                    	    LOR342=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6467); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR342);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6469);
                    	    additiveExpression343=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression343.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1084:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1084:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1085:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1088:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS345=null;
        Token MINUS346=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression344 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression347 = null;


        CommonTree PLUS345_tree=null;
        CommonTree MINUS346_tree=null;

        try {
            // EsperEPL2Grammar.g:1089:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1089:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6510);
            multiplyExpression344=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression344.getTree());
            // EsperEPL2Grammar.g:1089:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==PLUS||LA143_0==MINUS) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1089:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1089:25: ( PLUS | MINUS )
            	    int alt142=2;
            	    int LA142_0 = input.LA(1);

            	    if ( (LA142_0==PLUS) ) {
            	        alt142=1;
            	    }
            	    else if ( (LA142_0==MINUS) ) {
            	        alt142=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 142, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt142) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1089:26: PLUS
            	            {
            	            PLUS345=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression6515); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS345_tree = (CommonTree)adaptor.create(PLUS345);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS345_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1089:32: MINUS
            	            {
            	            MINUS346=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression6518); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS346_tree = (CommonTree)adaptor.create(MINUS346);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS346_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6522);
            	    multiplyExpression347=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression347.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1092:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR349=null;
        Token DIV350=null;
        Token MOD351=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression348 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression352 = null;


        CommonTree STAR349_tree=null;
        CommonTree DIV350_tree=null;
        CommonTree MOD351_tree=null;

        try {
            // EsperEPL2Grammar.g:1093:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1093:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6536);
            unaryExpression348=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression348.getTree());
            // EsperEPL2Grammar.g:1093:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==STAR||(LA145_0>=DIV && LA145_0<=MOD)) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1093:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1093:22: ( STAR | DIV | MOD )
            	    int alt144=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt144=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt144=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1093:23: STAR
            	            {
            	            STAR349=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression6541); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR349_tree = (CommonTree)adaptor.create(STAR349);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR349_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1093:29: DIV
            	            {
            	            DIV350=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression6544); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV350_tree = (CommonTree)adaptor.create(DIV350);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV350_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1093:34: MOD
            	            {
            	            MOD351=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression6547); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD351_tree = (CommonTree)adaptor.create(MOD351);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD351_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6551);
            	    unaryExpression352=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression352.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1096:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS353=null;
        Token LPAREN357=null;
        Token RPAREN359=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty354 = null;

        EsperEPL2GrammarParser.constant_return constant355 = null;

        EsperEPL2GrammarParser.substitution_return substitution356 = null;

        EsperEPL2GrammarParser.expression_return expression358 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction360 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc361 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression362 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression363 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression364 = null;


        CommonTree MINUS353_tree=null;
        CommonTree LPAREN357_tree=null;
        CommonTree RPAREN359_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1097:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt146=9;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // EsperEPL2Grammar.g:1097:4: MINUS eventProperty
                    {
                    MINUS353=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS353);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression6568);
                    eventProperty354=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty354.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1097:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1097:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1098:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression6581);
                    constant355=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant355.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1099:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression6586);
                    substitution356=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution356.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1100:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN357=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression6591); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression6594);
                    expression358=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression358.getTree());
                    RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression6596); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1101:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6602);
                    eventPropertyOrLibFunction360=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction360.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1102:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1102:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1102:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression6614);
                    builtinFunc361=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc361.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1103:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression6620);
                    arrayExpression362=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression362.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1104:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression6625);
                    subSelectExpression363=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression363.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1105:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression6630);
                    existsSubSelectExpression364=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression364.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1108:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr365 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1109:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1109:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression6647);
            subQueryExpr365=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr365.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1110:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1110:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1113:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr366 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1114:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1114:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression6669);
            subQueryExpr366=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr366.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1115:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1115:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1118:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS367=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr368 = null;


        CommonTree EXISTS367_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1119:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1119:4: EXISTS subQueryExpr
            {
            EXISTS367=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression6691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS367);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression6693);
            subQueryExpr368=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr368.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1120:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1120:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1123:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN369=null;
        Token SELECT370=null;
        Token FROM372=null;
        Token WHERE374=null;
        Token RPAREN376=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement371 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr373 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause375 = null;


        CommonTree LPAREN369_tree=null;
        CommonTree SELECT370_tree=null;
        CommonTree FROM372_tree=null;
        CommonTree WHERE374_tree=null;
        CommonTree RPAREN376_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1126:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1126:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN369=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr6726); if (state.failed) return retval;
            SELECT370=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr6732); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr6735);
            selectionListElement371=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement371.getTree());
            FROM372=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr6742); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr6745);
            subSelectFilterExpr373=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr373.getTree());
            // EsperEPL2Grammar.g:1129:6: ( WHERE whereClause )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==WHERE) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // EsperEPL2Grammar.g:1129:7: WHERE whereClause
                    {
                    WHERE374=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr6753); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr6756);
                    whereClause375=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause375.getTree());

                    }
                    break;

            }

            RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr6765); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1133:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT378=null;
        Token DOT380=null;
        Token AS382=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression377 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression379 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression381 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT378_tree=null;
        CommonTree DOT380_tree=null;
        CommonTree AS382_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1136:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1136:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr6789);
            eventFilterExpression377=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression377.getTree());
            // EsperEPL2Grammar.g:1137:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==DOT) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // EsperEPL2Grammar.g:1137:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT378=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT378);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6796);
                    viewExpression379=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression379.getTree());
                    // EsperEPL2Grammar.g:1137:23: ( DOT viewExpression )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==DOT) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1137:24: DOT viewExpression
                    	    {
                    	    DOT380=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6799); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT380);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6801);
                    	    viewExpression381=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression381.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1137:47: ( AS i= IDENT | i= IDENT )?
            int alt150=3;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==AS) ) {
                alt150=1;
            }
            else if ( (LA150_0==IDENT) ) {
                alt150=2;
            }
            switch (alt150) {
                case 1 :
                    // EsperEPL2Grammar.g:1137:48: AS i= IDENT
                    {
                    AS382=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr6808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS382);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1137:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1137:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt151=3;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==RETAINUNION) ) {
                alt151=1;
            }
            else if ( (LA151_0==RETAININTERSECTION) ) {
                alt151=2;
            }
            switch (alt151) {
                case 1 :
                    // EsperEPL2Grammar.g:1137:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr6825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1137:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, viewExpression, ru, ri, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1138:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1138:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1138:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1138:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1138:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1138:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1141:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY383=null;
        Token COMMA385=null;
        Token RCURLY387=null;
        EsperEPL2GrammarParser.expression_return expression384 = null;

        EsperEPL2GrammarParser.expression_return expression386 = null;


        CommonTree LCURLY383_tree=null;
        CommonTree COMMA385_tree=null;
        CommonTree RCURLY387_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1142:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1142:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY383=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression6869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY383);

            // EsperEPL2Grammar.g:1142:11: ( expression ( COMMA expression )* )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==WINDOW||LA153_0==ESCAPE||(LA153_0>=NOT_EXPR && LA153_0<=EVERY_EXPR)||(LA153_0>=SUM && LA153_0<=COUNT)||LA153_0==CASE||LA153_0==OUTER||(LA153_0>=JOIN && LA153_0<=FULL)||(LA153_0>=EVENTS && LA153_0<=LAST)||(LA153_0>=UNIDIRECTIONAL && LA153_0<=CURRENT_TIMESTAMP)||LA153_0==SNAPSHOT||(LA153_0>=VARIABLE && LA153_0<=AT)||(LA153_0>=BOOLEAN_TRUE && LA153_0<=VALUE_NULL)||LA153_0==NUM_DOUBLE||LA153_0==IDENT||LA153_0==LPAREN||(LA153_0>=PLUS && LA153_0<=QUESTION)||(LA153_0>=STRING_LITERAL && LA153_0<=QUOTED_STRING_LITERAL)||LA153_0==MINUS||LA153_0==LCURLY||LA153_0==NUM_INT||(LA153_0>=TICKED_STRING_LITERAL && LA153_0<=NUM_FLOAT)) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // EsperEPL2Grammar.g:1142:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression6872);
                    expression384=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression384.getTree());
                    // EsperEPL2Grammar.g:1142:23: ( COMMA expression )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==COMMA) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1142:24: COMMA expression
                    	    {
                    	    COMMA385=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression6875); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA385);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression6877);
                    	    expression386=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression386.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY387=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression6884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY387);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1143:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1143:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1143:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1146:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM388=null;
        Token LPAREN389=null;
        Token ALL390=null;
        Token DISTINCT391=null;
        Token RPAREN393=null;
        Token AVG394=null;
        Token LPAREN395=null;
        Token ALL396=null;
        Token DISTINCT397=null;
        Token RPAREN399=null;
        Token COUNT400=null;
        Token LPAREN401=null;
        Token ALL402=null;
        Token DISTINCT403=null;
        Token STAR405=null;
        Token RPAREN406=null;
        Token MEDIAN407=null;
        Token LPAREN408=null;
        Token ALL409=null;
        Token DISTINCT410=null;
        Token RPAREN412=null;
        Token STDDEV413=null;
        Token LPAREN414=null;
        Token ALL415=null;
        Token DISTINCT416=null;
        Token RPAREN418=null;
        Token AVEDEV419=null;
        Token LPAREN420=null;
        Token ALL421=null;
        Token DISTINCT422=null;
        Token RPAREN424=null;
        Token COALESCE427=null;
        Token LPAREN428=null;
        Token COMMA430=null;
        Token COMMA432=null;
        Token RPAREN434=null;
        Token PREVIOUS435=null;
        Token LPAREN436=null;
        Token COMMA438=null;
        Token RPAREN440=null;
        Token PRIOR441=null;
        Token LPAREN442=null;
        Token NUM_INT443=null;
        Token COMMA444=null;
        Token RPAREN446=null;
        Token INSTANCEOF447=null;
        Token LPAREN448=null;
        Token COMMA450=null;
        Token COMMA452=null;
        Token RPAREN454=null;
        Token CAST455=null;
        Token LPAREN456=null;
        Token COMMA458=null;
        Token AS459=null;
        Token RPAREN461=null;
        Token EXISTS462=null;
        Token LPAREN463=null;
        Token RPAREN465=null;
        Token CURRENT_TIMESTAMP466=null;
        Token LPAREN467=null;
        Token RPAREN468=null;
        EsperEPL2GrammarParser.expression_return expression392 = null;

        EsperEPL2GrammarParser.expression_return expression398 = null;

        EsperEPL2GrammarParser.expression_return expression404 = null;

        EsperEPL2GrammarParser.expression_return expression411 = null;

        EsperEPL2GrammarParser.expression_return expression417 = null;

        EsperEPL2GrammarParser.expression_return expression423 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation425 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation426 = null;

        EsperEPL2GrammarParser.expression_return expression429 = null;

        EsperEPL2GrammarParser.expression_return expression431 = null;

        EsperEPL2GrammarParser.expression_return expression433 = null;

        EsperEPL2GrammarParser.expression_return expression437 = null;

        EsperEPL2GrammarParser.expression_return expression439 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty445 = null;

        EsperEPL2GrammarParser.expression_return expression449 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier451 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier453 = null;

        EsperEPL2GrammarParser.expression_return expression457 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier460 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty464 = null;


        CommonTree SUM388_tree=null;
        CommonTree LPAREN389_tree=null;
        CommonTree ALL390_tree=null;
        CommonTree DISTINCT391_tree=null;
        CommonTree RPAREN393_tree=null;
        CommonTree AVG394_tree=null;
        CommonTree LPAREN395_tree=null;
        CommonTree ALL396_tree=null;
        CommonTree DISTINCT397_tree=null;
        CommonTree RPAREN399_tree=null;
        CommonTree COUNT400_tree=null;
        CommonTree LPAREN401_tree=null;
        CommonTree ALL402_tree=null;
        CommonTree DISTINCT403_tree=null;
        CommonTree STAR405_tree=null;
        CommonTree RPAREN406_tree=null;
        CommonTree MEDIAN407_tree=null;
        CommonTree LPAREN408_tree=null;
        CommonTree ALL409_tree=null;
        CommonTree DISTINCT410_tree=null;
        CommonTree RPAREN412_tree=null;
        CommonTree STDDEV413_tree=null;
        CommonTree LPAREN414_tree=null;
        CommonTree ALL415_tree=null;
        CommonTree DISTINCT416_tree=null;
        CommonTree RPAREN418_tree=null;
        CommonTree AVEDEV419_tree=null;
        CommonTree LPAREN420_tree=null;
        CommonTree ALL421_tree=null;
        CommonTree DISTINCT422_tree=null;
        CommonTree RPAREN424_tree=null;
        CommonTree COALESCE427_tree=null;
        CommonTree LPAREN428_tree=null;
        CommonTree COMMA430_tree=null;
        CommonTree COMMA432_tree=null;
        CommonTree RPAREN434_tree=null;
        CommonTree PREVIOUS435_tree=null;
        CommonTree LPAREN436_tree=null;
        CommonTree COMMA438_tree=null;
        CommonTree RPAREN440_tree=null;
        CommonTree PRIOR441_tree=null;
        CommonTree LPAREN442_tree=null;
        CommonTree NUM_INT443_tree=null;
        CommonTree COMMA444_tree=null;
        CommonTree RPAREN446_tree=null;
        CommonTree INSTANCEOF447_tree=null;
        CommonTree LPAREN448_tree=null;
        CommonTree COMMA450_tree=null;
        CommonTree COMMA452_tree=null;
        CommonTree RPAREN454_tree=null;
        CommonTree CAST455_tree=null;
        CommonTree LPAREN456_tree=null;
        CommonTree COMMA458_tree=null;
        CommonTree AS459_tree=null;
        CommonTree RPAREN461_tree=null;
        CommonTree EXISTS462_tree=null;
        CommonTree LPAREN463_tree=null;
        CommonTree RPAREN465_tree=null;
        CommonTree CURRENT_TIMESTAMP466_tree=null;
        CommonTree LPAREN467_tree=null;
        CommonTree RPAREN468_tree=null;

        try {
            // EsperEPL2Grammar.g:1147:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt166=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt166=1;
                }
                break;
            case AVG:
                {
                alt166=2;
                }
                break;
            case COUNT:
                {
                alt166=3;
                }
                break;
            case MEDIAN:
                {
                alt166=4;
                }
                break;
            case STDDEV:
                {
                alt166=5;
                }
                break;
            case AVEDEV:
                {
                alt166=6;
                }
                break;
            case FIRST:
                {
                alt166=7;
                }
                break;
            case LAST:
                {
                alt166=8;
                }
                break;
            case COALESCE:
                {
                alt166=9;
                }
                break;
            case PREVIOUS:
                {
                alt166=10;
                }
                break;
            case PRIOR:
                {
                alt166=11;
                }
                break;
            case INSTANCEOF:
                {
                alt166=12;
                }
                break;
            case CAST:
                {
                alt166=13;
                }
                break;
            case EXISTS:
                {
                alt166=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt166=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // EsperEPL2Grammar.g:1147:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM388=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc6907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM388_tree = (CommonTree)adaptor.create(SUM388);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM388_tree, root_0);
                    }
                    LPAREN389=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6910); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1147:17: ( ALL | DISTINCT )?
                    int alt154=3;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==ALL) ) {
                        alt154=1;
                    }
                    else if ( (LA154_0==DISTINCT) ) {
                        alt154=2;
                    }
                    switch (alt154) {
                        case 1 :
                            // EsperEPL2Grammar.g:1147:18: ALL
                            {
                            ALL390=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6914); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1147:25: DISTINCT
                            {
                            DISTINCT391=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6919); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT391_tree = (CommonTree)adaptor.create(DISTINCT391);
                            adaptor.addChild(root_0, DISTINCT391_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6923);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression392.getTree());
                    RPAREN393=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6925); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1148:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG394=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc6931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG394_tree = (CommonTree)adaptor.create(AVG394);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG394_tree, root_0);
                    }
                    LPAREN395=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6934); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1148:17: ( ALL | DISTINCT )?
                    int alt155=3;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==ALL) ) {
                        alt155=1;
                    }
                    else if ( (LA155_0==DISTINCT) ) {
                        alt155=2;
                    }
                    switch (alt155) {
                        case 1 :
                            // EsperEPL2Grammar.g:1148:18: ALL
                            {
                            ALL396=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6938); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1148:25: DISTINCT
                            {
                            DISTINCT397=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6943); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT397_tree = (CommonTree)adaptor.create(DISTINCT397);
                            adaptor.addChild(root_0, DISTINCT397_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6947);
                    expression398=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression398.getTree());
                    RPAREN399=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6949); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1149:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT400=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc6955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT400_tree = (CommonTree)adaptor.create(COUNT400);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT400_tree, root_0);
                    }
                    LPAREN401=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6958); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1150:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==WINDOW||LA157_0==ESCAPE||(LA157_0>=NOT_EXPR && LA157_0<=EVERY_EXPR)||(LA157_0>=SUM && LA157_0<=COUNT)||LA157_0==CASE||LA157_0==OUTER||(LA157_0>=JOIN && LA157_0<=FULL)||(LA157_0>=DISTINCT && LA157_0<=ALL)||(LA157_0>=EVENTS && LA157_0<=LAST)||(LA157_0>=UNIDIRECTIONAL && LA157_0<=CURRENT_TIMESTAMP)||LA157_0==SNAPSHOT||(LA157_0>=VARIABLE && LA157_0<=AT)||(LA157_0>=BOOLEAN_TRUE && LA157_0<=VALUE_NULL)||LA157_0==NUM_DOUBLE||LA157_0==IDENT||LA157_0==LPAREN||(LA157_0>=PLUS && LA157_0<=QUESTION)||(LA157_0>=STRING_LITERAL && LA157_0<=QUOTED_STRING_LITERAL)||LA157_0==MINUS||LA157_0==LCURLY||LA157_0==NUM_INT||(LA157_0>=TICKED_STRING_LITERAL && LA157_0<=NUM_FLOAT)) ) {
                        alt157=1;
                    }
                    else if ( (LA157_0==STAR) ) {
                        alt157=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 0, input);

                        throw nvae;
                    }
                    switch (alt157) {
                        case 1 :
                            // EsperEPL2Grammar.g:1151:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1151:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1151:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1151:5: ( ALL | DISTINCT )?
                            int alt156=3;
                            int LA156_0 = input.LA(1);

                            if ( (LA156_0==ALL) ) {
                                alt156=1;
                            }
                            else if ( (LA156_0==DISTINCT) ) {
                                alt156=2;
                            }
                            switch (alt156) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1151:6: ALL
                                    {
                                    ALL402=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6970); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1151:13: DISTINCT
                                    {
                                    DISTINCT403=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6975); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT403_tree = (CommonTree)adaptor.create(DISTINCT403);
                                    adaptor.addChild(root_0, DISTINCT403_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc6979);
                            expression404=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression404.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1153:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1153:4: ( STAR )
                            // EsperEPL2Grammar.g:1153:5: STAR
                            {
                            STAR405=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc6990); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN406=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7001); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1156:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN407=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN407_tree = (CommonTree)adaptor.create(MEDIAN407);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN407_tree, root_0);
                    }
                    LPAREN408=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7010); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1156:20: ( ALL | DISTINCT )?
                    int alt158=3;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==ALL) ) {
                        alt158=1;
                    }
                    else if ( (LA158_0==DISTINCT) ) {
                        alt158=2;
                    }
                    switch (alt158) {
                        case 1 :
                            // EsperEPL2Grammar.g:1156:21: ALL
                            {
                            ALL409=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7014); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1156:28: DISTINCT
                            {
                            DISTINCT410=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7019); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT410_tree = (CommonTree)adaptor.create(DISTINCT410);
                            adaptor.addChild(root_0, DISTINCT410_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7023);
                    expression411=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression411.getTree());
                    RPAREN412=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7025); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1157:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV413=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV413_tree = (CommonTree)adaptor.create(STDDEV413);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV413_tree, root_0);
                    }
                    LPAREN414=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7034); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1157:20: ( ALL | DISTINCT )?
                    int alt159=3;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==ALL) ) {
                        alt159=1;
                    }
                    else if ( (LA159_0==DISTINCT) ) {
                        alt159=2;
                    }
                    switch (alt159) {
                        case 1 :
                            // EsperEPL2Grammar.g:1157:21: ALL
                            {
                            ALL415=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7038); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1157:28: DISTINCT
                            {
                            DISTINCT416=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7043); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT416_tree = (CommonTree)adaptor.create(DISTINCT416);
                            adaptor.addChild(root_0, DISTINCT416_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7047);
                    expression417=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression417.getTree());
                    RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7049); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1158:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV419=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV419_tree = (CommonTree)adaptor.create(AVEDEV419);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV419_tree, root_0);
                    }
                    LPAREN420=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7058); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1158:20: ( ALL | DISTINCT )?
                    int alt160=3;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==ALL) ) {
                        alt160=1;
                    }
                    else if ( (LA160_0==DISTINCT) ) {
                        alt160=2;
                    }
                    switch (alt160) {
                        case 1 :
                            // EsperEPL2Grammar.g:1158:21: ALL
                            {
                            ALL421=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7062); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1158:28: DISTINCT
                            {
                            DISTINCT422=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7067); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT422_tree = (CommonTree)adaptor.create(DISTINCT422);
                            adaptor.addChild(root_0, DISTINCT422_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7071);
                    expression423=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression423.getTree());
                    RPAREN424=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7073); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1159:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7079);
                    firstAggregation425=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation425.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1160:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7084);
                    lastAggregation426=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation426.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1161:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE427=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE427_tree = (CommonTree)adaptor.create(COALESCE427);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE427_tree, root_0);
                    }
                    LPAREN428=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7092); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7095);
                    expression429=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression429.getTree());
                    COMMA430=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7097); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7100);
                    expression431=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression431.getTree());
                    // EsperEPL2Grammar.g:1161:51: ( COMMA expression )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==COMMA) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1161:52: COMMA expression
                    	    {
                    	    COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7103); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7106);
                    	    expression433=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);

                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7110); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1162:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS435=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS435_tree = (CommonTree)adaptor.create(PREVIOUS435);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS435_tree, root_0);
                    }
                    LPAREN436=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7119); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7122);
                    expression437=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression437.getTree());
                    // EsperEPL2Grammar.g:1162:33: ( COMMA expression )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==COMMA) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // EsperEPL2Grammar.g:1162:34: COMMA expression
                            {
                            COMMA438=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7125); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7128);
                            expression439=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression439.getTree());

                            }
                            break;

                    }

                    RPAREN440=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7132); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1163:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR441=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR441_tree = (CommonTree)adaptor.create(PRIOR441);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR441_tree, root_0);
                    }
                    LPAREN442=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7141); if (state.failed) return retval;
                    NUM_INT443=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT443_tree = (CommonTree)adaptor.create(NUM_INT443);
                    adaptor.addChild(root_0, NUM_INT443_tree);
                    }
                    COMMA444=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7146); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7149);
                    eventProperty445=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty445.getTree());
                    RPAREN446=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7151); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1166:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF447=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF447_tree = (CommonTree)adaptor.create(INSTANCEOF447);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF447_tree, root_0);
                    }
                    LPAREN448=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7164); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7167);
                    expression449=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());
                    COMMA450=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7169); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7172);
                    classIdentifier451=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier451.getTree());
                    // EsperEPL2Grammar.g:1166:58: ( COMMA classIdentifier )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==COMMA) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1166:59: COMMA classIdentifier
                    	    {
                    	    COMMA452=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7175); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7178);
                    	    classIdentifier453=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier453.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);

                    RPAREN454=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7182); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1167:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST455=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST455_tree = (CommonTree)adaptor.create(CAST455);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST455_tree, root_0);
                    }
                    LPAREN456=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7191); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7194);
                    expression457=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression457.getTree());
                    // EsperEPL2Grammar.g:1167:29: ( COMMA | AS )
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==COMMA) ) {
                        alt164=1;
                    }
                    else if ( (LA164_0==AS) ) {
                        alt164=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 0, input);

                        throw nvae;
                    }
                    switch (alt164) {
                        case 1 :
                            // EsperEPL2Grammar.g:1167:30: COMMA
                            {
                            COMMA458=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7197); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1167:39: AS
                            {
                            AS459=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7202); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7206);
                    classIdentifier460=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier460.getTree());
                    RPAREN461=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7208); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1168:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS462=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS462_tree = (CommonTree)adaptor.create(EXISTS462);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS462_tree, root_0);
                    }
                    LPAREN463=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7217); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7220);
                    eventProperty464=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty464.getTree());
                    RPAREN465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7222); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1169:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP466=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7228); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP466_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP466);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP466_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1169:23: ( LPAREN RPAREN )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==LPAREN) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1169:24: LPAREN RPAREN
                            {
                            LPAREN467=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7232); if (state.failed) return retval;
                            RPAREN468=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7235); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1172:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST469=null;
        Token LPAREN470=null;
        Token RPAREN472=null;
        EsperEPL2GrammarParser.expression_return expression471 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST469_tree=null;
        CommonTree LPAREN470_tree=null;
        CommonTree RPAREN472_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1173:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1173:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST469=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST469);

            LPAREN470=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN470);

            // EsperEPL2Grammar.g:1173:17: (a= ALL | d= DISTINCT )?
            int alt167=3;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==ALL) ) {
                alt167=1;
            }
            else if ( (LA167_0==DISTINCT) ) {
                alt167=2;
            }
            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1173:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1173:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7267);
            expression471=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression471.getTree());
            RPAREN472=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN472);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1174:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1174:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1174:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1177:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST473=null;
        Token LPAREN474=null;
        Token RPAREN476=null;
        EsperEPL2GrammarParser.expression_return expression475 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST473_tree=null;
        CommonTree LPAREN474_tree=null;
        CommonTree RPAREN476_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1178:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1178:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST473=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST473);

            LPAREN474=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN474);

            // EsperEPL2Grammar.g:1178:16: (a= ALL | d= DISTINCT )?
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ALL) ) {
                alt168=1;
            }
            else if ( (LA168_0==DISTINCT) ) {
                alt168=2;
            }
            switch (alt168) {
                case 1 :
                    // EsperEPL2Grammar.g:1178:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1178:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7312);
            expression475=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
            RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN476);



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1179:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1179:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1179:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1182:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX477=null;
        Token MIN478=null;
        Token LPAREN479=null;
        Token COMMA481=null;
        Token COMMA483=null;
        Token RPAREN485=null;
        EsperEPL2GrammarParser.expression_return expression480 = null;

        EsperEPL2GrammarParser.expression_return expression482 = null;

        EsperEPL2GrammarParser.expression_return expression484 = null;


        CommonTree MAX477_tree=null;
        CommonTree MIN478_tree=null;
        CommonTree LPAREN479_tree=null;
        CommonTree COMMA481_tree=null;
        CommonTree COMMA483_tree=null;
        CommonTree RPAREN485_tree=null;

        try {
            // EsperEPL2Grammar.g:1183:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1183:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1183:4: ( MAX | MIN )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==MAX) ) {
                alt169=1;
            }
            else if ( (LA169_0==MIN) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // EsperEPL2Grammar.g:1183:5: MAX
                    {
                    MAX477=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc7341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX477_tree = (CommonTree)adaptor.create(MAX477);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX477_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1183:12: MIN
                    {
                    MIN478=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc7346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN478_tree = (CommonTree)adaptor.create(MIN478);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN478_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN479=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc7350); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc7353);
            expression480=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression480.getTree());
            // EsperEPL2Grammar.g:1183:37: ( COMMA expression ( COMMA expression )* )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==COMMA) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1183:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA481=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7356); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc7359);
                    expression482=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());
                    // EsperEPL2Grammar.g:1183:56: ( COMMA expression )*
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==COMMA) ) {
                            alt170=1;
                        }


                        switch (alt170) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1183:57: COMMA expression
                    	    {
                    	    COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7362); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc7365);
                    	    expression484=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc7372); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1186:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty486 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction487 = null;



        try {
            // EsperEPL2Grammar.g:1187:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt172=2;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1187:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction7391);
                    eventProperty486=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty486.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1188:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction7396);
                    libFunction487=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction487.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1191:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT489=null;
        Token LPAREN491=null;
        Token RPAREN493=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy488 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent490 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs492 = null;


        CommonTree DOT489_tree=null;
        CommonTree LPAREN491_tree=null;
        CommonTree RPAREN493_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1192:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1192:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1192:4: ( classIdentifierNonGreedy DOT )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==IDENT) ) {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==DOT) ) {
                    alt173=1;
                }
            }
            else if ( (LA173_0==TICKED_STRING_LITERAL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // EsperEPL2Grammar.g:1192:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction7409);
                    classIdentifierNonGreedy488=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy488.getTree());
                    DOT489=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction7411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT489);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction7415);
            funcIdent490=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent490.getTree());
            LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction7417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN491);

            // EsperEPL2Grammar.g:1192:53: ( libFunctionArgs )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==WINDOW||LA174_0==ESCAPE||(LA174_0>=NOT_EXPR && LA174_0<=EVERY_EXPR)||(LA174_0>=SUM && LA174_0<=COUNT)||LA174_0==CASE||LA174_0==OUTER||(LA174_0>=JOIN && LA174_0<=FULL)||(LA174_0>=DISTINCT && LA174_0<=ALL)||(LA174_0>=EVENTS && LA174_0<=LAST)||(LA174_0>=UNIDIRECTIONAL && LA174_0<=CURRENT_TIMESTAMP)||LA174_0==SNAPSHOT||(LA174_0>=VARIABLE && LA174_0<=AT)||(LA174_0>=BOOLEAN_TRUE && LA174_0<=VALUE_NULL)||LA174_0==NUM_DOUBLE||LA174_0==IDENT||LA174_0==LPAREN||(LA174_0>=PLUS && LA174_0<=QUESTION)||(LA174_0>=STRING_LITERAL && LA174_0<=QUOTED_STRING_LITERAL)||LA174_0==MINUS||LA174_0==LCURLY||LA174_0==NUM_INT||(LA174_0>=TICKED_STRING_LITERAL && LA174_0<=NUM_FLOAT)) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1192:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction7420);
                    libFunctionArgs492=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs492.getTree());

                    }
                    break;

            }

            RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction7424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN493);



            // AST REWRITE
            // elements: libFunctionArgs, classIdentifierNonGreedy, funcIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1193:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1193:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1193:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1193:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1196:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT494=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT494_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1197:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt175=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt175=1;
                }
                break;
            case MAX:
                {
                alt175=2;
                }
                break;
            case MIN:
                {
                alt175=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1197:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT494=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent7454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT494_tree = (CommonTree)adaptor.create(IDENT494);
                    adaptor.addChild(root_0, IDENT494_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1198:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent7461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1198:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1199:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent7473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1199:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1202:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL495=null;
        Token DISTINCT496=null;
        Token COMMA498=null;
        EsperEPL2GrammarParser.expression_return expression497 = null;

        EsperEPL2GrammarParser.expression_return expression499 = null;


        CommonTree ALL495_tree=null;
        CommonTree DISTINCT496_tree=null;
        CommonTree COMMA498_tree=null;

        try {
            // EsperEPL2Grammar.g:1203:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1203:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1203:4: ( ALL | DISTINCT )?
            int alt176=3;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ALL) ) {
                alt176=1;
            }
            else if ( (LA176_0==DISTINCT) ) {
                alt176=2;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1203:5: ALL
                    {
                    ALL495=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs7491); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1203:12: DISTINCT
                    {
                    DISTINCT496=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs7496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT496_tree = (CommonTree)adaptor.create(DISTINCT496);
                    adaptor.addChild(root_0, DISTINCT496_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs7500);
            expression497=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression497.getTree());
            // EsperEPL2Grammar.g:1203:34: ( COMMA expression )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==COMMA) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1203:35: COMMA expression
            	    {
            	    COMMA498=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs7503); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs7506);
            	    expression499=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression499.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1206:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR501=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr500 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr502 = null;


        CommonTree AND_EXPR501_tree=null;

        try {
            // EsperEPL2Grammar.g:1207:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1207:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList7520);
            concatenationExpr500=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr500.getTree());
            AND_EXPR501=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList7522); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList7525);
            concatenationExpr502=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr502.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1216:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression503 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1219:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1219:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression7553);
            followedByExpression503=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression503.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1222:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression504 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression505 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1223:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1223:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression7565);
            orExpression504=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression504.getTree());
            // EsperEPL2Grammar.g:1223:17: (f= FOLLOWED_BY orExpression )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==FOLLOWED_BY) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1223:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression7570); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression7572);
            	    orExpression505=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression505.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1224:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1224:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1225:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1228:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression506 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression507 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1229:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1229:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression7611);
            andExpression506=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression506.getTree());
            // EsperEPL2Grammar.g:1229:18: (o= OR_EXPR andExpression )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==OR_EXPR) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1229:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression7616); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression7618);
            	    andExpression507=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression507.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1230:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1230:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1231:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1234:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression508 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression509 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1235:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1235:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression7650);
            matchUntilExpression508=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression508.getTree());
            // EsperEPL2Grammar.g:1235:25: (a= AND_EXPR matchUntilExpression )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==AND_EXPR) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1235:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression7655); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression7657);
            	    matchUntilExpression509=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression509.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1236:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1236:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1237:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1240:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression510 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression511 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1241:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1241:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1241:4: (r= matchUntilRange )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LBRACK) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1241:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression7692);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7696);
            qualifyExpression510=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression510.getTree());
            // EsperEPL2Grammar.g:1241:43: (a= UNTIL qualifyExpression )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==UNTIL) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1241:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression7701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7703);
                    qualifyExpression511=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression511.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1242:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1242:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1243:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1243:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1244:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1244:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1245:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1248:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList512 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix513 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1249:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1249:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1249:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( ((LA185_0>=NOT_EXPR && LA185_0<=EVERY_DISTINCT_EXPR)) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1249:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1249:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt183=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt183=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt183=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt183=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);

                        throw nvae;
                    }

                    switch (alt183) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression7768); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1249:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression7774); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1249:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7780); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression7782);
                            distinctExpressionList512=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList512.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1249:80: (r= matchUntilRange )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==LBRACK) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression7788);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression7797);
            guardPostFix513=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix513.getTree());


            // AST REWRITE
            // elements: guardPostFix, guardPostFix, guardPostFix, guardPostFix, distinctExpressionList, guardPostFix, EVERY_EXPR, guardPostFix, matchUntilRange, EVERY_DISTINCT_EXPR, distinctExpressionList, guardPostFix, EVERY_EXPR, EVERY_DISTINCT_EXPR, matchUntilRange, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1251:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1252:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1252:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1253:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1253:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1254:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1254:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1254:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1255:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1255:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1255:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1256:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1256:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1256:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1257:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1260:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN514=null;
        Token COMMA516=null;
        Token RPAREN518=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom515 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom517 = null;


        CommonTree LPAREN514_tree=null;
        CommonTree COMMA516_tree=null;
        CommonTree RPAREN518_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1261:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1261:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN514=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList7912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN514);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList7914);
            distinctExpressionAtom515=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom515.getTree());
            // EsperEPL2Grammar.g:1261:34: ( COMMA distinctExpressionAtom )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1261:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList7917); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA516);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList7919);
            	    distinctExpressionAtom517=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom517.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);

            RPAREN518=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList7923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN518);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1262:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1262:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1265:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression519 = null;



        try {
            // EsperEPL2Grammar.g:1266:2: ( expression )
            // EsperEPL2Grammar.g:1266:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom7946);
            expression519=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression519.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1269:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN522=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression520 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression521 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression523 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN522_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1270:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1270:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1270:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==IDENT||LA187_0==TICKED_STRING_LITERAL) ) {
                alt187=1;
            }
            else if ( (LA187_0==LPAREN) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1270:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix7961);
                    atomicExpression520=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression520.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1270:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix7967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix7969);
                    patternExpression521=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression521.getTree());
                    RPAREN522=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix7971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN522);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1270:59: (w= WHERE guardExpression )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==WHERE) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1270:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix7977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix7979);
                    guardExpression523=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression523.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: guardExpression, atomicExpression, atomicExpression, patternExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1271:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1271:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1271:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1271:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1272:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1272:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1272:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1275:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression524 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression525 = null;



        try {
            // EsperEPL2Grammar.g:1276:2: ( observerExpression | patternFilterExpression )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==IDENT) ) {
                int LA189_1 = input.LA(2);

                if ( (LA189_1==COLON) ) {
                    alt189=1;
                }
                else if ( (LA189_1==EOF||(LA189_1>=OR_EXPR && LA189_1<=AND_EXPR)||LA189_1==WHERE||LA189_1==UNTIL||(LA189_1>=EQUALS && LA189_1<=RPAREN)||(LA189_1>=LBRACK && LA189_1<=RBRACK)||LA189_1==FOLLOWED_BY) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA189_0==TICKED_STRING_LITERAL) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1276:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8021);
                    observerExpression524=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression524.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1276:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8025);
                    patternFilterExpression525=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression525.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1279:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON526=null;
        Token LPAREN527=null;
        Token RPAREN529=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList528 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON526_tree=null;
        CommonTree LPAREN527_tree=null;
        CommonTree RPAREN529_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1280:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1280:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON526=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON526);

            // EsperEPL2Grammar.g:1280:19: (nm= IDENT | a= AT )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==IDENT) ) {
                alt190=1;
            }
            else if ( (LA190_0==AT) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1280:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1280:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN527=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN527);

            // EsperEPL2Grammar.g:1280:44: ( expressionWithTimeList )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==WINDOW||LA191_0==ESCAPE||(LA191_0>=NOT_EXPR && LA191_0<=EVERY_EXPR)||(LA191_0>=SUM && LA191_0<=COUNT)||LA191_0==CASE||LA191_0==OUTER||(LA191_0>=JOIN && LA191_0<=FULL)||(LA191_0>=EVENTS && LA191_0<=LAST)||(LA191_0>=UNIDIRECTIONAL && LA191_0<=CURRENT_TIMESTAMP)||LA191_0==SNAPSHOT||(LA191_0>=VARIABLE && LA191_0<=AT)||(LA191_0>=BOOLEAN_TRUE && LA191_0<=VALUE_NULL)||LA191_0==NUM_DOUBLE||LA191_0==IDENT||LA191_0==LPAREN||LA191_0==STAR||(LA191_0>=PLUS && LA191_0<=LBRACK)||(LA191_0>=STRING_LITERAL && LA191_0<=QUOTED_STRING_LITERAL)||LA191_0==MINUS||LA191_0==LCURLY||LA191_0==NUM_INT||(LA191_0>=TICKED_STRING_LITERAL && LA191_0<=NUM_FLOAT)) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1280:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8058);
                    expressionWithTimeList528=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList528.getTree());

                    }
                    break;

            }

            RPAREN529=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN529);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, ns, nm, IDENT, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1281:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1281:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1281:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1281:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1282:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1282:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1282:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1285:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT530=null;
        Token COLON531=null;
        Token IDENT532=null;
        Token LPAREN533=null;
        Token RPAREN535=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList534 = null;


        CommonTree IDENT530_tree=null;
        CommonTree COLON531_tree=null;
        CommonTree IDENT532_tree=null;
        CommonTree LPAREN533_tree=null;
        CommonTree RPAREN535_tree=null;

        try {
            // EsperEPL2Grammar.g:1286:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1286:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT530=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT530_tree = (CommonTree)adaptor.create(IDENT530);
            adaptor.addChild(root_0, IDENT530_tree);
            }
            COLON531=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8112); if (state.failed) return retval;
            IDENT532=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT532_tree = (CommonTree)adaptor.create(IDENT532);
            adaptor.addChild(root_0, IDENT532_tree);
            }
            LPAREN533=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8117); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1286:31: ( expressionWithTimeList )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==WINDOW||LA192_0==ESCAPE||(LA192_0>=NOT_EXPR && LA192_0<=EVERY_EXPR)||(LA192_0>=SUM && LA192_0<=COUNT)||LA192_0==CASE||LA192_0==OUTER||(LA192_0>=JOIN && LA192_0<=FULL)||(LA192_0>=EVENTS && LA192_0<=LAST)||(LA192_0>=UNIDIRECTIONAL && LA192_0<=CURRENT_TIMESTAMP)||LA192_0==SNAPSHOT||(LA192_0>=VARIABLE && LA192_0<=AT)||(LA192_0>=BOOLEAN_TRUE && LA192_0<=VALUE_NULL)||LA192_0==NUM_DOUBLE||LA192_0==IDENT||LA192_0==LPAREN||LA192_0==STAR||(LA192_0>=PLUS && LA192_0<=LBRACK)||(LA192_0>=STRING_LITERAL && LA192_0<=QUOTED_STRING_LITERAL)||LA192_0==MINUS||LA192_0==LCURLY||LA192_0==NUM_INT||(LA192_0>=TICKED_STRING_LITERAL && LA192_0<=NUM_FLOAT)) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1286:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8121);
                    expressionWithTimeList534=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList534.getTree());

                    }
                    break;

            }

            RPAREN535=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8125); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1290:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK536=null;
        Token DOT537=null;
        Token DOT538=null;
        Token DOT539=null;
        Token DOT540=null;
        Token RBRACK541=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK536_tree=null;
        CommonTree DOT537_tree=null;
        CommonTree DOT538_tree=null;
        CommonTree DOT539_tree=null;
        CommonTree DOT540_tree=null;
        CommonTree RBRACK541_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1291:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1291:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK536=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK536);

            // EsperEPL2Grammar.g:1291:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt197=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt197=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt197=2;
                }
                break;
            case DOT:
                {
                int LA197_3 = input.LA(2);

                if ( (LA197_3==DOT) ) {
                    alt197=3;
                }
                else if ( (LA197_3==NUM_DOUBLE) ) {
                    alt197=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 197, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1292:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1292:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt194=3;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==DOT) ) {
                        alt194=1;
                    }
                    else if ( (LA194_0==COLON) ) {
                        alt194=2;
                    }
                    switch (alt194) {
                        case 1 :
                            // EsperEPL2Grammar.g:1292:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1292:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1292:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT537=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT537);

                            // EsperEPL2Grammar.g:1292:30: (r= NUM_INT )?
                            int alt193=2;
                            int LA193_0 = input.LA(1);

                            if ( (LA193_0==NUM_INT) ) {
                                alt193=1;
                            }
                            switch (alt193) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1292:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8162); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1293:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1293:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1293:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8190); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1295:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1295:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt196=3;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==DOT) ) {
                        alt196=1;
                    }
                    else if ( (LA196_0==NUM_DOUBLE) ) {
                        alt196=2;
                    }
                    switch (alt196) {
                        case 1 :
                            // EsperEPL2Grammar.g:1296:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8244); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1296:35: (r= NUM_INT )?
                            int alt195=2;
                            int LA195_0 = input.LA(1);

                            if ( (LA195_0==NUM_INT) ) {
                                alt195=1;
                            }
                            switch (alt195) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1296:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8248); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1298:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8308); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1300:8: DOT DOT r= NUM_INT
                    {
                    DOT538=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT538);

                    DOT539=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT539);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1301:8: DOT db3= NUM_DOUBLE
                    {
                    DOT540=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT540);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK541=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange8375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK541);



            // AST REWRITE
            // elements: l, db, l, db3, l, db2, r, db, db, r, r, db, l, r
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1304:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1304:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1305:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1305:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1306:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1306:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1307:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1307:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1308:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1308:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1309:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1309:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1310:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1310:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1311:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1311:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1312:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1312:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1313:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1313:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1321:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS542=null;
        Token LPAREN544=null;
        Token RPAREN546=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier543 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList545 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression547 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS542_tree=null;
        CommonTree LPAREN544_tree=null;
        CommonTree RPAREN546_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1324:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1324:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1324:9: (i= IDENT EQUALS )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==IDENT) ) {
                int LA198_1 = input.LA(2);

                if ( (LA198_1==EQUALS) ) {
                    alt198=1;
                }
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1324:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression8560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS542=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression8562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS542);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression8571);
            classIdentifier543=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier543.getTree());
            // EsperEPL2Grammar.g:1326:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==LPAREN) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1326:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN544=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression8582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN544);

                    // EsperEPL2Grammar.g:1326:17: ( expressionList )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==WINDOW||LA199_0==ESCAPE||(LA199_0>=NOT_EXPR && LA199_0<=EVERY_EXPR)||(LA199_0>=SUM && LA199_0<=COUNT)||LA199_0==CASE||LA199_0==OUTER||(LA199_0>=JOIN && LA199_0<=FULL)||(LA199_0>=EVENTS && LA199_0<=LAST)||(LA199_0>=UNIDIRECTIONAL && LA199_0<=CURRENT_TIMESTAMP)||LA199_0==SNAPSHOT||(LA199_0>=VARIABLE && LA199_0<=AT)||(LA199_0>=BOOLEAN_TRUE && LA199_0<=VALUE_NULL)||LA199_0==NUM_DOUBLE||LA199_0==IDENT||LA199_0==LPAREN||(LA199_0>=PLUS && LA199_0<=QUESTION)||(LA199_0>=STRING_LITERAL && LA199_0<=QUOTED_STRING_LITERAL)||LA199_0==MINUS||LA199_0==LCURLY||LA199_0==NUM_INT||(LA199_0>=TICKED_STRING_LITERAL && LA199_0<=NUM_FLOAT)) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // EsperEPL2Grammar.g:1326:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression8584);
                            expressionList545=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList545.getTree());

                            }
                            break;

                    }

                    RPAREN546=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression8587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN546);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1327:9: ( propertyExpression )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==LBRACK) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1327:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression8599);
                    propertyExpression547=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression547.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyExpression, classIdentifier, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1328:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1328:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1328:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1328:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1328:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1331:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic548 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic549 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1332:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1332:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8644);
            propertyExpressionAtomic548=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic548.getTree());
            // EsperEPL2Grammar.g:1332:29: ( propertyExpressionAtomic )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==LBRACK) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1332:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8647);
            	    propertyExpressionAtomic549=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic549.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1333:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1333:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1336:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK550=null;
        Token SELECT551=null;
        Token FROM553=null;
        Token AS555=null;
        Token IDENT556=null;
        Token WHERE557=null;
        Token RBRACK559=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList552 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty554 = null;

        EsperEPL2GrammarParser.expression_return expression558 = null;


        CommonTree LBRACK550_tree=null;
        CommonTree SELECT551_tree=null;
        CommonTree FROM553_tree=null;
        CommonTree AS555_tree=null;
        CommonTree IDENT556_tree=null;
        CommonTree WHERE557_tree=null;
        CommonTree RBRACK559_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1337:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1337:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK550=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic8677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK550);

            // EsperEPL2Grammar.g:1337:11: ( SELECT propertySelectionList FROM )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==SELECT) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1337:12: SELECT propertySelectionList FROM
                    {
                    SELECT551=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic8680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT551);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic8682);
                    propertySelectionList552=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList552.getTree());
                    FROM553=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic8684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM553);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic8688);
            eventProperty554=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty554.getTree());
            // EsperEPL2Grammar.g:1337:62: ( AS IDENT )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==AS) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1337:63: AS IDENT
                    {
                    AS555=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic8691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS555);

                    IDENT556=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic8693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT556);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1337:74: ( WHERE expression )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==WHERE) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1337:75: WHERE expression
                    {
                    WHERE557=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic8698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE557);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic8700);
                    expression558=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression558.getTree());

                    }
                    break;

            }

            RBRACK559=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic8704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK559);



            // AST REWRITE
            // elements: expression, eventProperty, IDENT, propertySelectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1338:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1338:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1338:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1338:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1338:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1338:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1341:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA561=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement560 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement562 = null;


        CommonTree COMMA561_tree=null;

        try {
            // EsperEPL2Grammar.g:1342:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1342:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList8754);
            propertySelectionListElement560=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement560.getTree());
            // EsperEPL2Grammar.g:1342:33: ( COMMA propertySelectionListElement )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==COMMA) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1342:34: COMMA propertySelectionListElement
            	    {
            	    COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList8757); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList8760);
            	    propertySelectionListElement562=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement562.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1345:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS565=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector563 = null;

        EsperEPL2GrammarParser.expression_return expression564 = null;


        CommonTree s_tree=null;
        CommonTree AS565_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1347:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt208=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt208=1;
                }
                break;
            case IDENT:
                {
                int LA208_2 = input.LA(2);

                if ( (LA208_2==DOT) ) {
                    int LA208_58 = input.LA(3);

                    if ( (LA208_58==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt208=2;
                    }
                    else if ( (LA208_58==WINDOW||LA208_58==ESCAPE||LA208_58==EVERY_EXPR||(LA208_58>=SUM && LA208_58<=COUNT)||LA208_58==OUTER||(LA208_58>=JOIN && LA208_58<=FULL)||(LA208_58>=EVENTS && LA208_58<=LAST)||(LA208_58>=UNIDIRECTIONAL && LA208_58<=PRIOR)||(LA208_58>=WEEKDAY && LA208_58<=CAST)||LA208_58==SNAPSHOT||(LA208_58>=VARIABLE && LA208_58<=AT)||LA208_58==IDENT||LA208_58==TICKED_STRING_LITERAL) ) {
                        alt208=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 58, input);

                        throw nvae;
                    }
                }
                else if ( ((LA208_2>=IN_SET && LA208_2<=REGEXP)||(LA208_2>=OR_EXPR && LA208_2<=NOT_EXPR)||LA208_2==AS||LA208_2==FROM||LA208_2==IS||LA208_2==COMMA||LA208_2==EQUALS||LA208_2==LPAREN||(LA208_2>=STAR && LA208_2<=LBRACK)||(LA208_2>=BAND && LA208_2<=MOD)||LA208_2==ESCAPECHAR) ) {
                    alt208=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1347:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement8786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1347:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1348:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement8802);
                    propertyStreamSelector563=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector563.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1349:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement8807);
                    expression564=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression564.getTree());
                    // EsperEPL2Grammar.g:1349:15: ( AS i= keywordAllowedIdent )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==AS) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // EsperEPL2Grammar.g:1349:16: AS i= keywordAllowedIdent
                            {
                            AS565=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement8810); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS565);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8814);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1350:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1350:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1351:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1351:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1354:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT566=null;
        Token STAR567=null;
        Token AS568=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT566_tree=null;
        CommonTree STAR567_tree=null;
        CommonTree AS568_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1355:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1355:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT566=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector8860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT566);

            STAR567=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector8862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR567);

            // EsperEPL2Grammar.g:1355:21: ( AS i= IDENT )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==AS) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1355:22: AS i= IDENT
                    {
                    AS568=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector8865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS568);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1356:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1356:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1356:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1359:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS569=null;
        Token LPAREN571=null;
        Token RPAREN573=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier570 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList572 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression574 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS569_tree=null;
        CommonTree LPAREN571_tree=null;
        CommonTree RPAREN573_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1362:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1362:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1362:9: (i= IDENT EQUALS )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==IDENT) ) {
                int LA210_1 = input.LA(2);

                if ( (LA210_1==EQUALS) ) {
                    alt210=1;
                }
            }
            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1362:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression8916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS569=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression8918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS569);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression8927);
            classIdentifier570=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier570.getTree());
            // EsperEPL2Grammar.g:1364:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==LPAREN) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1364:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN571=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN571);

                    // EsperEPL2Grammar.g:1364:17: ( expressionList )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==WINDOW||LA211_0==ESCAPE||(LA211_0>=NOT_EXPR && LA211_0<=EVERY_EXPR)||(LA211_0>=SUM && LA211_0<=COUNT)||LA211_0==CASE||LA211_0==OUTER||(LA211_0>=JOIN && LA211_0<=FULL)||(LA211_0>=EVENTS && LA211_0<=LAST)||(LA211_0>=UNIDIRECTIONAL && LA211_0<=CURRENT_TIMESTAMP)||LA211_0==SNAPSHOT||(LA211_0>=VARIABLE && LA211_0<=AT)||(LA211_0>=BOOLEAN_TRUE && LA211_0<=VALUE_NULL)||LA211_0==NUM_DOUBLE||LA211_0==IDENT||LA211_0==LPAREN||(LA211_0>=PLUS && LA211_0<=QUESTION)||(LA211_0>=STRING_LITERAL && LA211_0<=QUOTED_STRING_LITERAL)||LA211_0==MINUS||LA211_0==LCURLY||LA211_0==NUM_INT||(LA211_0>=TICKED_STRING_LITERAL && LA211_0<=NUM_FLOAT)) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // EsperEPL2Grammar.g:1364:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression8940);
                            expressionList572=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList572.getTree());

                            }
                            break;

                    }

                    RPAREN573=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression8943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN573);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1365:9: ( propertyExpression )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==LBRACK) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression8955);
                    propertyExpression574=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression574.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1366:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1366:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1366:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1366:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1366:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1370:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT575=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT575_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1372:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1372:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9010);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1373:6: ( DOT i2= escapableIdent )*
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==DOT) ) {
                    int LA214_17 = input.LA(2);

                    if ( (LA214_17==IDENT) ) {
                        int LA214_41 = input.LA(3);

                        if ( (LA214_41==EOF||LA214_41==CREATE||(LA214_41>=OR_EXPR && LA214_41<=AS)||LA214_41==SELECT||(LA214_41>=INNER && LA214_41<=ON)||(LA214_41>=GROUP && LA214_41<=HAVING)||LA214_41==OUTPUT||LA214_41==INSERT||LA214_41==ORDER||(LA214_41>=UNIDIRECTIONAL && LA214_41<=RETAININTERSECTION)||LA214_41==DELETE||LA214_41==SET||LA214_41==UNTIL||LA214_41==ROW_LIMIT_EXPR||LA214_41==MATCH_RECOGNIZE||(LA214_41>=COMMA && LA214_41<=IDENT)||(LA214_41>=DOT && LA214_41<=RPAREN)||(LA214_41>=LBRACK && LA214_41<=RBRACK)||LA214_41==RCURLY||LA214_41==FOLLOWED_BY||LA214_41==TICKED_STRING_LITERAL||LA214_41==EMAILAT) ) {
                            alt214=1;
                        }


                    }
                    else if ( (LA214_17==TICKED_STRING_LITERAL) ) {
                        alt214=1;
                    }


                }


                switch (alt214) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1374:8: DOT i2= escapableIdent
            	    {
            	    DOT575=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9029); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT575);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9033);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1376:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1376:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1379:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT576=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT576_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1381:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1381:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9078);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1382:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( (LA215_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA215_2 = input.LA(3);

                        if ( (LA215_2==LPAREN) ) {
                            alt215=2;
                        }
                        else if ( (LA215_2==DOT) ) {
                            alt215=1;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt215=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt215=2;
                        }
                        break;

                    }

                }


                switch (alt215) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1384:8: DOT i2= escapableIdent
            	    {
            	    DOT576=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9113); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT576);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9117);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1386:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1386:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1389:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA578=null;
        EsperEPL2GrammarParser.expression_return expression577 = null;

        EsperEPL2GrammarParser.expression_return expression579 = null;


        CommonTree COMMA578_tree=null;

        try {
            // EsperEPL2Grammar.g:1390:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1390:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9159);
            expression577=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression577.getTree());
            // EsperEPL2Grammar.g:1390:22: ( COMMA expression )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==COMMA) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1390:23: COMMA expression
            	    {
            	    COMMA578=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9162); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9165);
            	    expression579=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression579.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1393:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA581=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime580 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime582 = null;


        CommonTree COMMA581_tree=null;

        try {
            // EsperEPL2Grammar.g:1394:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1394:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9193);
            expressionWithTime580=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime580.getTree());
            // EsperEPL2Grammar.g:1394:30: ( COMMA expressionWithTime )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==COMMA) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1394:31: COMMA expressionWithTime
            	    {
            	    COMMA581=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9196); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9199);
            	    expressionWithTime582=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime582.getTree());

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1397:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand583 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand584 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod585 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable586 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand587 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand588 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator589 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator590 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList591 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar592 = null;



        try {
            // EsperEPL2Grammar.g:1398:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt218=10;
            alt218 = dfa218.predict(input);
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1398:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9225);
                    lastOperand583=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand583.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1399:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9236);
                    lastWeekdayOperand584=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand584.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1400:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9247);
                    timePeriod585=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod585.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1401:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9258);
                    expressionQualifyable586=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable586.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1402:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9269);
                    rangeOperand587=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand587.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1403:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9281);
                    frequencyOperand588=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand588.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1404:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9292);
                    lastOperator589=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator589.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1405:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9304);
                    weekDayOperator590=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator590.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1406:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9316);
                    numericParameterList591=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList591.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1407:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9321);
                    numberSetStar592=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar592.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1410:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression593 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1411:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1411:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9332);
            expression593=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression593.getTree());
            // EsperEPL2Grammar.g:1411:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt219=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt219=1;
                    }
                    break;
                case DESC:
                    {
                    alt219=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt219=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt219=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt219=5;
                    }
                    break;
            }

            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1411:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1411:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1411:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1411:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1411:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, a, expression, expression, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1412:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1412:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1412:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1412:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1413:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1413:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1413:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1414:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1418:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR594=null;

        CommonTree STAR594_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1419:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1419:4: STAR
            {
            STAR594=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR594);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1420:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1420:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1423:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW595=null;

        CommonTree LW595_tree=null;

        try {
            // EsperEPL2Grammar.g:1424:2: ( LW )
            // EsperEPL2Grammar.g:1424:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW595=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand9430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW595_tree = (CommonTree)adaptor.create(LW595);
            root_0 = (CommonTree)adaptor.becomeRoot(LW595_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1427:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST596=null;

        CommonTree LAST596_tree=null;

        try {
            // EsperEPL2Grammar.g:1428:2: ( LAST )
            // EsperEPL2Grammar.g:1428:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST596=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand9443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST596_tree = (CommonTree)adaptor.create(LAST596);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST596_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1431:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR597=null;
        Token DIV598=null;
        EsperEPL2GrammarParser.number_return number599 = null;

        EsperEPL2GrammarParser.substitution_return substitution600 = null;


        CommonTree i_tree=null;
        CommonTree STAR597_tree=null;
        CommonTree DIV598_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1432:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1432:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR597=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand9455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR597);

            DIV598=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand9457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV598);

            // EsperEPL2Grammar.g:1432:13: ( number | i= IDENT | substitution )
            int alt220=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt220=1;
                }
                break;
            case IDENT:
                {
                alt220=2;
                }
                break;
            case QUESTION:
                {
                alt220=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1432:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand9460);
                    number599=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number599.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1432:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand9464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1432:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand9466);
                    substitution600=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution600.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1433:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1433:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1433:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1433:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1434:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1434:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1434:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1434:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1437:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON603=null;
        EsperEPL2GrammarParser.number_return number601 = null;

        EsperEPL2GrammarParser.substitution_return substitution602 = null;

        EsperEPL2GrammarParser.number_return number604 = null;

        EsperEPL2GrammarParser.substitution_return substitution605 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON603_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1438:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1438:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1438:4: ( number | i1= IDENT | substitution )
            int alt221=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt221=1;
                }
                break;
            case IDENT:
                {
                alt221=2;
                }
                break;
            case QUESTION:
                {
                alt221=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }

            switch (alt221) {
                case 1 :
                    // EsperEPL2Grammar.g:1438:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9515);
                    number601=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number601.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1438:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1438:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9521);
                    substitution602=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution602.getTree());

                    }
                    break;

            }

            COLON603=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand9524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON603);

            // EsperEPL2Grammar.g:1438:41: ( number | i2= IDENT | substitution )
            int alt222=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt222=1;
                }
                break;
            case IDENT:
                {
                alt222=2;
                }
                break;
            case QUESTION:
                {
                alt222=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1438:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9527);
                    number604=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number604.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1438:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1438:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9533);
                    substitution605=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution605.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, substitution, i1, i1, substitution, i2, number, i2, number
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1439:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1439:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1439:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1439:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1439:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1439:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1440:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1440:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1440:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1440:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1440:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1440:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1441:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1441:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1441:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1441:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1441:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1441:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1442:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1442:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1442:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1442:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1445:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST608=null;
        EsperEPL2GrammarParser.number_return number606 = null;

        EsperEPL2GrammarParser.substitution_return substitution607 = null;


        CommonTree i_tree=null;
        CommonTree LAST608_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1446:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1446:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1446:4: ( number | i= IDENT | substitution )
            int alt223=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt223=1;
                }
                break;
            case IDENT:
                {
                alt223=2;
                }
                break;
            case QUESTION:
                {
                alt223=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }

            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1446:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator9647);
                    number606=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number606.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1446:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator9651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1446:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator9653);
                    substitution607=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution607.getTree());

                    }
                    break;

            }

            LAST608=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator9656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST608);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1447:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1447:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1447:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1447:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1448:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1448:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1448:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1448:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1451:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY611=null;
        EsperEPL2GrammarParser.number_return number609 = null;

        EsperEPL2GrammarParser.substitution_return substitution610 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY611_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1452:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1452:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1452:4: ( number | i= IDENT | substitution )
            int alt224=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt224=1;
                }
                break;
            case IDENT:
                {
                alt224=2;
                }
                break;
            case QUESTION:
                {
                alt224=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1452:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator9704);
                    number609=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number609.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1452:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator9708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1452:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator9710);
                    substitution610=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution610.getTree());

                    }
                    break;

            }

            WEEKDAY611=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator9713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY611);



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1453:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1453:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1453:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1453:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1454:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1454:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1454:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1454:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1457:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK612=null;
        Token COMMA614=null;
        Token RBRACK616=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter613 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter615 = null;


        CommonTree LBRACK612_tree=null;
        CommonTree COMMA614_tree=null;
        CommonTree RBRACK616_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1458:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1458:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK612=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList9760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK612);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList9762);
            numericListParameter613=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter613.getTree());
            // EsperEPL2Grammar.g:1458:32: ( COMMA numericListParameter )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==COMMA) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1458:33: COMMA numericListParameter
            	    {
            	    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList9765); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA614);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList9767);
            	    numericListParameter615=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter615.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);

            RBRACK616=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList9771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK616);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1459:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1459:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1462:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand617 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand618 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant619 = null;



        try {
            // EsperEPL2Grammar.g:1463:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt226=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA226_1 = input.LA(2);

                if ( (LA226_1==COMMA||LA226_1==RBRACK) ) {
                    alt226=3;
                }
                else if ( (LA226_1==COLON) ) {
                    alt226=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA226_2 = input.LA(2);

                if ( (LA226_2==COMMA||LA226_2==RBRACK) ) {
                    alt226=3;
                }
                else if ( (LA226_2==COLON) ) {
                    alt226=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA226_3 = input.LA(2);

                if ( (LA226_3==COMMA||LA226_3==RBRACK) ) {
                    alt226=3;
                }
                else if ( (LA226_3==COLON) ) {
                    alt226=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA226_4 = input.LA(2);

                if ( (LA226_4==COMMA||LA226_4==RBRACK) ) {
                    alt226=3;
                }
                else if ( (LA226_4==COLON) ) {
                    alt226=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt226=1;
                }
                break;
            case STAR:
                {
                alt226=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt226=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1463:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter9793);
                    rangeOperand617=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand617.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1464:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter9799);
                    frequencyOperand618=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand618.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1465:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter9804);
                    numberconstant619=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant619.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1468:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT621=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic620 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic622 = null;


        CommonTree DOT621_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1469:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1469:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9820);
            eventPropertyAtomic620=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic620.getTree());
            // EsperEPL2Grammar.g:1469:24: ( DOT eventPropertyAtomic )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==DOT) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1469:25: DOT eventPropertyAtomic
            	    {
            	    DOT621=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty9823); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT621);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9825);
            	    eventPropertyAtomic622=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic622.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1470:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1470:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1473:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK624=null;
        Token RPAREN625=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent623 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK624_tree=null;
        CommonTree RPAREN625_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1474:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1474:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9851);
            eventPropertyIdent623=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent623.getTree());
            // EsperEPL2Grammar.g:1474:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt231=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt231=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt231=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt231=3;
                    }
                    break;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1475:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic9860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic9864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK624=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic9866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK624);

                    // EsperEPL2Grammar.g:1475:32: (q= QUESTION )?
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==QUESTION) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            // EsperEPL2Grammar.g:1475:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9871); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1477:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic9885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1477:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==STRING_LITERAL) ) {
                        alt229=1;
                    }
                    else if ( (LA229_0==QUOTED_STRING_LITERAL) ) {
                        alt229=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 229, 0, input);

                        throw nvae;
                    }
                    switch (alt229) {
                        case 1 :
                            // EsperEPL2Grammar.g:1477:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9890); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1477:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9896); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN625=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic9899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN625);

                    // EsperEPL2Grammar.g:1477:66: (q= QUESTION )?
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==QUESTION) ) {
                        alt230=1;
                    }
                    switch (alt230) {
                        case 1 :
                            // EsperEPL2Grammar.g:1477:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9904); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1479:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, s, ni, eventPropertyIdent, eventPropertyIdent, ni
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1482:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1482:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1483:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1483:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1484:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1484:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1485:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1485:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1486:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1486:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1487:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1487:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1490:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR626=null;
        Token DOT627=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR626_tree=null;
        CommonTree DOT627_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1492:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1492:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10041);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1493:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==ESCAPECHAR) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1494:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR626=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10053); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR626);

            	    DOT627=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10055); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT627);

            	    // EsperEPL2Grammar.g:1494:24: (ipi2= keywordAllowedIdent )?
            	    int alt232=2;
            	    alt232 = dfa232.predict(input);
            	    switch (alt232) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1494:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10059);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1496:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1496:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1499:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT628=null;
        Token COUNT629=null;
        Token ESCAPE630=null;
        Token EVERY_EXPR631=null;
        Token SUM632=null;
        Token AVG633=null;
        Token MAX634=null;
        Token MIN635=null;
        Token COALESCE636=null;
        Token MEDIAN637=null;
        Token STDDEV638=null;
        Token AVEDEV639=null;
        Token EVENTS640=null;
        Token FIRST641=null;
        Token LAST642=null;
        Token UNIDIRECTIONAL643=null;
        Token RETAINUNION644=null;
        Token RETAININTERSECTION645=null;
        Token UNTIL646=null;
        Token PATTERN647=null;
        Token SQL648=null;
        Token METADATASQL649=null;
        Token PREVIOUS650=null;
        Token PRIOR651=null;
        Token WEEKDAY652=null;
        Token LW653=null;
        Token INSTANCEOF654=null;
        Token CAST655=null;
        Token SNAPSHOT656=null;
        Token VARIABLE657=null;
        Token WINDOW658=null;
        Token LEFT659=null;
        Token RIGHT660=null;
        Token OUTER661=null;
        Token FULL662=null;
        Token JOIN663=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT628_tree=null;
        CommonTree COUNT629_tree=null;
        CommonTree ESCAPE630_tree=null;
        CommonTree EVERY_EXPR631_tree=null;
        CommonTree SUM632_tree=null;
        CommonTree AVG633_tree=null;
        CommonTree MAX634_tree=null;
        CommonTree MIN635_tree=null;
        CommonTree COALESCE636_tree=null;
        CommonTree MEDIAN637_tree=null;
        CommonTree STDDEV638_tree=null;
        CommonTree AVEDEV639_tree=null;
        CommonTree EVENTS640_tree=null;
        CommonTree FIRST641_tree=null;
        CommonTree LAST642_tree=null;
        CommonTree UNIDIRECTIONAL643_tree=null;
        CommonTree RETAINUNION644_tree=null;
        CommonTree RETAININTERSECTION645_tree=null;
        CommonTree UNTIL646_tree=null;
        CommonTree PATTERN647_tree=null;
        CommonTree SQL648_tree=null;
        CommonTree METADATASQL649_tree=null;
        CommonTree PREVIOUS650_tree=null;
        CommonTree PRIOR651_tree=null;
        CommonTree WEEKDAY652_tree=null;
        CommonTree LW653_tree=null;
        CommonTree INSTANCEOF654_tree=null;
        CommonTree CAST655_tree=null;
        CommonTree SNAPSHOT656_tree=null;
        CommonTree VARIABLE657_tree=null;
        CommonTree WINDOW658_tree=null;
        CommonTree LEFT659_tree=null;
        CommonTree RIGHT660_tree=null;
        CommonTree OUTER661_tree=null;
        CommonTree FULL662_tree=null;
        CommonTree JOIN663_tree=null;

        try {
            // EsperEPL2Grammar.g:1500:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN )
            int alt234=38;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt234=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt234=2;
                }
                break;
            case AT:
                {
                alt234=3;
                }
                break;
            case COUNT:
                {
                alt234=4;
                }
                break;
            case ESCAPE:
                {
                alt234=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt234=6;
                }
                break;
            case SUM:
                {
                alt234=7;
                }
                break;
            case AVG:
                {
                alt234=8;
                }
                break;
            case MAX:
                {
                alt234=9;
                }
                break;
            case MIN:
                {
                alt234=10;
                }
                break;
            case COALESCE:
                {
                alt234=11;
                }
                break;
            case MEDIAN:
                {
                alt234=12;
                }
                break;
            case STDDEV:
                {
                alt234=13;
                }
                break;
            case AVEDEV:
                {
                alt234=14;
                }
                break;
            case EVENTS:
                {
                alt234=15;
                }
                break;
            case FIRST:
                {
                alt234=16;
                }
                break;
            case LAST:
                {
                alt234=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt234=18;
                }
                break;
            case RETAINUNION:
                {
                alt234=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt234=20;
                }
                break;
            case UNTIL:
                {
                alt234=21;
                }
                break;
            case PATTERN:
                {
                alt234=22;
                }
                break;
            case SQL:
                {
                alt234=23;
                }
                break;
            case METADATASQL:
                {
                alt234=24;
                }
                break;
            case PREVIOUS:
                {
                alt234=25;
                }
                break;
            case PRIOR:
                {
                alt234=26;
                }
                break;
            case WEEKDAY:
                {
                alt234=27;
                }
                break;
            case LW:
                {
                alt234=28;
                }
                break;
            case INSTANCEOF:
                {
                alt234=29;
                }
                break;
            case CAST:
                {
                alt234=30;
                }
                break;
            case SNAPSHOT:
                {
                alt234=31;
                }
                break;
            case VARIABLE:
                {
                alt234=32;
                }
                break;
            case WINDOW:
                {
                alt234=33;
                }
                break;
            case LEFT:
                {
                alt234=34;
                }
                break;
            case RIGHT:
                {
                alt234=35;
                }
                break;
            case OUTER:
                {
                alt234=36;
                }
                break;
            case FULL:
                {
                alt234=37;
                }
                break;
            case JOIN:
                {
                alt234=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1500:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1501:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1502:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT628=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT628_tree = (CommonTree)adaptor.create(AT628);
                    adaptor.addChild(root_0, AT628_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1503:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT629=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT629_tree = (CommonTree)adaptor.create(COUNT629);
                    adaptor.addChild(root_0, COUNT629_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1504:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE630=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE630_tree = (CommonTree)adaptor.create(ESCAPE630);
                    adaptor.addChild(root_0, ESCAPE630_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1505:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR631=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR631_tree = (CommonTree)adaptor.create(EVERY_EXPR631);
                    adaptor.addChild(root_0, EVERY_EXPR631_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1506:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM632=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM632_tree = (CommonTree)adaptor.create(SUM632);
                    adaptor.addChild(root_0, SUM632_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1507:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG633=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG633_tree = (CommonTree)adaptor.create(AVG633);
                    adaptor.addChild(root_0, AVG633_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1508:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX634=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX634_tree = (CommonTree)adaptor.create(MAX634);
                    adaptor.addChild(root_0, MAX634_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1509:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN635=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN635_tree = (CommonTree)adaptor.create(MIN635);
                    adaptor.addChild(root_0, MIN635_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1510:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE636=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE636_tree = (CommonTree)adaptor.create(COALESCE636);
                    adaptor.addChild(root_0, COALESCE636_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1511:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN637=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN637_tree = (CommonTree)adaptor.create(MEDIAN637);
                    adaptor.addChild(root_0, MEDIAN637_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1512:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV638=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV638_tree = (CommonTree)adaptor.create(STDDEV638);
                    adaptor.addChild(root_0, STDDEV638_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1513:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV639=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV639_tree = (CommonTree)adaptor.create(AVEDEV639);
                    adaptor.addChild(root_0, AVEDEV639_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1514:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS640=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS640_tree = (CommonTree)adaptor.create(EVENTS640);
                    adaptor.addChild(root_0, EVENTS640_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1515:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST641=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST641_tree = (CommonTree)adaptor.create(FIRST641);
                    adaptor.addChild(root_0, FIRST641_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1516:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST642=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST642_tree = (CommonTree)adaptor.create(LAST642);
                    adaptor.addChild(root_0, LAST642_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1517:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL643=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL643_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL643);
                    adaptor.addChild(root_0, UNIDIRECTIONAL643_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1518:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION644=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION644_tree = (CommonTree)adaptor.create(RETAINUNION644);
                    adaptor.addChild(root_0, RETAINUNION644_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1519:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION645=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION645_tree = (CommonTree)adaptor.create(RETAININTERSECTION645);
                    adaptor.addChild(root_0, RETAININTERSECTION645_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1520:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL646=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL646_tree = (CommonTree)adaptor.create(UNTIL646);
                    adaptor.addChild(root_0, UNTIL646_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1521:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN647=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN647_tree = (CommonTree)adaptor.create(PATTERN647);
                    adaptor.addChild(root_0, PATTERN647_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1522:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL648=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL648_tree = (CommonTree)adaptor.create(SQL648);
                    adaptor.addChild(root_0, SQL648_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1523:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL649=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL649_tree = (CommonTree)adaptor.create(METADATASQL649);
                    adaptor.addChild(root_0, METADATASQL649_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1524:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS650=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS650_tree = (CommonTree)adaptor.create(PREVIOUS650);
                    adaptor.addChild(root_0, PREVIOUS650_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1525:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR651=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR651_tree = (CommonTree)adaptor.create(PRIOR651);
                    adaptor.addChild(root_0, PRIOR651_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1526:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY652=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY652_tree = (CommonTree)adaptor.create(WEEKDAY652);
                    adaptor.addChild(root_0, WEEKDAY652_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1527:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW653=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW653_tree = (CommonTree)adaptor.create(LW653);
                    adaptor.addChild(root_0, LW653_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1528:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF654=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF654_tree = (CommonTree)adaptor.create(INSTANCEOF654);
                    adaptor.addChild(root_0, INSTANCEOF654_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1529:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST655=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST655_tree = (CommonTree)adaptor.create(CAST655);
                    adaptor.addChild(root_0, CAST655_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1530:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT656=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT656_tree = (CommonTree)adaptor.create(SNAPSHOT656);
                    adaptor.addChild(root_0, SNAPSHOT656_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1531:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE657=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE657_tree = (CommonTree)adaptor.create(VARIABLE657);
                    adaptor.addChild(root_0, VARIABLE657_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1532:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW658=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW658_tree = (CommonTree)adaptor.create(WINDOW658);
                    adaptor.addChild(root_0, WINDOW658_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1533:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT659=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT659_tree = (CommonTree)adaptor.create(LEFT659);
                    adaptor.addChild(root_0, LEFT659_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1534:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT660=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT660_tree = (CommonTree)adaptor.create(RIGHT660);
                    adaptor.addChild(root_0, RIGHT660_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1535:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER661=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER661_tree = (CommonTree)adaptor.create(OUTER661);
                    adaptor.addChild(root_0, OUTER661_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1536:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL662=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL662_tree = (CommonTree)adaptor.create(FULL662);
                    adaptor.addChild(root_0, FULL662_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1537:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN663=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN663_tree = (CommonTree)adaptor.create(JOIN663);
                    adaptor.addChild(root_0, JOIN663_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1540:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1541:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==IDENT) ) {
                alt235=1;
            }
            else if ( (LA235_0==TICKED_STRING_LITERAL) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1541:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent10386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1542:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1545:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart664 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart665 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart666 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart667 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart668 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart669 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart670 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart671 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart672 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart673 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart674 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart675 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart676 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart677 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart678 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1546:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1547:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1547:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt246=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt246=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt246=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt246=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt246=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt246=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 246, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }

            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1548:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod10418);
                    dayPart664=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart664.getTree());
                    // EsperEPL2Grammar.g:1548:11: ( hourPart )?
                    int alt236=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA236_1 = input.LA(2);

                            if ( ((LA236_1>=TIMEPERIOD_HOUR && LA236_1<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA236_2 = input.LA(2);

                            if ( ((LA236_2>=TIMEPERIOD_HOUR && LA236_2<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA236_3 = input.LA(2);

                            if ( ((LA236_3>=TIMEPERIOD_HOUR && LA236_3<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA236_4 = input.LA(2);

                            if ( ((LA236_4>=TIMEPERIOD_HOUR && LA236_4<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA236_5 = input.LA(2);

                            if ( ((LA236_5>=TIMEPERIOD_HOUR && LA236_5<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA236_6 = input.LA(2);

                            if ( ((LA236_6>=TIMEPERIOD_HOUR && LA236_6<=TIMEPERIOD_HOURS)) ) {
                                alt236=1;
                            }
                            }
                            break;
                    }

                    switch (alt236) {
                        case 1 :
                            // EsperEPL2Grammar.g:1548:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod10420);
                            hourPart665=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart665.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1548:21: ( minutePart )?
                    int alt237=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA237_1 = input.LA(2);

                            if ( (LA237_1==MIN||(LA237_1>=TIMEPERIOD_MINUTE && LA237_1<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA237_2 = input.LA(2);

                            if ( (LA237_2==MIN||(LA237_2>=TIMEPERIOD_MINUTE && LA237_2<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA237_3 = input.LA(2);

                            if ( (LA237_3==MIN||(LA237_3>=TIMEPERIOD_MINUTE && LA237_3<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA237_4 = input.LA(2);

                            if ( (LA237_4==MIN||(LA237_4>=TIMEPERIOD_MINUTE && LA237_4<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA237_5 = input.LA(2);

                            if ( (LA237_5==MIN||(LA237_5>=TIMEPERIOD_MINUTE && LA237_5<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA237_6 = input.LA(2);

                            if ( (LA237_6==MIN||(LA237_6>=TIMEPERIOD_MINUTE && LA237_6<=TIMEPERIOD_MINUTES)) ) {
                                alt237=1;
                            }
                            }
                            break;
                    }

                    switch (alt237) {
                        case 1 :
                            // EsperEPL2Grammar.g:1548:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10423);
                            minutePart666=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart666.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1548:33: ( secondPart )?
                    int alt238=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA238_1 = input.LA(2);

                            if ( ((LA238_1>=TIMEPERIOD_SEC && LA238_1<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA238_2 = input.LA(2);

                            if ( ((LA238_2>=TIMEPERIOD_SEC && LA238_2<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA238_3 = input.LA(2);

                            if ( ((LA238_3>=TIMEPERIOD_SEC && LA238_3<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA238_4 = input.LA(2);

                            if ( ((LA238_4>=TIMEPERIOD_SEC && LA238_4<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA238_5 = input.LA(2);

                            if ( ((LA238_5>=TIMEPERIOD_SEC && LA238_5<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA238_6 = input.LA(2);

                            if ( ((LA238_6>=TIMEPERIOD_SEC && LA238_6<=TIMEPERIOD_SECONDS)) ) {
                                alt238=1;
                            }
                            }
                            break;
                    }

                    switch (alt238) {
                        case 1 :
                            // EsperEPL2Grammar.g:1548:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10426);
                            secondPart667=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart667.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1548:45: ( millisecondPart )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==NUM_DOUBLE||LA239_0==IDENT||LA239_0==QUESTION||LA239_0==NUM_INT||(LA239_0>=NUM_LONG && LA239_0<=NUM_FLOAT)) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // EsperEPL2Grammar.g:1548:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10429);
                            millisecondPart668=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart668.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1549:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod10435);
                    hourPart669=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart669.getTree());
                    // EsperEPL2Grammar.g:1549:13: ( minutePart )?
                    int alt240=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA240_1 = input.LA(2);

                            if ( (LA240_1==MIN||(LA240_1>=TIMEPERIOD_MINUTE && LA240_1<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA240_2 = input.LA(2);

                            if ( (LA240_2==MIN||(LA240_2>=TIMEPERIOD_MINUTE && LA240_2<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA240_3 = input.LA(2);

                            if ( (LA240_3==MIN||(LA240_3>=TIMEPERIOD_MINUTE && LA240_3<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA240_4 = input.LA(2);

                            if ( (LA240_4==MIN||(LA240_4>=TIMEPERIOD_MINUTE && LA240_4<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA240_5 = input.LA(2);

                            if ( (LA240_5==MIN||(LA240_5>=TIMEPERIOD_MINUTE && LA240_5<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA240_6 = input.LA(2);

                            if ( (LA240_6==MIN||(LA240_6>=TIMEPERIOD_MINUTE && LA240_6<=TIMEPERIOD_MINUTES)) ) {
                                alt240=1;
                            }
                            }
                            break;
                    }

                    switch (alt240) {
                        case 1 :
                            // EsperEPL2Grammar.g:1549:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10437);
                            minutePart670=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart670.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1549:25: ( secondPart )?
                    int alt241=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA241_1 = input.LA(2);

                            if ( ((LA241_1>=TIMEPERIOD_SEC && LA241_1<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA241_2 = input.LA(2);

                            if ( ((LA241_2>=TIMEPERIOD_SEC && LA241_2<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA241_3 = input.LA(2);

                            if ( ((LA241_3>=TIMEPERIOD_SEC && LA241_3<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA241_4 = input.LA(2);

                            if ( ((LA241_4>=TIMEPERIOD_SEC && LA241_4<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA241_5 = input.LA(2);

                            if ( ((LA241_5>=TIMEPERIOD_SEC && LA241_5<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA241_6 = input.LA(2);

                            if ( ((LA241_6>=TIMEPERIOD_SEC && LA241_6<=TIMEPERIOD_SECONDS)) ) {
                                alt241=1;
                            }
                            }
                            break;
                    }

                    switch (alt241) {
                        case 1 :
                            // EsperEPL2Grammar.g:1549:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10440);
                            secondPart671=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart671.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1549:37: ( millisecondPart )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==NUM_DOUBLE||LA242_0==IDENT||LA242_0==QUESTION||LA242_0==NUM_INT||(LA242_0>=NUM_LONG && LA242_0<=NUM_FLOAT)) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // EsperEPL2Grammar.g:1549:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10443);
                            millisecondPart672=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart672.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1550:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod10449);
                    minutePart673=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart673.getTree());
                    // EsperEPL2Grammar.g:1550:15: ( secondPart )?
                    int alt243=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA243_1 = input.LA(2);

                            if ( ((LA243_1>=TIMEPERIOD_SEC && LA243_1<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA243_2 = input.LA(2);

                            if ( ((LA243_2>=TIMEPERIOD_SEC && LA243_2<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA243_3 = input.LA(2);

                            if ( ((LA243_3>=TIMEPERIOD_SEC && LA243_3<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA243_4 = input.LA(2);

                            if ( ((LA243_4>=TIMEPERIOD_SEC && LA243_4<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA243_5 = input.LA(2);

                            if ( ((LA243_5>=TIMEPERIOD_SEC && LA243_5<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA243_6 = input.LA(2);

                            if ( ((LA243_6>=TIMEPERIOD_SEC && LA243_6<=TIMEPERIOD_SECONDS)) ) {
                                alt243=1;
                            }
                            }
                            break;
                    }

                    switch (alt243) {
                        case 1 :
                            // EsperEPL2Grammar.g:1550:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10451);
                            secondPart674=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart674.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1550:27: ( millisecondPart )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==NUM_DOUBLE||LA244_0==IDENT||LA244_0==QUESTION||LA244_0==NUM_INT||(LA244_0>=NUM_LONG && LA244_0<=NUM_FLOAT)) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // EsperEPL2Grammar.g:1550:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10454);
                            millisecondPart675=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart675.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1551:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod10460);
                    secondPart676=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart676.getTree());
                    // EsperEPL2Grammar.g:1551:15: ( millisecondPart )?
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==NUM_DOUBLE||LA245_0==IDENT||LA245_0==QUESTION||LA245_0==NUM_INT||(LA245_0>=NUM_LONG && LA245_0<=NUM_FLOAT)) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            // EsperEPL2Grammar.g:1551:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10462);
                            millisecondPart677=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart677.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1552:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod10468);
                    millisecondPart678=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart678.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dayPart, hourPart, secondPart, minutePart, millisecondPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1554:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1554:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1554:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1554:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1554:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1554:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1554:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1557:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS681=null;
        Token TIMEPERIOD_DAY682=null;
        EsperEPL2GrammarParser.number_return number679 = null;

        EsperEPL2GrammarParser.substitution_return substitution680 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS681_tree=null;
        CommonTree TIMEPERIOD_DAY682_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1558:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1558:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1558:4: ( number | i= IDENT | substitution )
            int alt247=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt247=1;
                }
                break;
            case IDENT:
                {
                alt247=2;
                }
                break;
            case QUESTION:
                {
                alt247=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }

            switch (alt247) {
                case 1 :
                    // EsperEPL2Grammar.g:1558:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart10506);
                    number679=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number679.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1558:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart10510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1558:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart10512);
                    substitution680=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution680.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1558:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==TIMEPERIOD_DAYS) ) {
                alt248=1;
            }
            else if ( (LA248_0==TIMEPERIOD_DAY) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }
            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1558:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS681=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart10516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS681);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1558:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY682=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart10520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY682);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1559:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1559:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1559:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1559:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1560:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1560:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1560:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1560:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1563:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS685=null;
        Token TIMEPERIOD_HOUR686=null;
        EsperEPL2GrammarParser.number_return number683 = null;

        EsperEPL2GrammarParser.substitution_return substitution684 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS685_tree=null;
        CommonTree TIMEPERIOD_HOUR686_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1564:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1564:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1564:4: ( number | i= IDENT | substitution )
            int alt249=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                alt249=2;
                }
                break;
            case QUESTION:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }

            switch (alt249) {
                case 1 :
                    // EsperEPL2Grammar.g:1564:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart10569);
                    number683=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number683.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1564:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart10573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1564:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart10575);
                    substitution684=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution684.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1564:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==TIMEPERIOD_HOURS) ) {
                alt250=1;
            }
            else if ( (LA250_0==TIMEPERIOD_HOUR) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    // EsperEPL2Grammar.g:1564:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS685=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart10579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS685);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1564:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR686=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart10583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR686);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1565:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1565:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1565:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1565:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1566:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1566:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1566:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1566:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1569:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES689=null;
        Token TIMEPERIOD_MINUTE690=null;
        Token MIN691=null;
        EsperEPL2GrammarParser.number_return number687 = null;

        EsperEPL2GrammarParser.substitution_return substitution688 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES689_tree=null;
        CommonTree TIMEPERIOD_MINUTE690_tree=null;
        CommonTree MIN691_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1570:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1570:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1570:4: ( number | i= IDENT | substitution )
            int alt251=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt251=1;
                }
                break;
            case IDENT:
                {
                alt251=2;
                }
                break;
            case QUESTION:
                {
                alt251=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // EsperEPL2Grammar.g:1570:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart10632);
                    number687=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number687.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1570:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart10636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1570:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart10638);
                    substitution688=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution688.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1570:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt252=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt252=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt252=2;
                }
                break;
            case MIN:
                {
                alt252=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 252, 0, input);

                throw nvae;
            }

            switch (alt252) {
                case 1 :
                    // EsperEPL2Grammar.g:1570:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES689=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES689);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1570:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE690=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE690);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1570:76: MIN
                    {
                    MIN691=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart10650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN691);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1571:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1571:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1571:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1571:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1572:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1572:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1572:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1572:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1575:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS694=null;
        Token TIMEPERIOD_SECOND695=null;
        Token TIMEPERIOD_SEC696=null;
        EsperEPL2GrammarParser.number_return number692 = null;

        EsperEPL2GrammarParser.substitution_return substitution693 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS694_tree=null;
        CommonTree TIMEPERIOD_SECOND695_tree=null;
        CommonTree TIMEPERIOD_SEC696_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1576:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1576:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1576:4: ( number | i= IDENT | substitution )
            int alt253=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt253=1;
                }
                break;
            case IDENT:
                {
                alt253=2;
                }
                break;
            case QUESTION:
                {
                alt253=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }

            switch (alt253) {
                case 1 :
                    // EsperEPL2Grammar.g:1576:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart10700);
                    number692=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number692.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1576:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart10704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1576:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart10706);
                    substitution693=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution693.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1576:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt254=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt254=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt254=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt254=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // EsperEPL2Grammar.g:1576:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS694=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS694);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1576:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND695=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart10714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND695);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1576:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC696=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart10718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC696);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1577:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1577:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1577:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1577:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1578:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1578:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1578:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1578:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1581:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS699=null;
        Token TIMEPERIOD_MILLISECOND700=null;
        Token TIMEPERIOD_MILLISEC701=null;
        EsperEPL2GrammarParser.number_return number697 = null;

        EsperEPL2GrammarParser.substitution_return substitution698 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS699_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND700_tree=null;
        CommonTree TIMEPERIOD_MILLISEC701_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1582:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1582:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1582:4: ( number | i= IDENT | substitution )
            int alt255=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt255=1;
                }
                break;
            case IDENT:
                {
                alt255=2;
                }
                break;
            case QUESTION:
                {
                alt255=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }

            switch (alt255) {
                case 1 :
                    // EsperEPL2Grammar.g:1582:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart10768);
                    number697=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number697.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1582:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart10772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1582:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart10774);
                    substitution698=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution698.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1582:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt256=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt256=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt256=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt256=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1582:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS699=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS699);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1582:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND700=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND700);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1582:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC701=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC701);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1583:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1583:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1583:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1583:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1584:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1584:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1584:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1584:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1587:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1588:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt257=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt257=1;
                }
                break;
            case NUM_LONG:
                {
                alt257=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt257=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt257=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // EsperEPL2Grammar.g:1588:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number10841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1588:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1589:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number10858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1589:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1590:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number10875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1590:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1591:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number10892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1591:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1594:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1595:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1595:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution10913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1595:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1598:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant702 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant703 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1599:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt258=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt258=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt258=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt258=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt258=4;
                }
                break;
            case VALUE_NULL:
                {
                alt258=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }

            switch (alt258) {
                case 1 :
                    // EsperEPL2Grammar.g:1599:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant10932);
                    numberconstant702=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant702.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1600:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant10939);
                    stringconstant703=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant703.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1601:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant10952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1601:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1601:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1602:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant10972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1602:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1602:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1603:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant10992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1603:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1603:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1606:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number704 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1607:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1607:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1607:5: (m= MINUS | p= PLUS )?
            int alt259=3;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==MINUS) ) {
                alt259=1;
            }
            else if ( (LA259_0==PLUS) ) {
                alt259=2;
            }
            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1607:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1607:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11024);
            number704=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number704.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1608:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number704!=null?((CommonTree)number704.tree):null).getType(), "-" + (number704!=null?input.toString(number704.start,number704.stop):null)));

            }
            else // 1609:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1612:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1613:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==STRING_LITERAL) ) {
                alt260=1;
            }
            else if ( (LA260_0==QUOTED_STRING_LITERAL) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1613:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1613:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1613:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1614:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1614:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1614:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:769:4: ( streamSelector )
        // EsperEPL2Grammar.g:769:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3576);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:940:7: ( timePeriod )
        // EsperEPL2Grammar.g:940:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4877);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1102:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1102:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6608);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1187:4: ( eventProperty )
        // EsperEPL2Grammar.g:1187:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7386);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1348:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1348:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8797);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1398:7: ( lastOperand )
        // EsperEPL2Grammar.g:1398:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9220);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1399:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1399:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9231);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1400:4: ( timePeriod )
        // EsperEPL2Grammar.g:1400:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9242);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1401:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1401:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9253);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1402:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1402:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9264);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1403:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1403:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9276);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1404:4: ( lastOperator )
        // EsperEPL2Grammar.g:1404:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9287);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1405:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1405:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9298);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1406:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1406:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9311);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA146 dfa146 = new DFA146(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA232 dfa232 = new DFA232(this);
    static final String DFA146_eotS =
        "\u08a3\uffff";
    static final String DFA146_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u0877\uffff";
    static final String DFA146_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\10\uffff\1\u00fa\145\uffff\1\5\66\uffff"+
        "\1\5\66\uffff\1\5\66\uffff\1\5\66\uffff\1\5\66\uffff\1\5\66\uffff"+
        "\1\5\66\uffff\1\5\66\uffff\1\5\66\uffff\1\5\66\uffff\1\u0103\66"+
        "\uffff\1\5\66\uffff\1\5\66\uffff\1\5\11\uffff\2\6\71\uffff\2\6\70"+
        "\uffff\2\6\66\uffff\2\6\57\uffff\2\6\101\uffff\2\6\70\uffff\2\6"+
        "\70\uffff\2\6\57\uffff\2\6\70\uffff\2\6\100\uffff\2\6\66\uffff\2"+
        "\6\151\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\114\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff"+
        "\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\5\uffff\1\0\54\uffff\1\0\5\uffff\1\0\u0083\uffff";
    static final String DFA146_maxS =
        "\2\u0118\13\uffff\1\u0118\3\uffff\1\u0115\2\uffff\2\u0115\2\uffff"+
        "\4\u0115\1\uffff\2\u0115\7\uffff\2\u0115\2\uffff\2\u0115\10\uffff"+
        "\1\u00fa\145\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0118\66"+
        "\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0118"+
        "\66\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0113"+
        "\66\uffff\1\u0118\66\uffff\1\u0118\66\uffff\1\u0116\11\uffff\2\u0110"+
        "\71\uffff\2\u0110\70\uffff\2\u0110\66\uffff\2\u0110\57\uffff\2\u0110"+
        "\101\uffff\2\u0110\70\uffff\2\u0110\70\uffff\2\u0110\57\uffff\2"+
        "\u0110\70\uffff\2\u0110\100\uffff\2\u0110\66\uffff\2\u0110\151\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\114\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff"+
        "\1\0\54\uffff\1\0\5\uffff\1\0\u0083\uffff";
    static final String DFA146_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\46\uffff\1\6\1\7\1\1\51\uffff"+
        "\1\10\1\4\u0303\uffff\11\6\2\uffff\71\6\2\uffff\70\6\2\uffff\66"+
        "\6\2\uffff\57\6\2\uffff\101\6\2\uffff\70\6\2\uffff\70\6\2\uffff"+
        "\57\6\2\uffff\70\6\2\uffff\67\6\2\uffff\7\6\2\uffff\66\6\2\uffff"+
        "\57\6\1\11\71\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\5\6\1\uffff\31\6\1\uffff\54\6\1\uffff\5"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\53\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\5\6\1\uffff\54\6\1\uffff\5"+
        "\6\1\uffff\62\6\2\uffff\63\6\1\uffff\32\6\1\uffff";
    static final String DFA146_specialS =
        "\1\0\u0099\uffff\1\1\66\uffff\1\2\66\uffff\1\3\66\uffff\1\4\66"+
        "\uffff\1\5\66\uffff\1\6\66\uffff\1\7\66\uffff\1\10\66\uffff\1\11"+
        "\66\uffff\1\12\66\uffff\1\13\66\uffff\1\14\66\uffff\1\15\66\uffff"+
        "\1\16\11\uffff\1\17\1\20\71\uffff\1\21\1\22\70\uffff\1\23\1\24\66"+
        "\uffff\1\25\1\26\57\uffff\1\27\1\30\101\uffff\1\31\1\32\70\uffff"+
        "\1\33\1\34\70\uffff\1\35\1\36\57\uffff\1\37\1\40\70\uffff\1\41\1"+
        "\42\100\uffff\1\43\1\44\66\uffff\1\45\1\46\151\uffff\1\47\30\uffff"+
        "\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1\54\114"+
        "\uffff\1\55\5\uffff\1\56\53\uffff\1\57\5\uffff\1\60\53\uffff\1\61"+
        "\30\uffff\1\62\30\uffff\1\63\30\uffff\1\64\30\uffff\1\65\5\uffff"+
        "\1\66\54\uffff\1\67\5\uffff\1\70\u0083\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\10\uffff\6\16\1\46\1\47\1\64\2\16\1\52\1\53\1\65"+
            "\1\uffff\1\16\1\uffff\3\16\14\uffff\3\2\u0087\uffff\1\2\16\uffff"+
            "\1\16\2\uffff\1\15\3\uffff\1\2\1\14\3\uffff\2\2\11\uffff\1\1"+
            "\2\uffff\1\66\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\67\4\uffff\1\67\3\uffff\1\67\3\uffff\11\67\10\uffff\1\67"+
            "\1\uffff\4\67\12\uffff\3\67\10\uffff\10\67\1\uffff\4\67\2\uffff"+
            "\1\67\1\uffff\3\67\u0096\uffff\1\2\16\uffff\1\67\33\uffff\1"+
            "\2\2\uffff\1\67\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\4\uffff\1\142\2\uffff\2\142\3\uffff\11\142\1\141\1"+
            "\142\6\uffff\1\142\1\uffff\4\142\12\uffff\3\142\10\uffff\16"+
            "\142\1\uffff\1\142\1\uffff\3\142\14\uffff\3\142\u0087\uffff"+
            "\1\142\16\uffff\1\142\2\uffff\1\142\3\uffff\2\142\3\uffff\2"+
            "\142\11\uffff\1\142\2\uffff\1\142\1\uffff\1\142\2\uffff\3\142",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u009a\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u00d1\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u0108\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u013f\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u0176\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u01ad\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u01e4\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u021b\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u0252\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u0289\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u02c0\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u02f7\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\2\uffff\1\16\u0091\uffff\1\16\1\uffff\2\16\1\u032e\10"+
            "\16\2\uffff\14\16\1\uffff\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0365",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0396\4\uffff\1\u037a\2\uffff\1\u039f\1\u037b\3\uffff\1"+
            "\u037c\1\u037d\1\u037e\1\u037f\1\u0380\1\u0381\1\u0382\1\u0383"+
            "\1\u0379\1\uffff\1\u0368\6\uffff\1\u0399\1\uffff\1\u039b\1\u0397"+
            "\1\u0398\1\u039a\5\uffff\1\u0367\1\u0366\3\uffff\1\u0384\1\u0385"+
            "\1\u0386\10\uffff\1\u0387\1\u0388\1\u0389\1\u038b\1\u038c\1"+
            "\u038d\1\u038e\1\u038f\1\u039c\1\u0390\1\u0391\1\u0392\1\u0393"+
            "\1\u039d\1\uffff\1\u0394\1\uffff\1\u0395\1\u038a\1\u0378\14"+
            "\uffff\1\u0371\1\u0372\1\u0373\u0087\uffff\1\u036e\16\uffff"+
            "\1\u0376\2\uffff\1\u0375\1\uffff\1\u03a0\1\uffff\1\u036a\1\u0374"+
            "\3\uffff\1\u036f\1\u0370\11\uffff\1\u0369\2\uffff\1\u039e\1"+
            "\uffff\1\u036b\2\uffff\1\u0377\1\u036c\1\u036d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03d1\4\uffff\1\u03b5\2\uffff\1\u03da\1\u03b6\3\uffff\1"+
            "\u03b7\1\u03b8\1\u03b9\1\u03ba\1\u03bb\1\u03bc\1\u03bd\1\u03be"+
            "\1\u03b4\1\uffff\1\u03a3\6\uffff\1\u03d4\1\uffff\1\u03d6\1\u03d2"+
            "\1\u03d3\1\u03d5\5\uffff\1\u03a2\1\u03a1\3\uffff\1\u03bf\1\u03c0"+
            "\1\u03c1\10\uffff\1\u03c2\1\u03c3\1\u03c4\1\u03c6\1\u03c7\1"+
            "\u03c8\1\u03c9\1\u03ca\1\u03d7\1\u03cb\1\u03cc\1\u03cd\1\u03ce"+
            "\1\u03d8\1\uffff\1\u03cf\1\uffff\1\u03d0\1\u03c5\1\u03b3\14"+
            "\uffff\1\u03ac\1\u03ad\1\u03ae\u0087\uffff\1\u03a9\16\uffff"+
            "\1\u03b1\2\uffff\1\u03b0\3\uffff\1\u03a5\1\u03af\3\uffff\1\u03aa"+
            "\1\u03ab\11\uffff\1\u03a4\2\uffff\1\u03d9\1\uffff\1\u03a6\2"+
            "\uffff\1\u03b2\1\u03a7\1\u03a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u040b\4\uffff\1\u03ef\2\uffff\1\u0414\1\u03f0\3\uffff\1"+
            "\u03f1\1\u03f2\1\u03f3\1\u03f4\1\u03f5\1\u03f6\1\u03f7\1\u03f8"+
            "\1\u03ee\1\uffff\1\u03dd\6\uffff\1\u040e\1\uffff\1\u0410\1\u040c"+
            "\1\u040d\1\u040f\5\uffff\1\u03dc\1\u03db\3\uffff\1\u03f9\1\u03fa"+
            "\1\u03fb\10\uffff\1\u03fc\1\u03fd\1\u03fe\1\u0400\1\u0401\1"+
            "\u0402\1\u0403\1\u0404\1\u0411\1\u0405\1\u0406\1\u0407\1\u0408"+
            "\1\u0412\1\uffff\1\u0409\1\uffff\1\u040a\1\u03ff\1\u03ed\14"+
            "\uffff\1\u03e6\1\u03e7\1\u03e8\u0087\uffff\1\u03e3\16\uffff"+
            "\1\u03eb\2\uffff\1\u03ea\3\uffff\1\u03df\1\u03e9\3\uffff\1\u03e4"+
            "\1\u03e5\11\uffff\1\u03de\2\uffff\1\u0413\1\uffff\1\u03e0\2"+
            "\uffff\1\u03ec\1\u03e1\1\u03e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0443\4\uffff\1\u0427\2\uffff\1\u044c\1\u0428\3\uffff\1"+
            "\u0429\1\u042a\1\u042b\1\u042c\1\u042d\1\u042e\1\u042f\1\u0430"+
            "\1\u0426\1\uffff\1\u0415\6\uffff\1\u0446\1\uffff\1\u0448\1\u0444"+
            "\1\u0445\1\u0447\12\uffff\1\u0431\1\u0432\1\u0433\10\uffff\1"+
            "\u0434\1\u0435\1\u0436\1\u0438\1\u0439\1\u043a\1\u043b\1\u043c"+
            "\1\u0449\1\u043d\1\u043e\1\u043f\1\u0440\1\u044a\1\uffff\1\u0441"+
            "\1\uffff\1\u0442\1\u0437\1\u0425\14\uffff\1\u041e\1\u041f\1"+
            "\u0420\u0087\uffff\1\u041b\16\uffff\1\u0423\2\uffff\1\u0422"+
            "\3\uffff\1\u0417\1\u0421\3\uffff\1\u041c\1\u041d\11\uffff\1"+
            "\u0416\2\uffff\1\u044b\1\uffff\1\u0418\2\uffff\1\u0424\1\u0419"+
            "\1\u041a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047d\4\uffff\1\u0461\2\uffff\1\u0486\1\u0462\3\uffff\1"+
            "\u0463\1\u0464\1\u0465\1\u0466\1\u0467\1\u0468\1\u0469\1\u046a"+
            "\1\u0460\1\uffff\1\u0451\6\uffff\1\u0480\1\uffff\1\u0482\1\u047e"+
            "\1\u047f\1\u0481\5\uffff\1\u0450\1\u044f\3\uffff\1\u046b\1\u046c"+
            "\1\u046d\10\uffff\1\u046e\1\u046f\1\u0470\1\u0472\1\u0473\1"+
            "\u0474\1\u0475\1\u0476\1\u0483\1\u0477\1\u0478\1\u0479\1\u047a"+
            "\1\u0484\1\uffff\1\u047b\1\uffff\1\u047c\1\u0471\1\u045f\14"+
            "\uffff\1\u0458\1\u0459\1\u045a\u0087\uffff\1\u0457\16\uffff"+
            "\1\u045d\2\uffff\1\u045c\3\uffff\1\u0453\1\u045b\3\uffff\1\u044d"+
            "\1\u044e\11\uffff\1\u0452\2\uffff\1\u0485\1\uffff\1\u0454\2"+
            "\uffff\1\u045e\1\u0455\1\u0456",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b7\4\uffff\1\u049b\2\uffff\1\u04c0\1\u049c\3\uffff\1"+
            "\u049d\1\u049e\1\u049f\1\u04a0\1\u04a1\1\u04a2\1\u04a3\1\u04a4"+
            "\1\u049a\1\uffff\1\u0489\6\uffff\1\u04ba\1\uffff\1\u04bc\1\u04b8"+
            "\1\u04b9\1\u04bb\5\uffff\1\u0488\1\u0487\3\uffff\1\u04a5\1\u04a6"+
            "\1\u04a7\10\uffff\1\u04a8\1\u04a9\1\u04aa\1\u04ac\1\u04ad\1"+
            "\u04ae\1\u04af\1\u04b0\1\u04bd\1\u04b1\1\u04b2\1\u04b3\1\u04b4"+
            "\1\u04be\1\uffff\1\u04b5\1\uffff\1\u04b6\1\u04ab\1\u0499\14"+
            "\uffff\1\u0492\1\u0493\1\u0494\u0087\uffff\1\u048f\16\uffff"+
            "\1\u0497\2\uffff\1\u0496\3\uffff\1\u048b\1\u0495\3\uffff\1\u0490"+
            "\1\u0491\11\uffff\1\u048a\2\uffff\1\u04bf\1\uffff\1\u048c\2"+
            "\uffff\1\u0498\1\u048d\1\u048e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f1\4\uffff\1\u04d5\2\uffff\1\u04fa\1\u04d6\3\uffff\1"+
            "\u04d7\1\u04d8\1\u04d9\1\u04da\1\u04db\1\u04dc\1\u04dd\1\u04de"+
            "\1\u04d4\1\uffff\1\u04c3\6\uffff\1\u04f4\1\uffff\1\u04f6\1\u04f2"+
            "\1\u04f3\1\u04f5\5\uffff\1\u04c2\1\u04c1\3\uffff\1\u04df\1\u04e0"+
            "\1\u04e1\10\uffff\1\u04e2\1\u04e3\1\u04e4\1\u04e6\1\u04e7\1"+
            "\u04e8\1\u04e9\1\u04ea\1\u04f7\1\u04eb\1\u04ec\1\u04ed\1\u04ee"+
            "\1\u04f8\1\uffff\1\u04ef\1\uffff\1\u04f0\1\u04e5\1\u04d3\14"+
            "\uffff\1\u04cc\1\u04cd\1\u04ce\u0087\uffff\1\u04c9\16\uffff"+
            "\1\u04d1\2\uffff\1\u04d0\3\uffff\1\u04c5\1\u04cf\3\uffff\1\u04ca"+
            "\1\u04cb\11\uffff\1\u04c4\2\uffff\1\u04f9\1\uffff\1\u04c6\2"+
            "\uffff\1\u04d2\1\u04c7\1\u04c8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052b\4\uffff\1\u050f\2\uffff\1\u0534\1\u0510\3\uffff\1"+
            "\u0511\1\u0512\1\u0513\1\u0514\1\u0515\1\u0516\1\u0517\1\u0518"+
            "\1\u050e\1\uffff\1\u04fd\6\uffff\1\u052e\1\uffff\1\u0530\1\u052c"+
            "\1\u052d\1\u052f\5\uffff\1\u04fc\1\u04fb\3\uffff\1\u0519\1\u051a"+
            "\1\u051b\10\uffff\1\u051c\1\u051d\1\u051e\1\u0520\1\u0521\1"+
            "\u0522\1\u0523\1\u0524\1\u0531\1\u0525\1\u0526\1\u0527\1\u0528"+
            "\1\u0532\1\uffff\1\u0529\1\uffff\1\u052a\1\u051f\1\u050d\14"+
            "\uffff\1\u0506\1\u0507\1\u0508\u0087\uffff\1\u0503\16\uffff"+
            "\1\u050b\2\uffff\1\u050a\3\uffff\1\u04ff\1\u0509\3\uffff\1\u0504"+
            "\1\u0505\11\uffff\1\u04fe\2\uffff\1\u0533\1\uffff\1\u0500\2"+
            "\uffff\1\u050c\1\u0501\1\u0502",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0565\4\uffff\1\u0549\2\uffff\1\u056e\1\u054a\3\uffff\1"+
            "\u054b\1\u054c\1\u054d\1\u054e\1\u054f\1\u0550\1\u0551\1\u0552"+
            "\1\u0548\1\uffff\1\u0539\6\uffff\1\u0568\1\uffff\1\u056a\1\u0566"+
            "\1\u0567\1\u0569\5\uffff\1\u0538\1\u0537\3\uffff\1\u0553\1\u0554"+
            "\1\u0555\10\uffff\1\u0556\1\u0557\1\u0558\1\u055a\1\u055b\1"+
            "\u055c\1\u055d\1\u055e\1\u056b\1\u055f\1\u0560\1\u0561\1\u0562"+
            "\1\u056c\1\uffff\1\u0563\1\uffff\1\u0564\1\u0559\1\u0547\14"+
            "\uffff\1\u0540\1\u0541\1\u0542\u0087\uffff\1\u053f\16\uffff"+
            "\1\u0545\2\uffff\1\u0544\3\uffff\1\u053b\1\u0543\3\uffff\1\u0535"+
            "\1\u0536\11\uffff\1\u053a\2\uffff\1\u056d\1\uffff\1\u053c\2"+
            "\uffff\1\u0546\1\u053d\1\u053e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u059d\4\uffff\1\u0581\2\uffff\1\u05a6\1\u0582\3\uffff\1"+
            "\u0583\1\u0584\1\u0585\1\u0586\1\u0587\1\u0588\1\u0589\1\u058a"+
            "\1\u0580\1\uffff\1\u0571\6\uffff\1\u05a0\1\uffff\1\u05a2\1\u059e"+
            "\1\u059f\1\u05a1\12\uffff\1\u058b\1\u058c\1\u058d\10\uffff\1"+
            "\u058e\1\u058f\1\u0590\1\u0592\1\u0593\1\u0594\1\u0595\1\u0596"+
            "\1\u05a3\1\u0597\1\u0598\1\u0599\1\u059a\1\u05a4\1\uffff\1\u059b"+
            "\1\uffff\1\u059c\1\u0591\1\u057f\14\uffff\1\u0578\1\u0579\1"+
            "\u057a\u0087\uffff\1\u0577\16\uffff\1\u057d\2\uffff\1\u057c"+
            "\3\uffff\1\u0573\1\u057b\3\uffff\1\u056f\1\u0570\11\uffff\1"+
            "\u0572\2\uffff\1\u05a5\1\uffff\1\u0574\2\uffff\1\u057e\1\u0575"+
            "\1\u0576",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u05a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05d8\4\uffff\1\u05bc\2\uffff\1\u05e1\1\u05bd\3\uffff\1"+
            "\u05be\1\u05bf\1\u05c0\1\u05c1\1\u05c2\1\u05c3\1\u05c4\1\u05c5"+
            "\1\u05bb\1\uffff\1\u05aa\6\uffff\1\u05db\1\uffff\1\u05dd\1\u05d9"+
            "\1\u05da\1\u05dc\12\uffff\1\u05c6\1\u05c7\1\u05c8\10\uffff\1"+
            "\u05c9\1\u05ca\1\u05cb\1\u05cd\1\u05ce\1\u05cf\1\u05d0\1\u05d1"+
            "\1\u05de\1\u05d2\1\u05d3\1\u05d4\1\u05d5\1\u05df\1\uffff\1\u05d6"+
            "\1\uffff\1\u05d7\1\u05cc\1\u05ba\14\uffff\1\u05b3\1\u05b4\1"+
            "\u05b5\u0087\uffff\1\u05b0\16\uffff\1\u05b8\2\uffff\1\u05b7"+
            "\3\uffff\1\u05ac\1\u05b6\3\uffff\1\u05b1\1\u05b2\11\uffff\1"+
            "\u05ab\2\uffff\1\u05e0\1\uffff\1\u05ad\2\uffff\1\u05b9\1\u05ae"+
            "\1\u05af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0610\4\uffff\1\u05f4\2\uffff\1\u0619\1\u05f5\3\uffff\1"+
            "\u05f6\1\u05f7\1\u05f8\1\u05f9\1\u05fa\1\u05fb\1\u05fc\1\u05fd"+
            "\1\u05f3\1\uffff\1\u05e2\6\uffff\1\u0613\1\uffff\1\u0615\1\u0611"+
            "\1\u0612\1\u0614\12\uffff\1\u05fe\1\u05ff\1\u0600\10\uffff\1"+
            "\u0601\1\u0602\1\u0603\1\u0605\1\u0606\1\u0607\1\u0608\1\u0609"+
            "\1\u0616\1\u060a\1\u060b\1\u060c\1\u060d\1\u0617\1\uffff\1\u060e"+
            "\1\uffff\1\u060f\1\u0604\1\u05f2\14\uffff\1\u05eb\1\u05ec\1"+
            "\u05ed\u0087\uffff\1\u05e8\16\uffff\1\u05f0\2\uffff\1\u05ef"+
            "\3\uffff\1\u05e4\1\u05ee\3\uffff\1\u05e9\1\u05ea\11\uffff\1"+
            "\u05e3\2\uffff\1\u0618\1\uffff\1\u05e5\2\uffff\1\u05f1\1\u05e6"+
            "\1\u05e7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063b\4\uffff\1\u061f\3\uffff\1\u0620\3\uffff\1\u0621\1"+
            "\u0622\1\u0623\1\u0624\1\u0625\1\u0626\1\u0627\1\u0628\1\u061e"+
            "\1\u061a\7\uffff\1\u063e\1\uffff\1\u0640\1\u063c\1\u063d\1\u063f"+
            "\12\uffff\1\u0629\1\u062a\1\u062b\10\uffff\1\u062c\1\u062d\1"+
            "\u062e\1\u0630\1\u0631\1\u0632\1\u0633\1\u0634\1\uffff\1\u0635"+
            "\1\u0636\1\u0637\1\u0638\2\uffff\1\u0639\1\uffff\1\u063a\1\u062f"+
            "\1\u061d\u00a5\uffff\1\u061b\36\uffff\1\u061c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0656\1\u0657\1\u0658\1\u0659\1\uffff\1\u0653\1\u0652\1"+
            "\u0655\34\uffff\1\u064c\u00cd\uffff\1\u064b\2\uffff\1\u0654"+
            "\1\u0641\1\u0650\1\u0644\6\uffff\1\u064f\1\u0651\1\u064d\1\u064e"+
            "\1\u0647\1\u0648\1\u0649\1\u064a\1\u0646\1\u0645\1\u0642\1\u0643",
            "\1\u066f\1\u0670\1\u0671\1\u0672\1\uffff\1\u066c\1\u066b\1"+
            "\u066e\34\uffff\1\u0665\u00cd\uffff\1\u0664\2\uffff\1\u066d"+
            "\1\u065a\1\u0669\1\u065d\6\uffff\1\u0668\1\u066a\1\u0666\1\u0667"+
            "\1\u0660\1\u0661\1\u0662\1\u0663\1\u065f\1\u065e\1\u065b\1\u065c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0688\1\u0689\1\u068a\1\u068b\1\uffff\1\u0685\1\u0684\1"+
            "\u0687\34\uffff\1\u067e\u00cd\uffff\1\u067d\2\uffff\1\u0686"+
            "\1\u0673\1\u0682\1\u0676\6\uffff\1\u0681\1\u0683\1\u067f\1\u0680"+
            "\1\u0679\1\u067a\1\u067b\1\u067c\1\u0678\1\u0677\1\u0674\1\u0675",
            "\1\u06a1\1\u06a2\1\u06a3\1\u06a4\1\uffff\1\u069e\1\u069d\1"+
            "\u06a0\34\uffff\1\u0697\u00cd\uffff\1\u0696\2\uffff\1\u069f"+
            "\1\u068c\1\u069b\1\u068f\6\uffff\1\u069a\1\u069c\1\u0698\1\u0699"+
            "\1\u0692\1\u0693\1\u0694\1\u0695\1\u0691\1\u0690\1\u068d\1\u068e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ba\1\u06bb\1\u06bc\1\u06bd\1\uffff\1\u06b7\1\u06b6\1"+
            "\u06b9\34\uffff\1\u06b0\u00cd\uffff\1\u06af\2\uffff\1\u06b8"+
            "\1\u06a5\1\u06b4\1\u06a8\6\uffff\1\u06b3\1\u06b5\1\u06b1\1\u06b2"+
            "\1\u06ab\1\u06ac\1\u06ad\1\u06ae\1\u06aa\1\u06a9\1\u06a6\1\u06a7",
            "\1\u06d3\1\u06d4\1\u06d5\1\u06d6\1\uffff\1\u06d0\1\u06cf\1"+
            "\u06d2\34\uffff\1\u06c9\u00cd\uffff\1\u06c8\2\uffff\1\u06d1"+
            "\1\u06be\1\u06cd\1\u06c1\6\uffff\1\u06cc\1\u06ce\1\u06ca\1\u06cb"+
            "\1\u06c4\1\u06c5\1\u06c6\1\u06c7\1\u06c3\1\u06c2\1\u06bf\1\u06c0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ed\1\u06ee\1\u06ef\1\u06f0\1\uffff\1\u06ea\1\u06e9\1"+
            "\u06ec\34\uffff\1\u06e3\u00cb\uffff\1\u06eb\1\uffff\1\u06e2"+
            "\2\uffff\1\16\1\u06d8\1\u06e7\1\u06db\6\uffff\1\u06e6\1\u06e8"+
            "\1\u06e4\1\u06e5\1\u06de\1\u06df\1\u06e0\1\u06e1\1\u06dd\1\u06dc"+
            "\1\u06d9\1\u06da",
            "\1\u0707\1\u0708\1\u0709\1\u070a\1\uffff\1\u0704\1\u0703\1"+
            "\u0706\34\uffff\1\u06fd\u00cb\uffff\1\u0705\1\uffff\1\u06fc"+
            "\2\uffff\1\16\1\u06f2\1\u0701\1\u06f5\6\uffff\1\u0700\1\u0702"+
            "\1\u06fe\1\u06ff\1\u06f8\1\u06f9\1\u06fa\1\u06fb\1\u06f7\1\u06f6"+
            "\1\u06f3\1\u06f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0720\1\u0721\1\u0722\1\u0723\1\uffff\1\u071d\1\u071c\1"+
            "\u071f\34\uffff\1\u0716\u00cd\uffff\1\u0715\2\uffff\1\u071e"+
            "\1\u070b\1\u071a\1\u070e\6\uffff\1\u0719\1\u071b\1\u0717\1\u0718"+
            "\1\u0711\1\u0712\1\u0713\1\u0714\1\u0710\1\u070f\1\u070c\1\u070d",
            "\1\u0739\1\u073a\1\u073b\1\u073c\1\uffff\1\u0737\1\u0736\1"+
            "\u0738\34\uffff\1\u0730\u00cd\uffff\1\u072f\2\uffff\1\u0724"+
            "\1\u0725\1\u0734\1\u0728\6\uffff\1\u0733\1\u0735\1\u0731\1\u0732"+
            "\1\u072b\1\u072c\1\u072d\1\u072e\1\u072a\1\u0729\1\u0726\1\u0727",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0752\1\u0753\1\u0754\1\u0755\1\uffff\1\u074f\1\u074e\1"+
            "\u0751\34\uffff\1\u0748\u00cd\uffff\1\u0747\2\uffff\1\u0750"+
            "\1\u073d\1\u074c\1\u0740\6\uffff\1\u074b\1\u074d\1\u0749\1\u074a"+
            "\1\u0743\1\u0744\1\u0745\1\u0746\1\u0742\1\u0741\1\u073e\1\u073f",
            "\1\u076b\1\u076c\1\u076d\1\u076e\1\uffff\1\u0769\1\u0768\1"+
            "\u076a\34\uffff\1\u0762\u00cd\uffff\1\u0761\2\uffff\1\u0756"+
            "\1\u0757\1\u0766\1\u075a\6\uffff\1\u0765\1\u0767\1\u0763\1\u0764"+
            "\1\u075d\1\u075e\1\u075f\1\u0760\1\u075c\1\u075b\1\u0758\1\u0759",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0784\1\u0785\1\u0786\1\u0787\1\uffff\1\u0781\1\u0780\1"+
            "\u0783\34\uffff\1\u077a\u00cd\uffff\1\u0779\2\uffff\1\u0782"+
            "\1\u076f\1\u077e\1\u0772\6\uffff\1\u077d\1\u077f\1\u077b\1\u077c"+
            "\1\u0775\1\u0776\1\u0777\1\u0778\1\u0774\1\u0773\1\u0770\1\u0771",
            "\1\u079d\1\u079e\1\u079f\1\u07a0\1\uffff\1\u079a\1\u0799\1"+
            "\u079c\34\uffff\1\u0793\u00cd\uffff\1\u0792\2\uffff\1\u079b"+
            "\1\u0788\1\u0797\1\u078b\6\uffff\1\u0796\1\u0798\1\u0794\1\u0795"+
            "\1\u078e\1\u078f\1\u0790\1\u0791\1\u078d\1\u078c\1\u0789\1\u078a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07b6\1\u07b7\1\u07b8\1\u07b9\1\uffff\1\u07b3\1\u07b2\1"+
            "\u07b5\34\uffff\1\u07ac\u00cd\uffff\1\u07ab\2\uffff\1\u07b4"+
            "\1\u07a1\1\u07b0\1\u07a4\6\uffff\1\u07af\1\u07b1\1\u07ad\1\u07ae"+
            "\1\u07a7\1\u07a8\1\u07a9\1\u07aa\1\u07a6\1\u07a5\1\u07a2\1\u07a3",
            "\1\u07cf\1\u07d0\1\u07d1\1\u07d2\1\uffff\1\u07cc\1\u07cb\1"+
            "\u07ce\34\uffff\1\u07c5\u00cd\uffff\1\u07c4\2\uffff\1\u07cd"+
            "\1\u07ba\1\u07c9\1\u07bd\6\uffff\1\u07c8\1\u07ca\1\u07c6\1\u07c7"+
            "\1\u07c0\1\u07c1\1\u07c2\1\u07c3\1\u07bf\1\u07be\1\u07bb\1\u07bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07e8\1\u07e9\1\u07ea\1\u07eb\1\uffff\1\u07e5\1\u07e4\1"+
            "\u07e7\34\uffff\1\u07de\u00cd\uffff\1\u07dd\2\uffff\1\u07e6"+
            "\1\u07d3\1\u07e2\1\u07d6\6\uffff\1\u07e1\1\u07e3\1\u07df\1\u07e0"+
            "\1\u07d9\1\u07da\1\u07db\1\u07dc\1\u07d8\1\u07d7\1\u07d4\1\u07d5",
            "\1\u0801\1\u0802\1\u0803\1\u0804\1\uffff\1\u07ff\1\u07fe\1"+
            "\u0800\34\uffff\1\u07f8\u00cd\uffff\1\u07f7\2\uffff\1\u07ec"+
            "\1\u07ed\1\u07fc\1\u07f0\6\uffff\1\u07fb\1\u07fd\1\u07f9\1\u07fa"+
            "\1\u07f3\1\u07f4\1\u07f5\1\u07f6\1\u07f2\1\u07f1\1\u07ee\1\u07ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081b\1\u081c\1\u081d\1\u081e\1\uffff\1\u0817\1\u0816\1"+
            "\u081a\34\uffff\1\u0810\u00cb\uffff\1\u0818\1\uffff\1\u080f"+
            "\2\uffff\1\u0819\1\u0805\1\u0814\1\u0808\6\uffff\1\u0813\1\u0815"+
            "\1\u0811\1\u0812\1\u080b\1\u080c\1\u080d\1\u080e\1\u080a\1\u0809"+
            "\1\u0806\1\u0807",
            "\1\u0835\1\u0836\1\u0837\1\u0838\1\uffff\1\u0832\1\u0831\1"+
            "\u0834\34\uffff\1\u082b\u00cb\uffff\1\u0833\1\uffff\1\u082a"+
            "\2\uffff\1\u081f\1\u0820\1\u082f\1\u0823\6\uffff\1\u082e\1\u0830"+
            "\1\u082c\1\u082d\1\u0826\1\u0827\1\u0828\1\u0829\1\u0825\1\u0824"+
            "\1\u0821\1\u0822",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u084e\1\u084f\1\u0850\1\u0851\1\uffff\1\u084b\1\u084a\1"+
            "\u084d\34\uffff\1\u0844\u00cb\uffff\1\u084c\1\uffff\1\u0843"+
            "\2\uffff\1\16\1\u0839\1\u0848\1\u083c\6\uffff\1\u0847\1\u0849"+
            "\1\u0845\1\u0846\1\u083f\1\u0840\1\u0841\1\u0842\1\u083e\1\u083d"+
            "\1\u083a\1\u083b",
            "\1\u0869\1\u086a\1\u086b\1\u086c\1\uffff\1\u0866\1\u0865\1"+
            "\u0868\34\uffff\1\u085f\u00cb\uffff\1\u0867\1\uffff\1\u085e"+
            "\2\uffff\1\16\1\u0854\1\u0863\1\u0857\6\uffff\1\u0862\1\u0864"+
            "\1\u0860\1\u0861\1\u085a\1\u085b\1\u085c\1\u085d\1\u0859\1\u0858"+
            "\1\u0855\1\u0856",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0883\1\u0884\1\u0885\1\u0886\1\uffff\1\u087f\1\u087e\1"+
            "\u0882\3\uffff\1\u0881\30\uffff\1\u0878\u00cb\uffff\1\u0880"+
            "\1\uffff\1\u0877\2\uffff\1\16\1\u086d\1\u087c\1\u0870\6\uffff"+
            "\1\u087b\1\u087d\1\u0879\1\u087a\1\u0873\1\u0874\1\u0875\1\u0876"+
            "\1\u0872\1\u0871\1\u086e\1\u086f",
            "\1\u089e\1\u089f\1\u08a0\1\u08a1\1\uffff\1\u089a\1\u0899\1"+
            "\u089d\3\uffff\1\u089c\30\uffff\1\u0893\u00cb\uffff\1\u089b"+
            "\1\uffff\1\u0892\2\uffff\1\16\1\u0888\1\u0897\1\u088b\6\uffff"+
            "\1\u0896\1\u0898\1\u0894\1\u0895\1\u088e\1\u088f\1\u0890\1\u0891"+
            "\1\u088d\1\u088c\1\u0889\1\u088a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1096:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_0==MINUS) ) {s = 1;}

                        else if ( ((LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||LA146_0==NUM_DOUBLE||LA146_0==PLUS||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==NUM_INT||(LA146_0>=NUM_LONG && LA146_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA146_0==QUESTION) ) {s = 12;}

                        else if ( (LA146_0==LPAREN) ) {s = 13;}

                        else if ( (LA146_0==WINDOW||LA146_0==ESCAPE||LA146_0==EVERY_EXPR||(LA146_0>=MAX && LA146_0<=MIN)||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||LA146_0==EVENTS||(LA146_0>=UNIDIRECTIONAL && LA146_0<=METADATASQL)||(LA146_0>=WEEKDAY && LA146_0<=LW)||LA146_0==SNAPSHOT||(LA146_0>=VARIABLE && LA146_0<=AT)||LA146_0==IDENT||LA146_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA146_0==COUNT) ) {s = 17;}

                        else if ( (LA146_0==SUM) ) {s = 20;}

                        else if ( (LA146_0==AVG) ) {s = 21;}

                        else if ( (LA146_0==COALESCE) ) {s = 24;}

                        else if ( (LA146_0==MEDIAN) ) {s = 25;}

                        else if ( (LA146_0==STDDEV) ) {s = 26;}

                        else if ( (LA146_0==AVEDEV) ) {s = 27;}

                        else if ( (LA146_0==FIRST) ) {s = 29;}

                        else if ( (LA146_0==LAST) ) {s = 30;}

                        else if ( (LA146_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA146_0==PRIOR) ) {s = 39;}

                        else if ( (LA146_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA146_0==CAST) ) {s = 43;}

                        else if ( (LA146_0==EXISTS) ) {s = 52;}

                        else if ( (LA146_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA146_0==LCURLY) ) {s = 54;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_154 = input.LA(1);

                         
                        int index146_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_154==ALL) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA146_154==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA146_154==CASE) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA146_154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA146_154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA146_154==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA146_154==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA146_154==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA146_154==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA146_154==STRING_LITERAL) ) {s = 879;}

                        else if ( (LA146_154==QUOTED_STRING_LITERAL) ) {s = 880;}

                        else if ( (LA146_154==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA146_154==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA146_154==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA146_154==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA146_154==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA146_154==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA146_154==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA146_154==AT) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA146_154==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA146_154==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA146_154==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA146_154==SUM) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA146_154==AVG) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA146_154==MAX) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA146_154==MIN) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA146_154==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA146_154==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA146_154==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA146_154==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA146_154==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA146_154==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA146_154==LAST) && (synpred3_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA146_154==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA146_154==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA146_154==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA146_154==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA146_154==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA146_154==SQL) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA146_154==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA146_154==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA146_154==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA146_154==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA146_154==LW) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA146_154==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA146_154==CAST) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA146_154==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA146_154==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA146_154==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA146_154==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA146_154==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA146_154==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA146_154==FULL) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA146_154==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA146_154==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA146_154==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA146_154==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA146_154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA146_154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                         
                        input.seek(index146_154);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_209 = input.LA(1);

                         
                        int index146_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_209==ALL) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA146_209==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA146_209==CASE) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA146_209==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA146_209==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA146_209==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA146_209==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA146_209==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA146_209==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA146_209==STRING_LITERAL) ) {s = 938;}

                        else if ( (LA146_209==QUOTED_STRING_LITERAL) ) {s = 939;}

                        else if ( (LA146_209==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA146_209==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA146_209==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA146_209==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA146_209==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA146_209==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA146_209==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA146_209==AT) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA146_209==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA146_209==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA146_209==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA146_209==SUM) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA146_209==AVG) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA146_209==MAX) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA146_209==MIN) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA146_209==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA146_209==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA146_209==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA146_209==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA146_209==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA146_209==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA146_209==LAST) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA146_209==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA146_209==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA146_209==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA146_209==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA146_209==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA146_209==SQL) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA146_209==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA146_209==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA146_209==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA146_209==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA146_209==LW) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA146_209==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA146_209==CAST) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA146_209==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA146_209==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA146_209==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA146_209==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA146_209==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA146_209==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA146_209==FULL) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA146_209==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA146_209==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA146_209==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA146_209==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA146_209==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                         
                        input.seek(index146_209);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_264 = input.LA(1);

                         
                        int index146_264 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_264==ALL) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA146_264==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA146_264==CASE) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA146_264==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA146_264==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA146_264==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA146_264==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA146_264==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA146_264==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA146_264==STRING_LITERAL) ) {s = 996;}

                        else if ( (LA146_264==QUOTED_STRING_LITERAL) ) {s = 997;}

                        else if ( (LA146_264==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA146_264==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA146_264==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA146_264==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA146_264==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA146_264==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA146_264==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA146_264==AT) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA146_264==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA146_264==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA146_264==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA146_264==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA146_264==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA146_264==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA146_264==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA146_264==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA146_264==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA146_264==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA146_264==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA146_264==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA146_264==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA146_264==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA146_264==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA146_264==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA146_264==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA146_264==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA146_264==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA146_264==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA146_264==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA146_264==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA146_264==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA146_264==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA146_264==LW) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA146_264==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA146_264==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA146_264==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA146_264==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA146_264==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA146_264==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA146_264==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA146_264==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA146_264==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA146_264==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA146_264==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA146_264==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA146_264==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA146_264==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                         
                        input.seek(index146_264);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_319 = input.LA(1);

                         
                        int index146_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_319==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA146_319==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA146_319==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA146_319==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA146_319==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA146_319==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA146_319==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA146_319==STRING_LITERAL) ) {s = 1052;}

                        else if ( (LA146_319==QUOTED_STRING_LITERAL) ) {s = 1053;}

                        else if ( (LA146_319==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA146_319==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA146_319==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA146_319==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA146_319==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA146_319==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA146_319==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA146_319==AT) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA146_319==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA146_319==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA146_319==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA146_319==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA146_319==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA146_319==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA146_319==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA146_319==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA146_319==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA146_319==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA146_319==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA146_319==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA146_319==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA146_319==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA146_319==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA146_319==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA146_319==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA146_319==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA146_319==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA146_319==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA146_319==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA146_319==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA146_319==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA146_319==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA146_319==LW) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA146_319==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA146_319==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA146_319==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA146_319==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA146_319==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA146_319==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA146_319==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA146_319==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA146_319==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA146_319==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA146_319==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA146_319==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA146_319==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA146_319==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                         
                        input.seek(index146_319);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_374 = input.LA(1);

                         
                        int index146_374 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_374==STRING_LITERAL) ) {s = 1101;}

                        else if ( (LA146_374==QUOTED_STRING_LITERAL) ) {s = 1102;}

                        else if ( (LA146_374==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA146_374==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA146_374==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA146_374==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA146_374==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA146_374==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA146_374==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA146_374==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA146_374==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA146_374==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA146_374==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA146_374==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA146_374==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA146_374==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA146_374==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA146_374==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA146_374==AT) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA146_374==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA146_374==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA146_374==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA146_374==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA146_374==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA146_374==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA146_374==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA146_374==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA146_374==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA146_374==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA146_374==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA146_374==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA146_374==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA146_374==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA146_374==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA146_374==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA146_374==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA146_374==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA146_374==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA146_374==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA146_374==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA146_374==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA146_374==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA146_374==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA146_374==LW) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA146_374==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA146_374==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA146_374==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA146_374==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA146_374==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA146_374==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA146_374==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA146_374==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA146_374==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA146_374==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA146_374==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA146_374==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA146_374==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA146_374==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                         
                        input.seek(index146_374);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_429 = input.LA(1);

                         
                        int index146_429 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_429==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA146_429==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA146_429==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA146_429==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA146_429==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA146_429==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA146_429==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA146_429==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA146_429==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA146_429==STRING_LITERAL) ) {s = 1168;}

                        else if ( (LA146_429==QUOTED_STRING_LITERAL) ) {s = 1169;}

                        else if ( (LA146_429==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA146_429==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA146_429==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA146_429==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA146_429==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA146_429==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA146_429==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA146_429==AT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA146_429==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA146_429==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA146_429==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA146_429==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA146_429==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA146_429==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA146_429==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA146_429==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA146_429==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA146_429==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA146_429==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA146_429==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA146_429==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA146_429==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA146_429==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA146_429==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA146_429==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA146_429==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA146_429==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA146_429==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA146_429==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA146_429==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA146_429==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA146_429==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA146_429==LW) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA146_429==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA146_429==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA146_429==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA146_429==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA146_429==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA146_429==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA146_429==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA146_429==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA146_429==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA146_429==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA146_429==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA146_429==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA146_429==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA146_429==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                         
                        input.seek(index146_429);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_484 = input.LA(1);

                         
                        int index146_484 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_484==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA146_484==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA146_484==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA146_484==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA146_484==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA146_484==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA146_484==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA146_484==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA146_484==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA146_484==STRING_LITERAL) ) {s = 1226;}

                        else if ( (LA146_484==QUOTED_STRING_LITERAL) ) {s = 1227;}

                        else if ( (LA146_484==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA146_484==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA146_484==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA146_484==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA146_484==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA146_484==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA146_484==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA146_484==AT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA146_484==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA146_484==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA146_484==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA146_484==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA146_484==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA146_484==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA146_484==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA146_484==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA146_484==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA146_484==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA146_484==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA146_484==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA146_484==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA146_484==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA146_484==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA146_484==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA146_484==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA146_484==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA146_484==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA146_484==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA146_484==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA146_484==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA146_484==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA146_484==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA146_484==LW) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA146_484==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA146_484==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA146_484==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA146_484==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA146_484==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA146_484==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA146_484==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA146_484==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA146_484==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA146_484==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA146_484==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA146_484==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA146_484==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA146_484==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                         
                        input.seek(index146_484);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_539 = input.LA(1);

                         
                        int index146_539 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_539==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA146_539==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA146_539==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA146_539==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA146_539==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA146_539==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA146_539==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA146_539==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA146_539==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA146_539==STRING_LITERAL) ) {s = 1284;}

                        else if ( (LA146_539==QUOTED_STRING_LITERAL) ) {s = 1285;}

                        else if ( (LA146_539==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA146_539==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA146_539==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA146_539==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA146_539==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA146_539==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA146_539==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA146_539==AT) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA146_539==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA146_539==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA146_539==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA146_539==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA146_539==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA146_539==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA146_539==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA146_539==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA146_539==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA146_539==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA146_539==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA146_539==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA146_539==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA146_539==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA146_539==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA146_539==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA146_539==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA146_539==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA146_539==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA146_539==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA146_539==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA146_539==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA146_539==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA146_539==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA146_539==LW) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA146_539==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA146_539==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA146_539==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA146_539==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA146_539==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA146_539==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA146_539==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA146_539==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA146_539==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA146_539==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA146_539==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA146_539==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA146_539==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA146_539==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                         
                        input.seek(index146_539);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_594 = input.LA(1);

                         
                        int index146_594 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_594==STRING_LITERAL) ) {s = 1333;}

                        else if ( (LA146_594==QUOTED_STRING_LITERAL) ) {s = 1334;}

                        else if ( (LA146_594==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA146_594==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA146_594==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA146_594==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA146_594==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA146_594==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA146_594==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA146_594==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA146_594==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA146_594==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA146_594==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA146_594==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA146_594==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA146_594==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA146_594==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA146_594==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA146_594==AT) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA146_594==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA146_594==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA146_594==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA146_594==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA146_594==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA146_594==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA146_594==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA146_594==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA146_594==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA146_594==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA146_594==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA146_594==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA146_594==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA146_594==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA146_594==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA146_594==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA146_594==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA146_594==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA146_594==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA146_594==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA146_594==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA146_594==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA146_594==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA146_594==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA146_594==LW) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA146_594==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA146_594==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA146_594==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA146_594==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA146_594==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA146_594==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA146_594==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA146_594==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA146_594==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA146_594==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA146_594==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA146_594==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA146_594==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA146_594==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                         
                        input.seek(index146_594);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_649 = input.LA(1);

                         
                        int index146_649 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_649==STRING_LITERAL) ) {s = 1391;}

                        else if ( (LA146_649==QUOTED_STRING_LITERAL) ) {s = 1392;}

                        else if ( (LA146_649==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA146_649==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA146_649==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA146_649==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA146_649==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA146_649==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA146_649==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA146_649==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA146_649==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA146_649==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA146_649==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA146_649==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA146_649==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA146_649==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA146_649==AT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA146_649==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA146_649==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA146_649==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA146_649==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA146_649==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA146_649==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA146_649==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA146_649==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA146_649==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA146_649==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA146_649==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA146_649==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA146_649==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA146_649==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA146_649==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA146_649==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA146_649==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA146_649==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA146_649==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA146_649==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA146_649==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA146_649==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA146_649==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA146_649==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA146_649==LW) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA146_649==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA146_649==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA146_649==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA146_649==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA146_649==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA146_649==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA146_649==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA146_649==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA146_649==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA146_649==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA146_649==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA146_649==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA146_649==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA146_649==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                         
                        input.seek(index146_649);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_704 = input.LA(1);

                         
                        int index146_704 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_704==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( ((LA146_704>=STRING_LITERAL && LA146_704<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index146_704);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_759 = input.LA(1);

                         
                        int index146_759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_759==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA146_759==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA146_759==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA146_759==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA146_759==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA146_759==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA146_759==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA146_759==STRING_LITERAL) ) {s = 1457;}

                        else if ( (LA146_759==QUOTED_STRING_LITERAL) ) {s = 1458;}

                        else if ( (LA146_759==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA146_759==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA146_759==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA146_759==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA146_759==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA146_759==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA146_759==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA146_759==AT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA146_759==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA146_759==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA146_759==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA146_759==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA146_759==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA146_759==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA146_759==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA146_759==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA146_759==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA146_759==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA146_759==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA146_759==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA146_759==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA146_759==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA146_759==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA146_759==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA146_759==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA146_759==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA146_759==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA146_759==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA146_759==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA146_759==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA146_759==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA146_759==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA146_759==LW) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA146_759==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA146_759==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA146_759==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA146_759==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA146_759==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA146_759==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA146_759==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA146_759==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA146_759==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA146_759==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA146_759==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA146_759==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA146_759==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA146_759==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                         
                        input.seek(index146_759);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_814 = input.LA(1);

                         
                        int index146_814 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_814==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA146_814==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA146_814==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA146_814==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA146_814==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA146_814==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA146_814==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA146_814==STRING_LITERAL) ) {s = 1513;}

                        else if ( (LA146_814==QUOTED_STRING_LITERAL) ) {s = 1514;}

                        else if ( (LA146_814==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA146_814==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA146_814==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA146_814==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA146_814==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA146_814==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA146_814==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA146_814==AT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA146_814==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA146_814==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA146_814==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA146_814==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA146_814==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA146_814==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA146_814==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA146_814==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA146_814==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA146_814==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA146_814==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA146_814==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA146_814==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA146_814==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA146_814==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA146_814==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA146_814==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA146_814==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA146_814==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA146_814==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA146_814==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA146_814==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA146_814==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA146_814==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA146_814==LW) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA146_814==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA146_814==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA146_814==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA146_814==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA146_814==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA146_814==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA146_814==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA146_814==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA146_814==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA146_814==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA146_814==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA146_814==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA146_814==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA146_814==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                         
                        input.seek(index146_814);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_869 = input.LA(1);

                         
                        int index146_869 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_869==SELECT) ) {s = 1562;}

                        else if ( (LA146_869==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA146_869==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA146_869==AT) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA146_869==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA146_869==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA146_869==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA146_869==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA146_869==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA146_869==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA146_869==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA146_869==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA146_869==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA146_869==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA146_869==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA146_869==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA146_869==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA146_869==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA146_869==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA146_869==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA146_869==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA146_869==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA146_869==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA146_869==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA146_869==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA146_869==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA146_869==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA146_869==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA146_869==LW) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA146_869==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA146_869==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA146_869==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA146_869==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA146_869==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA146_869==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA146_869==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA146_869==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA146_869==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA146_869==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                         
                        input.seek(index146_869);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_879 = input.LA(1);

                         
                        int index146_879 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_879==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA146_879==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA146_879==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA146_879==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA146_879==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA146_879==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA146_879==LT) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA146_879==GT) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA146_879==LE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA146_879==GE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA146_879==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA146_879==IS) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA146_879==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA146_879==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA146_879==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA146_879==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA146_879==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA146_879==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA146_879==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA146_879==RPAREN) ) {s = 1620;}

                        else if ( (LA146_879==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA146_879==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA146_879==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA146_879==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA146_879==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                         
                        input.seek(index146_879);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_880 = input.LA(1);

                         
                        int index146_880 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_880==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA146_880==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA146_880==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA146_880==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA146_880==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA146_880==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA146_880==LT) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA146_880==GT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA146_880==LE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA146_880==GE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA146_880==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA146_880==IS) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA146_880==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA146_880==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA146_880==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA146_880==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA146_880==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA146_880==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA146_880==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA146_880==RPAREN) ) {s = 1645;}

                        else if ( (LA146_880==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA146_880==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA146_880==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA146_880==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA146_880==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                         
                        input.seek(index146_880);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_938 = input.LA(1);

                         
                        int index146_938 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_938==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA146_938==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA146_938==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA146_938==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA146_938==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA146_938==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA146_938==LT) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA146_938==GT) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA146_938==LE) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA146_938==GE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA146_938==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA146_938==IS) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA146_938==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA146_938==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA146_938==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA146_938==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA146_938==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA146_938==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA146_938==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA146_938==RPAREN) ) {s = 1670;}

                        else if ( (LA146_938==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA146_938==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA146_938==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA146_938==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA146_938==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                         
                        input.seek(index146_938);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_939 = input.LA(1);

                         
                        int index146_939 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_939==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA146_939==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA146_939==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA146_939==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA146_939==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA146_939==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA146_939==LT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA146_939==GT) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA146_939==LE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA146_939==GE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA146_939==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA146_939==IS) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA146_939==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA146_939==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA146_939==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA146_939==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA146_939==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA146_939==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA146_939==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA146_939==RPAREN) ) {s = 1695;}

                        else if ( (LA146_939==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA146_939==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA146_939==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA146_939==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA146_939==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                         
                        input.seek(index146_939);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_996 = input.LA(1);

                         
                        int index146_996 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_996==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA146_996==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA146_996==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA146_996==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA146_996==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA146_996==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA146_996==LT) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA146_996==GT) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA146_996==LE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA146_996==GE) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA146_996==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA146_996==IS) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA146_996==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA146_996==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA146_996==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA146_996==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA146_996==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA146_996==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA146_996==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA146_996==RPAREN) ) {s = 1720;}

                        else if ( (LA146_996==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA146_996==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA146_996==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA146_996==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA146_996==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                         
                        input.seek(index146_996);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_997 = input.LA(1);

                         
                        int index146_997 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_997==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA146_997==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA146_997==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA146_997==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA146_997==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA146_997==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA146_997==LT) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA146_997==GT) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA146_997==LE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA146_997==GE) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA146_997==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA146_997==IS) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA146_997==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA146_997==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA146_997==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA146_997==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA146_997==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA146_997==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA146_997==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA146_997==RPAREN) ) {s = 1745;}

                        else if ( (LA146_997==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA146_997==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA146_997==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA146_997==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA146_997==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                         
                        input.seek(index146_997);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_1052 = input.LA(1);

                         
                        int index146_1052 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1052==RPAREN) ) {s = 14;}

                        else if ( (LA146_1052==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA146_1052==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA146_1052==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA146_1052==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA146_1052==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA146_1052==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA146_1052==LT) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA146_1052==GT) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA146_1052==LE) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA146_1052==GE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA146_1052==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA146_1052==IS) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA146_1052==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA146_1052==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA146_1052==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA146_1052==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA146_1052==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA146_1052==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA146_1052==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA146_1052==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA146_1052==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA146_1052==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA146_1052==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA146_1052==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA146_1052==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                         
                        input.seek(index146_1052);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_1053 = input.LA(1);

                         
                        int index146_1053 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1053==RPAREN) ) {s = 14;}

                        else if ( (LA146_1053==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA146_1053==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA146_1053==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA146_1053==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA146_1053==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA146_1053==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA146_1053==LT) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA146_1053==GT) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA146_1053==LE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA146_1053==GE) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA146_1053==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA146_1053==IS) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA146_1053==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA146_1053==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA146_1053==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA146_1053==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA146_1053==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA146_1053==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA146_1053==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA146_1053==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA146_1053==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA146_1053==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA146_1053==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA146_1053==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA146_1053==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                         
                        input.seek(index146_1053);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_1101 = input.LA(1);

                         
                        int index146_1101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1101==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA146_1101==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA146_1101==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA146_1101==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA146_1101==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA146_1101==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA146_1101==LT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA146_1101==GT) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA146_1101==LE) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA146_1101==GE) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA146_1101==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA146_1101==IS) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA146_1101==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA146_1101==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA146_1101==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA146_1101==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA146_1101==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA146_1101==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA146_1101==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA146_1101==RPAREN) ) {s = 1822;}

                        else if ( (LA146_1101==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA146_1101==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA146_1101==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA146_1101==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA146_1101==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                         
                        input.seek(index146_1101);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_1102 = input.LA(1);

                         
                        int index146_1102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1102==RPAREN) ) {s = 1828;}

                        else if ( (LA146_1102==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA146_1102==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA146_1102==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA146_1102==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA146_1102==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA146_1102==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA146_1102==LT) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA146_1102==GT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA146_1102==LE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA146_1102==GE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA146_1102==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA146_1102==IS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA146_1102==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA146_1102==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA146_1102==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA146_1102==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA146_1102==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA146_1102==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA146_1102==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA146_1102==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA146_1102==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA146_1102==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA146_1102==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA146_1102==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                         
                        input.seek(index146_1102);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_1168 = input.LA(1);

                         
                        int index146_1168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1168==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA146_1168==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA146_1168==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA146_1168==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA146_1168==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA146_1168==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA146_1168==LT) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA146_1168==GT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA146_1168==LE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA146_1168==GE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA146_1168==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA146_1168==IS) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA146_1168==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA146_1168==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA146_1168==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA146_1168==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA146_1168==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA146_1168==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA146_1168==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA146_1168==RPAREN) ) {s = 1872;}

                        else if ( (LA146_1168==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA146_1168==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA146_1168==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA146_1168==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA146_1168==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                         
                        input.seek(index146_1168);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_1169 = input.LA(1);

                         
                        int index146_1169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1169==RPAREN) ) {s = 1878;}

                        else if ( (LA146_1169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA146_1169==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA146_1169==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA146_1169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA146_1169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA146_1169==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA146_1169==LT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA146_1169==GT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA146_1169==LE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA146_1169==GE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA146_1169==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA146_1169==IS) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA146_1169==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA146_1169==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA146_1169==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA146_1169==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA146_1169==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA146_1169==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA146_1169==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA146_1169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA146_1169==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA146_1169==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA146_1169==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA146_1169==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                         
                        input.seek(index146_1169);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_1226 = input.LA(1);

                         
                        int index146_1226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA146_1226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA146_1226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA146_1226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA146_1226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA146_1226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA146_1226==LT) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA146_1226==GT) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA146_1226==LE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA146_1226==GE) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA146_1226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA146_1226==IS) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA146_1226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA146_1226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA146_1226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA146_1226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA146_1226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA146_1226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA146_1226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA146_1226==RPAREN) ) {s = 1922;}

                        else if ( (LA146_1226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA146_1226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA146_1226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA146_1226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA146_1226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                         
                        input.seek(index146_1226);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA146_1227 = input.LA(1);

                         
                        int index146_1227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1227==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA146_1227==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA146_1227==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA146_1227==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA146_1227==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA146_1227==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA146_1227==LT) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA146_1227==GT) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA146_1227==LE) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA146_1227==GE) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA146_1227==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA146_1227==IS) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA146_1227==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA146_1227==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA146_1227==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA146_1227==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA146_1227==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA146_1227==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA146_1227==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA146_1227==RPAREN) ) {s = 1947;}

                        else if ( (LA146_1227==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA146_1227==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA146_1227==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA146_1227==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA146_1227==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                         
                        input.seek(index146_1227);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA146_1284 = input.LA(1);

                         
                        int index146_1284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1284==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA146_1284==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA146_1284==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA146_1284==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA146_1284==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA146_1284==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA146_1284==LT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA146_1284==GT) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA146_1284==LE) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA146_1284==GE) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA146_1284==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA146_1284==IS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA146_1284==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA146_1284==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA146_1284==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA146_1284==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA146_1284==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA146_1284==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA146_1284==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA146_1284==RPAREN) ) {s = 1972;}

                        else if ( (LA146_1284==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA146_1284==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA146_1284==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA146_1284==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA146_1284==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                         
                        input.seek(index146_1284);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA146_1285 = input.LA(1);

                         
                        int index146_1285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1285==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA146_1285==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA146_1285==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA146_1285==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA146_1285==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA146_1285==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA146_1285==LT) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA146_1285==GT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA146_1285==LE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA146_1285==GE) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA146_1285==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA146_1285==IS) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA146_1285==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA146_1285==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA146_1285==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA146_1285==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA146_1285==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA146_1285==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA146_1285==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA146_1285==RPAREN) ) {s = 1997;}

                        else if ( (LA146_1285==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA146_1285==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA146_1285==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA146_1285==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA146_1285==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                         
                        input.seek(index146_1285);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA146_1333 = input.LA(1);

                         
                        int index146_1333 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1333==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA146_1333==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA146_1333==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA146_1333==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA146_1333==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA146_1333==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA146_1333==LT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA146_1333==GT) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA146_1333==LE) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA146_1333==GE) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA146_1333==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA146_1333==IS) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA146_1333==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA146_1333==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA146_1333==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA146_1333==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA146_1333==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA146_1333==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA146_1333==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA146_1333==RPAREN) ) {s = 2022;}

                        else if ( (LA146_1333==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA146_1333==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA146_1333==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA146_1333==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA146_1333==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                         
                        input.seek(index146_1333);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA146_1334 = input.LA(1);

                         
                        int index146_1334 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1334==RPAREN) ) {s = 2028;}

                        else if ( (LA146_1334==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA146_1334==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA146_1334==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA146_1334==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA146_1334==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA146_1334==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA146_1334==LT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA146_1334==GT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA146_1334==LE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA146_1334==GE) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA146_1334==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA146_1334==IS) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA146_1334==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA146_1334==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA146_1334==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA146_1334==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA146_1334==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA146_1334==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA146_1334==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA146_1334==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA146_1334==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA146_1334==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA146_1334==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA146_1334==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                         
                        input.seek(index146_1334);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA146_1391 = input.LA(1);

                         
                        int index146_1391 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1391==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA146_1391==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA146_1391==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA146_1391==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA146_1391==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA146_1391==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA146_1391==LT) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA146_1391==GT) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA146_1391==LE) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA146_1391==GE) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA146_1391==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA146_1391==IS) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA146_1391==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA146_1391==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA146_1391==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA146_1391==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA146_1391==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA146_1391==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA146_1391==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA146_1391==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA146_1391==RPAREN) ) {s = 2073;}

                        else if ( (LA146_1391==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA146_1391==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA146_1391==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA146_1391==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA146_1391==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                         
                        input.seek(index146_1391);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA146_1392 = input.LA(1);

                         
                        int index146_1392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1392==RPAREN) ) {s = 2079;}

                        else if ( (LA146_1392==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA146_1392==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA146_1392==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA146_1392==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA146_1392==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA146_1392==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA146_1392==LT) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA146_1392==GT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA146_1392==LE) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA146_1392==GE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA146_1392==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA146_1392==IS) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA146_1392==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA146_1392==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA146_1392==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA146_1392==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA146_1392==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA146_1392==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA146_1392==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA146_1392==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA146_1392==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA146_1392==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA146_1392==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA146_1392==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA146_1392==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                         
                        input.seek(index146_1392);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA146_1457 = input.LA(1);

                         
                        int index146_1457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1457==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA146_1457==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA146_1457==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA146_1457==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA146_1457==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA146_1457==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA146_1457==LT) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA146_1457==GT) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA146_1457==LE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA146_1457==GE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA146_1457==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA146_1457==IS) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA146_1457==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA146_1457==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA146_1457==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA146_1457==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA146_1457==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA146_1457==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA146_1457==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA146_1457==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA146_1457==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA146_1457==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA146_1457==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA146_1457==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA146_1457==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA146_1457==RPAREN) ) {s = 14;}

                         
                        input.seek(index146_1457);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA146_1458 = input.LA(1);

                         
                        int index146_1458 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1458==RPAREN) ) {s = 14;}

                        else if ( (LA146_1458==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA146_1458==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA146_1458==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA146_1458==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA146_1458==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA146_1458==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA146_1458==LT) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA146_1458==GT) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA146_1458==LE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA146_1458==GE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA146_1458==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA146_1458==IS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA146_1458==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA146_1458==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA146_1458==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA146_1458==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA146_1458==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA146_1458==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA146_1458==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA146_1458==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA146_1458==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA146_1458==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA146_1458==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA146_1458==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA146_1458==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                         
                        input.seek(index146_1458);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA146_1513 = input.LA(1);

                         
                        int index146_1513 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1513==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA146_1513==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA146_1513==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA146_1513==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA146_1513==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA146_1513==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA146_1513==LT) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA146_1513==GT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA146_1513==LE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA146_1513==GE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA146_1513==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA146_1513==IS) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA146_1513==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA146_1513==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA146_1513==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA146_1513==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA146_1513==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA146_1513==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA146_1513==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA146_1513==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA146_1513==AS) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA146_1513==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA146_1513==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA146_1513==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA146_1513==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA146_1513==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA146_1513==RPAREN) ) {s = 14;}

                         
                        input.seek(index146_1513);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA146_1514 = input.LA(1);

                         
                        int index146_1514 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_1514==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA146_1514==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA146_1514==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA146_1514==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA146_1514==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA146_1514==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA146_1514==LT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA146_1514==GT) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA146_1514==LE) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA146_1514==GE) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA146_1514==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA146_1514==IS) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA146_1514==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA146_1514==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA146_1514==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA146_1514==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA146_1514==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA146_1514==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA146_1514==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA146_1514==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA146_1514==AS) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA146_1514==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA146_1514==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA146_1514==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA146_1514==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA146_1514==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA146_1514==RPAREN) ) {s = 14;}

                         
                        input.seek(index146_1514);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA146_1620 = input.LA(1);

                         
                        int index146_1620 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1620);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA146_1645 = input.LA(1);

                         
                        int index146_1645 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1645);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA146_1670 = input.LA(1);

                         
                        int index146_1670 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1670);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA146_1695 = input.LA(1);

                         
                        int index146_1695 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1695);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA146_1720 = input.LA(1);

                         
                        int index146_1720 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1720);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA146_1745 = input.LA(1);

                         
                        int index146_1745 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1745);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA146_1822 = input.LA(1);

                         
                        int index146_1822 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1822);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA146_1828 = input.LA(1);

                         
                        int index146_1828 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1828);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA146_1872 = input.LA(1);

                         
                        int index146_1872 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1872);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA146_1878 = input.LA(1);

                         
                        int index146_1878 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1878);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA146_1922 = input.LA(1);

                         
                        int index146_1922 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1922);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA146_1947 = input.LA(1);

                         
                        int index146_1947 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1947);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA146_1972 = input.LA(1);

                         
                        int index146_1972 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1972);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA146_1997 = input.LA(1);

                         
                        int index146_1997 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_1997);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA146_2022 = input.LA(1);

                         
                        int index146_2022 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_2022);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA146_2028 = input.LA(1);

                         
                        int index146_2028 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_2028);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA146_2073 = input.LA(1);

                         
                        int index146_2073 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_2073);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA146_2079 = input.LA(1);

                         
                        int index146_2079 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2209;}

                         
                        input.seek(index146_2079);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA172_eotS =
        "\u0454\uffff";
    static final String DFA172_eofS =
        "\1\uffff\1\104\1\173\6\uffff\1\u00b2\1\u00e9\u0133\uffff\1\u0250"+
        "\1\u0287\1\u02be\1\u02f6\42\uffff\1\u032c\1\u0363\1\u039a\1\u03d2"+
        "\u02ec\uffff";
    static final String DFA172_minS =
        "\1\5\2\6\6\uffff\2\6\36\uffff\1\5\1\uffff\1\5\66\uffff\1\5\64\uffff"+
        "\1\5\66\uffff\1\5\64\uffff\2\6\71\uffff\4\6\42\uffff\4\6\42\uffff"+
        "\2\6\71\uffff\2\6\71\uffff\1\0\55\uffff\1\0\7\uffff\1\0\63\uffff"+
        "\1\0\2\uffff\1\0\66\uffff\1\0\64\uffff\1\0\70\uffff\1\0\63\uffff"+
        "\1\0\2\uffff\1\0\66\uffff\1\0\64\uffff\1\0\66\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff";
    static final String DFA172_maxS =
        "\1\u0116\2\u0115\6\uffff\2\u0115\36\uffff\1\u0118\1\uffff\1\u0116"+
        "\66\uffff\1\u0116\64\uffff\1\u0118\66\uffff\1\u0118\64\uffff\2\u0110"+
        "\71\uffff\4\u0115\42\uffff\4\u0115\42\uffff\2\u0110\71\uffff\2\u0110"+
        "\71\uffff\1\0\55\uffff\1\0\7\uffff\1\0\63\uffff\1\0\2\uffff\1\0"+
        "\66\uffff\1\0\64\uffff\1\0\70\uffff\1\0\63\uffff\1\0\2\uffff\1\0"+
        "\66\uffff\1\0\64\uffff\1\0\66\uffff\1\0\55\uffff\1\0\5\uffff\1\0"+
        "\55\uffff\1\0\5\uffff";
    static final String DFA172_acceptS =
        "\3\uffff\6\1\2\uffff\36\1\1\uffff\1\1\1\uffff\66\1\1\uffff\64\1"+
        "\1\uffff\66\1\1\uffff\64\1\2\uffff\1\2\74\uffff\42\1\4\uffff\42"+
        "\1\u00aa\uffff\2\1\1\uffff\63\1\1\uffff\2\1\1\uffff\66\1\1\uffff"+
        "\64\1\1\uffff\70\1\1\uffff\63\1\1\uffff\2\1\1\uffff\66\1\1\uffff"+
        "\64\1\1\uffff\66\1\150\uffff";
    static final String DFA172_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\40\uffff\1\5\66\uffff\1\6\u00db\uffff"+
        "\1\7\1\10\1\11\1\12\42\uffff\1\13\1\14\1\15\1\16\u0098\uffff\1\17"+
        "\55\uffff\1\20\7\uffff\1\21\63\uffff\1\22\2\uffff\1\23\66\uffff"+
        "\1\24\64\uffff\1\25\70\uffff\1\26\63\uffff\1\27\2\uffff\1\30\66"+
        "\uffff\1\31\64\uffff\1\32\66\uffff\1\33\55\uffff\1\34\5\uffff\1"+
        "\35\55\uffff\1\36\5\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\u00a5\uffff\1\1\36\uffff\1\2",
            "\1\131\1\132\1\133\1\134\1\135\1\76\1\75\1\130\2\uffff\1\112"+
            "\1\110\14\uffff\1\117\1\121\1\116\1\120\1\111\7\uffff\1\67\1"+
            "\uffff\1\77\1\100\4\uffff\1\101\3\uffff\1\105\1\uffff\1\102"+
            "\1\114\1\115\35\uffff\1\127\1\126\1\125\6\uffff\1\103\2\uffff"+
            "\1\113\u0091\uffff\1\107\1\uffff\1\66\1\53\1\51\1\106\1\54\1"+
            "\73\1\57\1\52\1\50\1\123\1\122\2\uffff\1\72\1\74\1\70\1\71\1"+
            "\62\1\63\1\64\1\65\1\61\1\60\1\55\1\56\1\uffff\1\124\2\uffff"+
            "\1\47",
            "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\165\1\164\1\u008f"+
            "\2\uffff\1\u0081\1\177\14\uffff\1\u0086\1\u0088\1\u0085\1\u0087"+
            "\1\u0080\7\uffff\1\156\1\uffff\1\166\1\167\4\uffff\1\170\3\uffff"+
            "\1\174\1\uffff\1\171\1\u0083\1\u0084\35\uffff\1\u008e\1\u008d"+
            "\1\u008c\6\uffff\1\172\2\uffff\1\u0082\u0091\uffff\1\176\1\uffff"+
            "\1\155\1\142\1\140\1\175\1\143\1\162\1\146\1\141\1\137\1\u008a"+
            "\1\u0089\2\uffff\1\161\1\163\1\157\1\160\1\151\1\152\1\153\1"+
            "\154\1\150\1\147\1\144\1\145\1\uffff\1\u008b\2\uffff\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00ac\1\u00ab\1"+
            "\u00c6\2\uffff\1\u00b8\1\u00b6\14\uffff\1\u00bd\1\u00bf\1\u00bc"+
            "\1\u00be\1\u00b7\7\uffff\1\u00a5\1\uffff\1\u00ad\1\u00ae\4\uffff"+
            "\1\u00af\3\uffff\1\u00b3\1\uffff\1\u00b0\1\u00ba\1\u00bb\35"+
            "\uffff\1\u00c5\1\u00c4\1\u00c3\6\uffff\1\u00b1\2\uffff\1\u00b9"+
            "\u0091\uffff\1\u00b5\1\uffff\1\u00a4\1\u0099\1\u0097\1\u00b4"+
            "\1\u009a\1\u00a9\1\u009d\1\u0098\1\u0096\1\u00c1\1\u00c0\2\uffff"+
            "\1\u00a8\1\u00aa\1\u00a6\1\u00a7\1\u00a0\1\u00a1\1\u00a2\1\u00a3"+
            "\1\u009f\1\u009e\1\u009b\1\u009c\1\uffff\1\u00c2\2\uffff\1\u0095",
            "\1\u00fe\1\u00ff\1\u0100\1\u0101\1\u0102\1\u00e3\1\u00e2\1"+
            "\u00fd\2\uffff\1\u00ef\1\u00ed\14\uffff\1\u00f4\1\u00f6\1\u00f3"+
            "\1\u00f5\1\u00ee\7\uffff\1\u00dc\1\uffff\1\u00e4\1\u00e5\4\uffff"+
            "\1\u00e6\3\uffff\1\u00ea\1\uffff\1\u00e7\1\u00f1\1\u00f2\35"+
            "\uffff\1\u00fc\1\u00fb\1\u00fa\6\uffff\1\u00e8\2\uffff\1\u00f0"+
            "\u0091\uffff\1\u00ec\1\uffff\1\u00db\1\u00d0\1\u00ce\1\u00eb"+
            "\1\u00d1\1\u00e0\1\u00d4\1\u00cf\1\u00cd\1\u00f8\1\u00f7\2\uffff"+
            "\1\u00df\1\u00e1\1\u00dd\1\u00de\1\u00d7\1\u00d8\1\u00d9\1\u00da"+
            "\1\u00d6\1\u00d5\1\u00d2\1\u00d3\1\uffff\1\u00f9\2\uffff\1\u00cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0105\4\uffff\1\u0105\2\uffff\2\u0105\3\uffff\11\u0105"+
            "\1\uffff\1\u0105\6\uffff\1\u0105\1\uffff\4\u0105\5\uffff\2\u0105"+
            "\3\uffff\3\u0105\10\uffff\16\u0105\1\uffff\1\u0105\1\uffff\3"+
            "\u0105\14\uffff\3\u0105\u0087\uffff\1\u0105\16\uffff\1\u0105"+
            "\2\uffff\2\u0105\2\uffff\2\u0105\3\uffff\1\u0103\1\u0104\11"+
            "\uffff\1\u0105\2\uffff\1\u0105\1\uffff\1\u0105\2\uffff\3\u0105",
            "",
            "\1\u015e\4\uffff\1\u0144\3\uffff\1\u0145\3\uffff\1\u0146\1"+
            "\u0147\1\u013f\1\u0140\1\u0148\1\u0149\1\u014a\1\u014b\1\u0143"+
            "\10\uffff\1\u0161\1\uffff\1\u0163\1\u015f\1\u0160\1\u0162\12"+
            "\uffff\1\u014c\1\u014d\1\u014e\10\uffff\1\u014f\1\u0150\1\u0151"+
            "\1\u0153\1\u0154\1\u0155\1\u0156\1\u0157\1\uffff\1\u0158\1\u0159"+
            "\1\u015a\1\u015b\2\uffff\1\u015c\1\uffff\1\u015d\1\u0152\1\u0142"+
            "\u00a5\uffff\1\u013e\36\uffff\1\u0141",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0184\4\uffff\1\u016a\3\uffff\1\u016b\3\uffff\1\u016c\1"+
            "\u016d\1\u0165\1\u0166\1\u016e\1\u016f\1\u0170\1\u0171\1\u0169"+
            "\10\uffff\1\u0187\1\uffff\1\u0189\1\u0185\1\u0186\1\u0188\12"+
            "\uffff\1\u0172\1\u0173\1\u0174\10\uffff\1\u0175\1\u0176\1\u0177"+
            "\1\u0179\1\u017a\1\u017b\1\u017c\1\u017d\1\uffff\1\u017e\1\u017f"+
            "\1\u0180\1\u0181\2\uffff\1\u0182\1\uffff\1\u0183\1\u0178\1\u0168"+
            "\u00a5\uffff\1\u0164\36\uffff\1\u0167",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0105\4\uffff\1\u0105\2\uffff\2\u0105\3\uffff\11\u0105"+
            "\1\uffff\1\u0105\6\uffff\1\u0105\1\uffff\4\u0105\5\uffff\2\u0105"+
            "\3\uffff\3\u0105\10\uffff\16\u0105\1\uffff\1\u0105\1\uffff\3"+
            "\u0105\14\uffff\3\u0105\u0087\uffff\1\u0105\16\uffff\1\u0105"+
            "\2\uffff\2\u0105\2\uffff\2\u0105\3\uffff\1\u018a\1\u018b\11"+
            "\uffff\1\u0105\2\uffff\1\u0105\1\uffff\1\u0105\2\uffff\3\u0105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0105\4\uffff\1\u0105\2\uffff\2\u0105\3\uffff\11\u0105"+
            "\1\uffff\1\u0105\6\uffff\1\u0105\1\uffff\4\u0105\5\uffff\2\u0105"+
            "\3\uffff\3\u0105\10\uffff\16\u0105\1\uffff\1\u0105\1\uffff\3"+
            "\u0105\14\uffff\3\u0105\u0087\uffff\1\u0105\16\uffff\1\u0105"+
            "\2\uffff\2\u0105\2\uffff\2\u0105\3\uffff\1\u01c5\1\u01c6\11"+
            "\uffff\1\u0105\2\uffff\1\u0105\1\uffff\1\u0105\2\uffff\3\u0105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u0200\3\u0105\6\uffff\14\u0105",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u022e\3\u0105\6\uffff\14\u0105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0265\1\u0266\1\u0267\1\u0268\1\u0269\1\u024a\1\u0249\1"+
            "\u0264\2\uffff\1\u0256\1\u0254\14\uffff\1\u025b\1\u025d\1\u025a"+
            "\1\u025c\1\u0255\7\uffff\1\u0243\1\uffff\1\u024b\1\u024c\4\uffff"+
            "\1\u024d\3\uffff\1\u0251\1\uffff\1\u024e\1\u0258\1\u0259\35"+
            "\uffff\1\u0263\1\u0262\1\u0261\6\uffff\1\u024f\2\uffff\1\u0257"+
            "\u0091\uffff\1\u0253\1\uffff\1\u0242\1\u026a\1\u0236\1\u0252"+
            "\1\u0238\1\u0247\1\u023b\1\u0237\1\u0235\1\u025f\1\u025e\2\uffff"+
            "\1\u0246\1\u0248\1\u0244\1\u0245\1\u023e\1\u023f\1\u0240\1\u0241"+
            "\1\u023d\1\u023c\1\u0239\1\u023a\1\uffff\1\u0260\2\uffff\1\u0234",
            "\1\u029c\1\u029d\1\u029e\1\u029f\1\u02a0\1\u0281\1\u0280\1"+
            "\u029b\2\uffff\1\u028d\1\u028b\14\uffff\1\u0292\1\u0294\1\u0291"+
            "\1\u0293\1\u028c\7\uffff\1\u027a\1\uffff\1\u0282\1\u0283\4\uffff"+
            "\1\u0284\3\uffff\1\u0288\1\uffff\1\u0285\1\u028f\1\u0290\35"+
            "\uffff\1\u029a\1\u0299\1\u0298\6\uffff\1\u0286\2\uffff\1\u028e"+
            "\u0091\uffff\1\u028a\1\uffff\1\u0279\1\u02a1\1\u026d\1\u0289"+
            "\1\u026f\1\u027e\1\u0272\1\u026e\1\u026c\1\u0296\1\u0295\2\uffff"+
            "\1\u027d\1\u027f\1\u027b\1\u027c\1\u0275\1\u0276\1\u0277\1\u0278"+
            "\1\u0274\1\u0273\1\u0270\1\u0271\1\uffff\1\u0297\2\uffff\1\u026b",
            "\1\u02d3\1\u02d4\1\u02d5\1\u02d6\1\u02d7\1\u02b8\1\u02b7\1"+
            "\u02d2\2\uffff\1\u02c4\1\u02c2\14\uffff\1\u02c9\1\u02cb\1\u02c8"+
            "\1\u02ca\1\u02c3\7\uffff\1\u02b1\1\uffff\1\u02b9\1\u02ba\4\uffff"+
            "\1\u02bb\3\uffff\1\u02bf\1\uffff\1\u02bc\1\u02c6\1\u02c7\35"+
            "\uffff\1\u02d1\1\u02d0\1\u02cf\6\uffff\1\u02bd\2\uffff\1\u02c5"+
            "\u0091\uffff\1\u02c1\1\uffff\1\u02b0\1\u02d8\1\u02a4\1\u02c0"+
            "\1\u02a6\1\u02b5\1\u02a9\1\u02a5\1\u02a3\1\u02cd\1\u02cc\2\uffff"+
            "\1\u02b4\1\u02b6\1\u02b2\1\u02b3\1\u02ac\1\u02ad\1\u02ae\1\u02af"+
            "\1\u02ab\1\u02aa\1\u02a7\1\u02a8\1\uffff\1\u02ce\2\uffff\1\u02a2",
            "\1\u030b\1\u030c\1\u030d\1\u030e\1\u030f\1\u02f0\1\u02ef\1"+
            "\u030a\2\uffff\1\u02fc\1\u02fa\14\uffff\1\u0301\1\u0303\1\u0300"+
            "\1\u0302\1\u02fb\7\uffff\1\u02e9\1\uffff\1\u02f1\1\u02f2\4\uffff"+
            "\1\u02f3\3\uffff\1\u02f7\1\uffff\1\u02f4\1\u02fe\1\u02ff\35"+
            "\uffff\1\u0309\1\u0308\1\u0307\6\uffff\1\u02f5\2\uffff\1\u02fd"+
            "\u0091\uffff\1\u02f9\1\uffff\1\u02e8\1\u02d9\1\u02dc\1\u02f8"+
            "\1\u02de\1\u02ed\1\u02e1\1\u02dd\1\u02db\1\u0305\1\u0304\2\uffff"+
            "\1\u02ec\1\u02ee\1\u02ea\1\u02eb\1\u02e4\1\u02e5\1\u02e6\1\u02e7"+
            "\1\u02e3\1\u02e2\1\u02df\1\u02e0\1\uffff\1\u0306\2\uffff\1\u02da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0341\1\u0342\1\u0343\1\u0344\1\u0345\1\u0326\1\u0325\1"+
            "\u0340\2\uffff\1\u0332\1\u0330\14\uffff\1\u0337\1\u0339\1\u0336"+
            "\1\u0338\1\u0331\7\uffff\1\u031f\1\uffff\1\u0327\1\u0328\4\uffff"+
            "\1\u0329\3\uffff\1\u032d\1\uffff\1\u032a\1\u0334\1\u0335\35"+
            "\uffff\1\u033f\1\u033e\1\u033d\6\uffff\1\u032b\2\uffff\1\u0333"+
            "\u0091\uffff\1\u032f\1\uffff\1\u031e\1\u0346\1\u0312\1\u032e"+
            "\1\u0314\1\u0323\1\u0317\1\u0313\1\u0311\1\u033b\1\u033a\2\uffff"+
            "\1\u0322\1\u0324\1\u0320\1\u0321\1\u031a\1\u031b\1\u031c\1\u031d"+
            "\1\u0319\1\u0318\1\u0315\1\u0316\1\uffff\1\u033c\2\uffff\1\u0310",
            "\1\u0378\1\u0379\1\u037a\1\u037b\1\u037c\1\u035d\1\u035c\1"+
            "\u0377\2\uffff\1\u0369\1\u0367\14\uffff\1\u036e\1\u0370\1\u036d"+
            "\1\u036f\1\u0368\7\uffff\1\u0356\1\uffff\1\u035e\1\u035f\4\uffff"+
            "\1\u0360\3\uffff\1\u0364\1\uffff\1\u0361\1\u036b\1\u036c\35"+
            "\uffff\1\u0376\1\u0375\1\u0374\6\uffff\1\u0362\2\uffff\1\u036a"+
            "\u0091\uffff\1\u0366\1\uffff\1\u0355\1\u037d\1\u0349\1\u0365"+
            "\1\u034b\1\u035a\1\u034e\1\u034a\1\u0348\1\u0372\1\u0371\2\uffff"+
            "\1\u0359\1\u035b\1\u0357\1\u0358\1\u0351\1\u0352\1\u0353\1\u0354"+
            "\1\u0350\1\u034f\1\u034c\1\u034d\1\uffff\1\u0373\2\uffff\1\u0347",
            "\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u0394\1\u0393\1"+
            "\u03ae\2\uffff\1\u03a0\1\u039e\14\uffff\1\u03a5\1\u03a7\1\u03a4"+
            "\1\u03a6\1\u039f\7\uffff\1\u038d\1\uffff\1\u0395\1\u0396\4\uffff"+
            "\1\u0397\3\uffff\1\u039b\1\uffff\1\u0398\1\u03a2\1\u03a3\35"+
            "\uffff\1\u03ad\1\u03ac\1\u03ab\6\uffff\1\u0399\2\uffff\1\u03a1"+
            "\u0091\uffff\1\u039d\1\uffff\1\u038c\1\u03b4\1\u0380\1\u039c"+
            "\1\u0382\1\u0391\1\u0385\1\u0381\1\u037f\1\u03a9\1\u03a8\2\uffff"+
            "\1\u0390\1\u0392\1\u038e\1\u038f\1\u0388\1\u0389\1\u038a\1\u038b"+
            "\1\u0387\1\u0386\1\u0383\1\u0384\1\uffff\1\u03aa\2\uffff\1\u037e",
            "\1\u03e7\1\u03e8\1\u03e9\1\u03ea\1\u03eb\1\u03cc\1\u03cb\1"+
            "\u03e6\2\uffff\1\u03d8\1\u03d6\14\uffff\1\u03dd\1\u03df\1\u03dc"+
            "\1\u03de\1\u03d7\7\uffff\1\u03c5\1\uffff\1\u03cd\1\u03ce\4\uffff"+
            "\1\u03cf\3\uffff\1\u03d3\1\uffff\1\u03d0\1\u03da\1\u03db\35"+
            "\uffff\1\u03e5\1\u03e4\1\u03e3\6\uffff\1\u03d1\2\uffff\1\u03d9"+
            "\u0091\uffff\1\u03d5\1\uffff\1\u03c4\1\u03b5\1\u03b8\1\u03d4"+
            "\1\u03ba\1\u03c9\1\u03bd\1\u03b9\1\u03b7\1\u03e1\1\u03e0\2\uffff"+
            "\1\u03c8\1\u03ca\1\u03c6\1\u03c7\1\u03c0\1\u03c1\1\u03c2\1\u03c3"+
            "\1\u03bf\1\u03be\1\u03bb\1\u03bc\1\uffff\1\u03e2\2\uffff\1\u03b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u03ec\3\u0105\6\uffff\14\u0105",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u041a\3\u0105\6\uffff\14\u0105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u0420\3\u0105\6\uffff\14\u0105",
            "\4\u0105\1\uffff\3\u0105\34\uffff\1\u0105\u00cb\uffff\1\u0105"+
            "\1\uffff\1\u0105\2\uffff\1\u044e\3\u0105\6\uffff\14\u0105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "1186:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_0 = input.LA(1);

                         
                        int index172_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_0==IDENT) ) {s = 1;}

                        else if ( (LA172_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA172_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA172_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA172_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA172_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA172_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA172_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA172_0==MAX) ) {s = 9;}

                        else if ( (LA172_0==MIN) ) {s = 10;}

                        else if ( (LA172_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA172_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA172_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA172_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA172_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA172_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA172_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA172_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA172_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA172_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA172_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA172_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA172_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA172_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA172_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA172_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA172_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA172_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA172_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA172_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA172_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA172_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA172_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA172_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA172_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA172_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA172_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA172_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                         
                        input.seek(index172_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA172_1 = input.LA(1);

                         
                        int index172_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA172_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA172_1==LPAREN) ) {s = 41;}

                        else if ( (LA172_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA172_1==DOT) ) {s = 43;}

                        else if ( (LA172_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA172_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA172_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA172_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA172_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA172_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA172_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA172_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA172_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA172_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA172_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA172_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA172_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA172_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA172_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA172_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA172_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA172_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA172_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA172_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA172_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA172_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA172_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA172_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA172_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA172_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA172_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA172_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA172_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA172_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA172_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA172_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA172_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA172_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA172_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA172_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA172_1==END) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA172_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA172_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA172_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA172_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA172_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA172_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA172_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA172_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA172_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA172_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA172_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA172_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA172_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                         
                        input.seek(index172_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA172_2 = input.LA(1);

                         
                        int index172_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA172_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA172_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA172_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA172_2==DOT) ) {s = 98;}

                        else if ( (LA172_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA172_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA172_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA172_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA172_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA172_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA172_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA172_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA172_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA172_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA172_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA172_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA172_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA172_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA172_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA172_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA172_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA172_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA172_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA172_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA172_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA172_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA172_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA172_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA172_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA172_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA172_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA172_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA172_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA172_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA172_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA172_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA172_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA172_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA172_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA172_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA172_2==END) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA172_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA172_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA172_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA172_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA172_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA172_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA172_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA172_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA172_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA172_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA172_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA172_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA172_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                         
                        input.seek(index172_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA172_9 = input.LA(1);

                         
                        int index172_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA172_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA172_9==LPAREN) ) {s = 151;}

                        else if ( (LA172_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA172_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA172_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA172_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA172_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA172_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA172_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA172_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA172_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA172_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA172_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA172_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA172_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA172_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA172_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA172_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA172_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA172_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA172_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA172_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA172_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA172_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA172_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA172_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA172_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA172_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA172_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA172_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA172_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA172_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA172_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA172_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA172_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA172_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA172_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA172_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA172_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA172_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA172_9==END) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA172_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA172_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA172_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA172_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA172_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA172_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA172_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA172_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA172_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA172_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA172_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA172_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA172_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                         
                        input.seek(index172_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA172_10 = input.LA(1);

                         
                        int index172_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA172_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA172_10==LPAREN) ) {s = 206;}

                        else if ( (LA172_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA172_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA172_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA172_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA172_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA172_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA172_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA172_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA172_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA172_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA172_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA172_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA172_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA172_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA172_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA172_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA172_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA172_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA172_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA172_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA172_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA172_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA172_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA172_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA172_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA172_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA172_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA172_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA172_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA172_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA172_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA172_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA172_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA172_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA172_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA172_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA172_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA172_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA172_10==END) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA172_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA172_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA172_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA172_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA172_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA172_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA172_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA172_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA172_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA172_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA172_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA172_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA172_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                         
                        input.seek(index172_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA172_43 = input.LA(1);

                         
                        int index172_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_43==IDENT) ) {s = 318;}

                        else if ( (LA172_43==MAX) ) {s = 319;}

                        else if ( (LA172_43==MIN) ) {s = 320;}

                        else if ( (LA172_43==TICKED_STRING_LITERAL) ) {s = 321;}

                        else if ( (LA172_43==AT) && (synpred4_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA172_43==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA172_43==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA172_43==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA172_43==SUM) && (synpred4_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA172_43==AVG) && (synpred4_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA172_43==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA172_43==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA172_43==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA172_43==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA172_43==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA172_43==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA172_43==LAST) && (synpred4_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA172_43==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA172_43==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA172_43==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA172_43==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA172_43==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA172_43==SQL) && (synpred4_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA172_43==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA172_43==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA172_43==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA172_43==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA172_43==LW) && (synpred4_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA172_43==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA172_43==CAST) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA172_43==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA172_43==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA172_43==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA172_43==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA172_43==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA172_43==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA172_43==FULL) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA172_43==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                         
                        input.seek(index172_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA172_98 = input.LA(1);

                         
                        int index172_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_98==IDENT) ) {s = 356;}

                        else if ( (LA172_98==MAX) ) {s = 357;}

                        else if ( (LA172_98==MIN) ) {s = 358;}

                        else if ( (LA172_98==TICKED_STRING_LITERAL) ) {s = 359;}

                        else if ( (LA172_98==AT) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA172_98==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA172_98==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA172_98==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA172_98==SUM) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA172_98==AVG) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA172_98==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA172_98==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA172_98==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA172_98==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA172_98==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA172_98==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA172_98==LAST) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA172_98==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA172_98==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA172_98==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA172_98==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA172_98==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA172_98==SQL) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA172_98==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA172_98==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA172_98==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA172_98==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA172_98==LW) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA172_98==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA172_98==CAST) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA172_98==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA172_98==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA172_98==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA172_98==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA172_98==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA172_98==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA172_98==FULL) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA172_98==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                         
                        input.seek(index172_98);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA172_318 = input.LA(1);

                         
                        int index172_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_318==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA172_318==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA172_318==LPAREN) ) {s = 566;}

                        else if ( (LA172_318==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA172_318==STAR) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA172_318==DIV) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA172_318==MOD) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA172_318==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA172_318==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA172_318==LOR) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA172_318==LT) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA172_318==GT) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA172_318==LE) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA172_318==GE) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA172_318==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA172_318==IS) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA172_318==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA172_318==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA172_318==BAND) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA172_318==BOR) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA172_318==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA172_318==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA172_318==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA172_318==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA172_318==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA172_318==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA172_318==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA172_318==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA172_318==EOF) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA172_318==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA172_318==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA172_318==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA172_318==AS) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA172_318==FROM) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA172_318==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA172_318==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA172_318==ASC) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA172_318==DESC) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA172_318==THEN) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA172_318==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA172_318==END) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA172_318==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA172_318==COLON) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA172_318==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA172_318==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA172_318==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA172_318==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA172_318==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA172_318==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA172_318==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA172_318==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA172_318==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA172_318==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA172_318==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA172_318==DOT) ) {s = 618;}

                         
                        input.seek(index172_318);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA172_319 = input.LA(1);

                         
                        int index172_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_319==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA172_319==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA172_319==LPAREN) ) {s = 621;}

                        else if ( (LA172_319==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA172_319==STAR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA172_319==DIV) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA172_319==MOD) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA172_319==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA172_319==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA172_319==LOR) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA172_319==LT) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA172_319==GT) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA172_319==LE) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA172_319==GE) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA172_319==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA172_319==IS) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA172_319==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA172_319==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA172_319==BAND) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA172_319==BOR) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA172_319==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA172_319==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA172_319==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA172_319==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA172_319==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA172_319==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA172_319==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA172_319==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA172_319==EOF) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA172_319==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA172_319==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA172_319==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA172_319==AS) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA172_319==FROM) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA172_319==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA172_319==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA172_319==ASC) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA172_319==DESC) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA172_319==THEN) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA172_319==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA172_319==END) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA172_319==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA172_319==COLON) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA172_319==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA172_319==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA172_319==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA172_319==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA172_319==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA172_319==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA172_319==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA172_319==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA172_319==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA172_319==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA172_319==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA172_319==DOT) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                         
                        input.seek(index172_319);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA172_320 = input.LA(1);

                         
                        int index172_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_320==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA172_320==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA172_320==LPAREN) ) {s = 676;}

                        else if ( (LA172_320==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA172_320==STAR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA172_320==DIV) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA172_320==MOD) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA172_320==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA172_320==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA172_320==LOR) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA172_320==LT) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA172_320==GT) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA172_320==LE) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA172_320==GE) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA172_320==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA172_320==IS) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA172_320==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA172_320==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA172_320==BAND) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA172_320==BOR) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA172_320==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA172_320==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA172_320==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA172_320==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA172_320==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA172_320==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA172_320==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA172_320==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA172_320==EOF) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA172_320==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA172_320==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA172_320==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA172_320==AS) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA172_320==FROM) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA172_320==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA172_320==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA172_320==ASC) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA172_320==DESC) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA172_320==THEN) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA172_320==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA172_320==END) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA172_320==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA172_320==COLON) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA172_320==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA172_320==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA172_320==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA172_320==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA172_320==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA172_320==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA172_320==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA172_320==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA172_320==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA172_320==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA172_320==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA172_320==DOT) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                         
                        input.seek(index172_320);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA172_321 = input.LA(1);

                         
                        int index172_321 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_321==DOT) ) {s = 729;}

                        else if ( (LA172_321==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA172_321==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA172_321==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA172_321==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA172_321==STAR) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA172_321==DIV) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA172_321==MOD) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA172_321==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA172_321==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA172_321==LOR) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA172_321==LT) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA172_321==GT) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA172_321==LE) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA172_321==GE) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA172_321==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA172_321==IS) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA172_321==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA172_321==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA172_321==BAND) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA172_321==BOR) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA172_321==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA172_321==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA172_321==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA172_321==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA172_321==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA172_321==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA172_321==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA172_321==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA172_321==EOF) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA172_321==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA172_321==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA172_321==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA172_321==AS) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA172_321==FROM) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA172_321==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA172_321==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA172_321==ASC) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA172_321==DESC) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA172_321==THEN) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA172_321==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA172_321==END) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA172_321==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA172_321==COLON) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA172_321==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA172_321==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA172_321==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA172_321==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA172_321==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA172_321==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA172_321==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA172_321==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA172_321==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA172_321==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA172_321==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                         
                        input.seek(index172_321);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA172_356 = input.LA(1);

                         
                        int index172_356 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_356==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA172_356==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA172_356==LPAREN) ) {s = 786;}

                        else if ( (LA172_356==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA172_356==STAR) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA172_356==DIV) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA172_356==MOD) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA172_356==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA172_356==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA172_356==LOR) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA172_356==LT) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA172_356==GT) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA172_356==LE) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA172_356==GE) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA172_356==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA172_356==IS) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA172_356==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA172_356==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA172_356==BAND) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA172_356==BOR) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA172_356==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA172_356==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA172_356==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA172_356==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA172_356==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA172_356==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA172_356==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA172_356==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA172_356==EOF) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA172_356==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA172_356==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA172_356==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA172_356==AS) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA172_356==FROM) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA172_356==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA172_356==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA172_356==ASC) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA172_356==DESC) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA172_356==THEN) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA172_356==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA172_356==END) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA172_356==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA172_356==COLON) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA172_356==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA172_356==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA172_356==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA172_356==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA172_356==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA172_356==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA172_356==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA172_356==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA172_356==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA172_356==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA172_356==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA172_356==DOT) ) {s = 838;}

                         
                        input.seek(index172_356);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA172_357 = input.LA(1);

                         
                        int index172_357 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_357==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA172_357==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA172_357==LPAREN) ) {s = 841;}

                        else if ( (LA172_357==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA172_357==STAR) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA172_357==DIV) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA172_357==MOD) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA172_357==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA172_357==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA172_357==LOR) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA172_357==LT) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA172_357==GT) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA172_357==LE) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA172_357==GE) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA172_357==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA172_357==IS) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA172_357==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA172_357==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA172_357==BAND) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA172_357==BOR) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA172_357==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA172_357==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA172_357==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA172_357==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA172_357==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA172_357==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA172_357==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA172_357==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA172_357==EOF) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA172_357==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA172_357==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA172_357==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA172_357==AS) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA172_357==FROM) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA172_357==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA172_357==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA172_357==ASC) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA172_357==DESC) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA172_357==THEN) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA172_357==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA172_357==END) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA172_357==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA172_357==COLON) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA172_357==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA172_357==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA172_357==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA172_357==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA172_357==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA172_357==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA172_357==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA172_357==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA172_357==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA172_357==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA172_357==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA172_357==DOT) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                         
                        input.seek(index172_357);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA172_358 = input.LA(1);

                         
                        int index172_358 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_358==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA172_358==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA172_358==LPAREN) ) {s = 896;}

                        else if ( (LA172_358==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA172_358==STAR) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA172_358==DIV) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA172_358==MOD) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA172_358==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA172_358==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA172_358==LOR) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA172_358==LT) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA172_358==GT) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA172_358==LE) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA172_358==GE) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA172_358==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA172_358==IS) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA172_358==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA172_358==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA172_358==BAND) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA172_358==BOR) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA172_358==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA172_358==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA172_358==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA172_358==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA172_358==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA172_358==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA172_358==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA172_358==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA172_358==EOF) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA172_358==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA172_358==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA172_358==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA172_358==AS) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA172_358==FROM) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA172_358==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA172_358==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA172_358==ASC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA172_358==DESC) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA172_358==THEN) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA172_358==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA172_358==END) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA172_358==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA172_358==COLON) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA172_358==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA172_358==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA172_358==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA172_358==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA172_358==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA172_358==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA172_358==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA172_358==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA172_358==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA172_358==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA172_358==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA172_358==DOT) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                         
                        input.seek(index172_358);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA172_359 = input.LA(1);

                         
                        int index172_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_359==DOT) ) {s = 949;}

                        else if ( (LA172_359==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA172_359==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA172_359==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA172_359==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA172_359==STAR) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA172_359==DIV) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA172_359==MOD) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA172_359==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA172_359==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA172_359==LOR) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA172_359==LT) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA172_359==GT) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA172_359==LE) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA172_359==GE) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA172_359==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA172_359==IS) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA172_359==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA172_359==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA172_359==BAND) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA172_359==BOR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA172_359==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA172_359==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA172_359==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA172_359==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA172_359==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA172_359==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA172_359==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA172_359==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA172_359==EOF) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA172_359==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA172_359==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA172_359==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA172_359==AS) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA172_359==FROM) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA172_359==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA172_359==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA172_359==ASC) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA172_359==DESC) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA172_359==THEN) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA172_359==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA172_359==END) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA172_359==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA172_359==COLON) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA172_359==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA172_359==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA172_359==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA172_359==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA172_359==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA172_359==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA172_359==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA172_359==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA172_359==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA172_359==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA172_359==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                         
                        input.seek(index172_359);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA172_512 = input.LA(1);

                         
                        int index172_512 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_512);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA172_558 = input.LA(1);

                         
                        int index172_558 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_558);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA172_566 = input.LA(1);

                         
                        int index172_566 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_566);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA172_618 = input.LA(1);

                         
                        int index172_618 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_618);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA172_621 = input.LA(1);

                         
                        int index172_621 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_621);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA172_676 = input.LA(1);

                         
                        int index172_676 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_676);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA172_729 = input.LA(1);

                         
                        int index172_729 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_729);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA172_786 = input.LA(1);

                         
                        int index172_786 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_786);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA172_838 = input.LA(1);

                         
                        int index172_838 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_838);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA172_841 = input.LA(1);

                         
                        int index172_841 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_841);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA172_896 = input.LA(1);

                         
                        int index172_896 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_896);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA172_949 = input.LA(1);

                         
                        int index172_949 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_949);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA172_1004 = input.LA(1);

                         
                        int index172_1004 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_1004);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA172_1050 = input.LA(1);

                         
                        int index172_1050 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_1050);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA172_1056 = input.LA(1);

                         
                        int index172_1056 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_1056);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA172_1102 = input.LA(1);

                         
                        int index172_1102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1003;}

                        else if ( (true) ) {s = 261;}

                         
                        input.seek(index172_1102);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\u0225\uffff";
    static final String DFA218_eofS =
        "\u0225\uffff";
    static final String DFA218_minS =
        "\1\5\2\0\6\6\60\uffff\1\u00f6\151\uffff\3\0\41\uffff\3\0\50\uffff"+
        "\3\0\55\uffff\3\0\52\uffff\3\0\51\uffff\3\0\u00a7\uffff";
    static final String DFA218_maxS =
        "\1\u0118\2\0\4\u0110\1\u0115\1\u0110\60\uffff\1\u010f\151\uffff"+
        "\3\0\41\uffff\3\0\50\uffff\3\0\55\uffff\3\0\52\uffff\3\0\51\uffff"+
        "\3\0\u00a7\uffff";
    static final String DFA218_acceptS =
        "\11\uffff\60\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\5\3\1\10"+
        "\1\5\2\3\25\4\3\uffff\7\4\3\3\1\7\1\10\25\4\3\uffff\7\4\5\3\1\5"+
        "\1\7\5\3\25\4\3\uffff\7\4\1\7\5\3\1\10\3\3\1\5\2\3\1\7\2\3\1\10"+
        "\25\4\3\uffff\7\4\10\3\1\5\32\4\3\uffff\7\4\2\3\1\7\2\3\1\5\1\10"+
        "\6\3\25\4\3\uffff\7\4\5\3\1\10\1\5\1\7\5\3\1\6\1\12\u0091\uffff";
    static final String DFA218_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\60\uffff\1\11\151\uffff\1"+
        "\12\1\13\1\14\41\uffff\1\15\1\16\1\17\50\uffff\1\20\1\21\1\22\55"+
        "\uffff\1\23\1\24\1\25\52\uffff\1\26\1\27\1\30\51\uffff\1\31\1\32"+
        "\1\33\u00a7\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\70\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\65\1\52\1\2\1\53\1\54\1"+
            "\66\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\u0087\uffff\1\6\16\uffff\1\7\2\uffff\1\21\1\uffff\1\71\1"+
            "\uffff\1\13\1\10\1\72\2\uffff\1\14\1\15\11\uffff\1\12\2\uffff"+
            "\1\67\1\uffff\1\3\2\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\uffff\1\u00a0\1\u009f\1"+
            "\u00a8\7\uffff\1\u0089\24\uffff\1\u0099\12\uffff\1\u00b0\3\uffff"+
            "\1\u00a1\1\u00a2\14\uffff\1\u008a\12\uffff\1\u0086\1\u0085\1"+
            "\u008d\1\u008c\1\u0088\1\u0087\1\u00a5\1\u00a4\1\u00a3\1\u00af"+
            "\1\u00ae\1\u00ad\u0098\uffff\1\u00a6\1\uffff\1\u0098\2\uffff"+
            "\1\u00a7\1\u008e\1\u009d\1\u0091\3\uffff\1\u008b\2\uffff\1\u009c"+
            "\1\u009e\1\u009a\1\u009b\1\u0094\1\u0095\1\u0096\1\u0097\1\u0093"+
            "\1\u0092\1\u008f\1\u0090",
            "\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\uffff\1\u00c4\1\u00c3\1"+
            "\u00cc\7\uffff\1\u00d5\24\uffff\1\u00bd\12\uffff\1\u00d7\3\uffff"+
            "\1\u00c5\1\u00c6\14\uffff\1\u00b1\12\uffff\1\u00d2\1\u00d1\1"+
            "\u00dc\1\u00db\1\u00d4\1\u00d3\1\u00c9\1\u00c8\1\u00c7\1\u00da"+
            "\1\u00d9\1\u00d8\u0098\uffff\1\u00ca\1\uffff\1\u00bc\2\uffff"+
            "\1\u00cb\1\u00b2\1\u00c1\1\u00b5\3\uffff\1\u00d6\2\uffff\1\u00c0"+
            "\1\u00c2\1\u00be\1\u00bf\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00b7"+
            "\1\u00b6\1\u00b3\1\u00b4",
            "\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\uffff\1\u00ef\1\u00ee\1"+
            "\u00f7\7\uffff\1\u0101\24\uffff\1\u00e8\12\uffff\1\u00fc\3\uffff"+
            "\1\u00f0\1\u00f1\14\uffff\1\u0102\12\uffff\1\u00fe\1\u00fd\1"+
            "\u0108\1\u0107\1\u0100\1\u00ff\1\u00f4\1\u00f3\1\u00f2\1\u0105"+
            "\1\u0104\1\u0103\u0098\uffff\1\u00f5\1\uffff\1\u00e7\2\uffff"+
            "\1\u00f6\1\u00dd\1\u00ec\1\u00e0\3\uffff\1\u0106\2\uffff\1\u00eb"+
            "\1\u00ed\1\u00e9\1\u00ea\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e2"+
            "\1\u00e1\1\u00de\1\u00df",
            "\1\u0128\1\u0129\1\u012a\1\u012b\1\uffff\1\u011f\1\u011e\1"+
            "\u0127\7\uffff\1\u0130\24\uffff\1\u0118\12\uffff\1\u0109\3\uffff"+
            "\1\u0120\1\u0121\14\uffff\1\u010c\12\uffff\1\u012d\1\u012c\1"+
            "\u010b\1\u010a\1\u012f\1\u012e\1\u0124\1\u0123\1\u0122\1\u0133"+
            "\1\u0132\1\u0131\u0098\uffff\1\u0125\1\uffff\1\u0117\2\uffff"+
            "\1\u0126\1\u010d\1\u011c\1\u0110\3\uffff\1\u0134\2\uffff\1\u011b"+
            "\1\u011d\1\u0119\1\u011a\1\u0113\1\u0114\1\u0115\1\u0116\1\u0112"+
            "\1\u0111\1\u010e\1\u010f",
            "\1\u0155\1\u0156\1\u0157\1\u0158\1\uffff\1\u014c\1\u014b\1"+
            "\u0154\7\uffff\1\u0165\24\uffff\1\u0145\12\uffff\1\u015b\3\uffff"+
            "\1\u014d\1\u014e\14\uffff\1\u015f\12\uffff\1\u015d\1\u015c\1"+
            "\u015a\1\u0159\1\u0164\1\u0163\1\u0151\1\u0150\1\u014f\1\u0162"+
            "\1\u0161\1\u0160\u0098\uffff\1\u0152\1\uffff\1\u0144\1\u0136"+
            "\1\u0135\1\u0153\1\u013a\1\u0149\1\u013d\1\u0139\1\u0138\1\uffff"+
            "\1\u015e\2\uffff\1\u0148\1\u014a\1\u0146\1\u0147\1\u0140\1\u0141"+
            "\1\u0142\1\u0143\1\u013f\1\u013e\1\u013b\1\u013c\4\uffff\1\u0137",
            "\1\u0181\1\u0182\1\u0183\1\u0184\1\uffff\1\u0178\1\u0177\1"+
            "\u0180\7\uffff\1\u0189\24\uffff\1\u0171\12\uffff\1\u018c\3\uffff"+
            "\1\u0179\1\u017a\14\uffff\1\u018a\12\uffff\1\u0186\1\u0185\1"+
            "\u0191\1\u0190\1\u0188\1\u0187\1\u017d\1\u017c\1\u017b\1\u018f"+
            "\1\u018e\1\u018d\u0098\uffff\1\u017e\1\uffff\1\u0170\2\uffff"+
            "\1\u017f\1\u0166\1\u0175\1\u0169\3\uffff\1\u018b\2\uffff\1\u0174"+
            "\1\u0176\1\u0172\1\u0173\1\u016c\1\u016d\1\u016e\1\u016f\1\u016b"+
            "\1\u016a\1\u0167\1\u0168",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\4\uffff\1\u0193\23\uffff\1\u0192",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "1397:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_0 = input.LA(1);

                         
                        int index218_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_0==LAST) ) {s = 1;}

                        else if ( (LA218_0==LW) ) {s = 2;}

                        else if ( (LA218_0==NUM_INT) ) {s = 3;}

                        else if ( (LA218_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA218_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA218_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA218_0==IDENT) ) {s = 7;}

                        else if ( (LA218_0==QUESTION) ) {s = 8;}

                        else if ( (LA218_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA218_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA218_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA218_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA218_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA218_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA218_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA218_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA218_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA218_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA218_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA218_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA218_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA218_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA218_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA218_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA218_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA218_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA218_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA218_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA218_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA218_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA218_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA218_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA218_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA218_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA218_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA218_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA218_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA218_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA218_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA218_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA218_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA218_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA218_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA218_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA218_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA218_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA218_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA218_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA218_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA218_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA218_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA218_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA218_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA218_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA218_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA218_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA218_0==STAR) ) {s = 57;}

                        else if ( (LA218_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 58;}

                         
                        input.seek(index218_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA218_1 = input.LA(1);

                         
                        int index218_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 95;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index218_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA218_2 = input.LA(1);

                         
                        int index218_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 132;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index218_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA218_3 = input.LA(1);

                         
                        int index218_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA218_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA218_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA218_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA218_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA218_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA218_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA218_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA218_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA218_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA218_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA218_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA218_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA218_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA218_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA218_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA218_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA218_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA218_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA218_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA218_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA218_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA218_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA218_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA218_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA218_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA218_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA218_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA218_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA218_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA218_3==TIMEPERIOD_SECONDS) ) {s = 163;}

                        else if ( (LA218_3==TIMEPERIOD_SECOND) ) {s = 164;}

                        else if ( (LA218_3==TIMEPERIOD_SEC) ) {s = 165;}

                        else if ( (LA218_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA218_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA218_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA218_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA218_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA218_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA218_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA218_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA218_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA218_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA218_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 176;}

                         
                        input.seek(index218_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA218_4 = input.LA(1);

                         
                        int index218_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA218_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA218_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA218_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA218_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA218_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA218_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA218_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA218_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA218_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA218_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA218_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA218_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA218_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA218_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA218_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA218_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA218_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA218_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA218_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA218_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA218_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA218_4==TIMEPERIOD_SECONDS) ) {s = 199;}

                        else if ( (LA218_4==TIMEPERIOD_SECOND) ) {s = 200;}

                        else if ( (LA218_4==TIMEPERIOD_SEC) ) {s = 201;}

                        else if ( (LA218_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA218_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA218_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA218_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA218_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA218_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA218_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA218_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA218_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA218_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA218_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA218_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA218_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA218_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA218_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA218_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA218_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA218_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA218_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index218_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA218_5 = input.LA(1);

                         
                        int index218_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA218_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA218_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA218_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA218_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA218_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA218_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA218_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA218_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA218_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA218_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA218_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA218_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA218_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA218_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA218_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA218_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA218_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA218_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA218_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA218_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA218_5==TIMEPERIOD_SECONDS) ) {s = 242;}

                        else if ( (LA218_5==TIMEPERIOD_SECOND) ) {s = 243;}

                        else if ( (LA218_5==TIMEPERIOD_SEC) ) {s = 244;}

                        else if ( (LA218_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA218_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA218_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA218_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA218_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA218_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA218_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA218_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA218_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA218_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA218_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA218_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA218_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA218_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA218_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA218_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA218_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA218_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA218_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA218_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                         
                        input.seek(index218_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA218_6 = input.LA(1);

                         
                        int index218_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA218_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA218_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA218_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA218_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA218_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA218_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA218_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA218_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA218_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA218_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA218_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA218_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA218_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA218_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA218_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA218_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA218_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA218_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA218_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA218_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA218_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA218_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA218_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA218_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA218_6==TIMEPERIOD_SECONDS) ) {s = 290;}

                        else if ( (LA218_6==TIMEPERIOD_SECOND) ) {s = 291;}

                        else if ( (LA218_6==TIMEPERIOD_SEC) ) {s = 292;}

                        else if ( (LA218_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA218_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA218_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA218_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA218_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA218_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA218_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA218_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA218_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA218_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA218_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA218_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA218_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA218_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA218_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA218_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 308;}

                         
                        input.seek(index218_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA218_7 = input.LA(1);

                         
                        int index218_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA218_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA218_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA218_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA218_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA218_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA218_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA218_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA218_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA218_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA218_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA218_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA218_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA218_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA218_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA218_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA218_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA218_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA218_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA218_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA218_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA218_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA218_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA218_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA218_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA218_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA218_7==TIMEPERIOD_SECONDS) ) {s = 335;}

                        else if ( (LA218_7==TIMEPERIOD_SECOND) ) {s = 336;}

                        else if ( (LA218_7==TIMEPERIOD_SEC) ) {s = 337;}

                        else if ( (LA218_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA218_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA218_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA218_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA218_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA218_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA218_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA218_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA218_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA218_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA218_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA218_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA218_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA218_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA218_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA218_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA218_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA218_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA218_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA218_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                         
                        input.seek(index218_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA218_8 = input.LA(1);

                         
                        int index218_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA218_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA218_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA218_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA218_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA218_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA218_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA218_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA218_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA218_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA218_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA218_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA218_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA218_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA218_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA218_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA218_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA218_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA218_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA218_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA218_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA218_8==TIMEPERIOD_SECONDS) ) {s = 379;}

                        else if ( (LA218_8==TIMEPERIOD_SECOND) ) {s = 380;}

                        else if ( (LA218_8==TIMEPERIOD_SEC) ) {s = 381;}

                        else if ( (LA218_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA218_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA218_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA218_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA218_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA218_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA218_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA218_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA218_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA218_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA218_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA218_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA218_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA218_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA218_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA218_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA218_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA218_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA218_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA218_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                         
                        input.seek(index218_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA218_57 = input.LA(1);

                         
                        int index218_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_57==DIV) && (synpred11_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA218_57==COMMA||LA218_57==RPAREN) ) {s = 403;}

                         
                        input.seek(index218_57);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA218_163 = input.LA(1);

                         
                        int index218_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_163);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA218_164 = input.LA(1);

                         
                        int index218_164 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_164);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA218_165 = input.LA(1);

                         
                        int index218_165 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_165);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA218_199 = input.LA(1);

                         
                        int index218_199 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_199);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA218_200 = input.LA(1);

                         
                        int index218_200 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_200);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA218_201 = input.LA(1);

                         
                        int index218_201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_201);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA218_242 = input.LA(1);

                         
                        int index218_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_242);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA218_243 = input.LA(1);

                         
                        int index218_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_243);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA218_244 = input.LA(1);

                         
                        int index218_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_244);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA218_290 = input.LA(1);

                         
                        int index218_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_290);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA218_291 = input.LA(1);

                         
                        int index218_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_291);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA218_292 = input.LA(1);

                         
                        int index218_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_292);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA218_335 = input.LA(1);

                         
                        int index218_335 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_335);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA218_336 = input.LA(1);

                         
                        int index218_336 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_336);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA218_337 = input.LA(1);

                         
                        int index218_337 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_337);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA218_379 = input.LA(1);

                         
                        int index218_379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_379);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA218_380 = input.LA(1);

                         
                        int index218_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_380);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA218_381 = input.LA(1);

                         
                        int index218_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 388;}

                         
                        input.seek(index218_381);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA232_eotS =
        "\u0199\uffff";
    static final String DFA232_eofS =
        "\1\47\4\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u0172\uffff";
    static final String DFA232_minS =
        "\1\5\4\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u0172\uffff";
    static final String DFA232_maxS =
        "\1\u0116\4\uffff\1\u0115\34\uffff\2\u0115\1\uffff\1\u0115\1\u0116"+
        "\u0172\uffff";
    static final String DFA232_acceptS =
        "\1\uffff\1\1\45\uffff\1\2\u0171\uffff";
    static final String DFA232_specialS =
        "\u0199\uffff}>";
    static final String[] DFA232_transitionS = {
            "\1\1\4\47\1\5\3\47\1\1\1\uffff\2\47\11\1\3\uffff\5\47\1\1\1"+
            "\47\1\46\1\42\1\43\1\45\1\uffff\1\47\1\uffff\2\47\4\uffff\1"+
            "\47\3\1\1\47\1\uffff\3\47\3\uffff\10\1\1\uffff\4\1\2\uffff\1"+
            "\1\1\uffff\3\1\6\uffff\3\47\6\uffff\1\47\1\uffff\2\47\u0091"+
            "\uffff\1\47\1\1\13\47\2\uffff\14\47\1\uffff\1\47\2\uffff\1\47"+
            "\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\1\uffff\2\1\u0091\uffff\1\1\1\uffff\13\1\2\47\14\1\1\uffff"+
            "\1\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\1\uffff\2\1\u0091\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1"+
            "\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\1\uffff\2\1\u0091\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1"+
            "\uffff\1\1\2\uffff\1\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\1\uffff\2\1\u0091\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1"+
            "\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff\2\47\25\uffff"+
            "\3\1\6\uffff\1\1\1\uffff\2\1\u0091\uffff\1\1\1\47\13\1\2\uffff"+
            "\14\1\1\uffff\1\1\2\uffff\1\1\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "1494:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1532 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000400000400001L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1537 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1555 = new BitSet(new long[]{0x0040020008000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1561 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1591 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1621 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4880010000000000L,0x00004000018A4018L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1681 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4880010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1741 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1793 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4000010000000000L,0x00004000018A4018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1834 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4080010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1966 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4040010000000000L,0x00004000018E4018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1972 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4000010000000000L,0x00004000018A4018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2014 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x40C0010000000000L,0x0000400001CE4018L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2020 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0x4080010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2093 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2096 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2102 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2105 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2112 = new BitSet(new long[]{0x0104300000010002L,0x0000000A00000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2116 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2122 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2125 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2132 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2135 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2138 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2145 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2148 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2155 = new BitSet(new long[]{0x0030800080004000L,0x0000000000022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2158 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2165 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2168 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2171 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2199 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2203 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2211 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2217 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2229 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2232 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2301 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2303 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2309 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2311 = new BitSet(new long[]{0x0100300400010002L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2315 = new BitSet(new long[]{0x0100300000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2321 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2323 = new BitSet(new long[]{0x0100300000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2332 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2334 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2336 = new BitSet(new long[]{0x0100200000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2343 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2345 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2352 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2354 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2409 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2411 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2415 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2417 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2422 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2455 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2508 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2512 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2517 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2593 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2613 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2654 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2660 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0680000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2665 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0680000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2670 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0680000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2679 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2683 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2687 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2702 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2721 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2738 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2741 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2830 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003A7BFL,0x0000000000000000L,0x5080010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2833 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2866 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2991 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003A7BFL,0x0000000000000000L,0x5080010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3034 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3062 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3107 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3113 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr3124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList3158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3204 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3242 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3245 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3288 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3292 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3296 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3299 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3320 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3336 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3403 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3406 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3409 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3412 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3429 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3490 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3496 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3502 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectionList_in_selectClause3506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3536 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3586 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3589 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3653 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3691 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3695 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3699 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3703 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3712 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3717 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3728 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3734 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3741 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog3815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog3829 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog3835 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog3842 = new BitSet(new long[]{0x0000800000000000L,0x0000010000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog3847 = new BitSet(new long[]{0x0000800000000000L,0x0000010000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3853 = new BitSet(new long[]{0x0000800000000000L,0x0000010000000002L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog3859 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog3865 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog3871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog3878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy3915 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy3917 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy3919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy3922 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy3924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures3953 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures3955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures3958 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures3960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem3985 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem3987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4016 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4062 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4066 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4070 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4074 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4078 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4391 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4393 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4422 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression4459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression4461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression4465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression4482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression4549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression4553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression4556 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression4558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_viewExpression4616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression4622 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression4624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr4669 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr4709 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement4736 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4821 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4825 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4829 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4833 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit4860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit4891 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit4897 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit4903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit4926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit4942 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_outputLimit4944 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit4947 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5078 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5084 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5161 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5165 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5169 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5173 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5177 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5182 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5218 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_whenClause5221 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5223 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_whenClause5226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5239 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_elseClause5242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5269 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5272 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5275 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5289 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_caseExpression5291 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5293 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5296 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5334 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression5339 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5341 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5373 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression5378 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5380 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression5417 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression5420 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression5423 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression5448 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5464 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression5477 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5495 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5509 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression5511 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression5525 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression5539 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5569 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression5586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression5592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression5598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression5604 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression5606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression5609 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5614 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5742 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression5774 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression5778 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression5782 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression5786 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression5827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression5833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression5839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5845 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression5951 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5990 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression5996 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6021 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6050 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6255 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6307 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6309 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression6366 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery6430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6461 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6467 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression6515 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression6518 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression6541 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression6544 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression6547 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6566 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression6581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression6586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression6591 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_unaryExpression6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression6596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression6614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression6630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression6647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression6691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression6693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr6726 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr6732 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr6735 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr6742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr6745 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr6753 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr6765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr6789 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6796 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6801 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0280000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr6808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6812 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6818 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr6825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression6869 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CE4018L});
    public static final BitSet FOLLOW_expression_in_arrayExpression6872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression6875 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_arrayExpression6877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc6907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6910 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6914 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6919 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc6931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6934 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6938 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6943 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6958 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6970 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6975 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc6990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7010 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7014 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7019 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7034 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7038 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7043 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7058 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7062 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7067 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7092 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7097 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7103 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7119 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7125 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7146 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7164 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7191 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7194 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7217 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7252 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7257 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7263 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_firstAggregation7267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7297 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7302 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7308 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_lastAggregation7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc7346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc7350 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_maxFunc7353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7356 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_maxFunc7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7362 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_maxFunc7365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction7391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction7409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction7411 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction7415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction7417 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction7420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction7424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent7454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent7461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent7473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs7491 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs7496 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs7503 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7520 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList7522 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xC480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression7553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression7570 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7611 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression7616 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7618 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7650 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression7655 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7657 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression7692 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression7701 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression7768 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression7774 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression7782 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression7788 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression7797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList7912 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList7914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList7917 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList7919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0840000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList7923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom7946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix7961 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix7967 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0480000000000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix7969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix7971 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression8053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8056 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8117 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200010000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200010000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange8375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression8560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression8562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression8571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression8582 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression8587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression8599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic8677 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic8680 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic8682 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic8684 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic8688 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic8691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic8693 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic8698 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic8700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic8704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList8754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList8757 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList8760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement8802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement8807 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement8810 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector8860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector8862 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector8865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression8916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression8918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression8927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression8938 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xDC80010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression8940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression8943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression8955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList9159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9162 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4018L});
    public static final BitSet FOLLOW_expression_in_expressionList9165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9196 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xD480010000000000L,0x0000400001CA4019L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9332 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand9430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand9443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand9455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand9457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_number_in_frequencyOperand9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand9464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand9466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand9515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand9524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_number_in_rangeOperand9527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator9647 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator9651 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator9653 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator9656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator9704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator9708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator9710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator9713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList9760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList9762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList9765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList9767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList9771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter9793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter9799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9820 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty9823 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic9860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic9864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic9866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic9885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic9899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10055 = new BitSet(new long[]{0xC03801E807FC4422L,0x000000000003A7BFL,0x0000000000000000L,0x0080000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent10386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod10418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0xC080010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart10506 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart10510 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart10512 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart10516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart10520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart10569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart10573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart10575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart10579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart10583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart10632 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart10636 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart10638 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart10650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart10700 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart10704 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart10706 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart10714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart10718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart10768 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart10772 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart10774 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number10841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number10858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number10875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number10892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution10913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant10932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant10939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant10952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant10972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant10992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000010000000000L,0x0000000001884000L});
    public static final BitSet FOLLOW_number_in_numberconstant11024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9311 = new BitSet(new long[]{0x0000000000000002L});

}