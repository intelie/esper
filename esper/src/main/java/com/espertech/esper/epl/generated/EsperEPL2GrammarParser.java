  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=177;
    public static final int FLOAT_SUFFIX=338;
    public static final int STAR=281;
    public static final int DOT_EXPR=185;
    public static final int NUMERIC_PARAM_LIST=117;
    public static final int MOD=299;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=159;
    public static final int LIB_FUNC_CHAIN=184;
    public static final int CREATE_COL_TYPE_LIST=235;
    public static final int BSR=320;
    public static final int MERGE_INS=251;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=183;
    public static final int TIMEPERIOD_MILLISECONDS=98;
    public static final int FULL_OUTERJOIN_EXPR=163;
    public static final int MATCHREC_PATTERN_CONCAT=263;
    public static final int INC=313;
    public static final int LNOT=309;
    public static final int RPAREN=276;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=286;
    public static final int BSR_ASSIGN=321;
    public static final int CAST_EXPR=214;
    public static final int MATCHES=109;
    public static final int USING=113;
    public static final int STREAM_EXPR=158;
    public static final int TIMEPERIOD_SECONDS=95;
    public static final int NOT_EQUAL=291;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=126;
    public static final int LAST_AGGREG=242;
    public static final int REGEXP=9;
    public static final int MATCHED=115;
    public static final int FOLLOWED_BY_EXPR=120;
    public static final int FOLLOWED_BY=303;
    public static final int HOUR_PART=190;
    public static final int RBRACK=280;
    public static final int MATCHREC_PATTERN_NESTED=265;
    public static final int MATCH_UNTIL_RANGE_CLOSED=233;
    public static final int GE=295;
    public static final int METHOD_JOIN_EXPR=229;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=125;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=124;
    public static final int MINUS_ASSIGN=314;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=136;
    public static final int NUM_DOUBLE=259;
    public static final int INSERTINTO_STREAM_NAME=202;
    public static final int LCURLY=300;
    public static final int TIMEPERIOD_MILLISEC=96;
    public static final int UNARY_MINUS=186;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=200;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=134;
    public static final int WS=330;
    public static final int EMAILAT=329;
    public static final int SUBSELECT_GROUP_EXPR=206;
    public static final int ON_SELECT_INSERT_EXPR=224;
    public static final int ESCAPECHAR=304;
    public static final int EXPRCOL=181;
    public static final int SL_COMMENT=331;
    public static final int NULL_TYPE=258;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=231;
    public static final int GT=293;
    public static final int BNOT=310;
    public static final int WHERE_EXPR=145;
    public static final int END=33;
    public static final int LAND=327;
    public static final int INNERJOIN_EXPR=160;
    public static final int NOT_REGEXP=197;
    public static final int MATCH_UNTIL_EXPR=230;
    public static final int EVENT_PROP_EXPR=167;
    public static final int LBRACK=279;
    public static final int MERGE_UPD=250;
    public static final int VIEW_EXPR=142;
    public static final int ANNOTATION=238;
    public static final int LONG_TYPE=253;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=127;
    public static final int MATCHREC_PATTERN=261;
    public static final int ON_MERGE_EXPR=223;
    public static final int TIMEPERIOD_SEC=93;
    public static final int TICKED_STRING_LITERAL=305;
    public static final int ON_SELECT_EXPR=221;
    public static final int MINUTE_PART=191;
    public static final int PATTERN_NOT_EXPR=123;
    public static final int SQL_NE=290;
    public static final int SUM=18;
    public static final int HexDigit=336;
    public static final int UPDATE_EXPR=244;
    public static final int LPAREN=275;
    public static final int IN_SUBSELECT_EXPR=208;
    public static final int AT=85;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=99;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=267;
    public static final int NOT_IN_RANGE=204;
    public static final int OFFSET=103;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=192;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=105;
    public static final int IDENT=274;
    public static final int DATABASE_JOIN_EXPR=144;
    public static final int BXOR=289;
    public static final int PLUS=283;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=87;
    public static final int CREATE_SCHEMA_EXPR=246;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=170;
    public static final int CREATE_INDEX_EXPR=215;
    public static final int TIMEPERIOD_MILLISECOND=97;
    public static final int EVAL_NOTEQUALS_EXPR=151;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=232;
    public static final int CREATE_VARIABLE_EXPR=228;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=268;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=121;
    public static final int RIGHT_OUTERJOIN_EXPR=162;
    public static final int NUMBERSETSTAR=237;
    public static final int LAST_OPERATOR=211;
    public static final int PATTERN_FILTER_EXPR=122;
    public static final int MERGE=114;
    public static final int EVAL_AND_EXPR=148;
    public static final int LEFT_OUTERJOIN_EXPR=161;
    public static final int EPL_EXPR=260;
    public static final int GROUP_BY_EXPR=164;
    public static final int SET=82;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=168;
    public static final int MINUS=297;
    public static final int SEMI=328;
    public static final int STAR_ASSIGN=316;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=249;
    public static final int FIRST_AGGREG=241;
    public static final int COLON=285;
    public static final int EVAL_EQUALS_GROUP_EXPR=152;
    public static final int BAND_ASSIGN=326;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=178;
    public static final int NOT_IN_SET=194;
    public static final int VALUE_NULL=101;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=171;
    public static final int SL=322;
    public static final int NOT_IN_SUBSELECT_EXPR=209;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=140;
    public static final int SR=318;
    public static final int RCURLY=301;
    public static final int PLUS_ASSIGN=312;
    public static final int EXISTS_SUBSELECT_EXPR=207;
    public static final int DAY_PART=189;
    public static final int EVENT_FILTER_IN=135;
    public static final int DIV=298;
    public static final int OBJECT_PARAM_ORDERED_EXPR=119;
    public static final int OctalEscape=335;
    public static final int MILLISECOND_PART=193;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=102;
    public static final int SELECTION_EXPR=155;
    public static final int LOR=296;
    public static final int CAST=78;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=201;
    public static final int EXPONENT=337;
    public static final int LT=292;
    public static final int PATTERN_INCL_EXPR=143;
    public static final int WHILE=112;
    public static final int ORDER_BY_EXPR=165;
    public static final int BOOL_TYPE=257;
    public static final int MOD_ASSIGN=317;
    public static final int ANNOTATION_ARRAY=239;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=210;
    public static final int EQUALS=277;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=311;
    public static final int WINDOW_AGGREG=243;
    public static final int SL_ASSIGN=323;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=266;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=222;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=188;
    public static final int CREATE_COL_TYPE=236;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=100;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=153;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=254;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=94;
    public static final int EVENT_FILTER_BETWEEN=137;
    public static final int ANNOTATION_VALUE=240;
    public static final int SUBSELECT_EXPR=205;
    public static final int NUMERIC_PARAM_RANGE=116;
    public static final int CONCAT=182;
    public static final int CLASS_IDENT=139;
    public static final int MATCHREC_PATTERN_ALTER=264;
    public static final int ON_EXPR=218;
    public static final int CREATE_WINDOW_EXPR=216;
    public static final int PROPERTY_SELECTION_STREAM=129;
    public static final int ON_DELETE_EXPR=220;
    public static final int NUM_LONG=306;
    public static final int ON=41;
    public static final int TIME_PERIOD=187;
    public static final int DOUBLE_TYPE=255;
    public static final int DELETE=80;
    public static final int INT_TYPE=252;
    public static final int MATCHREC_PARTITION=272;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=147;
    public static final int ORDER_ELEMENT_EXPR=166;
    public static final int TIMEPERIOD_HOURS=90;
    public static final int VARIABLE=83;
    public static final int SUBSTITUTION=213;
    public static final int UNTIL=84;
    public static final int STRING_TYPE=256;
    public static final int NUM_INT=302;
    public static final int MATCHREC_DEFINE_ITEM=269;
    public static final int ON_SET_EXPR=227;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=248;
    public static final int NUM_FLOAT=307;
    public static final int ON_EXPR_FROM=226;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=333;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=128;
    public static final int WEEKDAY_OPERATOR=212;
    public static final int DEC=315;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=324;
    public static final int NUMERIC_PARAM_FREQUENCY=118;
    public static final int SNAPSHOT=81;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=176;
    public static final int EVENT_FILTER_PARAM=132;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=173;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=104;
    public static final int FOR=111;
    public static final int ON_STREAM=219;
    public static final int DEFINE=107;
    public static final int TIMEPERIOD_DAYS=88;
    public static final int EVENT_FILTER_RANGE=133;
    public static final int ML_COMMENT=332;
    public static final int INDEX=86;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=172;
    public static final int BOR_ASSIGN=325;
    public static final int COMMA=273;
    public static final int IS=42;
    public static final int PARTITION=108;
    public static final int WHEN_LIMIT_EXPR=179;
    public static final int TIMEPERIOD_LIMIT_EXPR=175;
    public static final int SOME=49;
    public static final int EQUAL=308;
    public static final int BOR=282;
    public static final int MATCHREC_MEASURE_ITEM=271;
    public static final int TIMEPERIOD_HOUR=89;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=138;
    public static final int IN_RANGE=203;
    public static final int DOT=278;
    public static final int MATCHREC_MEASURES=270;
    public static final int CURRENT_TIMESTAMP=79;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=130;
    public static final int INSERTINTO_EXPR=180;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=146;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=234;
    public static final int EVAL_EQUALS_EXPR=150;
    public static final int TIMEPERIOD_MINUTES=92;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=196;
    public static final int EVENT_LIMIT_EXPR=174;
    public static final int NOT_BETWEEN=195;
    public static final int TIMEPERIOD_MINUTE=91;
    public static final int EVAL_OR_EXPR=149;
    public static final int ON_SELECT_INSERT_OUTPUT=225;
    public static final int MEASURES=106;
    public static final int AFTER=110;
    public static final int BAND=288;
    public static final int MATCHREC_PATTERN_ATOM=262;
    public static final int QUOTED_STRING_LITERAL=287;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=284;
    public static final int OBSERVER_EXPR=141;
    public static final int CREATE_SCHEMA_EXPR_QUAL=247;
    public static final int EVENT_FILTER_IDENT=131;
    public static final int EVENT_PROP_MAPPED=169;
    public static final int UnicodeEscape=334;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=198;
    public static final int SELECTION_ELEMENT_EXPR=156;
    public static final int CREATE_WINDOW_SELECT_EXPR=217;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=245;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=157;
    public static final int SR_ASSIGN=319;
    public static final int LE=294;
    public static final int DBFROM_CLAUSE=199;
    public static final int EVAL_IDENT=154;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1666);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1671);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1675); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1689);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1695);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1725);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1729); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1751);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);
                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);
                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1759);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1763);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1811);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1819);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1823);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1869);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1872); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1875);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1896);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1899); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1902);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1929);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1970);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2001);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2012);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2025);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2048);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2059);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2072);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2080);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2103);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2106); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2108);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2151);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2154); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2156);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2200);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2205);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2210);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2215);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2220);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2225);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2230);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2233);
                    forExpr57=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;
        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2247); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2250);
                    insertIntoExpr59=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());
                    }
                    break;
            }
            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2256); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2259);
            selectClause61=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2263); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2266);
            fromClause63=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2270);
                    matchRecog64=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2276); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2279);
                    whereClause66=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2286); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2289); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2292);
                    groupByListExpr69=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2299); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2302);
                    havingClause71=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2309); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2312);
                    outputLimit73=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2319); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2322); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2325);
                    orderByListExpr76=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2332); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2335);
                    rowLimit78=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr87 = null;
        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2352);
            onStreamExpr80=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            int alt30=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            case MERGE:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2357);
                    onDeleteExpr81=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2361);
                    onSelectExpr82=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2364);
                            	    onSelectInsertExpr83=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2367);
                                    outputClauseInsert84=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2374);
                    onSetExpr85=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2378);
                    onUpdateExpr86=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2382);
                    onMergeExpr87=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2427);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2431);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2480);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2501);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2504); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2506);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2516);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token AS103=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched106 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched107 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree AS103_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeMatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatched");
        RewriteRuleSubtreeStream stream_mergeUnmatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatched");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==INTO) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO102);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS103=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS103);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2580);
                    whereClause105=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());
                    }
                    break;
            }
            int cnt39=0;
            loop39:
            do {
                int alt39=3;
                int LA39_0 = input.LA(1);
                if ( (LA39_0==WHEN) ) {
                    int LA39_3 = input.LA(2);
                    if ( (LA39_3==MATCHED) ) {
                        alt39=1;
                    }
                    else if ( (LA39_3==NOT_EXPR) ) {
                        alt39=2;
                    }
                }
                switch (alt39) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatched_in_onMergeExpr2589);
            	    mergeMatched106=mergeMatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatched.add(mergeMatched106.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatched_in_onMergeExpr2593);
            	    mergeUnmatched107=mergeUnmatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatched.add(mergeUnmatched107.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                while ( stream_mergeMatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatched.nextTree());
                }
                stream_mergeMatched.reset();
                while ( stream_mergeUnmatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatched.nextTree());
                }
                stream_mergeUnmatched.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token d=null;
        Token WHEN108=null;
        Token MATCHED109=null;
        Token AND_EXPR110=null;
        Token THEN112=null;
        Token SET113=null;
        Token COMMA115=null;
        EsperEPL2GrammarParser.expression_return expression111 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment114 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment116 = null;
        CommonTree i_tree=null;
        CommonTree d_tree=null;
        CommonTree WHEN108_tree=null;
        CommonTree MATCHED109_tree=null;
        CommonTree AND_EXPR110_tree=null;
        CommonTree THEN112_tree=null;
        CommonTree SET113_tree=null;
        CommonTree COMMA115_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN108=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN108);
            MATCHED109=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED109);
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==AND_EXPR) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    AND_EXPR110=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR110);
                    pushFollow(FOLLOW_expression_in_mergeMatched2638);
                    expression111=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression111.getTree());
                    }
                    break;
            }
            THEN112=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN112);
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==UPDATE) ) {
                alt42=1;
            }
            else if ( (LA42_0==DELETE) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);
                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    {
                    {
                    i=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(i);
                    SET113=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET113);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2659);
                    onSetAssignment114=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment114.getTree());
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);
                        if ( (LA41_0==COMMA) ) {
                            alt41=1;
                        }
                        switch (alt41) {
                    	case 1 :
                    	    {
                    	    COMMA115=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2662); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA115);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2664);
                    	    onSetAssignment116=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment116.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop41;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatched2675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN117=null;
        Token NOT_EXPR118=null;
        Token MATCHED119=null;
        Token THEN120=null;
        Token INSERT121=null;
        Token LPAREN122=null;
        Token RPAREN124=null;
        Token SELECT125=null;
        EsperEPL2GrammarParser.columnList_return columnList123 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList126 = null;
        CommonTree WHEN117_tree=null;
        CommonTree NOT_EXPR118_tree=null;
        CommonTree MATCHED119_tree=null;
        CommonTree THEN120_tree=null;
        CommonTree INSERT121_tree=null;
        CommonTree LPAREN122_tree=null;
        CommonTree RPAREN124_tree=null;
        CommonTree SELECT125_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN117=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN117);
            NOT_EXPR118=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR118);
            MATCHED119=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED119);
            THEN120=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN120);
            INSERT121=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT121);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==LPAREN) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    LPAREN122=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN122);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2730);
                    columnList123=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList123.getTree());
                    RPAREN124=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN124);
                    }
                    break;
            }
            SELECT125=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT125);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2738);
            selectionList126=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList126.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT127=null;
        Token SELECT129=null;
        Token DISTINCT130=null;
        Token WHERE133=null;
        Token GROUP135=null;
        Token BY136=null;
        Token HAVING138=null;
        Token ORDER140=null;
        Token BY141=null;
        Token ROW_LIMIT_EXPR143=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr128 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList131 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom132 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause134 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr137 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause139 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr142 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit144 = null;
        CommonTree INSERT127_tree=null;
        CommonTree SELECT129_tree=null;
        CommonTree DISTINCT130_tree=null;
        CommonTree WHERE133_tree=null;
        CommonTree GROUP135_tree=null;
        CommonTree BY136_tree=null;
        CommonTree HAVING138_tree=null;
        CommonTree ORDER140_tree=null;
        CommonTree BY141_tree=null;
        CommonTree ROW_LIMIT_EXPR143_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==INSERT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    INSERT127=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT127);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2779);
                    insertIntoExpr128=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr128.getTree());
                    }
                    break;
            }
            SELECT129=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT129);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==DISTINCT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    DISTINCT130=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT130);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2790);
            selectionList131=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList131.getTree());
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==FROM) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2794);
                    onExprFrom132=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom132.getTree());
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE133=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE133);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2802);
                    whereClause134=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause134.getTree());
                    }
                    break;
            }
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==GROUP) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    GROUP135=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP135);
                    BY136=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY136);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2815);
                    groupByListExpr137=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr137.getTree());
                    }
                    break;
            }
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==HAVING) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    HAVING138=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING138);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2824);
                    havingClause139=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause139.getTree());
                    }
                    break;
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    ORDER140=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER140);
                    BY141=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY141);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2835);
                    orderByListExpr142=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr142.getTree());
                    }
                    break;
            }
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==ROW_LIMIT_EXPR) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR143=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR143);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2844);
                    rowLimit144=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit144.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE145=null;
        Token AS146=null;
        Token SET147=null;
        Token COMMA149=null;
        Token WHERE151=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment148 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE145_tree=null;
        CommonTree AS146_tree=null;
        CommonTree SET147_tree=null;
        CommonTree COMMA149_tree=null;
        CommonTree WHERE151_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE145=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE145);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt52=3;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==AS) ) {
                alt52=1;
            }
            else if ( (LA52_0==IDENT) ) {
                alt52=2;
            }
            switch (alt52) {
                case 1 :
                    {
                    AS146=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS146);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET147=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET147);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2932);
            onSetAssignment148=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment148.getTree());
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);
                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }
                switch (alt53) {
            	case 1 :
            	    {
            	    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2935); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2937);
            	    onSetAssignment150=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment150.getTree());
            	    }
            	    break;
            	default :
            	    break loop53;
                }
            } while (true);
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==WHERE) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2946);
                    whereClause152=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT153=null;
        Token SELECT155=null;
        Token WHERE157=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr154 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList156 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause158 = null;
        CommonTree INSERT153_tree=null;
        CommonTree SELECT155_tree=null;
        CommonTree WHERE157_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT153=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT153);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2999);
            insertIntoExpr154=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr154.getTree());
            SELECT155=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT155);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3005);
            selectionList156=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList156.getTree());
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==WHERE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    WHERE157=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE157);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3012);
                    whereClause158=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause158.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT159=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT159_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT159=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT159);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==FIRST) ) {
                alt56=1;
            }
            else if ( (LA56_0==ALL) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);
                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE160=null;
        Token WHERE162=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom161 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause163 = null;
        CommonTree DELETE160_tree=null;
        CommonTree WHERE162_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE160=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE160);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3100);
            onExprFrom161=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom161.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE162=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE162);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3107);
                    whereClause163=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause163.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET164=null;
        Token COMMA166=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment165 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment167 = null;
        CommonTree SET164_tree=null;
        CommonTree COMMA166_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET164=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET164);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3149);
            onSetAssignment165=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment165.getTree());
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);
                if ( (LA58_0==COMMA) ) {
                    alt58=1;
                }
                switch (alt58) {
            	case 1 :
            	    {
            	    COMMA166=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3152); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA166);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3154);
            	    onSetAssignment167=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment167.getTree());
            	    }
            	    break;
            	default :
            	    break loop58;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS169=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty168 = null;
        EsperEPL2GrammarParser.expression_return expression170 = null;
        CommonTree EQUALS169_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3179);
            eventProperty168=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty168.getTree());
            EQUALS169=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS169);
            pushFollow(FOLLOW_expression_in_onSetAssignment3183);
            expression170=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression170.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM171=null;
        Token AS172=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM171_tree=null;
        CommonTree AS172_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM171=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM171);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt59=3;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==AS) ) {
                alt59=1;
            }
            else if ( (LA59_0==IDENT) ) {
                alt59=2;
            }
            switch (alt59) {
                case 1 :
                    {
                    AS172=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS172);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE173=null;
        Token WINDOW174=null;
        Token DOT175=null;
        Token DOT177=null;
        Token AS179=null;
        Token LPAREN181=null;
        Token RPAREN183=null;
        Token WHERE184=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression176 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression178 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter180 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList182 = null;
        EsperEPL2GrammarParser.expression_return expression185 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE173_tree=null;
        CommonTree WINDOW174_tree=null;
        CommonTree DOT175_tree=null;
        CommonTree DOT177_tree=null;
        CommonTree AS179_tree=null;
        CommonTree LPAREN181_tree=null;
        CommonTree RPAREN183_tree=null;
        CommonTree WHERE184_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE173=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE173);
            WINDOW174=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW174);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==DOT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    DOT175=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT175);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3264);
                    viewExpression176=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression176.getTree());
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);
                        if ( (LA60_0==DOT) ) {
                            alt60=1;
                        }
                        switch (alt60) {
                    	case 1 :
                    	    {
                    	    DOT177=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3267); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT177);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3269);
                    	    viewExpression178=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression178.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop60;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt62=3;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==RETAINUNION) ) {
                alt62=1;
            }
            else if ( (LA62_0==RETAININTERSECTION) ) {
                alt62=2;
            }
            switch (alt62) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==AS) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    AS179=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS179);
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==SELECT||LA64_0==IDENT||LA64_0==TICKED_STRING_LITERAL) ) {
                alt64=1;
            }
            else if ( (LA64_0==LPAREN) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);
                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3301);
                    createWindowExprModelAfter180=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter180.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN181=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN181);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3318);
                    createColumnList182=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList182.getTree());
                    RPAREN183=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN183);
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==INSERT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt65=2;
                    int LA65_0 = input.LA(1);
                    if ( (LA65_0==WHERE) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            {
                            WHERE184=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3340); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE184);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3342);
                            expression185=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression185.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT186=null;
        Token FROM188=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList187 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier189 = null;
        CommonTree SELECT186_tree=null;
        CommonTree FROM188_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==SELECT) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    SELECT186=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3429); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3432);
                    createSelectionList187=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList187.getTree());
                    FROM188=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3434); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3439);
            classIdentifier189=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier189.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE190=null;
        Token INDEX191=null;
        Token ON192=null;
        Token LPAREN193=null;
        Token RPAREN195=null;
        EsperEPL2GrammarParser.columnList_return columnList194 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE190_tree=null;
        CommonTree INDEX191_tree=null;
        CommonTree ON192_tree=null;
        CommonTree LPAREN193_tree=null;
        CommonTree RPAREN195_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE190=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE190);
            INDEX191=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX191);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON192=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON192);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN193);
            pushFollow(FOLLOW_columnList_in_createIndexExpr3468);
            columnList194=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList194.getTree());
            RPAREN195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN195);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE196=null;
        Token VARIABLE197=null;
        Token EQUALS199=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier198 = null;
        EsperEPL2GrammarParser.expression_return expression200 = null;
        CommonTree n_tree=null;
        CommonTree CREATE196_tree=null;
        CommonTree VARIABLE197_tree=null;
        CommonTree EQUALS199_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE196=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE196);
            VARIABLE197=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE197);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3501);
            classIdentifier198=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier198.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==EQUALS) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    EQUALS199=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS199);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3510);
                    expression200=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression200.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA202=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement201 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement203 = null;
        CommonTree COMMA202_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3552);
            createColumnListElement201=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement201.getTree());
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);
                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }
                switch (alt69) {
            	case 1 :
            	    {
            	    COMMA202=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3555); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA202);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3557);
            	    createColumnListElement203=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement203.getTree());
            	    }
            	    break;
            	default :
            	    break loop69;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token b=null;
        Token RBRACK205=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier204 = null;
        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK205_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3590);
            classIdentifier204=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier204.getTree());
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==LBRACK) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK205=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK205);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA207=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement206 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement208 = null;
        CommonTree COMMA207_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3641);
            createSelectionListElement206=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement206.getTree());
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);
                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }
                switch (alt71) {
            	case 1 :
            	    {
            	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3644); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3646);
            	    createSelectionListElement208=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement208.getTree());
            	    }
            	    break;
            	default :
            	    break loop71;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS210=null;
        Token AS212=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty209 = null;
        EsperEPL2GrammarParser.constant_return constant211 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS210_tree=null;
        CommonTree AS212_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt73=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt73=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt73=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt73=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);
                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3687);
                    eventProperty209=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty209.getTree());
                    int alt72=2;
                    int LA72_0 = input.LA(1);
                    if ( (LA72_0==AS) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            {
                            AS210=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS210);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3694); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3715);
                    constant211=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant211.getTree());
                    AS212=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS212);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE213=null;
        Token SCHEMA214=null;
        Token AS215=null;
        Token LPAREN217=null;
        Token RPAREN219=null;
        EsperEPL2GrammarParser.variantList_return variantList216 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList218 = null;
        EsperEPL2GrammarParser.columnList_return columnList220 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE213_tree=null;
        CommonTree SCHEMA214_tree=null;
        CommonTree AS215_tree=null;
        CommonTree LPAREN217_tree=null;
        CommonTree RPAREN219_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE213=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE213);
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==IDENT) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA214=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA214);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==AS) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    AS215=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS215);
                    }
                    break;
            }
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==IDENT||LA78_0==STAR||LA78_0==TICKED_STRING_LITERAL) ) {
                alt78=1;
            }
            else if ( (LA78_0==LPAREN) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);
                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3772);
                    variantList216=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList216.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN217);
                    int alt76=2;
                    int LA76_0 = input.LA(1);
                    if ( (LA76_0==IDENT) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3785);
                            createColumnList218=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList218.getTree());
                            }
                            break;
                    }
                    RPAREN219=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN219);
                    int alt77=2;
                    int LA77_0 = input.LA(1);
                    if ( (LA77_0==IDENT) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3793); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3795);
                            columnList220=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList220.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA222=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement221 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement223 = null;
        CommonTree COMMA222_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3884);
            variantListElement221=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement221.getTree());
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);
                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }
                switch (alt79) {
            	case 1 :
            	    {
            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3887); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA222);
            	    pushFollow(FOLLOW_variantListElement_in_variantList3889);
            	    variantListElement223=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement223.getTree());
            	    }
            	    break;
            	default :
            	    break loop79;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR224=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier225 = null;
        CommonTree STAR224_tree=null;
        try {
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==STAR) ) {
                alt80=1;
            }
            else if ( (LA80_0==IDENT||LA80_0==TICKED_STRING_LITERAL) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);
                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR224=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR224_tree = (CommonTree)adaptor.create(STAR224);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR224_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3922);
                    classIdentifier225=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier225.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token INTO226=null;
        Token LPAREN227=null;
        Token RPAREN229=null;
        EsperEPL2GrammarParser.columnList_return columnList228 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO226_tree=null;
        CommonTree LPAREN227_tree=null;
        CommonTree RPAREN229_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt81=3;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==ISTREAM) ) {
                alt81=1;
            }
            else if ( (LA81_0==RSTREAM) ) {
                alt81=2;
            }
            switch (alt81) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO226=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO226);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==LPAREN) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    LPAREN227=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN227);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3966);
                    columnList228=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList228.getTree());
                    RPAREN229=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN229);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT230=null;
        Token COMMA231=null;
        Token IDENT232=null;
        CommonTree IDENT230_tree=null;
        CommonTree COMMA231_tree=null;
        CommonTree IDENT232_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT230=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT230);
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);
            	    IDENT232=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4007); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT232);
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression233 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin234 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList235 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4045);
            streamExpression233=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression233.getTree());
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==EOF||LA84_0==WHERE||(LA84_0>=GROUP && LA84_0<=HAVING)||LA84_0==OUTPUT||LA84_0==ORDER||LA84_0==ROW_LIMIT_EXPR||LA84_0==MATCH_RECOGNIZE||LA84_0==FOR||LA84_0==COMMA) ) {
                alt84=1;
            }
            else if ( ((LA84_0>=INNER && LA84_0<=FULL)) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);
                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4048);
                    regularJoin234=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin234.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4052);
                    outerJoinList235=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList235.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA236=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression237 = null;
        CommonTree COMMA236_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4066); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4069);
            	    streamExpression237=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression237.getTree());
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin238 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin239 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4083);
            outerJoin238=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin238.getTree());
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);
                if ( ((LA86_0>=INNER && LA86_0<=FULL)) ) {
                    alt86=1;
                }
                switch (alt86) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4086);
            	    outerJoin239=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin239.getTree());
            	    }
            	    break;
            	default :
            	    break loop86;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER240=null;
        Token JOIN241=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression242 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent243 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER240_tree=null;
        CommonTree JOIN241_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( ((LA89_0>=JOIN && LA89_0<=FULL)) ) {
                alt89=1;
            }
            else if ( (LA89_0==INNER) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);
                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    {
                    int alt88=2;
                    int LA88_0 = input.LA(1);
                    if ( ((LA88_0>=LEFT && LA88_0<=FULL)) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            int alt87=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt87=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt87=2;
                                }
                                break;
                            case FULL:
                                {
                                alt87=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 87, 0, input);
                                throw nvae;
                            }
                            switch (alt87) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4129); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4133); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4137); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER240=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4140); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER240);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN241=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN241);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4177);
            streamExpression242=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression242.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4179);
            outerJoinIdent243=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent243.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON244=null;
        Token AND_EXPR246=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair245 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair247 = null;
        CommonTree ON244_tree=null;
        CommonTree AND_EXPR246_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON244=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4244); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4247);
            outerJoinIdentPair245=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair245.getTree());
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);
                if ( (LA90_0==AND_EXPR) ) {
                    alt90=1;
                }
                switch (alt90) {
            	case 1 :
            	    {
            	    AND_EXPR246=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4250); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4253);
            	    outerJoinIdentPair247=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair247.getTree());
            	    }
            	    break;
            	default :
            	    break loop90;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS249=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty248 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty250 = null;
        CommonTree EQUALS249_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4268);
            eventProperty248=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty248.getTree());
            EQUALS249=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4270); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4273);
            eventProperty250=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty250.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression251 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4295);
            evalOrExpression251=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression251.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList252 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt91=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt91=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt91=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt91=3;
                    }
                    break;
            }
            switch (alt91) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==DISTINCT) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4352);
            selectionList252=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList252.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA254=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement253 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement255 = null;
        CommonTree COMMA254_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4383);
            selectionListElement253=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement253.getTree());
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);
                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }
                switch (alt93) {
            	case 1 :
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4386); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4389);
            	    selectionListElement255=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement255.getTree());
            	    }
            	    break;
            	default :
            	    break loop93;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS258=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector256 = null;
        EsperEPL2GrammarParser.expression_return expression257 = null;
        CommonTree s_tree=null;
        CommonTree AS258_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt95=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt95=1;
                }
                break;
            case IDENT:
                {
                int LA95_2 = input.LA(2);
                if ( (LA95_2==DOT) ) {
                    int LA95_68 = input.LA(3);
                    if ( (LA95_68==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt95=2;
                    }
                    else if ( (LA95_68==WINDOW||LA95_68==ESCAPE||LA95_68==EVERY_EXPR||(LA95_68>=SUM && LA95_68<=COUNT)||LA95_68==OUTER||(LA95_68>=JOIN && LA95_68<=FULL)||(LA95_68>=EVENTS && LA95_68<=LAST)||(LA95_68>=UNIDIRECTIONAL && LA95_68<=PREVIOUSTAIL)||LA95_68==PRIOR||(LA95_68>=WEEKDAY && LA95_68<=CAST)||LA95_68==SNAPSHOT||(LA95_68>=VARIABLE && LA95_68<=INDEX)||(LA95_68>=DEFINE && LA95_68<=MATCHES)||LA95_68==WHILE||(LA95_68>=MERGE && LA95_68<=MATCHED)||LA95_68==IDENT||LA95_68==TICKED_STRING_LITERAL) ) {
                        alt95=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 68, input);
                        throw nvae;
                    }
                }
                else if ( (LA95_2==EOF||(LA95_2>=IN_SET && LA95_2<=REGEXP)||(LA95_2>=OR_EXPR && LA95_2<=NOT_EXPR)||(LA95_2>=WHERE && LA95_2<=AS)||LA95_2==WHEN||LA95_2==FROM||LA95_2==IS||(LA95_2>=GROUP && LA95_2<=HAVING)||LA95_2==OUTPUT||LA95_2==INSERT||LA95_2==ORDER||LA95_2==ROW_LIMIT_EXPR||LA95_2==FOR||LA95_2==COMMA||LA95_2==LPAREN||LA95_2==EQUALS||LA95_2==LBRACK||(LA95_2>=STAR && LA95_2<=QUESTION)||(LA95_2>=BAND && LA95_2<=MOD)||LA95_2==ESCAPECHAR) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);
                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4431);
                    streamSelector256=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector256.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4436);
                    expression257=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression257.getTree());
                    int alt94=2;
                    int LA94_0 = input.LA(1);
                    if ( (LA94_0==AS) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            AS258=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4439); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS258);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4443);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT259=null;
        Token STAR260=null;
        Token AS261=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT259_tree=null;
        CommonTree STAR260_tree=null;
        CommonTree AS261_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT259=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT259);
            STAR260=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR260);
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==AS) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    AS261=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS261);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT266=null;
        Token DOT268=null;
        Token AS270=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression262 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression263 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression264 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression265 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression267 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression269 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT266_tree=null;
        CommonTree DOT268_tree=null;
        CommonTree AS270_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt97=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA97_1 = input.LA(2);
                if ( (LA97_1==EOF||(LA97_1>=WHERE && LA97_1<=AS)||(LA97_1>=INNER && LA97_1<=ON)||(LA97_1>=GROUP && LA97_1<=HAVING)||LA97_1==OUTPUT||LA97_1==ORDER||(LA97_1>=UNIDIRECTIONAL && LA97_1<=RETAININTERSECTION)||LA97_1==ROW_LIMIT_EXPR||LA97_1==MATCH_RECOGNIZE||LA97_1==FOR||(LA97_1>=COMMA && LA97_1<=LPAREN)||(LA97_1>=EQUALS && LA97_1<=LBRACK)) ) {
                    alt97=1;
                }
                else if ( (LA97_1==COLON) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt97=1;
                }
                break;
            case PATTERN:
                {
                alt97=2;
                }
                break;
            case SQL:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4541);
                    eventFilterExpression262=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression262.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4545);
                    patternInclusionExpression263=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression263.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4549);
                    databaseJoinExpression264=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression264.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4553);
                    methodJoinExpression265=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression265.getTree());
                    }
                    break;
            }
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==DOT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    DOT266=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT266);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4562);
                    viewExpression267=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression267.getTree());
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);
                        if ( (LA98_0==DOT) ) {
                            alt98=1;
                        }
                        switch (alt98) {
                    	case 1 :
                    	    {
                    	    DOT268=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4565); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT268);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4567);
                    	    viewExpression269=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression269.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop98;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt100=3;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==AS) ) {
                alt100=1;
            }
            else if ( (LA100_0==IDENT) ) {
                alt100=2;
            }
            switch (alt100) {
                case 1 :
                    {
                    AS270=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS270);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==UNIDIRECTIONAL) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt102=3;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==RETAINUNION) ) {
                alt102=1;
            }
            else if ( (LA102_0==RETAININTERSECTION) ) {
                alt102=2;
            }
            switch (alt102) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR271=null;
        Token LPAREN272=null;
        Token RPAREN274=null;
        EsperEPL2GrammarParser.expressionList_return expressionList273 = null;
        CommonTree i_tree=null;
        CommonTree FOR271_tree=null;
        CommonTree LPAREN272_tree=null;
        CommonTree RPAREN274_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR271=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR271);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==LPAREN) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    LPAREN272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN272);
                    int alt103=2;
                    int LA103_0 = input.LA(1);
                    if ( (LA103_0==WINDOW||LA103_0==ESCAPE||(LA103_0>=NOT_EXPR && LA103_0<=EVERY_EXPR)||(LA103_0>=SUM && LA103_0<=COUNT)||LA103_0==CASE||LA103_0==OUTER||(LA103_0>=JOIN && LA103_0<=FULL)||(LA103_0>=EVENTS && LA103_0<=LAST)||(LA103_0>=UNIDIRECTIONAL && LA103_0<=CURRENT_TIMESTAMP)||LA103_0==SNAPSHOT||(LA103_0>=VARIABLE && LA103_0<=INDEX)||(LA103_0>=BOOLEAN_TRUE && LA103_0<=VALUE_NULL)||(LA103_0>=DEFINE && LA103_0<=MATCHES)||LA103_0==WHILE||(LA103_0>=MERGE && LA103_0<=MATCHED)||LA103_0==NUM_DOUBLE||(LA103_0>=IDENT && LA103_0<=LPAREN)||(LA103_0>=PLUS && LA103_0<=QUESTION)||(LA103_0>=STRING_LITERAL && LA103_0<=QUOTED_STRING_LITERAL)||LA103_0==MINUS||LA103_0==LCURLY||LA103_0==NUM_INT||(LA103_0>=TICKED_STRING_LITERAL && LA103_0<=NUM_FLOAT)) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4667);
                            expressionList273=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList273.getTree());
                            }
                            break;
                    }
                    RPAREN274=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN274);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE275=null;
        Token LPAREN276=null;
        Token RPAREN284=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy277 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures278 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection279 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip280 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern281 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval282 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine283 = null;
        CommonTree MATCH_RECOGNIZE275_tree=null;
        CommonTree LPAREN276_tree=null;
        CommonTree RPAREN284_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE275=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE275);
            LPAREN276=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN276);
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==PARTITION) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4726);
                    matchRecogPartitionBy277=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy277.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4733);
            matchRecogMeasures278=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures278.getTree());
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==ALL) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4738);
                    matchRecogMatchesSelection279=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection279.getTree());
                    }
                    break;
            }
            int alt107=2;
            int LA107_0 = input.LA(1);
            if ( (LA107_0==AFTER) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4744);
                    matchRecogMatchesAfterSkip280=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip280.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4750);
            matchRecogPattern281=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern281.getTree());
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==IDENT) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4756);
                    matchRecogMatchesInterval282=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval282.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4762);
            matchRecogDefine283=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine283.getTree());
            RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN284);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION285=null;
        Token BY286=null;
        Token COMMA288=null;
        EsperEPL2GrammarParser.expression_return expression287 = null;
        EsperEPL2GrammarParser.expression_return expression289 = null;
        CommonTree PARTITION285_tree=null;
        CommonTree BY286_tree=null;
        CommonTree COMMA288_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION285=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION285);
            BY286=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY286);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4810);
            expression287=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression287.getTree());
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);
                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }
                switch (alt109) {
            	case 1 :
            	    {
            	    COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4813); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA288);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4815);
            	    expression289=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression289.getTree());
            	    }
            	    break;
            	default :
            	    break loop109;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES290=null;
        Token COMMA292=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem291 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem293 = null;
        CommonTree MEASURES290_tree=null;
        CommonTree COMMA292_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES290=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES290);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4846);
            matchRecogMeasureItem291=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem291.getTree());
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);
                if ( (LA110_0==COMMA) ) {
                    alt110=1;
                }
                switch (alt110) {
            	case 1 :
            	    {
            	    COMMA292=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4849); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA292);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4851);
            	    matchRecogMeasureItem293=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem293.getTree());
            	    }
            	    break;
            	default :
            	    break loop110;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS295=null;
        EsperEPL2GrammarParser.expression_return expression294 = null;
        CommonTree i_tree=null;
        CommonTree AS295_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4876);
            expression294=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression294.getTree());
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==AS) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    {
                    AS295=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS295);
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==IDENT) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4884); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL296=null;
        Token MATCHES297=null;
        CommonTree ALL296_tree=null;
        CommonTree MATCHES297_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL296=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL296_tree = (CommonTree)adaptor.create(ALL296);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL296_tree, root_0);
            }
            MATCHES297=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4918); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN298=null;
        Token LPAREN299=null;
        Token RPAREN301=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration300 = null;
        CommonTree PATTERN298_tree=null;
        CommonTree LPAREN299_tree=null;
        CommonTree RPAREN301_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN298=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN298);
            LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN299);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4937);
            matchRecogPatternAlteration300=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration300.getTree());
            RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN301);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER302=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER302_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER302=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER302);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4965);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4969);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4973);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4977);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4981);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod303 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5019);
            timePeriod303=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod303.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat304 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat305 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5045);
            matchRecogPatternConcat304=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat304.getTree());
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);
                if ( (LA113_0==BOR) ) {
                    alt113=1;
                }
                switch (alt113) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5050); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5052);
            	    matchRecogPatternConcat305=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat305.getTree());
            	    }
            	    break;
            	default :
            	    break loop113;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary306 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt114=0;
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( ((LA114_0>=IDENT && LA114_0<=LPAREN)) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5085);
            	    matchRecogPatternUnary306=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary306.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt114 >= 1 ) break loop114;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(114, input);
                        throw eee;
                }
                cnt114++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested307 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom308 = null;
        try {
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==LPAREN) ) {
                alt115=1;
            }
            else if ( (LA115_0==IDENT) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);
                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5110);
                    matchRecogPatternNested307=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested307.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5116);
                    matchRecogPatternAtom308=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom308.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN309=null;
        Token RPAREN311=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration310 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN309_tree=null;
        CommonTree RPAREN311_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN309);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5130);
            matchRecogPatternAlteration310=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration310.getTree());
            RPAREN311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN311);
            int alt116=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt116=1;
                    }
                    break;
                case PLUS:
                    {
                    alt116=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt116=3;
                    }
                    break;
            }
            switch (alt116) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==STAR||(LA119_0>=PLUS && LA119_0<=QUESTION)) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    int alt117=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt117=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt117=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt117=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 0, input);
                        throw nvae;
                    }
                    switch (alt117) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5194); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5200); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5206); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( (LA118_0==QUESTION) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE312=null;
        Token COMMA314=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem313 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem315 = null;
        CommonTree DEFINE312_tree=null;
        CommonTree COMMA314_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE312=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE312);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5258);
            matchRecogDefineItem313=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem313.getTree());
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);
                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }
                switch (alt120) {
            	case 1 :
            	    {
            	    COMMA314=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5261); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA314);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5263);
            	    matchRecogDefineItem315=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem315.getTree());
            	    }
            	    break;
            	default :
            	    break loop120;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS316=null;
        EsperEPL2GrammarParser.expression_return expression317 = null;
        CommonTree i_tree=null;
        CommonTree AS316_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS316=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS316);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5294);
            expression317=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression317.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN318=null;
        Token LBRACK319=null;
        Token RBRACK321=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression320 = null;
        CommonTree PATTERN318_tree=null;
        CommonTree LBRACK319_tree=null;
        CommonTree RBRACK321_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN318=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN318);
            LBRACK319=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK319);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5323);
            patternExpression320=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression320.getTree());
            RBRACK321=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK321);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL322=null;
        Token COLON323=null;
        Token LBRACK324=null;
        Token METADATASQL325=null;
        Token RBRACK326=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL322_tree=null;
        CommonTree COLON323_tree=null;
        CommonTree LBRACK324_tree=null;
        CommonTree METADATASQL325_tree=null;
        CommonTree RBRACK326_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL322=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL322);
            COLON323=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON323);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK324=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK324);
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==STRING_LITERAL) ) {
                alt121=1;
            }
            else if ( (LA121_0==QUOTED_STRING_LITERAL) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);
                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==METADATASQL) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    METADATASQL325=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL325);
                    int alt122=2;
                    int LA122_0 = input.LA(1);
                    if ( (LA122_0==STRING_LITERAL) ) {
                        alt122=1;
                    }
                    else if ( (LA122_0==QUOTED_STRING_LITERAL) ) {
                        alt122=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 0, input);
                        throw nvae;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5392); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK326=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK326);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON327=null;
        Token LPAREN329=null;
        Token RPAREN331=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier328 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList330 = null;
        CommonTree i_tree=null;
        CommonTree COLON327_tree=null;
        CommonTree LPAREN329_tree=null;
        CommonTree RPAREN331_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON327=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON327);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5452);
            classIdentifier328=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier328.getTree());
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==LPAREN) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    {
                    LPAREN329=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN329);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==WINDOW||LA124_0==ESCAPE||(LA124_0>=NOT_EXPR && LA124_0<=EVERY_EXPR)||(LA124_0>=SUM && LA124_0<=COUNT)||LA124_0==CASE||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=CURRENT_TIMESTAMP)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=INDEX)||(LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||(LA124_0>=DEFINE && LA124_0<=MATCHES)||LA124_0==WHILE||(LA124_0>=MERGE && LA124_0<=MATCHED)||LA124_0==NUM_DOUBLE||(LA124_0>=IDENT && LA124_0<=LPAREN)||(LA124_0>=PLUS && LA124_0<=QUESTION)||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==MINUS||LA124_0==LCURLY||LA124_0==NUM_INT||(LA124_0>=TICKED_STRING_LITERAL && LA124_0<=NUM_FLOAT)) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5457);
                            expressionList330=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList330.getTree());
                            }
                            break;
                    }
                    RPAREN331=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN331);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token COLON332=null;
        Token LPAREN333=null;
        Token RPAREN335=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList334 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON332_tree=null;
        CommonTree LPAREN333_tree=null;
        CommonTree RPAREN335_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON332=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON332);
            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);
            LPAREN333=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN333);
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==WINDOW||LA126_0==ESCAPE||(LA126_0>=NOT_EXPR && LA126_0<=EVERY_EXPR)||(LA126_0>=SUM && LA126_0<=COUNT)||LA126_0==CASE||LA126_0==OUTER||(LA126_0>=JOIN && LA126_0<=FULL)||(LA126_0>=EVENTS && LA126_0<=LAST)||(LA126_0>=UNIDIRECTIONAL && LA126_0<=CURRENT_TIMESTAMP)||LA126_0==SNAPSHOT||(LA126_0>=VARIABLE && LA126_0<=INDEX)||(LA126_0>=BOOLEAN_TRUE && LA126_0<=VALUE_NULL)||(LA126_0>=DEFINE && LA126_0<=MATCHES)||LA126_0==WHILE||(LA126_0>=MERGE && LA126_0<=MATCHED)||LA126_0==NUM_DOUBLE||(LA126_0>=IDENT && LA126_0<=LPAREN)||LA126_0==LBRACK||LA126_0==STAR||(LA126_0>=PLUS && LA126_0<=QUESTION)||(LA126_0>=STRING_LITERAL && LA126_0<=QUOTED_STRING_LITERAL)||LA126_0==MINUS||LA126_0==LCURLY||LA126_0==NUM_INT||(LA126_0>=TICKED_STRING_LITERAL && LA126_0<=NUM_FLOAT)) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5523);
                    expressionWithTimeList334=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList334.getTree());
                    }
                    break;
            }
            RPAREN335=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN335);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA337=null;
        EsperEPL2GrammarParser.expression_return expression336 = null;
        EsperEPL2GrammarParser.expression_return expression338 = null;
        CommonTree COMMA337_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5565);
            expression336=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression336.getTree());
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);
                if ( (LA127_0==COMMA) ) {
                    alt127=1;
                }
                switch (alt127) {
            	case 1 :
            	    {
            	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5568); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5570);
            	    expression338=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression338.getTree());
            	    }
            	    break;
            	default :
            	    break loop127;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA340=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement339 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement341 = null;
        CommonTree COMMA340_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5605);
            orderByListElement339=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement339.getTree());
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);
                if ( (LA128_0==COMMA) ) {
                    alt128=1;
                }
                switch (alt128) {
            	case 1 :
            	    {
            	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5608); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA340);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5610);
            	    orderByListElement341=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement341.getTree());
            	    }
            	    break;
            	default :
            	    break loop128;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression342 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5635);
            expression342=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression342.getTree());
            int alt129=3;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==ASC) ) {
                alt129=1;
            }
            else if ( (LA129_0==DESC) ) {
                alt129=2;
            }
            switch (alt129) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression343 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5682);
            evalOrExpression343=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression343.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN349=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter344 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod345 = null;
        EsperEPL2GrammarParser.number_return number346 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet347 = null;
        EsperEPL2GrammarParser.expression_return expression348 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr350 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN349_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==AFTER) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5720);
                    outputLimitAfter344=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter344.getTree());
                    }
                    break;
            }
            int alt131=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt131=1;
                    }
                    break;
                case FIRST:
                    {
                    alt131=2;
                    }
                    break;
                case LAST:
                    {
                    alt131=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt131=4;
                    }
                    break;
            }
            switch (alt131) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt135=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt135=1;
                }
                break;
            case AT:
                {
                alt135=2;
                }
                break;
            case WHEN:
                {
                alt135=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt135=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==NUM_INT) ) {
                        int LA133_1 = input.LA(2);
                        if ( (LA133_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==EVENTS) ) {
                            alt133=2;
                        }
                        else if ( (LA133_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA133_0==NUM_LONG) ) {
                        int LA133_2 = input.LA(2);
                        if ( (LA133_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==EVENTS) ) {
                            alt133=2;
                        }
                        else if ( (LA133_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA133_0==NUM_FLOAT) ) {
                        int LA133_3 = input.LA(2);
                        if ( (LA133_3==EVENTS) ) {
                            alt133=2;
                        }
                        else if ( (LA133_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA133_0==NUM_DOUBLE) ) {
                        int LA133_4 = input.LA(2);
                        if ( (LA133_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==EVENTS) ) {
                            alt133=2;
                        }
                        else if ( (LA133_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA133_0==IDENT) ) {
                        int LA133_5 = input.LA(2);
                        if ( (LA133_5==EVENTS) ) {
                            alt133=2;
                        }
                        else if ( (LA133_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else if ( (LA133_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt133=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA133_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt133=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);
                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5804);
                            timePeriod345=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod345.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt132=2;
                            int LA132_0 = input.LA(1);
                            if ( (LA132_0==NUM_DOUBLE||LA132_0==NUM_INT||(LA132_0>=NUM_LONG && LA132_0<=NUM_FLOAT)) ) {
                                alt132=1;
                            }
                            else if ( (LA132_0==IDENT) ) {
                                alt132=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 132, 0, input);
                                throw nvae;
                            }
                            switch (alt132) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5815);
                                    number346=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number346.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5821); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5827); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5860);
                    crontabLimitParameterSet347=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet347.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit5879);
                    expression348=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression348.getTree());
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==THEN) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            THEN349=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5882); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN349);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5884);
                            onSetExpr350=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr350.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS353=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod351 = null;
        EsperEPL2GrammarParser.number_return number352 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS353_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt136=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA136_1 = input.LA(2);
                if ( (LA136_1==EVENTS) ) {
                    alt136=2;
                }
                else if ( (LA136_1==MIN||(LA136_1>=TIMEPERIOD_DAY && LA136_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt136=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA136_2 = input.LA(2);
                if ( (LA136_2==MIN||(LA136_2>=TIMEPERIOD_DAY && LA136_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt136=1;
                }
                else if ( (LA136_2==EVENTS) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA136_3 = input.LA(2);
                if ( (LA136_3==MIN||(LA136_3>=TIMEPERIOD_DAY && LA136_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt136=1;
                }
                else if ( (LA136_3==EVENTS) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA136_4 = input.LA(2);
                if ( (LA136_4==MIN||(LA136_4>=TIMEPERIOD_DAY && LA136_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt136=1;
                }
                else if ( (LA136_4==EVENTS) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt136=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);
                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6037);
                    timePeriod351=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod351.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6041);
                    number352=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number352.getTree());
                    EVENTS353=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS353);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==NUM_DOUBLE||LA137_0==PLUS||LA137_0==MINUS||LA137_0==NUM_INT||(LA137_0>=NUM_LONG && LA137_0<=NUM_FLOAT)) ) {
                alt137=1;
            }
            else if ( (LA137_0==IDENT) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);
                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6089);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==OFFSET||LA140_0==COMMA) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==COMMA) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==OFFSET) ) {
                        alt138=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);
                        throw nvae;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt139=2;
                    int LA139_0 = input.LA(1);
                    if ( (LA139_0==NUM_DOUBLE||LA139_0==PLUS||LA139_0==MINUS||LA139_0==NUM_INT||(LA139_0>=NUM_LONG && LA139_0<=NUM_FLOAT)) ) {
                        alt139=1;
                    }
                    else if ( (LA139_0==IDENT) ) {
                        alt139=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);
                        throw nvae;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6114);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN354=null;
        Token COMMA356=null;
        Token COMMA358=null;
        Token COMMA360=null;
        Token COMMA362=null;
        Token COMMA364=null;
        Token RPAREN366=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime355 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime357 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime359 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime361 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime363 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime365 = null;
        CommonTree LPAREN354_tree=null;
        CommonTree COMMA356_tree=null;
        CommonTree COMMA358_tree=null;
        CommonTree COMMA360_tree=null;
        CommonTree COMMA362_tree=null;
        CommonTree COMMA364_tree=null;
        CommonTree RPAREN366_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN354=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN354);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6174);
            expressionWithTime355=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime355.getTree());
            COMMA356=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA356);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6178);
            expressionWithTime357=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime357.getTree());
            COMMA358=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA358);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6182);
            expressionWithTime359=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime359.getTree());
            COMMA360=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA360);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6186);
            expressionWithTime361=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime361.getTree());
            COMMA362=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA362);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6190);
            expressionWithTime363=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime363.getTree());
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    COMMA364=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA364);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6195);
                    expressionWithTime365=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime365.getTree());
                    }
                    break;
            }
            RPAREN366=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN366);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN367=null;
        Token THEN369=null;
        EsperEPL2GrammarParser.expression_return expression368 = null;
        EsperEPL2GrammarParser.expression_return expression370 = null;
        CommonTree WHEN367_tree=null;
        CommonTree THEN369_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN367=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6229); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6232);
            expression368=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression368.getTree());
            THEN369=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6234); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6237);
            expression370=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression370.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE371=null;
        EsperEPL2GrammarParser.expression_return expression372 = null;
        CommonTree ELSE371_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE371=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6250); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6253);
            expression372=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression372.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression373 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6266);
            caseExpression373=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression373.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE374=null;
        Token END377=null;
        Token CASE378=null;
        Token END382=null;
        EsperEPL2GrammarParser.whenClause_return whenClause375 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause376 = null;
        EsperEPL2GrammarParser.expression_return expression379 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause380 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause381 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression383 = null;
        CommonTree CASE374_tree=null;
        CommonTree END377_tree=null;
        CommonTree CASE378_tree=null;
        CommonTree END382_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt146=3;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==CASE) ) {
                int LA146_1 = input.LA(2);
                if ( (LA146_1==WHEN) ) {
                    alt146=1;
                }
                else if ( (LA146_1==WINDOW||LA146_1==ESCAPE||(LA146_1>=NOT_EXPR && LA146_1<=EVERY_EXPR)||(LA146_1>=SUM && LA146_1<=COUNT)||LA146_1==CASE||LA146_1==OUTER||(LA146_1>=JOIN && LA146_1<=FULL)||(LA146_1>=EVENTS && LA146_1<=LAST)||(LA146_1>=UNIDIRECTIONAL && LA146_1<=CURRENT_TIMESTAMP)||LA146_1==SNAPSHOT||(LA146_1>=VARIABLE && LA146_1<=INDEX)||(LA146_1>=BOOLEAN_TRUE && LA146_1<=VALUE_NULL)||(LA146_1>=DEFINE && LA146_1<=MATCHES)||LA146_1==WHILE||(LA146_1>=MERGE && LA146_1<=MATCHED)||LA146_1==NUM_DOUBLE||(LA146_1>=IDENT && LA146_1<=LPAREN)||(LA146_1>=PLUS && LA146_1<=QUESTION)||(LA146_1>=STRING_LITERAL && LA146_1<=QUOTED_STRING_LITERAL)||LA146_1==MINUS||LA146_1==LCURLY||LA146_1==NUM_INT||(LA146_1>=TICKED_STRING_LITERAL && LA146_1<=NUM_FLOAT)) ) {
                    alt146=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA146_0==WINDOW||LA146_0==ESCAPE||(LA146_0>=NOT_EXPR && LA146_0<=EVERY_EXPR)||(LA146_0>=SUM && LA146_0<=COUNT)||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||(LA146_0>=EVENTS && LA146_0<=LAST)||(LA146_0>=UNIDIRECTIONAL && LA146_0<=CURRENT_TIMESTAMP)||LA146_0==SNAPSHOT||(LA146_0>=VARIABLE && LA146_0<=INDEX)||(LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||(LA146_0>=DEFINE && LA146_0<=MATCHES)||LA146_0==WHILE||(LA146_0>=MERGE && LA146_0<=MATCHED)||LA146_0==NUM_DOUBLE||(LA146_0>=IDENT && LA146_0<=LPAREN)||(LA146_0>=PLUS && LA146_0<=QUESTION)||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==MINUS||LA146_0==LCURLY||LA146_0==NUM_INT||(LA146_0>=TICKED_STRING_LITERAL && LA146_0<=NUM_FLOAT)) ) {
                alt146=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);
                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE374=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE374_tree = (CommonTree)adaptor.create(CASE374);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE374_tree, root_0);
                    }
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);
                        if ( (LA142_0==WHEN) ) {
                            alt142=1;
                        }
                        switch (alt142) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6283);
                    	    whenClause375=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause375.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( (LA143_0==ELSE) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6286);
                            elseClause376=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause376.getTree());
                            }
                            break;
                    }
                    END377=(Token)match(input,END,FOLLOW_END_in_caseExpression6289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE378=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE378);
                    pushFollow(FOLLOW_expression_in_caseExpression6302);
                    expression379=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression379.getTree());
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);
                        if ( (LA144_0==WHEN) ) {
                            alt144=1;
                        }
                        switch (alt144) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6304);
                    	    whenClause380=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause380.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);
                    int alt145=2;
                    int LA145_0 = input.LA(1);
                    if ( (LA145_0==ELSE) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6307);
                            elseClause381=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause381.getTree());
                            }
                            break;
                    }
                    END382=(Token)match(input,END,FOLLOW_END_in_caseExpression6310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END382);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6334);
                    evalOrExpression383=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression383.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression384 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression385 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6345);
            evalAndExpression384=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression384.getTree());
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);
                if ( (LA147_0==OR_EXPR) ) {
                    alt147=1;
                }
                switch (alt147) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6350); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6352);
            	    evalAndExpression385=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression385.getTree());
            	    }
            	    break;
            	default :
            	    break loop147;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression386 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression387 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6384);
            bitWiseExpression386=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression386.getTree());
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);
                if ( (LA148_0==AND_EXPR) ) {
                    alt148=1;
                }
                switch (alt148) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6389); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6391);
            	    bitWiseExpression387=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression387.getTree());
            	    }
            	    break;
            	default :
            	    break loop148;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND389=null;
        Token BOR390=null;
        Token BXOR391=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression388 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression392 = null;
        CommonTree BAND389_tree=null;
        CommonTree BOR390_tree=null;
        CommonTree BXOR391_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6423);
            negatedExpression388=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression388.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==BOR||(LA150_0>=BAND && LA150_0<=BXOR)) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    int alt149=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt149=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt149=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt149=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 149, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt149) {
            	        case 1 :
            	            {
            	            BAND389=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6428); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND389_tree = (CommonTree)adaptor.create(BAND389);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND389_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR390=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6431); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR390_tree = (CommonTree)adaptor.create(BOR390);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR390_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR391=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6434); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR391_tree = (CommonTree)adaptor.create(BXOR391);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR391_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6438);
            	    negatedExpression392=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression392.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR394=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression393 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression395 = null;
        CommonTree NOT_EXPR394_tree=null;
        try {
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==WINDOW||LA151_0==ESCAPE||LA151_0==EVERY_EXPR||(LA151_0>=SUM && LA151_0<=COUNT)||LA151_0==OUTER||(LA151_0>=JOIN && LA151_0<=FULL)||(LA151_0>=EVENTS && LA151_0<=LAST)||(LA151_0>=UNIDIRECTIONAL && LA151_0<=CURRENT_TIMESTAMP)||LA151_0==SNAPSHOT||(LA151_0>=VARIABLE && LA151_0<=INDEX)||(LA151_0>=BOOLEAN_TRUE && LA151_0<=VALUE_NULL)||(LA151_0>=DEFINE && LA151_0<=MATCHES)||LA151_0==WHILE||(LA151_0>=MERGE && LA151_0<=MATCHED)||LA151_0==NUM_DOUBLE||(LA151_0>=IDENT && LA151_0<=LPAREN)||(LA151_0>=PLUS && LA151_0<=QUESTION)||(LA151_0>=STRING_LITERAL && LA151_0<=QUOTED_STRING_LITERAL)||LA151_0==MINUS||LA151_0==LCURLY||LA151_0==NUM_INT||(LA151_0>=TICKED_STRING_LITERAL && LA151_0<=NUM_FLOAT)) ) {
                alt151=1;
            }
            else if ( (LA151_0==NOT_EXPR) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);
                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6453);
                    evalEqualsExpression393=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression393.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR394=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR394_tree = (CommonTree)adaptor.create(NOT_EXPR394);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR394_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6462);
                    evalEqualsExpression395=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression395.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR397=null;
        Token LPAREN399=null;
        Token RPAREN401=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression396 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression398 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList400 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression402 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR397_tree=null;
        CommonTree LPAREN399_tree=null;
        CommonTree RPAREN401_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6475);
            evalRelationalExpression396=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression396.getTree());
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);
                if ( (LA157_0==IS||LA157_0==EQUALS||(LA157_0>=SQL_NE && LA157_0<=NOT_EQUAL)) ) {
                    alt157=1;
                }
                switch (alt157) {
            	case 1 :
            	    {
            	    int alt152=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt152=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA152_2 = input.LA(2);
            	        if ( (LA152_2==NOT_EXPR) ) {
            	            alt152=3;
            	        }
            	        else if ( (LA152_2==WINDOW||LA152_2==ESCAPE||LA152_2==EVERY_EXPR||(LA152_2>=SUM && LA152_2<=COUNT)||LA152_2==OUTER||(LA152_2>=JOIN && LA152_2<=FULL)||(LA152_2>=ALL && LA152_2<=SOME)||(LA152_2>=EVENTS && LA152_2<=LAST)||(LA152_2>=UNIDIRECTIONAL && LA152_2<=CURRENT_TIMESTAMP)||LA152_2==SNAPSHOT||(LA152_2>=VARIABLE && LA152_2<=INDEX)||(LA152_2>=BOOLEAN_TRUE && LA152_2<=VALUE_NULL)||(LA152_2>=DEFINE && LA152_2<=MATCHES)||LA152_2==WHILE||(LA152_2>=MERGE && LA152_2<=MATCHED)||LA152_2==NUM_DOUBLE||(LA152_2>=IDENT && LA152_2<=LPAREN)||(LA152_2>=PLUS && LA152_2<=QUESTION)||(LA152_2>=STRING_LITERAL && LA152_2<=QUOTED_STRING_LITERAL)||LA152_2==MINUS||LA152_2==LCURLY||LA152_2==NUM_INT||(LA152_2>=TICKED_STRING_LITERAL && LA152_2<=NUM_FLOAT)) ) {
            	            alt152=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 152, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt152=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt152=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6488); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6506); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6520); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR397=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6522); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR397);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6536); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6550); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt156=2;
            	    int LA156_0 = input.LA(1);
            	    if ( (LA156_0==WINDOW||LA156_0==ESCAPE||LA156_0==EVERY_EXPR||(LA156_0>=SUM && LA156_0<=COUNT)||LA156_0==OUTER||(LA156_0>=JOIN && LA156_0<=FULL)||(LA156_0>=EVENTS && LA156_0<=LAST)||(LA156_0>=UNIDIRECTIONAL && LA156_0<=CURRENT_TIMESTAMP)||LA156_0==SNAPSHOT||(LA156_0>=VARIABLE && LA156_0<=INDEX)||(LA156_0>=BOOLEAN_TRUE && LA156_0<=VALUE_NULL)||(LA156_0>=DEFINE && LA156_0<=MATCHES)||LA156_0==WHILE||(LA156_0>=MERGE && LA156_0<=MATCHED)||LA156_0==NUM_DOUBLE||(LA156_0>=IDENT && LA156_0<=LPAREN)||(LA156_0>=PLUS && LA156_0<=QUESTION)||(LA156_0>=STRING_LITERAL && LA156_0<=QUOTED_STRING_LITERAL)||LA156_0==MINUS||LA156_0==LCURLY||LA156_0==NUM_INT||(LA156_0>=TICKED_STRING_LITERAL && LA156_0<=NUM_FLOAT)) ) {
            	        alt156=1;
            	    }
            	    else if ( ((LA156_0>=ALL && LA156_0<=SOME)) ) {
            	        alt156=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 156, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt156) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6580);
            	            evalRelationalExpression398=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression398.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt153=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt153=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt153=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt153=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 153, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt153) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6597); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6603); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6609); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt155=2;
            	            int LA155_0 = input.LA(1);
            	            if ( (LA155_0==LPAREN) ) {
            	                int LA155_1 = input.LA(2);
            	                if ( (LA155_1==SELECT) ) {
            	                    alt155=2;
            	                }
            	                else if ( (LA155_1==WINDOW||LA155_1==ESCAPE||(LA155_1>=NOT_EXPR && LA155_1<=EVERY_EXPR)||(LA155_1>=SUM && LA155_1<=COUNT)||LA155_1==CASE||LA155_1==OUTER||(LA155_1>=JOIN && LA155_1<=FULL)||(LA155_1>=EVENTS && LA155_1<=LAST)||(LA155_1>=UNIDIRECTIONAL && LA155_1<=CURRENT_TIMESTAMP)||LA155_1==SNAPSHOT||(LA155_1>=VARIABLE && LA155_1<=INDEX)||(LA155_1>=BOOLEAN_TRUE && LA155_1<=VALUE_NULL)||(LA155_1>=DEFINE && LA155_1<=MATCHES)||LA155_1==WHILE||(LA155_1>=MERGE && LA155_1<=MATCHED)||LA155_1==NUM_DOUBLE||(LA155_1>=IDENT && LA155_1<=RPAREN)||(LA155_1>=PLUS && LA155_1<=QUESTION)||(LA155_1>=STRING_LITERAL && LA155_1<=QUOTED_STRING_LITERAL)||LA155_1==MINUS||LA155_1==LCURLY||LA155_1==NUM_INT||(LA155_1>=TICKED_STRING_LITERAL && LA155_1<=NUM_FLOAT)) ) {
            	                    alt155=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 155, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 155, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt155) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN399=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6615); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN399);
            	                    int alt154=2;
            	                    int LA154_0 = input.LA(1);
            	                    if ( (LA154_0==WINDOW||LA154_0==ESCAPE||(LA154_0>=NOT_EXPR && LA154_0<=EVERY_EXPR)||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==CASE||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||(LA154_0>=MERGE && LA154_0<=MATCHED)||LA154_0==NUM_DOUBLE||(LA154_0>=IDENT && LA154_0<=LPAREN)||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
            	                        alt154=1;
            	                    }
            	                    switch (alt154) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6617);
            	                            expressionList400=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList400.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN401=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6620); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN401);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6625);
            	                    subSelectGroupExpression402=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression402.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN405=null;
        Token RPAREN407=null;
        Token COMMA411=null;
        Token IN_SET413=null;
        Token BETWEEN415=null;
        Token LIKE417=null;
        Token ESCAPE419=null;
        Token REGEXP421=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr403 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr404 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList406 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression408 = null;
        EsperEPL2GrammarParser.expression_return expression409 = null;
        EsperEPL2GrammarParser.expression_return expression410 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery414 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList416 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr418 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant420 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr422 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN405_tree=null;
        CommonTree RPAREN407_tree=null;
        CommonTree COMMA411_tree=null;
        CommonTree IN_SET413_tree=null;
        CommonTree BETWEEN415_tree=null;
        CommonTree LIKE417_tree=null;
        CommonTree ESCAPE419_tree=null;
        CommonTree REGEXP421_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6753);
            concatenationExpr403=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr403.getTree());
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==EOF||(LA171_0>=OR_EXPR && LA171_0<=AND_EXPR)||(LA171_0>=WHERE && LA171_0<=AS)||(LA171_0>=ELSE && LA171_0<=FROM)||LA171_0==IS||(LA171_0>=GROUP && LA171_0<=HAVING)||LA171_0==ALL||LA171_0==OUTPUT||LA171_0==INSERT||(LA171_0>=ORDER && LA171_0<=DESC)||LA171_0==PATTERN||(LA171_0>=TIMEPERIOD_SEC && LA171_0<=TIMEPERIOD_SECONDS)||LA171_0==ROW_LIMIT_EXPR||LA171_0==MEASURES||(LA171_0>=AFTER && LA171_0<=FOR)||LA171_0==COMMA||(LA171_0>=RPAREN && LA171_0<=EQUALS)||LA171_0==RBRACK||LA171_0==BOR||LA171_0==COLON||(LA171_0>=BAND && LA171_0<=GE)||LA171_0==RCURLY) ) {
                alt171=1;
            }
            else if ( ((LA171_0>=IN_SET && LA171_0<=REGEXP)||LA171_0==NOT_EXPR) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);
                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    {
                    {
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);
                        if ( ((LA163_0>=LT && LA163_0<=GE)) ) {
                            alt163=1;
                        }
                        switch (alt163) {
                    	case 1 :
                    	    {
                    	    int alt158=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt158=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt158=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt158=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt158=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 158, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt158) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6785); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6789); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6793); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6797); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt162=2;
                    	    int LA162_0 = input.LA(1);
                    	    if ( (LA162_0==WINDOW||LA162_0==ESCAPE||LA162_0==EVERY_EXPR||(LA162_0>=SUM && LA162_0<=COUNT)||LA162_0==OUTER||(LA162_0>=JOIN && LA162_0<=FULL)||(LA162_0>=EVENTS && LA162_0<=LAST)||(LA162_0>=UNIDIRECTIONAL && LA162_0<=CURRENT_TIMESTAMP)||LA162_0==SNAPSHOT||(LA162_0>=VARIABLE && LA162_0<=INDEX)||(LA162_0>=BOOLEAN_TRUE && LA162_0<=VALUE_NULL)||(LA162_0>=DEFINE && LA162_0<=MATCHES)||LA162_0==WHILE||(LA162_0>=MERGE && LA162_0<=MATCHED)||LA162_0==NUM_DOUBLE||(LA162_0>=IDENT && LA162_0<=LPAREN)||(LA162_0>=PLUS && LA162_0<=QUESTION)||(LA162_0>=STRING_LITERAL && LA162_0<=QUOTED_STRING_LITERAL)||LA162_0==MINUS||LA162_0==LCURLY||LA162_0==NUM_INT||(LA162_0>=TICKED_STRING_LITERAL && LA162_0<=NUM_FLOAT)) ) {
                    	        alt162=1;
                    	    }
                    	    else if ( ((LA162_0>=ALL && LA162_0<=SOME)) ) {
                    	        alt162=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 162, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt162) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6821);
                    	            concatenationExpr404=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr404.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt159=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt159=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt159=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt159=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 159, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt159) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6838); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6844); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6850); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt161=2;
                    	            int LA161_0 = input.LA(1);
                    	            if ( (LA161_0==LPAREN) ) {
                    	                int LA161_1 = input.LA(2);
                    	                if ( (LA161_1==SELECT) ) {
                    	                    alt161=2;
                    	                }
                    	                else if ( (LA161_1==WINDOW||LA161_1==ESCAPE||(LA161_1>=NOT_EXPR && LA161_1<=EVERY_EXPR)||(LA161_1>=SUM && LA161_1<=COUNT)||LA161_1==CASE||LA161_1==OUTER||(LA161_1>=JOIN && LA161_1<=FULL)||(LA161_1>=EVENTS && LA161_1<=LAST)||(LA161_1>=UNIDIRECTIONAL && LA161_1<=CURRENT_TIMESTAMP)||LA161_1==SNAPSHOT||(LA161_1>=VARIABLE && LA161_1<=INDEX)||(LA161_1>=BOOLEAN_TRUE && LA161_1<=VALUE_NULL)||(LA161_1>=DEFINE && LA161_1<=MATCHES)||LA161_1==WHILE||(LA161_1>=MERGE && LA161_1<=MATCHED)||LA161_1==NUM_DOUBLE||(LA161_1>=IDENT && LA161_1<=RPAREN)||(LA161_1>=PLUS && LA161_1<=QUESTION)||(LA161_1>=STRING_LITERAL && LA161_1<=QUOTED_STRING_LITERAL)||LA161_1==MINUS||LA161_1==LCURLY||LA161_1==NUM_INT||(LA161_1>=TICKED_STRING_LITERAL && LA161_1<=NUM_FLOAT)) ) {
                    	                    alt161=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 161, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 161, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt161) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN405=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6856); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN405);
                    	                    int alt160=2;
                    	                    int LA160_0 = input.LA(1);
                    	                    if ( (LA160_0==WINDOW||LA160_0==ESCAPE||(LA160_0>=NOT_EXPR && LA160_0<=EVERY_EXPR)||(LA160_0>=SUM && LA160_0<=COUNT)||LA160_0==CASE||LA160_0==OUTER||(LA160_0>=JOIN && LA160_0<=FULL)||(LA160_0>=EVENTS && LA160_0<=LAST)||(LA160_0>=UNIDIRECTIONAL && LA160_0<=CURRENT_TIMESTAMP)||LA160_0==SNAPSHOT||(LA160_0>=VARIABLE && LA160_0<=INDEX)||(LA160_0>=BOOLEAN_TRUE && LA160_0<=VALUE_NULL)||(LA160_0>=DEFINE && LA160_0<=MATCHES)||LA160_0==WHILE||(LA160_0>=MERGE && LA160_0<=MATCHED)||LA160_0==NUM_DOUBLE||(LA160_0>=IDENT && LA160_0<=LPAREN)||(LA160_0>=PLUS && LA160_0<=QUESTION)||(LA160_0>=STRING_LITERAL && LA160_0<=QUOTED_STRING_LITERAL)||LA160_0==MINUS||LA160_0==LCURLY||LA160_0==NUM_INT||(LA160_0>=TICKED_STRING_LITERAL && LA160_0<=NUM_FLOAT)) ) {
                    	                        alt160=1;
                    	                    }
                    	                    switch (alt160) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6858);
                    	                            expressionList406=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList406.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN407=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6861); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN407);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6866);
                    	                    subSelectGroupExpression408=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression408.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop163;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt164=2;
                    int LA164_0 = input.LA(1);
                    if ( (LA164_0==NOT_EXPR) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6962); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt170=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA170_1 = input.LA(2);
                        if ( (LA170_1==LPAREN) ) {
                            int LA170_5 = input.LA(3);
                            if ( (LA170_5==SELECT) ) {
                                alt170=2;
                            }
                            else if ( (LA170_5==WINDOW||LA170_5==ESCAPE||(LA170_5>=NOT_EXPR && LA170_5<=EVERY_EXPR)||(LA170_5>=SUM && LA170_5<=COUNT)||LA170_5==CASE||LA170_5==OUTER||(LA170_5>=JOIN && LA170_5<=FULL)||(LA170_5>=EVENTS && LA170_5<=LAST)||(LA170_5>=UNIDIRECTIONAL && LA170_5<=CURRENT_TIMESTAMP)||LA170_5==SNAPSHOT||(LA170_5>=VARIABLE && LA170_5<=INDEX)||(LA170_5>=BOOLEAN_TRUE && LA170_5<=VALUE_NULL)||(LA170_5>=DEFINE && LA170_5<=MATCHES)||LA170_5==WHILE||(LA170_5>=MERGE && LA170_5<=MATCHED)||LA170_5==NUM_DOUBLE||(LA170_5>=IDENT && LA170_5<=LPAREN)||(LA170_5>=PLUS && LA170_5<=QUESTION)||(LA170_5>=STRING_LITERAL && LA170_5<=QUOTED_STRING_LITERAL)||LA170_5==MINUS||LA170_5==LCURLY||LA170_5==NUM_INT||(LA170_5>=TICKED_STRING_LITERAL && LA170_5<=NUM_FLOAT)) ) {
                                alt170=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA170_1==LBRACK) ) {
                            alt170=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt170=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt170=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt170=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);
                        throw nvae;
                    }
                    switch (alt170) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6989); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt165=2;
                            int LA165_0 = input.LA(1);
                            if ( (LA165_0==LPAREN) ) {
                                alt165=1;
                            }
                            else if ( (LA165_0==LBRACK) ) {
                                alt165=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 165, 0, input);
                                throw nvae;
                            }
                            switch (alt165) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7001); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7007); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7010);
                            expression409=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression409.getTree());
                            int alt167=2;
                            int LA167_0 = input.LA(1);
                            if ( (LA167_0==COLON) ) {
                                alt167=1;
                            }
                            else if ( (LA167_0==COMMA||LA167_0==RPAREN||LA167_0==RBRACK) ) {
                                alt167=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 167, 0, input);
                                throw nvae;
                            }
                            switch (alt167) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7032); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7035);
                                    expression410=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression410.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop166:
                                    do {
                                        int alt166=2;
                                        int LA166_0 = input.LA(1);
                                        if ( (LA166_0==COMMA) ) {
                                            alt166=1;
                                        }
                                        switch (alt166) {
                                    	case 1 :
                                    	    {
                                    	    COMMA411=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7061); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA411);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7063);
                                    	    expression412=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop166;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt168=2;
                            int LA168_0 = input.LA(1);
                            if ( (LA168_0==RPAREN) ) {
                                alt168=1;
                            }
                            else if ( (LA168_0==RBRACK) ) {
                                alt168=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 168, 0, input);
                                throw nvae;
                            }
                            switch (alt168) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7089); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7095); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET413=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7218); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET413);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7220);
                            inSubSelectQuery414=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery414.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN415=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7266); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN415);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7268);
                            betweenList416=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList416.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE417=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7318); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE417);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7320);
                            concatenationExpr418=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr418.getTree());
                            int alt169=2;
                            int LA169_0 = input.LA(1);
                            if ( (LA169_0==ESCAPE) ) {
                                alt169=1;
                            }
                            switch (alt169) {
                                case 1 :
                                    {
                                    ESCAPE419=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7323); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE419);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7325);
                                    stringconstant420=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant420.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP421=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7377); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP421);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7379);
                            concatenationExpr422=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr422.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr423 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7441);
            subQueryExpr423=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr423.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR426=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression424 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression425 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression427 = null;
        CommonTree c_tree=null;
        CommonTree LOR426_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7466);
            additiveExpression424=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression424.getTree());
            int alt173=2;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==LOR) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7474);
                    additiveExpression425=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression425.getTree());
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);
                        if ( (LA172_0==LOR) ) {
                            alt172=1;
                        }
                        switch (alt172) {
                    	case 1 :
                    	    {
                    	    LOR426=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7478); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR426);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7480);
                    	    additiveExpression427=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression427.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop172;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS429=null;
        Token MINUS430=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression428 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression431 = null;
        CommonTree PLUS429_tree=null;
        CommonTree MINUS430_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7521);
            multiplyExpression428=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression428.getTree());
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);
                if ( (LA175_0==PLUS||LA175_0==MINUS) ) {
                    alt175=1;
                }
                switch (alt175) {
            	case 1 :
            	    {
            	    int alt174=2;
            	    int LA174_0 = input.LA(1);
            	    if ( (LA174_0==PLUS) ) {
            	        alt174=1;
            	    }
            	    else if ( (LA174_0==MINUS) ) {
            	        alt174=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 174, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt174) {
            	        case 1 :
            	            {
            	            PLUS429=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7526); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS429_tree = (CommonTree)adaptor.create(PLUS429);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS429_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS430=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7529); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS430_tree = (CommonTree)adaptor.create(MINUS430);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS430_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7533);
            	    multiplyExpression431=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression431.getTree());
            	    }
            	    break;
            	default :
            	    break loop175;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR433=null;
        Token DIV434=null;
        Token MOD435=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression432 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression436 = null;
        CommonTree STAR433_tree=null;
        CommonTree DIV434_tree=null;
        CommonTree MOD435_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7547);
            unaryExpression432=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression432.getTree());
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);
                if ( (LA177_0==STAR||(LA177_0>=DIV && LA177_0<=MOD)) ) {
                    alt177=1;
                }
                switch (alt177) {
            	case 1 :
            	    {
            	    int alt176=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt176=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt176=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt176=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 176, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt176) {
            	        case 1 :
            	            {
            	            STAR433=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7552); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR433_tree = (CommonTree)adaptor.create(STAR433);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR433_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV434=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7555); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV434_tree = (CommonTree)adaptor.create(DIV434);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV434_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD435=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7558); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD435_tree = (CommonTree)adaptor.create(MOD435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD435_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7562);
            	    unaryExpression436=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression436.getTree());
            	    }
            	    break;
            	default :
            	    break loop177;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS437=null;
        Token LPAREN441=null;
        Token RPAREN443=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty438 = null;
        EsperEPL2GrammarParser.constant_return constant439 = null;
        EsperEPL2GrammarParser.substitution_return substitution440 = null;
        EsperEPL2GrammarParser.expression_return expression442 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass444 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass445 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction446 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc447 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression448 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression449 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression450 = null;
        CommonTree d_tree=null;
        CommonTree MINUS437_tree=null;
        CommonTree LPAREN441_tree=null;
        CommonTree RPAREN443_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt180=9;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    {
                    MINUS437=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS437);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7579);
                    eventProperty438=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty438.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7592);
                    constant439=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant439.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7597);
                    substitution440=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution440.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN441=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN441);
                    pushFollow(FOLLOW_expression_in_unaryExpression7604);
                    expression442=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                    RPAREN443=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN443);
                    int alt179=2;
                    int LA179_0 = input.LA(1);
                    if ( (LA179_0==DOT) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7611); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7613);
                            libFunctionNoClass444=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass444.getTree());
                            loop178:
                            do {
                                int alt178=2;
                                int LA178_0 = input.LA(1);
                                if ( (LA178_0==DOT) ) {
                                    alt178=1;
                                }
                                switch (alt178) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7618); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7620);
                            	    libFunctionNoClass445=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass445.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop178;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7657);
                    eventPropertyOrLibFunction446=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction446.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7669);
                    builtinFunc447=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc447.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7675);
                    arrayExpression448=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression448.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7680);
                    subSelectExpression449=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression449.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7685);
                    existsSubSelectExpression450=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression450.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr451 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7702);
            subQueryExpr451=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr451.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr452 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7724);
            subQueryExpr452=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr452.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS453=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr454 = null;
        CommonTree EXISTS453_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS453=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS453);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7748);
            subQueryExpr454=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr454.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN455=null;
        Token SELECT456=null;
        Token DISTINCT457=null;
        Token FROM459=null;
        Token WHERE461=null;
        Token RPAREN463=null;
        EsperEPL2GrammarParser.selectionList_return selectionList458 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr460 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause462 = null;
        CommonTree LPAREN455_tree=null;
        CommonTree SELECT456_tree=null;
        CommonTree DISTINCT457_tree=null;
        CommonTree FROM459_tree=null;
        CommonTree WHERE461_tree=null;
        CommonTree RPAREN463_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN455=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7781); if (state.failed) return retval;
            SELECT456=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7787); if (state.failed) return retval;
            int alt181=2;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==DISTINCT) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    DISTINCT457=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT457_tree = (CommonTree)adaptor.create(DISTINCT457);
                    adaptor.addChild(root_0, DISTINCT457_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7793);
            selectionList458=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList458.getTree());
            FROM459=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7800); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7803);
            subSelectFilterExpr460=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr460.getTree());
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==WHERE) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    WHERE461=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7811); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7814);
                    whereClause462=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause462.getTree());
                    }
                    break;
            }
            RPAREN463=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7823); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT465=null;
        Token DOT467=null;
        Token AS469=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression464 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression466 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression468 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT465_tree=null;
        CommonTree DOT467_tree=null;
        CommonTree AS469_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7847);
            eventFilterExpression464=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression464.getTree());
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==DOT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    DOT465=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT465);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7854);
                    viewExpression466=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression466.getTree());
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);
                        if ( (LA183_0==DOT) ) {
                            alt183=1;
                        }
                        switch (alt183) {
                    	case 1 :
                    	    {
                    	    DOT467=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7857); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT467);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7859);
                    	    viewExpression468=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression468.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop183;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt185=3;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==AS) ) {
                alt185=1;
            }
            else if ( (LA185_0==IDENT) ) {
                alt185=2;
            }
            switch (alt185) {
                case 1 :
                    {
                    AS469=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS469);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt186=3;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==RETAINUNION) ) {
                alt186=1;
            }
            else if ( (LA186_0==RETAININTERSECTION) ) {
                alt186=2;
            }
            switch (alt186) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY470=null;
        Token COMMA472=null;
        Token RCURLY474=null;
        EsperEPL2GrammarParser.expression_return expression471 = null;
        EsperEPL2GrammarParser.expression_return expression473 = null;
        CommonTree LCURLY470_tree=null;
        CommonTree COMMA472_tree=null;
        CommonTree RCURLY474_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY470=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY470);
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==WINDOW||LA188_0==ESCAPE||(LA188_0>=NOT_EXPR && LA188_0<=EVERY_EXPR)||(LA188_0>=SUM && LA188_0<=COUNT)||LA188_0==CASE||LA188_0==OUTER||(LA188_0>=JOIN && LA188_0<=FULL)||(LA188_0>=EVENTS && LA188_0<=LAST)||(LA188_0>=UNIDIRECTIONAL && LA188_0<=CURRENT_TIMESTAMP)||LA188_0==SNAPSHOT||(LA188_0>=VARIABLE && LA188_0<=INDEX)||(LA188_0>=BOOLEAN_TRUE && LA188_0<=VALUE_NULL)||(LA188_0>=DEFINE && LA188_0<=MATCHES)||LA188_0==WHILE||(LA188_0>=MERGE && LA188_0<=MATCHED)||LA188_0==NUM_DOUBLE||(LA188_0>=IDENT && LA188_0<=LPAREN)||(LA188_0>=PLUS && LA188_0<=QUESTION)||(LA188_0>=STRING_LITERAL && LA188_0<=QUOTED_STRING_LITERAL)||LA188_0==MINUS||LA188_0==LCURLY||LA188_0==NUM_INT||(LA188_0>=TICKED_STRING_LITERAL && LA188_0<=NUM_FLOAT)) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7930);
                    expression471=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression471.getTree());
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);
                        if ( (LA187_0==COMMA) ) {
                            alt187=1;
                        }
                        switch (alt187) {
                    	case 1 :
                    	    {
                    	    COMMA472=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7933); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA472);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression7935);
                    	    expression473=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression473.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop187;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY474=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY474);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM475=null;
        Token LPAREN476=null;
        Token ALL477=null;
        Token DISTINCT478=null;
        Token RPAREN480=null;
        Token AVG481=null;
        Token LPAREN482=null;
        Token ALL483=null;
        Token DISTINCT484=null;
        Token RPAREN486=null;
        Token COUNT487=null;
        Token LPAREN488=null;
        Token ALL489=null;
        Token DISTINCT490=null;
        Token STAR492=null;
        Token RPAREN493=null;
        Token MEDIAN494=null;
        Token LPAREN495=null;
        Token ALL496=null;
        Token DISTINCT497=null;
        Token RPAREN499=null;
        Token STDDEV500=null;
        Token LPAREN501=null;
        Token ALL502=null;
        Token DISTINCT503=null;
        Token RPAREN505=null;
        Token AVEDEV506=null;
        Token LPAREN507=null;
        Token ALL508=null;
        Token DISTINCT509=null;
        Token RPAREN511=null;
        Token COALESCE515=null;
        Token LPAREN516=null;
        Token COMMA518=null;
        Token COMMA520=null;
        Token RPAREN522=null;
        Token PREVIOUS523=null;
        Token LPAREN524=null;
        Token COMMA526=null;
        Token RPAREN528=null;
        Token PREVIOUSTAIL529=null;
        Token LPAREN530=null;
        Token COMMA532=null;
        Token RPAREN534=null;
        Token PREVIOUSCOUNT535=null;
        Token LPAREN536=null;
        Token RPAREN538=null;
        Token PREVIOUSWINDOW539=null;
        Token LPAREN540=null;
        Token RPAREN542=null;
        Token PRIOR543=null;
        Token LPAREN544=null;
        Token NUM_INT545=null;
        Token COMMA546=null;
        Token RPAREN548=null;
        Token INSTANCEOF549=null;
        Token LPAREN550=null;
        Token COMMA552=null;
        Token COMMA554=null;
        Token RPAREN556=null;
        Token CAST557=null;
        Token LPAREN558=null;
        Token COMMA560=null;
        Token AS561=null;
        Token RPAREN563=null;
        Token EXISTS564=null;
        Token LPAREN565=null;
        Token RPAREN567=null;
        Token CURRENT_TIMESTAMP568=null;
        Token LPAREN569=null;
        Token RPAREN570=null;
        EsperEPL2GrammarParser.expression_return expression479 = null;
        EsperEPL2GrammarParser.expression_return expression485 = null;
        EsperEPL2GrammarParser.expression_return expression491 = null;
        EsperEPL2GrammarParser.expression_return expression498 = null;
        EsperEPL2GrammarParser.expression_return expression504 = null;
        EsperEPL2GrammarParser.expression_return expression510 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation512 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation513 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation514 = null;
        EsperEPL2GrammarParser.expression_return expression517 = null;
        EsperEPL2GrammarParser.expression_return expression519 = null;
        EsperEPL2GrammarParser.expression_return expression521 = null;
        EsperEPL2GrammarParser.expression_return expression525 = null;
        EsperEPL2GrammarParser.expression_return expression527 = null;
        EsperEPL2GrammarParser.expression_return expression531 = null;
        EsperEPL2GrammarParser.expression_return expression533 = null;
        EsperEPL2GrammarParser.expression_return expression537 = null;
        EsperEPL2GrammarParser.expression_return expression541 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty547 = null;
        EsperEPL2GrammarParser.expression_return expression551 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier553 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier555 = null;
        EsperEPL2GrammarParser.expression_return expression559 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier562 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty566 = null;
        CommonTree SUM475_tree=null;
        CommonTree LPAREN476_tree=null;
        CommonTree ALL477_tree=null;
        CommonTree DISTINCT478_tree=null;
        CommonTree RPAREN480_tree=null;
        CommonTree AVG481_tree=null;
        CommonTree LPAREN482_tree=null;
        CommonTree ALL483_tree=null;
        CommonTree DISTINCT484_tree=null;
        CommonTree RPAREN486_tree=null;
        CommonTree COUNT487_tree=null;
        CommonTree LPAREN488_tree=null;
        CommonTree ALL489_tree=null;
        CommonTree DISTINCT490_tree=null;
        CommonTree STAR492_tree=null;
        CommonTree RPAREN493_tree=null;
        CommonTree MEDIAN494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree ALL496_tree=null;
        CommonTree DISTINCT497_tree=null;
        CommonTree RPAREN499_tree=null;
        CommonTree STDDEV500_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree ALL502_tree=null;
        CommonTree DISTINCT503_tree=null;
        CommonTree RPAREN505_tree=null;
        CommonTree AVEDEV506_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree ALL508_tree=null;
        CommonTree DISTINCT509_tree=null;
        CommonTree RPAREN511_tree=null;
        CommonTree COALESCE515_tree=null;
        CommonTree LPAREN516_tree=null;
        CommonTree COMMA518_tree=null;
        CommonTree COMMA520_tree=null;
        CommonTree RPAREN522_tree=null;
        CommonTree PREVIOUS523_tree=null;
        CommonTree LPAREN524_tree=null;
        CommonTree COMMA526_tree=null;
        CommonTree RPAREN528_tree=null;
        CommonTree PREVIOUSTAIL529_tree=null;
        CommonTree LPAREN530_tree=null;
        CommonTree COMMA532_tree=null;
        CommonTree RPAREN534_tree=null;
        CommonTree PREVIOUSCOUNT535_tree=null;
        CommonTree LPAREN536_tree=null;
        CommonTree RPAREN538_tree=null;
        CommonTree PREVIOUSWINDOW539_tree=null;
        CommonTree LPAREN540_tree=null;
        CommonTree RPAREN542_tree=null;
        CommonTree PRIOR543_tree=null;
        CommonTree LPAREN544_tree=null;
        CommonTree NUM_INT545_tree=null;
        CommonTree COMMA546_tree=null;
        CommonTree RPAREN548_tree=null;
        CommonTree INSTANCEOF549_tree=null;
        CommonTree LPAREN550_tree=null;
        CommonTree COMMA552_tree=null;
        CommonTree COMMA554_tree=null;
        CommonTree RPAREN556_tree=null;
        CommonTree CAST557_tree=null;
        CommonTree LPAREN558_tree=null;
        CommonTree COMMA560_tree=null;
        CommonTree AS561_tree=null;
        CommonTree RPAREN563_tree=null;
        CommonTree EXISTS564_tree=null;
        CommonTree LPAREN565_tree=null;
        CommonTree RPAREN567_tree=null;
        CommonTree CURRENT_TIMESTAMP568_tree=null;
        CommonTree LPAREN569_tree=null;
        CommonTree RPAREN570_tree=null;
        try {
            int alt202=19;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt202=1;
                }
                break;
            case AVG:
                {
                alt202=2;
                }
                break;
            case COUNT:
                {
                alt202=3;
                }
                break;
            case MEDIAN:
                {
                alt202=4;
                }
                break;
            case STDDEV:
                {
                alt202=5;
                }
                break;
            case AVEDEV:
                {
                alt202=6;
                }
                break;
            case FIRST:
                {
                alt202=7;
                }
                break;
            case LAST:
                {
                alt202=8;
                }
                break;
            case WINDOW:
                {
                alt202=9;
                }
                break;
            case COALESCE:
                {
                alt202=10;
                }
                break;
            case PREVIOUS:
                {
                alt202=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt202=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt202=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt202=14;
                }
                break;
            case PRIOR:
                {
                alt202=15;
                }
                break;
            case INSTANCEOF:
                {
                alt202=16;
                }
                break;
            case CAST:
                {
                alt202=17;
                }
                break;
            case EXISTS:
                {
                alt202=18;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt202=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);
                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM475=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM475_tree = (CommonTree)adaptor.create(SUM475);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM475_tree, root_0);
                    }
                    LPAREN476=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7968); if (state.failed) return retval;
                    int alt189=3;
                    int LA189_0 = input.LA(1);
                    if ( (LA189_0==ALL) ) {
                        alt189=1;
                    }
                    else if ( (LA189_0==DISTINCT) ) {
                        alt189=2;
                    }
                    switch (alt189) {
                        case 1 :
                            {
                            ALL477=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7972); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT478=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7977); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT478_tree = (CommonTree)adaptor.create(DISTINCT478);
                            adaptor.addChild(root_0, DISTINCT478_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc7981);
                    expression479=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression479.getTree());
                    RPAREN480=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7983); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG481=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG481_tree = (CommonTree)adaptor.create(AVG481);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG481_tree, root_0);
                    }
                    LPAREN482=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7992); if (state.failed) return retval;
                    int alt190=3;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==ALL) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==DISTINCT) ) {
                        alt190=2;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            ALL483=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7996); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT484=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8001); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT484_tree = (CommonTree)adaptor.create(DISTINCT484);
                            adaptor.addChild(root_0, DISTINCT484_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8005);
                    expression485=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression485.getTree());
                    RPAREN486=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8007); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT487=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT487_tree = (CommonTree)adaptor.create(COUNT487);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT487_tree, root_0);
                    }
                    LPAREN488=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8016); if (state.failed) return retval;
                    int alt192=2;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==WINDOW||LA192_0==ESCAPE||(LA192_0>=NOT_EXPR && LA192_0<=EVERY_EXPR)||(LA192_0>=SUM && LA192_0<=COUNT)||LA192_0==CASE||LA192_0==OUTER||(LA192_0>=JOIN && LA192_0<=FULL)||(LA192_0>=DISTINCT && LA192_0<=ALL)||(LA192_0>=EVENTS && LA192_0<=LAST)||(LA192_0>=UNIDIRECTIONAL && LA192_0<=CURRENT_TIMESTAMP)||LA192_0==SNAPSHOT||(LA192_0>=VARIABLE && LA192_0<=INDEX)||(LA192_0>=BOOLEAN_TRUE && LA192_0<=VALUE_NULL)||(LA192_0>=DEFINE && LA192_0<=MATCHES)||LA192_0==WHILE||(LA192_0>=MERGE && LA192_0<=MATCHED)||LA192_0==NUM_DOUBLE||(LA192_0>=IDENT && LA192_0<=LPAREN)||(LA192_0>=PLUS && LA192_0<=QUESTION)||(LA192_0>=STRING_LITERAL && LA192_0<=QUOTED_STRING_LITERAL)||LA192_0==MINUS||LA192_0==LCURLY||LA192_0==NUM_INT||(LA192_0>=TICKED_STRING_LITERAL && LA192_0<=NUM_FLOAT)) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==STAR) ) {
                        alt192=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 192, 0, input);
                        throw nvae;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            {
                            int alt191=3;
                            int LA191_0 = input.LA(1);
                            if ( (LA191_0==ALL) ) {
                                alt191=1;
                            }
                            else if ( (LA191_0==DISTINCT) ) {
                                alt191=2;
                            }
                            switch (alt191) {
                                case 1 :
                                    {
                                    ALL489=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8028); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT490=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8033); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT490_tree = (CommonTree)adaptor.create(DISTINCT490);
                                    adaptor.addChild(root_0, DISTINCT490_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8037);
                            expression491=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR492=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8048); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8059); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN494=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN494_tree = (CommonTree)adaptor.create(MEDIAN494);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN494_tree, root_0);
                    }
                    LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8068); if (state.failed) return retval;
                    int alt193=3;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==ALL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==DISTINCT) ) {
                        alt193=2;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            ALL496=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8072); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT497=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8077); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT497_tree = (CommonTree)adaptor.create(DISTINCT497);
                            adaptor.addChild(root_0, DISTINCT497_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8081);
                    expression498=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());
                    RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8083); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV500=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV500_tree = (CommonTree)adaptor.create(STDDEV500);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV500_tree, root_0);
                    }
                    LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8092); if (state.failed) return retval;
                    int alt194=3;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==ALL) ) {
                        alt194=1;
                    }
                    else if ( (LA194_0==DISTINCT) ) {
                        alt194=2;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            ALL502=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8096); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT503=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8101); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT503_tree = (CommonTree)adaptor.create(DISTINCT503);
                            adaptor.addChild(root_0, DISTINCT503_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8105);
                    expression504=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression504.getTree());
                    RPAREN505=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8107); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV506=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV506_tree = (CommonTree)adaptor.create(AVEDEV506);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV506_tree, root_0);
                    }
                    LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8116); if (state.failed) return retval;
                    int alt195=3;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==ALL) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==DISTINCT) ) {
                        alt195=2;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            ALL508=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8120); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT509=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8125); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT509_tree = (CommonTree)adaptor.create(DISTINCT509);
                            adaptor.addChild(root_0, DISTINCT509_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8129);
                    expression510=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression510.getTree());
                    RPAREN511=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8131); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8137);
                    firstAggregation512=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation512.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8142);
                    lastAggregation513=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation513.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8147);
                    windowAggregation514=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation514.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE515=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE515_tree = (CommonTree)adaptor.create(COALESCE515);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE515_tree, root_0);
                    }
                    LPAREN516=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8155); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8158);
                    expression517=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression517.getTree());
                    COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8160); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8163);
                    expression519=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression519.getTree());
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);
                        if ( (LA196_0==COMMA) ) {
                            alt196=1;
                        }
                        switch (alt196) {
                    	case 1 :
                    	    {
                    	    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8166); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8169);
                    	    expression521=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression521.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop196;
                        }
                    } while (true);
                    RPAREN522=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8173); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS523=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS523_tree = (CommonTree)adaptor.create(PREVIOUS523);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS523_tree, root_0);
                    }
                    LPAREN524=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8182); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8185);
                    expression525=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression525.getTree());
                    int alt197=2;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==COMMA) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            COMMA526=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8188); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8191);
                            expression527=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression527.getTree());
                            }
                            break;
                    }
                    RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8195); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL529=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL529_tree = (CommonTree)adaptor.create(PREVIOUSTAIL529);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL529_tree, root_0);
                    }
                    LPAREN530=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8204); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8207);
                    expression531=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression531.getTree());
                    int alt198=2;
                    int LA198_0 = input.LA(1);
                    if ( (LA198_0==COMMA) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            {
                            COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8210); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8213);
                            expression533=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
                            }
                            break;
                    }
                    RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8217); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT535=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT535_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT535);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT535_tree, root_0);
                    }
                    LPAREN536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8226); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8229);
                    expression537=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression537.getTree());
                    RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8231); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW539=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW539_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW539);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW539_tree, root_0);
                    }
                    LPAREN540=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8240); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8243);
                    expression541=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression541.getTree());
                    RPAREN542=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8245); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR543=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR543_tree = (CommonTree)adaptor.create(PRIOR543);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR543_tree, root_0);
                    }
                    LPAREN544=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8254); if (state.failed) return retval;
                    NUM_INT545=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT545_tree = (CommonTree)adaptor.create(NUM_INT545);
                    adaptor.addChild(root_0, NUM_INT545_tree);
                    }
                    COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8259); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8262);
                    eventProperty547=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty547.getTree());
                    RPAREN548=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8264); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF549=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF549_tree = (CommonTree)adaptor.create(INSTANCEOF549);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF549_tree, root_0);
                    }
                    LPAREN550=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8277); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8280);
                    expression551=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression551.getTree());
                    COMMA552=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8282); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8285);
                    classIdentifier553=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier553.getTree());
                    loop199:
                    do {
                        int alt199=2;
                        int LA199_0 = input.LA(1);
                        if ( (LA199_0==COMMA) ) {
                            alt199=1;
                        }
                        switch (alt199) {
                    	case 1 :
                    	    {
                    	    COMMA554=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8288); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8291);
                    	    classIdentifier555=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier555.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop199;
                        }
                    } while (true);
                    RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8295); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST557=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST557_tree = (CommonTree)adaptor.create(CAST557);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST557_tree, root_0);
                    }
                    LPAREN558=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8304); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8307);
                    expression559=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression559.getTree());
                    int alt200=2;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==COMMA) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==AS) ) {
                        alt200=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 200, 0, input);
                        throw nvae;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            COMMA560=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8310); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS561=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8315); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8319);
                    classIdentifier562=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier562.getTree());
                    RPAREN563=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8321); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS564=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS564_tree = (CommonTree)adaptor.create(EXISTS564);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS564_tree, root_0);
                    }
                    LPAREN565=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8330); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8333);
                    eventProperty566=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty566.getTree());
                    RPAREN567=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8335); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP568=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP568_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP568);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP568_tree, root_0);
                    }
                    int alt201=2;
                    int LA201_0 = input.LA(1);
                    if ( (LA201_0==LPAREN) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            {
                            LPAREN569=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8345); if (state.failed) return retval;
                            RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8348); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST571=null;
        Token LPAREN572=null;
        Token COMMA574=null;
        Token RPAREN576=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr573 = null;
        EsperEPL2GrammarParser.expression_return expression575 = null;
        CommonTree FIRST571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree COMMA574_tree=null;
        CommonTree RPAREN576_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST571=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST571);
            LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN572);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8367);
            accessAggExpr573=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr573.getTree());
            int alt203=2;
            int LA203_0 = input.LA(1);
            if ( (LA203_0==COMMA) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    {
                    COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA574);
                    pushFollow(FOLLOW_expression_in_firstAggregation8372);
                    expression575=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression575.getTree());
                    }
                    break;
            }
            RPAREN576=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN576);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST577=null;
        Token LPAREN578=null;
        Token COMMA580=null;
        Token RPAREN582=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr579 = null;
        EsperEPL2GrammarParser.expression_return expression581 = null;
        CommonTree LAST577_tree=null;
        CommonTree LPAREN578_tree=null;
        CommonTree COMMA580_tree=null;
        CommonTree RPAREN582_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST577=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST577);
            LPAREN578=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN578);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8405);
            accessAggExpr579=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr579.getTree());
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==COMMA) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    COMMA580=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA580);
                    pushFollow(FOLLOW_expression_in_lastAggregation8410);
                    expression581=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression581.getTree());
                    }
                    break;
            }
            RPAREN582=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN582);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW583=null;
        Token LPAREN584=null;
        Token RPAREN586=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr585 = null;
        CommonTree WINDOW583_tree=null;
        CommonTree LPAREN584_tree=null;
        CommonTree RPAREN586_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW583=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW583);
            LPAREN584=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN584);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8444);
            accessAggExpr585=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr585.getTree());
            RPAREN586=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN586);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector587 = null;
        EsperEPL2GrammarParser.expression_return expression588 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt205=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt205=1;
                }
                break;
            case IDENT:
                {
                int LA205_2 = input.LA(2);
                if ( (LA205_2==DOT) ) {
                    int LA205_68 = input.LA(3);
                    if ( (LA205_68==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt205=2;
                    }
                    else if ( (LA205_68==WINDOW||LA205_68==ESCAPE||LA205_68==EVERY_EXPR||(LA205_68>=SUM && LA205_68<=COUNT)||LA205_68==OUTER||(LA205_68>=JOIN && LA205_68<=FULL)||(LA205_68>=EVENTS && LA205_68<=LAST)||(LA205_68>=UNIDIRECTIONAL && LA205_68<=PREVIOUSTAIL)||LA205_68==PRIOR||(LA205_68>=WEEKDAY && LA205_68<=CAST)||LA205_68==SNAPSHOT||(LA205_68>=VARIABLE && LA205_68<=INDEX)||(LA205_68>=DEFINE && LA205_68<=MATCHES)||LA205_68==WHILE||(LA205_68>=MERGE && LA205_68<=MATCHED)||LA205_68==IDENT||LA205_68==TICKED_STRING_LITERAL) ) {
                        alt205=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA205_2>=IN_SET && LA205_2<=REGEXP)||(LA205_2>=OR_EXPR && LA205_2<=NOT_EXPR)||LA205_2==IS||LA205_2==COMMA||(LA205_2>=LPAREN && LA205_2<=EQUALS)||LA205_2==LBRACK||(LA205_2>=STAR && LA205_2<=QUESTION)||(LA205_2>=BAND && LA205_2<=MOD)||LA205_2==ESCAPECHAR) ) {
                    alt205=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt205=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);
                throw nvae;
            }
            switch (alt205) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8492);
                    propertyStreamSelector587=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector587.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8497);
                    expression588=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression588.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX589=null;
        Token MIN590=null;
        Token LPAREN591=null;
        Token COMMA593=null;
        Token COMMA595=null;
        Token RPAREN597=null;
        EsperEPL2GrammarParser.expression_return expression592 = null;
        EsperEPL2GrammarParser.expression_return expression594 = null;
        EsperEPL2GrammarParser.expression_return expression596 = null;
        CommonTree MAX589_tree=null;
        CommonTree MIN590_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree COMMA593_tree=null;
        CommonTree COMMA595_tree=null;
        CommonTree RPAREN597_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==MAX) ) {
                alt206=1;
            }
            else if ( (LA206_0==MIN) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);
                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    {
                    MAX589=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX589_tree = (CommonTree)adaptor.create(MAX589);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX589_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN590=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN590_tree = (CommonTree)adaptor.create(MIN590);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN590_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8519); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8522);
            expression592=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression592.getTree());
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( (LA208_0==COMMA) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    COMMA593=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8525); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8528);
                    expression594=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression594.getTree());
                    loop207:
                    do {
                        int alt207=2;
                        int LA207_0 = input.LA(1);
                        if ( (LA207_0==COMMA) ) {
                            alt207=1;
                        }
                        switch (alt207) {
                    	case 1 :
                    	    {
                    	    COMMA595=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8531); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8534);
                    	    expression596=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression596.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop207;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8541); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty598 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction599 = null;
        try {
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==IDENT) ) {
                int LA209_1 = input.LA(2);
                if ( (LA209_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA209_283 = input.LA(4);
                        if ( ((LA209_283>=IN_SET && LA209_283<=REGEXP)||(LA209_283>=OR_EXPR && LA209_283<=NOT_EXPR)||LA209_283==IS||LA209_283==COMMA||LA209_283==EQUALS||(LA209_283>=STAR && LA209_283<=PLUS)||(LA209_283>=BAND && LA209_283<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_283==RPAREN) ) {
                            int LA209_671 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 671, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 283, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA209_284 = input.LA(4);
                        if ( ((LA209_284>=IN_SET && LA209_284<=REGEXP)||(LA209_284>=OR_EXPR && LA209_284<=NOT_EXPR)||LA209_284==IS||LA209_284==COMMA||LA209_284==EQUALS||(LA209_284>=STAR && LA209_284<=PLUS)||(LA209_284>=BAND && LA209_284<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_284==RPAREN) ) {
                            int LA209_697 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 697, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 284, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt209=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 49, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==DOT) ) {
                    int LA209_51 = input.LA(3);
                    if ( (LA209_51==IDENT) ) {
                        int LA209_352 = input.LA(4);
                        if ( (LA209_352==DOT) ) {
                            int LA209_703 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 703, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_352==LPAREN) ) {
                            int LA209_704 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 704, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_352==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_352==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 352, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_51==TICKED_STRING_LITERAL) ) {
                        int LA209_353 = input.LA(4);
                        if ( (LA209_353==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LPAREN) ) {
                            int LA209_764 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 764, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_353==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_353==DOT) ) {
                            int LA209_820 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 820, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 353, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_51==MAX) ) {
                        int LA209_354 = input.LA(4);
                        if ( (LA209_354==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LPAREN) ) {
                            int LA209_823 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 823, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_354==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_354==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 354, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_51==MIN) ) {
                        int LA209_355 = input.LA(4);
                        if ( (LA209_355==LPAREN) ) {
                            int LA209_880 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 880, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_355==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_355==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 355, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_51==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_51==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 51, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA209_0==TICKED_STRING_LITERAL) ) {
                int LA209_2 = input.LA(2);
                if ( (LA209_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA209_398 = input.LA(4);
                        if ( ((LA209_398>=IN_SET && LA209_398<=REGEXP)||(LA209_398>=OR_EXPR && LA209_398<=NOT_EXPR)||LA209_398==IS||LA209_398==COMMA||LA209_398==EQUALS||(LA209_398>=STAR && LA209_398<=PLUS)||(LA209_398>=BAND && LA209_398<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_398==RPAREN) ) {
                            int LA209_959 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 959, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 398, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA209_399 = input.LA(4);
                        if ( ((LA209_399>=IN_SET && LA209_399<=REGEXP)||(LA209_399>=OR_EXPR && LA209_399<=NOT_EXPR)||LA209_399==IS||LA209_399==COMMA||LA209_399==EQUALS||(LA209_399>=STAR && LA209_399<=PLUS)||(LA209_399>=BAND && LA209_399<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_399==RPAREN) ) {
                            int LA209_985 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 985, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 399, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt209=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==DOT) ) {
                    int LA209_110 = input.LA(3);
                    if ( (LA209_110==IDENT) ) {
                        int LA209_467 = input.LA(4);
                        if ( (LA209_467==DOT) ) {
                            int LA209_991 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 991, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_467==LPAREN) ) {
                            int LA209_992 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 992, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_467==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_467==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 467, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_110==TICKED_STRING_LITERAL) ) {
                        int LA209_468 = input.LA(4);
                        if ( (LA209_468==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LPAREN) ) {
                            int LA209_1052 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1052, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_468==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_468==DOT) ) {
                            int LA209_1108 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1108, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 468, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_110==MAX) ) {
                        int LA209_469 = input.LA(4);
                        if ( (LA209_469==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LPAREN) ) {
                            int LA209_1111 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1111, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_469==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_469==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 469, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_110==MIN) ) {
                        int LA209_470 = input.LA(4);
                        if ( (LA209_470==LPAREN) ) {
                            int LA209_1168 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1168, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA209_470==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==END) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_470==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 470, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_110==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_110==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 110, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA209_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==MAX) ) {
                int LA209_9 = input.LA(2);
                if ( (LA209_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA209_513 = input.LA(4);
                        if ( ((LA209_513>=IN_SET && LA209_513<=REGEXP)||(LA209_513>=OR_EXPR && LA209_513<=NOT_EXPR)||LA209_513==IS||LA209_513==COMMA||LA209_513==EQUALS||(LA209_513>=STAR && LA209_513<=PLUS)||(LA209_513>=BAND && LA209_513<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_513==RPAREN) ) {
                            int LA209_1247 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1247, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 513, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA209_514 = input.LA(4);
                        if ( ((LA209_514>=IN_SET && LA209_514<=REGEXP)||(LA209_514>=OR_EXPR && LA209_514<=NOT_EXPR)||LA209_514==IS||LA209_514==COMMA||LA209_514==EQUALS||(LA209_514>=STAR && LA209_514<=PLUS)||(LA209_514>=BAND && LA209_514<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_514==RPAREN) ) {
                            int LA209_1273 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1273, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 514, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt209=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA209_0==MIN) ) {
                int LA209_10 = input.LA(2);
                if ( (LA209_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA209_582 = input.LA(4);
                        if ( ((LA209_582>=IN_SET && LA209_582<=REGEXP)||(LA209_582>=OR_EXPR && LA209_582<=NOT_EXPR)||LA209_582==IS||LA209_582==COMMA||LA209_582==EQUALS||(LA209_582>=STAR && LA209_582<=PLUS)||(LA209_582>=BAND && LA209_582<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_582==RPAREN) ) {
                            int LA209_1299 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1299, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 582, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA209_583 = input.LA(4);
                        if ( ((LA209_583>=IN_SET && LA209_583<=REGEXP)||(LA209_583>=OR_EXPR && LA209_583<=NOT_EXPR)||LA209_583==IS||LA209_583==COMMA||LA209_583==EQUALS||(LA209_583>=STAR && LA209_583<=PLUS)||(LA209_583>=BAND && LA209_583<=MOD)) ) {
                            alt209=2;
                        }
                        else if ( (LA209_583==RPAREN) ) {
                            int LA209_1325 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt209=1;
                            }
                            else if ( (true) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 1325, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 583, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt209=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 226, input);
                        throw nvae;
                    }
                }
                else if ( (LA209_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else if ( (LA209_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA209_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else if ( (LA209_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt209=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);
                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8560);
                    eventProperty598=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty598.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8565);
                    libFunction599=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction599.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT601=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass600 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass602 = null;
        CommonTree DOT601_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8577);
            libFunctionWithClass600=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass600.getTree());
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);
                if ( (LA210_0==DOT) ) {
                    alt210=1;
                }
                switch (alt210) {
            	case 1 :
            	    {
            	    DOT601=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8580); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT601);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8582);
            	    libFunctionNoClass602=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass602.getTree());
            	    }
            	    break;
            	default :
            	    break loop210;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT604=null;
        Token LPAREN606=null;
        Token RPAREN608=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy603 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent605 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs607 = null;
        CommonTree DOT604_tree=null;
        CommonTree LPAREN606_tree=null;
        CommonTree RPAREN608_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==IDENT) ) {
                int LA211_1 = input.LA(2);
                if ( (LA211_1==DOT) ) {
                    alt211=1;
                }
            }
            else if ( (LA211_0==TICKED_STRING_LITERAL) ) {
                int LA211_2 = input.LA(2);
                if ( (LA211_2==DOT) ) {
                    alt211=1;
                }
            }
            switch (alt211) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8612);
                    classIdentifierNonGreedy603=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy603.getTree());
                    DOT604=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT604);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8618);
            funcIdent605=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent605.getTree());
            LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==WINDOW||LA212_0==ESCAPE||(LA212_0>=NOT_EXPR && LA212_0<=EVERY_EXPR)||(LA212_0>=SUM && LA212_0<=COUNT)||LA212_0==CASE||LA212_0==OUTER||(LA212_0>=JOIN && LA212_0<=FULL)||(LA212_0>=DISTINCT && LA212_0<=ALL)||(LA212_0>=EVENTS && LA212_0<=LAST)||(LA212_0>=UNIDIRECTIONAL && LA212_0<=CURRENT_TIMESTAMP)||LA212_0==SNAPSHOT||(LA212_0>=VARIABLE && LA212_0<=INDEX)||(LA212_0>=BOOLEAN_TRUE && LA212_0<=VALUE_NULL)||(LA212_0>=DEFINE && LA212_0<=MATCHES)||LA212_0==WHILE||(LA212_0>=MERGE && LA212_0<=MATCHED)||LA212_0==NUM_DOUBLE||(LA212_0>=IDENT && LA212_0<=LPAREN)||(LA212_0>=PLUS && LA212_0<=QUESTION)||(LA212_0>=STRING_LITERAL && LA212_0<=QUOTED_STRING_LITERAL)||LA212_0==MINUS||LA212_0==LCURLY||LA212_0==NUM_INT||(LA212_0>=TICKED_STRING_LITERAL && LA212_0<=NUM_FLOAT)) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8623);
                    libFunctionArgs607=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs607.getTree());
                    }
                    break;
            }
            RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN608);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN610=null;
        Token RPAREN612=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent609 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs611 = null;
        CommonTree LPAREN610_tree=null;
        CommonTree RPAREN612_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8656);
            funcIdent609=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent609.getTree());
            LPAREN610=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN610);
            int alt213=2;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==WINDOW||LA213_0==ESCAPE||(LA213_0>=NOT_EXPR && LA213_0<=EVERY_EXPR)||(LA213_0>=SUM && LA213_0<=COUNT)||LA213_0==CASE||LA213_0==OUTER||(LA213_0>=JOIN && LA213_0<=FULL)||(LA213_0>=DISTINCT && LA213_0<=ALL)||(LA213_0>=EVENTS && LA213_0<=LAST)||(LA213_0>=UNIDIRECTIONAL && LA213_0<=CURRENT_TIMESTAMP)||LA213_0==SNAPSHOT||(LA213_0>=VARIABLE && LA213_0<=INDEX)||(LA213_0>=BOOLEAN_TRUE && LA213_0<=VALUE_NULL)||(LA213_0>=DEFINE && LA213_0<=MATCHES)||LA213_0==WHILE||(LA213_0>=MERGE && LA213_0<=MATCHED)||LA213_0==NUM_DOUBLE||(LA213_0>=IDENT && LA213_0<=LPAREN)||(LA213_0>=PLUS && LA213_0<=QUESTION)||(LA213_0>=STRING_LITERAL && LA213_0<=QUOTED_STRING_LITERAL)||LA213_0==MINUS||LA213_0==LCURLY||LA213_0==NUM_INT||(LA213_0>=TICKED_STRING_LITERAL && LA213_0<=NUM_FLOAT)) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8661);
                    libFunctionArgs611=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs611.getTree());
                    }
                    break;
            }
            RPAREN612=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN612);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent613 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt214=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt214=1;
                }
                break;
            case MAX:
                {
                alt214=2;
                }
                break;
            case MIN:
                {
                alt214=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);
                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8691);
                    escapableIdent613=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent613.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL614=null;
        Token DISTINCT615=null;
        Token COMMA617=null;
        EsperEPL2GrammarParser.expression_return expression616 = null;
        EsperEPL2GrammarParser.expression_return expression618 = null;
        CommonTree ALL614_tree=null;
        CommonTree DISTINCT615_tree=null;
        CommonTree COMMA617_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt215=3;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==ALL) ) {
                alt215=1;
            }
            else if ( (LA215_0==DISTINCT) ) {
                alt215=2;
            }
            switch (alt215) {
                case 1 :
                    {
                    ALL614=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8728); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT615=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT615_tree = (CommonTree)adaptor.create(DISTINCT615);
                    adaptor.addChild(root_0, DISTINCT615_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8737);
            expression616=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression616.getTree());
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);
                if ( (LA216_0==COMMA) ) {
                    alt216=1;
                }
                switch (alt216) {
            	case 1 :
            	    {
            	    COMMA617=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8740); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8743);
            	    expression618=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression618.getTree());
            	    }
            	    break;
            	default :
            	    break loop216;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR620=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr619 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr621 = null;
        CommonTree AND_EXPR620_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8757);
            concatenationExpr619=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr619.getTree());
            AND_EXPR620=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8759); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8762);
            concatenationExpr621=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr621.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression622 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8790);
            followedByExpression622=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression622.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression623 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression624 = null;
        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8802);
            orExpression623=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression623.getTree());
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);
                if ( (LA217_0==FOLLOWED_BY) ) {
                    alt217=1;
                }
                switch (alt217) {
            	case 1 :
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8807); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8809);
            	    orExpression624=orExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression624.getTree());
            	    }
            	    break;
            	default :
            	    break loop217;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (f != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());
                }
                stream_orExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression625 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression626 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8848);
            andExpression625=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression625.getTree());
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);
                if ( (LA218_0==OR_EXPR) ) {
                    alt218=1;
                }
                switch (alt218) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8853); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression8855);
            	    andExpression626=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression626.getTree());
            	    }
            	    break;
            	default :
            	    break loop218;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression627 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression628 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8887);
            matchUntilExpression627=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression627.getTree());
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);
                if ( (LA219_0==AND_EXPR) ) {
                    alt219=1;
                }
                switch (alt219) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8892); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8894);
            	    matchUntilExpression628=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression628.getTree());
            	    }
            	    break;
            	default :
            	    break loop219;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression629 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression630 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( (LA220_0==LBRACK) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8929);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8933);
            qualifyExpression629=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression629.getTree());
            int alt221=2;
            int LA221_0 = input.LA(1);
            if ( (LA221_0==UNTIL) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8940);
                    qualifyExpression630=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression630.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList631 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix632 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( ((LA224_0>=NOT_EXPR && LA224_0<=EVERY_DISTINCT_EXPR)) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    int alt222=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt222=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt222=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt222=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 222, 0, input);
                        throw nvae;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9005); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9011); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9017); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9019);
                            distinctExpressionList631=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList631.getTree());
                            }
                            break;
                    }
                    int alt223=2;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==LBRACK) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9025);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9034);
            guardPostFix632=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix632.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN633=null;
        Token COMMA635=null;
        Token RPAREN637=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom634 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom636 = null;
        CommonTree LPAREN633_tree=null;
        CommonTree COMMA635_tree=null;
        CommonTree RPAREN637_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN633);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9151);
            distinctExpressionAtom634=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom634.getTree());
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);
                if ( (LA225_0==COMMA) ) {
                    alt225=1;
                }
                switch (alt225) {
            	case 1 :
            	    {
            	    COMMA635=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9154); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA635);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9156);
            	    distinctExpressionAtom636=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom636.getTree());
            	    }
            	    break;
            	default :
            	    break loop225;
                }
            } while (true);
            RPAREN637=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN637);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression638 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_distinctExpressionAtom9183);
            expression638=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression638.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN641=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression639 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression640 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression642 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression643 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN641_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==IDENT||LA226_0==TICKED_STRING_LITERAL) ) {
                alt226=1;
            }
            else if ( (LA226_0==LPAREN) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);
                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9198);
                    atomicExpression639=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression639.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9206);
                    patternExpression640=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression640.getTree());
                    RPAREN641=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN641);
                    }
                    break;
            }
            int alt227=3;
            int LA227_0 = input.LA(1);
            if ( (LA227_0==WHERE) ) {
                alt227=1;
            }
            else if ( (LA227_0==WHILE) ) {
                alt227=2;
            }
            switch (alt227) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9217);
                    guardWhereExpression642=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression642.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9227);
                    guardWhileExpression643=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression643.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression644 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression645 = null;
        try {
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( (LA228_0==IDENT) ) {
                int LA228_1 = input.LA(2);
                if ( (LA228_1==COLON) ) {
                    alt228=1;
                }
                else if ( (LA228_1==EOF||(LA228_1>=OR_EXPR && LA228_1<=AND_EXPR)||LA228_1==WHERE||LA228_1==UNTIL||LA228_1==WHILE||(LA228_1>=LPAREN && LA228_1<=RBRACK)||LA228_1==FOLLOWED_BY) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA228_0==TICKED_STRING_LITERAL) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);
                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9289);
                    observerExpression644=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression644.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9293);
                    patternFilterExpression645=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression645.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON646=null;
        Token LPAREN647=null;
        Token RPAREN649=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList648 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON646_tree=null;
        CommonTree LPAREN647_tree=null;
        CommonTree RPAREN649_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON646=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON646);
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==IDENT) ) {
                alt229=1;
            }
            else if ( (LA229_0==AT) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);
                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN647=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN647);
            int alt230=2;
            int LA230_0 = input.LA(1);
            if ( (LA230_0==WINDOW||LA230_0==ESCAPE||(LA230_0>=NOT_EXPR && LA230_0<=EVERY_EXPR)||(LA230_0>=SUM && LA230_0<=COUNT)||LA230_0==CASE||LA230_0==OUTER||(LA230_0>=JOIN && LA230_0<=FULL)||(LA230_0>=EVENTS && LA230_0<=LAST)||(LA230_0>=UNIDIRECTIONAL && LA230_0<=CURRENT_TIMESTAMP)||LA230_0==SNAPSHOT||(LA230_0>=VARIABLE && LA230_0<=INDEX)||(LA230_0>=BOOLEAN_TRUE && LA230_0<=VALUE_NULL)||(LA230_0>=DEFINE && LA230_0<=MATCHES)||LA230_0==WHILE||(LA230_0>=MERGE && LA230_0<=MATCHED)||LA230_0==NUM_DOUBLE||(LA230_0>=IDENT && LA230_0<=LPAREN)||LA230_0==LBRACK||LA230_0==STAR||(LA230_0>=PLUS && LA230_0<=QUESTION)||(LA230_0>=STRING_LITERAL && LA230_0<=QUOTED_STRING_LITERAL)||LA230_0==MINUS||LA230_0==LCURLY||LA230_0==NUM_INT||(LA230_0>=TICKED_STRING_LITERAL && LA230_0<=NUM_FLOAT)) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9326);
                    expressionWithTimeList648=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList648.getTree());
                    }
                    break;
            }
            RPAREN649=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN649);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT650=null;
        Token COLON651=null;
        Token IDENT652=null;
        Token LPAREN653=null;
        Token RPAREN655=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList654 = null;
        CommonTree IDENT650_tree=null;
        CommonTree COLON651_tree=null;
        CommonTree IDENT652_tree=null;
        CommonTree LPAREN653_tree=null;
        CommonTree RPAREN655_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT650=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT650_tree = (CommonTree)adaptor.create(IDENT650);
            adaptor.addChild(root_0, IDENT650_tree);
            }
            COLON651=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9380); if (state.failed) return retval;
            IDENT652=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT652_tree = (CommonTree)adaptor.create(IDENT652);
            adaptor.addChild(root_0, IDENT652_tree);
            }
            LPAREN653=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9385); if (state.failed) return retval;
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==WINDOW||LA231_0==ESCAPE||(LA231_0>=NOT_EXPR && LA231_0<=EVERY_EXPR)||(LA231_0>=SUM && LA231_0<=COUNT)||LA231_0==CASE||LA231_0==OUTER||(LA231_0>=JOIN && LA231_0<=FULL)||(LA231_0>=EVENTS && LA231_0<=LAST)||(LA231_0>=UNIDIRECTIONAL && LA231_0<=CURRENT_TIMESTAMP)||LA231_0==SNAPSHOT||(LA231_0>=VARIABLE && LA231_0<=INDEX)||(LA231_0>=BOOLEAN_TRUE && LA231_0<=VALUE_NULL)||(LA231_0>=DEFINE && LA231_0<=MATCHES)||LA231_0==WHILE||(LA231_0>=MERGE && LA231_0<=MATCHED)||LA231_0==NUM_DOUBLE||(LA231_0>=IDENT && LA231_0<=LPAREN)||LA231_0==LBRACK||LA231_0==STAR||(LA231_0>=PLUS && LA231_0<=QUESTION)||(LA231_0>=STRING_LITERAL && LA231_0<=QUOTED_STRING_LITERAL)||LA231_0==MINUS||LA231_0==LCURLY||LA231_0==NUM_INT||(LA231_0>=TICKED_STRING_LITERAL && LA231_0<=NUM_FLOAT)) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9389);
                    expressionWithTimeList654=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList654.getTree());
                    }
                    break;
            }
            RPAREN655=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9393); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN656=null;
        Token RPAREN658=null;
        EsperEPL2GrammarParser.expression_return expression657 = null;
        CommonTree LPAREN656_tree=null;
        CommonTree RPAREN658_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN656=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9406); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9409);
            expression657=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression657.getTree());
            RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9411); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK659=null;
        Token RBRACK663=null;
        EsperEPL2GrammarParser.expression_return expression660 = null;
        EsperEPL2GrammarParser.expression_return expression661 = null;
        EsperEPL2GrammarParser.expression_return expression662 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK659_tree=null;
        CommonTree RBRACK663_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK659=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK659);
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==WINDOW||LA234_0==ESCAPE||(LA234_0>=NOT_EXPR && LA234_0<=EVERY_EXPR)||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==CASE||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||LA234_0==SNAPSHOT||(LA234_0>=VARIABLE && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHES)||LA234_0==WHILE||(LA234_0>=MERGE && LA234_0<=MATCHED)||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||(LA234_0>=PLUS && LA234_0<=QUESTION)||(LA234_0>=STRING_LITERAL && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==LCURLY||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
                alt234=1;
            }
            else if ( (LA234_0==COLON) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);
                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9439);
                    expression660=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression660.getTree());
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==COLON) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9444); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt232=2;
                            int LA232_0 = input.LA(1);
                            if ( (LA232_0==WINDOW||LA232_0==ESCAPE||(LA232_0>=NOT_EXPR && LA232_0<=EVERY_EXPR)||(LA232_0>=SUM && LA232_0<=COUNT)||LA232_0==CASE||LA232_0==OUTER||(LA232_0>=JOIN && LA232_0<=FULL)||(LA232_0>=EVENTS && LA232_0<=LAST)||(LA232_0>=UNIDIRECTIONAL && LA232_0<=CURRENT_TIMESTAMP)||LA232_0==SNAPSHOT||(LA232_0>=VARIABLE && LA232_0<=INDEX)||(LA232_0>=BOOLEAN_TRUE && LA232_0<=VALUE_NULL)||(LA232_0>=DEFINE && LA232_0<=MATCHES)||LA232_0==WHILE||(LA232_0>=MERGE && LA232_0<=MATCHED)||LA232_0==NUM_DOUBLE||(LA232_0>=IDENT && LA232_0<=LPAREN)||(LA232_0>=PLUS && LA232_0<=QUESTION)||(LA232_0>=STRING_LITERAL && LA232_0<=QUOTED_STRING_LITERAL)||LA232_0==MINUS||LA232_0==LCURLY||LA232_0==NUM_INT||(LA232_0>=TICKED_STRING_LITERAL && LA232_0<=NUM_FLOAT)) ) {
                                alt232=1;
                            }
                            switch (alt232) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9447);
                                    expression661=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression661.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9469);
                    expression662=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression662.getTree());
                    }
                    break;
            }
            RBRACK663=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK663);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS664=null;
        Token LPAREN666=null;
        Token RPAREN668=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier665 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList667 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression669 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS664_tree=null;
        CommonTree LPAREN666_tree=null;
        CommonTree RPAREN668_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==IDENT) ) {
                int LA235_1 = input.LA(2);
                if ( (LA235_1==EQUALS) ) {
                    alt235=1;
                }
            }
            switch (alt235) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS664=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS664);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9578);
            classIdentifier665=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier665.getTree());
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==LPAREN) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    LPAREN666=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN666);
                    int alt236=2;
                    int LA236_0 = input.LA(1);
                    if ( (LA236_0==WINDOW||LA236_0==ESCAPE||(LA236_0>=NOT_EXPR && LA236_0<=EVERY_EXPR)||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==CASE||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||LA236_0==SNAPSHOT||(LA236_0>=VARIABLE && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHES)||LA236_0==WHILE||(LA236_0>=MERGE && LA236_0<=MATCHED)||LA236_0==NUM_DOUBLE||(LA236_0>=IDENT && LA236_0<=LPAREN)||(LA236_0>=PLUS && LA236_0<=QUESTION)||(LA236_0>=STRING_LITERAL && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==LCURLY||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9591);
                            expressionList667=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList667.getTree());
                            }
                            break;
                    }
                    RPAREN668=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN668);
                    }
                    break;
            }
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==LBRACK) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9606);
                    propertyExpression669=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression669.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic670 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic671 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9651);
            propertyExpressionAtomic670=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic670.getTree());
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);
                if ( (LA239_0==LBRACK) ) {
                    alt239=1;
                }
                switch (alt239) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9654);
            	    propertyExpressionAtomic671=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic671.getTree());
            	    }
            	    break;
            	default :
            	    break loop239;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK672=null;
        Token SELECT673=null;
        Token FROM675=null;
        Token AS677=null;
        Token IDENT678=null;
        Token WHERE679=null;
        Token RBRACK681=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList674 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty676 = null;
        EsperEPL2GrammarParser.expression_return expression680 = null;
        CommonTree LBRACK672_tree=null;
        CommonTree SELECT673_tree=null;
        CommonTree FROM675_tree=null;
        CommonTree AS677_tree=null;
        CommonTree IDENT678_tree=null;
        CommonTree WHERE679_tree=null;
        CommonTree RBRACK681_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK672=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK672);
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==SELECT) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    SELECT673=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT673);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9689);
                    propertySelectionList674=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList674.getTree());
                    FROM675=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM675);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9695);
            eventProperty676=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty676.getTree());
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==AS) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    AS677=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS677);
                    IDENT678=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT678);
                    }
                    break;
            }
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==WHERE) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    WHERE679=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE679);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9707);
                    expression680=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression680.getTree());
                    }
                    break;
            }
            RBRACK681=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK681);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA683=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement682 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement684 = null;
        CommonTree COMMA683_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9761);
            propertySelectionListElement682=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement682.getTree());
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);
                if ( (LA243_0==COMMA) ) {
                    alt243=1;
                }
                switch (alt243) {
            	case 1 :
            	    {
            	    COMMA683=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9764); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9767);
            	    propertySelectionListElement684=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement684.getTree());
            	    }
            	    break;
            	default :
            	    break loop243;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS687=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector685 = null;
        EsperEPL2GrammarParser.expression_return expression686 = null;
        CommonTree s_tree=null;
        CommonTree AS687_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt245=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt245=1;
                }
                break;
            case IDENT:
                {
                int LA245_2 = input.LA(2);
                if ( (LA245_2==DOT) ) {
                    int LA245_68 = input.LA(3);
                    if ( (LA245_68==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt245=2;
                    }
                    else if ( (LA245_68==WINDOW||LA245_68==ESCAPE||LA245_68==EVERY_EXPR||(LA245_68>=SUM && LA245_68<=COUNT)||LA245_68==OUTER||(LA245_68>=JOIN && LA245_68<=FULL)||(LA245_68>=EVENTS && LA245_68<=LAST)||(LA245_68>=UNIDIRECTIONAL && LA245_68<=PREVIOUSTAIL)||LA245_68==PRIOR||(LA245_68>=WEEKDAY && LA245_68<=CAST)||LA245_68==SNAPSHOT||(LA245_68>=VARIABLE && LA245_68<=INDEX)||(LA245_68>=DEFINE && LA245_68<=MATCHES)||LA245_68==WHILE||(LA245_68>=MERGE && LA245_68<=MATCHED)||LA245_68==IDENT||LA245_68==TICKED_STRING_LITERAL) ) {
                        alt245=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 245, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA245_2>=IN_SET && LA245_2<=REGEXP)||(LA245_2>=OR_EXPR && LA245_2<=NOT_EXPR)||LA245_2==AS||LA245_2==FROM||LA245_2==IS||LA245_2==COMMA||LA245_2==LPAREN||LA245_2==EQUALS||LA245_2==LBRACK||(LA245_2>=STAR && LA245_2<=QUESTION)||(LA245_2>=BAND && LA245_2<=MOD)||LA245_2==ESCAPECHAR) ) {
                    alt245=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);
                throw nvae;
            }
            switch (alt245) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9809);
                    propertyStreamSelector685=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector685.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9814);
                    expression686=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression686.getTree());
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==AS) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            AS687=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS687);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9821);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT688=null;
        Token STAR689=null;
        Token AS690=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT688_tree=null;
        CommonTree STAR689_tree=null;
        CommonTree AS690_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT688=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT688);
            STAR689=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR689);
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==AS) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    AS690=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS690);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS691=null;
        Token LPAREN693=null;
        Token RPAREN695=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier692 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList694 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression696 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS691_tree=null;
        CommonTree LPAREN693_tree=null;
        CommonTree RPAREN695_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt247=2;
            int LA247_0 = input.LA(1);
            if ( (LA247_0==IDENT) ) {
                int LA247_1 = input.LA(2);
                if ( (LA247_1==EQUALS) ) {
                    alt247=1;
                }
            }
            switch (alt247) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS691=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS691);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9934);
            classIdentifier692=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier692.getTree());
            int alt249=2;
            int LA249_0 = input.LA(1);
            if ( (LA249_0==LPAREN) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    {
                    LPAREN693=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN693);
                    int alt248=2;
                    int LA248_0 = input.LA(1);
                    if ( (LA248_0==WINDOW||LA248_0==ESCAPE||(LA248_0>=NOT_EXPR && LA248_0<=EVERY_EXPR)||(LA248_0>=SUM && LA248_0<=COUNT)||LA248_0==CASE||LA248_0==OUTER||(LA248_0>=JOIN && LA248_0<=FULL)||(LA248_0>=EVENTS && LA248_0<=LAST)||(LA248_0>=UNIDIRECTIONAL && LA248_0<=CURRENT_TIMESTAMP)||LA248_0==SNAPSHOT||(LA248_0>=VARIABLE && LA248_0<=INDEX)||(LA248_0>=BOOLEAN_TRUE && LA248_0<=VALUE_NULL)||(LA248_0>=DEFINE && LA248_0<=MATCHES)||LA248_0==WHILE||(LA248_0>=MERGE && LA248_0<=MATCHED)||LA248_0==NUM_DOUBLE||(LA248_0>=IDENT && LA248_0<=LPAREN)||(LA248_0>=PLUS && LA248_0<=QUESTION)||(LA248_0>=STRING_LITERAL && LA248_0<=QUOTED_STRING_LITERAL)||LA248_0==MINUS||LA248_0==LCURLY||LA248_0==NUM_INT||(LA248_0>=TICKED_STRING_LITERAL && LA248_0<=NUM_FLOAT)) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9947);
                            expressionList694=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList694.getTree());
                            }
                            break;
                    }
                    RPAREN695=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN695);
                    }
                    break;
            }
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==LBRACK) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9962);
                    propertyExpression696=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression696.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT697=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT697_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10017);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( (LA251_0==DOT) ) {
                    int LA251_21 = input.LA(2);
                    if ( (LA251_21==IDENT) ) {
                        int LA251_45 = input.LA(3);
                        if ( (LA251_45==EOF||LA251_45==CREATE||(LA251_45>=OR_EXPR && LA251_45<=AS)||LA251_45==SELECT||(LA251_45>=INNER && LA251_45<=ON)||(LA251_45>=GROUP && LA251_45<=HAVING)||LA251_45==OUTPUT||LA251_45==INSERT||LA251_45==ORDER||(LA251_45>=UNIDIRECTIONAL && LA251_45<=RETAININTERSECTION)||LA251_45==DELETE||LA251_45==SET||LA251_45==UNTIL||LA251_45==ROW_LIMIT_EXPR||(LA251_45>=UPDATE && LA251_45<=MATCH_RECOGNIZE)||(LA251_45>=FOR && LA251_45<=WHILE)||LA251_45==MERGE||(LA251_45>=COMMA && LA251_45<=RPAREN)||(LA251_45>=DOT && LA251_45<=RBRACK)||LA251_45==RCURLY||LA251_45==FOLLOWED_BY||LA251_45==TICKED_STRING_LITERAL||LA251_45==EMAILAT) ) {
                            alt251=1;
                        }
                    }
                    else if ( (LA251_21==TICKED_STRING_LITERAL) ) {
                        alt251=1;
                    }
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    DOT697=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10036); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT697);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10040);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT698=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT698_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10085);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);
                if ( (LA252_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA252_2 = input.LA(3);
                        if ( (LA252_2==LPAREN) ) {
                            alt252=2;
                        }
                        else if ( (LA252_2==DOT) ) {
                            alt252=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA252_3 = input.LA(3);
                        if ( (LA252_3==LPAREN) ) {
                            alt252=2;
                        }
                        else if ( (LA252_3==DOT) ) {
                            alt252=1;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt252=2;
                        }
                        break;
                    }
                }
                switch (alt252) {
            	case 1 :
            	    {
            	    DOT698=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10120); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT698);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10124);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop252;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA700=null;
        EsperEPL2GrammarParser.expression_return expression699 = null;
        EsperEPL2GrammarParser.expression_return expression701 = null;
        CommonTree COMMA700_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10166);
            expression699=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression699.getTree());
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);
                if ( (LA253_0==COMMA) ) {
                    alt253=1;
                }
                switch (alt253) {
            	case 1 :
            	    {
            	    COMMA700=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10169); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10172);
            	    expression701=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression701.getTree());
            	    }
            	    break;
            	default :
            	    break loop253;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA703=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime702 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime704 = null;
        CommonTree COMMA703_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10200);
            expressionWithTime702=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime702.getTree());
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);
                if ( (LA254_0==COMMA) ) {
                    alt254=1;
                }
                switch (alt254) {
            	case 1 :
            	    {
            	    COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10203); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10206);
            	    expressionWithTime704=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime704.getTree());
            	    }
            	    break;
            	default :
            	    break loop254;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand705 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand706 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod707 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable708 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand709 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand710 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator711 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator712 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList713 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar714 = null;
        try {
            int alt255=10;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==LAST) ) {
                int LA255_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt255=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt255=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==LW) ) {
                int LA255_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt255=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt255=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==NUM_INT) ) {
                int LA255_3 = input.LA(2);
                if ( (LA255_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==TIMEPERIOD_SECONDS) ) {
                    int LA255_165 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 165, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_3==TIMEPERIOD_SECOND) ) {
                    int LA255_166 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 166, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_3==TIMEPERIOD_SEC) ) {
                    int LA255_167 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else if ( (LA255_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==NUM_LONG) ) {
                int LA255_4 = input.LA(2);
                if ( (LA255_4==TIMEPERIOD_SECONDS) ) {
                    int LA255_187 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 187, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_4==TIMEPERIOD_SECOND) ) {
                    int LA255_188 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 188, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_4==TIMEPERIOD_SEC) ) {
                    int LA255_189 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 189, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else if ( (LA255_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else if ( (LA255_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==NUM_FLOAT) ) {
                int LA255_5 = input.LA(2);
                if ( (LA255_5==TIMEPERIOD_SECONDS) ) {
                    int LA255_231 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 231, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_5==TIMEPERIOD_SECOND) ) {
                    int LA255_232 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 232, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_5==TIMEPERIOD_SEC) ) {
                    int LA255_233 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 233, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else if ( (LA255_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else if ( (LA255_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==NUM_DOUBLE) ) {
                int LA255_6 = input.LA(2);
                if ( (LA255_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_SECONDS) ) {
                    int LA255_278 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 278, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_6==TIMEPERIOD_SECOND) ) {
                    int LA255_279 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 279, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_6==TIMEPERIOD_SEC) ) {
                    int LA255_280 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 280, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else if ( (LA255_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==IDENT) ) {
                int LA255_7 = input.LA(2);
                if ( (LA255_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==TIMEPERIOD_SECONDS) ) {
                    int LA255_346 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 346, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_7==TIMEPERIOD_SECOND) ) {
                    int LA255_347 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 347, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_7==TIMEPERIOD_SEC) ) {
                    int LA255_348 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 348, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else if ( (LA255_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==QUESTION) ) {
                int LA255_8 = input.LA(2);
                if ( (LA255_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt255=7;
                }
                else if ( (LA255_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==TIMEPERIOD_SECONDS) ) {
                    int LA255_390 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 390, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_8==TIMEPERIOD_SECOND) ) {
                    int LA255_391 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 391, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_8==TIMEPERIOD_SEC) ) {
                    int LA255_392 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt255=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt255=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 255, 392, input);
                        throw nvae;
                    }
                }
                else if ( (LA255_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt255=4;
                }
                else if ( (LA255_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt255=5;
                }
                else if ( (LA255_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt255=8;
                }
                else if ( (LA255_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else if ( (LA255_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt255=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt255=4;
            }
            else if ( (LA255_0==STAR) ) {
                int LA255_67 = input.LA(2);
                if ( (LA255_67==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt255=6;
                }
                else if ( (LA255_67==COMMA||LA255_67==RPAREN) ) {
                    alt255=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 67, input);
                    throw nvae;
                }
            }
            else if ( (LA255_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt255=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);
                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10232);
                    lastOperand705=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand705.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10243);
                    lastWeekdayOperand706=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand706.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10254);
                    timePeriod707=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod707.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10265);
                    expressionQualifyable708=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable708.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10276);
                    rangeOperand709=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand709.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10288);
                    frequencyOperand710=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand710.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10299);
                    lastOperator711=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator711.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10311);
                    weekDayOperator712=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator712.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10323);
                    numericParameterList713=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList713.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10328);
                    numberSetStar714=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar714.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression715 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10339);
            expression715=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression715.getTree());
            int alt256=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt256=1;
                    }
                    break;
                case DESC:
                    {
                    alt256=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt256=5;
                    }
                    break;
            }
            switch (alt256) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR716=null;
        CommonTree STAR716_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR716=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR716);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW717=null;
        CommonTree LW717_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW717=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW717_tree = (CommonTree)adaptor.create(LW717);
            root_0 = (CommonTree)adaptor.becomeRoot(LW717_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST718=null;
        CommonTree LAST718_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST718=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST718_tree = (CommonTree)adaptor.create(LAST718);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST718_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR719=null;
        Token DIV720=null;
        EsperEPL2GrammarParser.number_return number721 = null;
        EsperEPL2GrammarParser.substitution_return substitution722 = null;
        CommonTree i_tree=null;
        CommonTree STAR719_tree=null;
        CommonTree DIV720_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR719=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR719);
            DIV720=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV720);
            int alt257=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt257=1;
                }
                break;
            case IDENT:
                {
                alt257=2;
                }
                break;
            case QUESTION:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);
                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10467);
                    number721=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number721.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10473);
                    substitution722=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution722.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON725=null;
        EsperEPL2GrammarParser.number_return number723 = null;
        EsperEPL2GrammarParser.substitution_return substitution724 = null;
        EsperEPL2GrammarParser.number_return number726 = null;
        EsperEPL2GrammarParser.substitution_return substitution727 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON725_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt258=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt258=1;
                }
                break;
            case IDENT:
                {
                alt258=2;
                }
                break;
            case QUESTION:
                {
                alt258=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);
                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10522);
                    number723=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number723.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10528);
                    substitution724=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution724.getTree());
                    }
                    break;
            }
            COLON725=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON725);
            int alt259=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt259=1;
                }
                break;
            case IDENT:
                {
                alt259=2;
                }
                break;
            case QUESTION:
                {
                alt259=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);
                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10534);
                    number726=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number726.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10540);
                    substitution727=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution727.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST730=null;
        EsperEPL2GrammarParser.number_return number728 = null;
        EsperEPL2GrammarParser.substitution_return substitution729 = null;
        CommonTree i_tree=null;
        CommonTree LAST730_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt260=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt260=1;
                }
                break;
            case IDENT:
                {
                alt260=2;
                }
                break;
            case QUESTION:
                {
                alt260=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);
                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10654);
                    number728=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number728.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10660);
                    substitution729=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution729.getTree());
                    }
                    break;
            }
            LAST730=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST730);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY733=null;
        EsperEPL2GrammarParser.number_return number731 = null;
        EsperEPL2GrammarParser.substitution_return substitution732 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY733_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt261=1;
                }
                break;
            case IDENT:
                {
                alt261=2;
                }
                break;
            case QUESTION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10711);
                    number731=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number731.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10717);
                    substitution732=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution732.getTree());
                    }
                    break;
            }
            WEEKDAY733=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY733);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK734=null;
        Token COMMA736=null;
        Token RBRACK738=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter735 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter737 = null;
        CommonTree LBRACK734_tree=null;
        CommonTree COMMA736_tree=null;
        CommonTree RBRACK738_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK734=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK734);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10769);
            numericListParameter735=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter735.getTree());
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);
                if ( (LA262_0==COMMA) ) {
                    alt262=1;
                }
                switch (alt262) {
            	case 1 :
            	    {
            	    COMMA736=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10772); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA736);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10774);
            	    numericListParameter737=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter737.getTree());
            	    }
            	    break;
            	default :
            	    break loop262;
                }
            } while (true);
            RBRACK738=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK738);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand739 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand740 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant741 = null;
        try {
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA263_1 = input.LA(2);
                if ( (LA263_1==COLON) ) {
                    alt263=1;
                }
                else if ( (LA263_1==COMMA||LA263_1==RBRACK) ) {
                    alt263=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA263_2 = input.LA(2);
                if ( (LA263_2==COMMA||LA263_2==RBRACK) ) {
                    alt263=3;
                }
                else if ( (LA263_2==COLON) ) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA263_3 = input.LA(2);
                if ( (LA263_3==COLON) ) {
                    alt263=1;
                }
                else if ( (LA263_3==COMMA||LA263_3==RBRACK) ) {
                    alt263=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA263_4 = input.LA(2);
                if ( (LA263_4==COMMA||LA263_4==RBRACK) ) {
                    alt263=3;
                }
                else if ( (LA263_4==COLON) ) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt263=1;
                }
                break;
            case STAR:
                {
                alt263=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);
                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10800);
                    rangeOperand739=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand739.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10806);
                    frequencyOperand740=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand740.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10811);
                    numberconstant741=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant741.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT743=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic742 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic744 = null;
        CommonTree DOT743_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10827);
            eventPropertyAtomic742=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic742.getTree());
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);
                if ( (LA264_0==DOT) ) {
                    alt264=1;
                }
                switch (alt264) {
            	case 1 :
            	    {
            	    DOT743=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10830); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT743);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10832);
            	    eventPropertyAtomic744=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic744.getTree());
            	    }
            	    break;
            	default :
            	    break loop264;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK746=null;
        Token RPAREN747=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent745 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK746_tree=null;
        CommonTree RPAREN747_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10858);
            eventPropertyIdent745=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent745.getTree());
            int alt268=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt268=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt268=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt268=3;
                    }
                    break;
            }
            switch (alt268) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK746=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK746);
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==QUESTION) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt266=2;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==STRING_LITERAL) ) {
                        alt266=1;
                    }
                    else if ( (LA266_0==QUOTED_STRING_LITERAL) ) {
                        alt266=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);
                        throw nvae;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10897); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10903); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN747=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN747);
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==QUESTION) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10911); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR748=null;
        Token DOT749=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR748_tree=null;
        CommonTree DOT749_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11048);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);
                if ( (LA270_0==ESCAPECHAR) ) {
                    alt270=1;
                }
                switch (alt270) {
            	case 1 :
            	    {
            	    ESCAPECHAR748=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11060); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR748);
            	    DOT749=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11062); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT749);
            	    int alt269=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt269=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA269_5 = input.LA(2);
            	            if ( (LA269_5==EOF||(LA269_5>=IN_SET && LA269_5<=NOT_EXPR)||(LA269_5>=WHERE && LA269_5<=AS)||(LA269_5>=ELSE && LA269_5<=FROM)||(LA269_5>=INNER && LA269_5<=FULL)||LA269_5==IS||(LA269_5>=GROUP && LA269_5<=HAVING)||LA269_5==ALL||LA269_5==OUTPUT||LA269_5==INSERT||(LA269_5>=ORDER && LA269_5<=DESC)||LA269_5==PATTERN||(LA269_5>=TIMEPERIOD_SEC && LA269_5<=TIMEPERIOD_SECONDS)||LA269_5==ROW_LIMIT_EXPR||(LA269_5>=MATCH_RECOGNIZE && LA269_5<=MEASURES)||(LA269_5>=AFTER && LA269_5<=FOR)||LA269_5==COMMA||(LA269_5>=LPAREN && LA269_5<=COLON)||(LA269_5>=BAND && LA269_5<=MOD)||LA269_5==RCURLY||LA269_5==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA269_25 = input.LA(2);
            	            if ( (LA269_25==LPAREN) ) {
            	                int LA269_173 = input.LA(3);
            	                if ( ((LA269_173>=STRING_LITERAL && LA269_173<=QUOTED_STRING_LITERAL)) ) {
            	                    alt269=1;
            	                }
            	            }
            	            else if ( (LA269_25==EOF||(LA269_25>=IN_SET && LA269_25<=NOT_EXPR)||(LA269_25>=WHERE && LA269_25<=AS)||(LA269_25>=ELSE && LA269_25<=FROM)||(LA269_25>=INNER && LA269_25<=FULL)||LA269_25==IS||(LA269_25>=GROUP && LA269_25<=HAVING)||LA269_25==ALL||LA269_25==OUTPUT||LA269_25==INSERT||(LA269_25>=ORDER && LA269_25<=DESC)||LA269_25==PATTERN||(LA269_25>=TIMEPERIOD_SEC && LA269_25<=TIMEPERIOD_SECONDS)||LA269_25==ROW_LIMIT_EXPR||(LA269_25>=MATCH_RECOGNIZE && LA269_25<=MEASURES)||(LA269_25>=AFTER && LA269_25<=FOR)||LA269_25==COMMA||(LA269_25>=RPAREN && LA269_25<=COLON)||(LA269_25>=BAND && LA269_25<=MOD)||LA269_25==RCURLY||LA269_25==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA269_39 = input.LA(2);
            	            if ( (LA269_39==EOF||(LA269_39>=IN_SET && LA269_39<=NOT_EXPR)||(LA269_39>=WHERE && LA269_39<=AS)||(LA269_39>=ELSE && LA269_39<=FROM)||(LA269_39>=INNER && LA269_39<=FULL)||LA269_39==IS||(LA269_39>=GROUP && LA269_39<=HAVING)||LA269_39==ALL||LA269_39==OUTPUT||LA269_39==INSERT||(LA269_39>=ORDER && LA269_39<=DESC)||LA269_39==PATTERN||(LA269_39>=TIMEPERIOD_SEC && LA269_39<=TIMEPERIOD_SECONDS)||LA269_39==ROW_LIMIT_EXPR||(LA269_39>=MATCH_RECOGNIZE && LA269_39<=MEASURES)||(LA269_39>=AFTER && LA269_39<=FOR)||LA269_39==COMMA||(LA269_39>=LPAREN && LA269_39<=COLON)||(LA269_39>=BAND && LA269_39<=MOD)||LA269_39==RCURLY||LA269_39==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA269_40 = input.LA(2);
            	            if ( (LA269_40==EOF||(LA269_40>=IN_SET && LA269_40<=NOT_EXPR)||(LA269_40>=WHERE && LA269_40<=AS)||(LA269_40>=ELSE && LA269_40<=FROM)||(LA269_40>=INNER && LA269_40<=FULL)||LA269_40==IS||(LA269_40>=GROUP && LA269_40<=HAVING)||LA269_40==ALL||LA269_40==OUTPUT||LA269_40==INSERT||(LA269_40>=ORDER && LA269_40<=DESC)||LA269_40==PATTERN||(LA269_40>=TIMEPERIOD_SEC && LA269_40<=TIMEPERIOD_SECONDS)||LA269_40==ROW_LIMIT_EXPR||(LA269_40>=MATCH_RECOGNIZE && LA269_40<=MEASURES)||(LA269_40>=AFTER && LA269_40<=FOR)||LA269_40==COMMA||(LA269_40>=LPAREN && LA269_40<=COLON)||(LA269_40>=BAND && LA269_40<=MOD)||LA269_40==RCURLY||LA269_40==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA269_42 = input.LA(2);
            	            if ( (LA269_42==EOF||(LA269_42>=IN_SET && LA269_42<=NOT_EXPR)||(LA269_42>=WHERE && LA269_42<=AS)||(LA269_42>=ELSE && LA269_42<=FROM)||(LA269_42>=INNER && LA269_42<=FULL)||LA269_42==IS||(LA269_42>=GROUP && LA269_42<=HAVING)||LA269_42==ALL||LA269_42==OUTPUT||LA269_42==INSERT||(LA269_42>=ORDER && LA269_42<=DESC)||LA269_42==PATTERN||(LA269_42>=TIMEPERIOD_SEC && LA269_42<=TIMEPERIOD_SECONDS)||LA269_42==ROW_LIMIT_EXPR||(LA269_42>=MATCH_RECOGNIZE && LA269_42<=MEASURES)||(LA269_42>=AFTER && LA269_42<=FOR)||LA269_42==COMMA||(LA269_42>=LPAREN && LA269_42<=COLON)||(LA269_42>=BAND && LA269_42<=MOD)||LA269_42==RCURLY||LA269_42==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA269_43 = input.LA(2);
            	            if ( (LA269_43==EOF||(LA269_43>=IN_SET && LA269_43<=NOT_EXPR)||(LA269_43>=WHERE && LA269_43<=AS)||(LA269_43>=ELSE && LA269_43<=FROM)||(LA269_43>=INNER && LA269_43<=FULL)||LA269_43==IS||(LA269_43>=GROUP && LA269_43<=HAVING)||LA269_43==ALL||LA269_43==OUTPUT||LA269_43==INSERT||(LA269_43>=ORDER && LA269_43<=DESC)||(LA269_43>=TIMEPERIOD_SEC && LA269_43<=TIMEPERIOD_SECONDS)||LA269_43==ROW_LIMIT_EXPR||(LA269_43>=MATCH_RECOGNIZE && LA269_43<=MEASURES)||(LA269_43>=AFTER && LA269_43<=FOR)||LA269_43==COMMA||(LA269_43>=LPAREN && LA269_43<=COLON)||(LA269_43>=BAND && LA269_43<=MOD)||LA269_43==RCURLY||LA269_43==ESCAPECHAR) ) {
            	                alt269=1;
            	            }
            	            else if ( (LA269_43==PATTERN) ) {
            	                int LA269_483 = input.LA(3);
            	                if ( (LA269_483==LPAREN) ) {
            	                    alt269=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt269) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11066);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop270;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT750=null;
        Token COUNT751=null;
        Token ESCAPE752=null;
        Token EVERY_EXPR753=null;
        Token SUM754=null;
        Token AVG755=null;
        Token MAX756=null;
        Token MIN757=null;
        Token COALESCE758=null;
        Token MEDIAN759=null;
        Token STDDEV760=null;
        Token AVEDEV761=null;
        Token EVENTS762=null;
        Token FIRST763=null;
        Token LAST764=null;
        Token WHILE765=null;
        Token MERGE766=null;
        Token MATCHED767=null;
        Token UNIDIRECTIONAL768=null;
        Token RETAINUNION769=null;
        Token RETAININTERSECTION770=null;
        Token UNTIL771=null;
        Token PATTERN772=null;
        Token SQL773=null;
        Token METADATASQL774=null;
        Token PREVIOUS775=null;
        Token PREVIOUSTAIL776=null;
        Token PRIOR777=null;
        Token WEEKDAY778=null;
        Token LW779=null;
        Token INSTANCEOF780=null;
        Token CAST781=null;
        Token SNAPSHOT782=null;
        Token VARIABLE783=null;
        Token INDEX784=null;
        Token WINDOW785=null;
        Token LEFT786=null;
        Token RIGHT787=null;
        Token OUTER788=null;
        Token FULL789=null;
        Token JOIN790=null;
        Token DEFINE791=null;
        Token PARTITION792=null;
        Token MATCHES793=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT750_tree=null;
        CommonTree COUNT751_tree=null;
        CommonTree ESCAPE752_tree=null;
        CommonTree EVERY_EXPR753_tree=null;
        CommonTree SUM754_tree=null;
        CommonTree AVG755_tree=null;
        CommonTree MAX756_tree=null;
        CommonTree MIN757_tree=null;
        CommonTree COALESCE758_tree=null;
        CommonTree MEDIAN759_tree=null;
        CommonTree STDDEV760_tree=null;
        CommonTree AVEDEV761_tree=null;
        CommonTree EVENTS762_tree=null;
        CommonTree FIRST763_tree=null;
        CommonTree LAST764_tree=null;
        CommonTree WHILE765_tree=null;
        CommonTree MERGE766_tree=null;
        CommonTree MATCHED767_tree=null;
        CommonTree UNIDIRECTIONAL768_tree=null;
        CommonTree RETAINUNION769_tree=null;
        CommonTree RETAININTERSECTION770_tree=null;
        CommonTree UNTIL771_tree=null;
        CommonTree PATTERN772_tree=null;
        CommonTree SQL773_tree=null;
        CommonTree METADATASQL774_tree=null;
        CommonTree PREVIOUS775_tree=null;
        CommonTree PREVIOUSTAIL776_tree=null;
        CommonTree PRIOR777_tree=null;
        CommonTree WEEKDAY778_tree=null;
        CommonTree LW779_tree=null;
        CommonTree INSTANCEOF780_tree=null;
        CommonTree CAST781_tree=null;
        CommonTree SNAPSHOT782_tree=null;
        CommonTree VARIABLE783_tree=null;
        CommonTree INDEX784_tree=null;
        CommonTree WINDOW785_tree=null;
        CommonTree LEFT786_tree=null;
        CommonTree RIGHT787_tree=null;
        CommonTree OUTER788_tree=null;
        CommonTree FULL789_tree=null;
        CommonTree JOIN790_tree=null;
        CommonTree DEFINE791_tree=null;
        CommonTree PARTITION792_tree=null;
        CommonTree MATCHES793_tree=null;
        try {
            int alt271=46;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt271=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt271=2;
                }
                break;
            case AT:
                {
                alt271=3;
                }
                break;
            case COUNT:
                {
                alt271=4;
                }
                break;
            case ESCAPE:
                {
                alt271=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt271=6;
                }
                break;
            case SUM:
                {
                alt271=7;
                }
                break;
            case AVG:
                {
                alt271=8;
                }
                break;
            case MAX:
                {
                alt271=9;
                }
                break;
            case MIN:
                {
                alt271=10;
                }
                break;
            case COALESCE:
                {
                alt271=11;
                }
                break;
            case MEDIAN:
                {
                alt271=12;
                }
                break;
            case STDDEV:
                {
                alt271=13;
                }
                break;
            case AVEDEV:
                {
                alt271=14;
                }
                break;
            case EVENTS:
                {
                alt271=15;
                }
                break;
            case FIRST:
                {
                alt271=16;
                }
                break;
            case LAST:
                {
                alt271=17;
                }
                break;
            case WHILE:
                {
                alt271=18;
                }
                break;
            case MERGE:
                {
                alt271=19;
                }
                break;
            case MATCHED:
                {
                alt271=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt271=21;
                }
                break;
            case RETAINUNION:
                {
                alt271=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt271=23;
                }
                break;
            case UNTIL:
                {
                alt271=24;
                }
                break;
            case PATTERN:
                {
                alt271=25;
                }
                break;
            case SQL:
                {
                alt271=26;
                }
                break;
            case METADATASQL:
                {
                alt271=27;
                }
                break;
            case PREVIOUS:
                {
                alt271=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt271=29;
                }
                break;
            case PRIOR:
                {
                alt271=30;
                }
                break;
            case WEEKDAY:
                {
                alt271=31;
                }
                break;
            case LW:
                {
                alt271=32;
                }
                break;
            case INSTANCEOF:
                {
                alt271=33;
                }
                break;
            case CAST:
                {
                alt271=34;
                }
                break;
            case SNAPSHOT:
                {
                alt271=35;
                }
                break;
            case VARIABLE:
                {
                alt271=36;
                }
                break;
            case INDEX:
                {
                alt271=37;
                }
                break;
            case WINDOW:
                {
                alt271=38;
                }
                break;
            case LEFT:
                {
                alt271=39;
                }
                break;
            case RIGHT:
                {
                alt271=40;
                }
                break;
            case OUTER:
                {
                alt271=41;
                }
                break;
            case FULL:
                {
                alt271=42;
                }
                break;
            case JOIN:
                {
                alt271=43;
                }
                break;
            case DEFINE:
                {
                alt271=44;
                }
                break;
            case PARTITION:
                {
                alt271=45;
                }
                break;
            case MATCHES:
                {
                alt271=46;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);
                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT750=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT750_tree = (CommonTree)adaptor.create(AT750);
                    adaptor.addChild(root_0, AT750_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT751=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT751_tree = (CommonTree)adaptor.create(COUNT751);
                    adaptor.addChild(root_0, COUNT751_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE752=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE752_tree = (CommonTree)adaptor.create(ESCAPE752);
                    adaptor.addChild(root_0, ESCAPE752_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR753=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR753_tree = (CommonTree)adaptor.create(EVERY_EXPR753);
                    adaptor.addChild(root_0, EVERY_EXPR753_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM754=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM754_tree = (CommonTree)adaptor.create(SUM754);
                    adaptor.addChild(root_0, SUM754_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG755=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG755_tree = (CommonTree)adaptor.create(AVG755);
                    adaptor.addChild(root_0, AVG755_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX756=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX756_tree = (CommonTree)adaptor.create(MAX756);
                    adaptor.addChild(root_0, MAX756_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN757=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN757_tree = (CommonTree)adaptor.create(MIN757);
                    adaptor.addChild(root_0, MIN757_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE758=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE758_tree = (CommonTree)adaptor.create(COALESCE758);
                    adaptor.addChild(root_0, COALESCE758_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN759=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN759_tree = (CommonTree)adaptor.create(MEDIAN759);
                    adaptor.addChild(root_0, MEDIAN759_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV760=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV760_tree = (CommonTree)adaptor.create(STDDEV760);
                    adaptor.addChild(root_0, STDDEV760_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV761=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV761_tree = (CommonTree)adaptor.create(AVEDEV761);
                    adaptor.addChild(root_0, AVEDEV761_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS762=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS762_tree = (CommonTree)adaptor.create(EVENTS762);
                    adaptor.addChild(root_0, EVENTS762_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST763=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST763_tree = (CommonTree)adaptor.create(FIRST763);
                    adaptor.addChild(root_0, FIRST763_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST764=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST764_tree = (CommonTree)adaptor.create(LAST764);
                    adaptor.addChild(root_0, LAST764_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE765=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE765_tree = (CommonTree)adaptor.create(WHILE765);
                    adaptor.addChild(root_0, WHILE765_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE766=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE766_tree = (CommonTree)adaptor.create(MERGE766);
                    adaptor.addChild(root_0, MERGE766_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED767=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED767_tree = (CommonTree)adaptor.create(MATCHED767);
                    adaptor.addChild(root_0, MATCHED767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL768=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL768_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL768);
                    adaptor.addChild(root_0, UNIDIRECTIONAL768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION769=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION769_tree = (CommonTree)adaptor.create(RETAINUNION769);
                    adaptor.addChild(root_0, RETAINUNION769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION770=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION770_tree = (CommonTree)adaptor.create(RETAININTERSECTION770);
                    adaptor.addChild(root_0, RETAININTERSECTION770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL771=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL771_tree = (CommonTree)adaptor.create(UNTIL771);
                    adaptor.addChild(root_0, UNTIL771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN772=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN772_tree = (CommonTree)adaptor.create(PATTERN772);
                    adaptor.addChild(root_0, PATTERN772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL773=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL773_tree = (CommonTree)adaptor.create(SQL773);
                    adaptor.addChild(root_0, SQL773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL774=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL774_tree = (CommonTree)adaptor.create(METADATASQL774);
                    adaptor.addChild(root_0, METADATASQL774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS775=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS775_tree = (CommonTree)adaptor.create(PREVIOUS775);
                    adaptor.addChild(root_0, PREVIOUS775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL776=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL776_tree = (CommonTree)adaptor.create(PREVIOUSTAIL776);
                    adaptor.addChild(root_0, PREVIOUSTAIL776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR777=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR777_tree = (CommonTree)adaptor.create(PRIOR777);
                    adaptor.addChild(root_0, PRIOR777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY778=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY778_tree = (CommonTree)adaptor.create(WEEKDAY778);
                    adaptor.addChild(root_0, WEEKDAY778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW779=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW779_tree = (CommonTree)adaptor.create(LW779);
                    adaptor.addChild(root_0, LW779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF780=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF780_tree = (CommonTree)adaptor.create(INSTANCEOF780);
                    adaptor.addChild(root_0, INSTANCEOF780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST781=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST781_tree = (CommonTree)adaptor.create(CAST781);
                    adaptor.addChild(root_0, CAST781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT782=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT782_tree = (CommonTree)adaptor.create(SNAPSHOT782);
                    adaptor.addChild(root_0, SNAPSHOT782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE783=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE783_tree = (CommonTree)adaptor.create(VARIABLE783);
                    adaptor.addChild(root_0, VARIABLE783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX784=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX784_tree = (CommonTree)adaptor.create(INDEX784);
                    adaptor.addChild(root_0, INDEX784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW785=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW785_tree = (CommonTree)adaptor.create(WINDOW785);
                    adaptor.addChild(root_0, WINDOW785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT786=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT786_tree = (CommonTree)adaptor.create(LEFT786);
                    adaptor.addChild(root_0, LEFT786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT787=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT787_tree = (CommonTree)adaptor.create(RIGHT787);
                    adaptor.addChild(root_0, RIGHT787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER788=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER788_tree = (CommonTree)adaptor.create(OUTER788);
                    adaptor.addChild(root_0, OUTER788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL789=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL789_tree = (CommonTree)adaptor.create(FULL789);
                    adaptor.addChild(root_0, FULL789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN790=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN790_tree = (CommonTree)adaptor.create(JOIN790);
                    adaptor.addChild(root_0, JOIN790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE791=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE791_tree = (CommonTree)adaptor.create(DEFINE791);
                    adaptor.addChild(root_0, DEFINE791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION792=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION792_tree = (CommonTree)adaptor.create(PARTITION792);
                    adaptor.addChild(root_0, PARTITION792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES793=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES793_tree = (CommonTree)adaptor.create(MATCHES793);
                    adaptor.addChild(root_0, MATCHES793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==IDENT) ) {
                alt272=1;
            }
            else if ( (LA272_0==TICKED_STRING_LITERAL) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);
                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT794=null;
        CommonTree t_tree=null;
        CommonTree IDENT794_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==IDENT) ) {
                alt273=1;
            }
            else if ( (LA273_0==TICKED_STRING_LITERAL) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);
                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT794=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT794_tree = (CommonTree)adaptor.create(IDENT794);
                    adaptor.addChild(root_0, IDENT794_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart795 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart796 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart797 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart798 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart799 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart800 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart801 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart802 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart803 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart804 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart805 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart806 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart807 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart808 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart809 = null;
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            {
            int alt284=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt284=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt284=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt284=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt284=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt284=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11507);
                    dayPart795=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart795.getTree());
                    int alt274=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA274_1 = input.LA(2);
                            if ( ((LA274_1>=TIMEPERIOD_HOUR && LA274_1<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA274_2 = input.LA(2);
                            if ( ((LA274_2>=TIMEPERIOD_HOUR && LA274_2<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA274_3 = input.LA(2);
                            if ( ((LA274_3>=TIMEPERIOD_HOUR && LA274_3<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA274_4 = input.LA(2);
                            if ( ((LA274_4>=TIMEPERIOD_HOUR && LA274_4<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA274_5 = input.LA(2);
                            if ( ((LA274_5>=TIMEPERIOD_HOUR && LA274_5<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA274_6 = input.LA(2);
                            if ( ((LA274_6>=TIMEPERIOD_HOUR && LA274_6<=TIMEPERIOD_HOURS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11509);
                            hourPart796=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart796.getTree());
                            }
                            break;
                    }
                    int alt275=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA275_1 = input.LA(2);
                            if ( (LA275_1==MIN||(LA275_1>=TIMEPERIOD_MINUTE && LA275_1<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA275_2 = input.LA(2);
                            if ( (LA275_2==MIN||(LA275_2>=TIMEPERIOD_MINUTE && LA275_2<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA275_3 = input.LA(2);
                            if ( (LA275_3==MIN||(LA275_3>=TIMEPERIOD_MINUTE && LA275_3<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA275_4 = input.LA(2);
                            if ( (LA275_4==MIN||(LA275_4>=TIMEPERIOD_MINUTE && LA275_4<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA275_5 = input.LA(2);
                            if ( (LA275_5==MIN||(LA275_5>=TIMEPERIOD_MINUTE && LA275_5<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA275_6 = input.LA(2);
                            if ( (LA275_6==MIN||(LA275_6>=TIMEPERIOD_MINUTE && LA275_6<=TIMEPERIOD_MINUTES)) ) {
                                alt275=1;
                            }
                            }
                            break;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11512);
                            minutePart797=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart797.getTree());
                            }
                            break;
                    }
                    int alt276=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA276_1 = input.LA(2);
                            if ( ((LA276_1>=TIMEPERIOD_SEC && LA276_1<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA276_2 = input.LA(2);
                            if ( ((LA276_2>=TIMEPERIOD_SEC && LA276_2<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA276_3 = input.LA(2);
                            if ( ((LA276_3>=TIMEPERIOD_SEC && LA276_3<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA276_4 = input.LA(2);
                            if ( ((LA276_4>=TIMEPERIOD_SEC && LA276_4<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA276_5 = input.LA(2);
                            if ( ((LA276_5>=TIMEPERIOD_SEC && LA276_5<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA276_6 = input.LA(2);
                            if ( ((LA276_6>=TIMEPERIOD_SEC && LA276_6<=TIMEPERIOD_SECONDS)) ) {
                                alt276=1;
                            }
                            }
                            break;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11515);
                            secondPart798=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart798.getTree());
                            }
                            break;
                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==NUM_DOUBLE||LA277_0==IDENT||LA277_0==QUESTION||LA277_0==NUM_INT||(LA277_0>=NUM_LONG && LA277_0<=NUM_FLOAT)) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11518);
                            millisecondPart799=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart799.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11524);
                    hourPart800=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart800.getTree());
                    int alt278=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA278_1 = input.LA(2);
                            if ( (LA278_1==MIN||(LA278_1>=TIMEPERIOD_MINUTE && LA278_1<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA278_2 = input.LA(2);
                            if ( (LA278_2==MIN||(LA278_2>=TIMEPERIOD_MINUTE && LA278_2<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA278_3 = input.LA(2);
                            if ( (LA278_3==MIN||(LA278_3>=TIMEPERIOD_MINUTE && LA278_3<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA278_4 = input.LA(2);
                            if ( (LA278_4==MIN||(LA278_4>=TIMEPERIOD_MINUTE && LA278_4<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA278_5 = input.LA(2);
                            if ( (LA278_5==MIN||(LA278_5>=TIMEPERIOD_MINUTE && LA278_5<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA278_6 = input.LA(2);
                            if ( (LA278_6==MIN||(LA278_6>=TIMEPERIOD_MINUTE && LA278_6<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11526);
                            minutePart801=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart801.getTree());
                            }
                            break;
                    }
                    int alt279=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA279_1 = input.LA(2);
                            if ( ((LA279_1>=TIMEPERIOD_SEC && LA279_1<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA279_2 = input.LA(2);
                            if ( ((LA279_2>=TIMEPERIOD_SEC && LA279_2<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA279_3 = input.LA(2);
                            if ( ((LA279_3>=TIMEPERIOD_SEC && LA279_3<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA279_4 = input.LA(2);
                            if ( ((LA279_4>=TIMEPERIOD_SEC && LA279_4<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA279_5 = input.LA(2);
                            if ( ((LA279_5>=TIMEPERIOD_SEC && LA279_5<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA279_6 = input.LA(2);
                            if ( ((LA279_6>=TIMEPERIOD_SEC && LA279_6<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11529);
                            secondPart802=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart802.getTree());
                            }
                            break;
                    }
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==NUM_DOUBLE||LA280_0==IDENT||LA280_0==QUESTION||LA280_0==NUM_INT||(LA280_0>=NUM_LONG && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11532);
                            millisecondPart803=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart803.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11538);
                    minutePart804=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart804.getTree());
                    int alt281=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA281_1 = input.LA(2);
                            if ( ((LA281_1>=TIMEPERIOD_SEC && LA281_1<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA281_2 = input.LA(2);
                            if ( ((LA281_2>=TIMEPERIOD_SEC && LA281_2<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA281_3 = input.LA(2);
                            if ( ((LA281_3>=TIMEPERIOD_SEC && LA281_3<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA281_4 = input.LA(2);
                            if ( ((LA281_4>=TIMEPERIOD_SEC && LA281_4<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA281_5 = input.LA(2);
                            if ( ((LA281_5>=TIMEPERIOD_SEC && LA281_5<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA281_6 = input.LA(2);
                            if ( ((LA281_6>=TIMEPERIOD_SEC && LA281_6<=TIMEPERIOD_SECONDS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11540);
                            secondPart805=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart805.getTree());
                            }
                            break;
                    }
                    int alt282=2;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==NUM_DOUBLE||LA282_0==IDENT||LA282_0==QUESTION||LA282_0==NUM_INT||(LA282_0>=NUM_LONG && LA282_0<=NUM_FLOAT)) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11543);
                            millisecondPart806=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart806.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11549);
                    secondPart807=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart807.getTree());
                    int alt283=2;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==NUM_DOUBLE||LA283_0==IDENT||LA283_0==QUESTION||LA283_0==NUM_INT||(LA283_0>=NUM_LONG && LA283_0<=NUM_FLOAT)) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11551);
                            millisecondPart808=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart808.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11557);
                    millisecondPart809=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart809.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS812=null;
        Token TIMEPERIOD_DAY813=null;
        EsperEPL2GrammarParser.number_return number810 = null;
        EsperEPL2GrammarParser.substitution_return substitution811 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS812_tree=null;
        CommonTree TIMEPERIOD_DAY813_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt285=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt285=1;
                }
                break;
            case IDENT:
                {
                alt285=2;
                }
                break;
            case QUESTION:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);
                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart11595);
                    number810=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number810.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11601);
                    substitution811=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution811.getTree());
                    }
                    break;
            }
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==TIMEPERIOD_DAYS) ) {
                alt286=1;
            }
            else if ( (LA286_0==TIMEPERIOD_DAY) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);
                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS812=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS812);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY813=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY813);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS816=null;
        Token TIMEPERIOD_HOUR817=null;
        EsperEPL2GrammarParser.number_return number814 = null;
        EsperEPL2GrammarParser.substitution_return substitution815 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS816_tree=null;
        CommonTree TIMEPERIOD_HOUR817_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt287=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt287=1;
                }
                break;
            case IDENT:
                {
                alt287=2;
                }
                break;
            case QUESTION:
                {
                alt287=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart11658);
                    number814=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number814.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11664);
                    substitution815=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution815.getTree());
                    }
                    break;
            }
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==TIMEPERIOD_HOURS) ) {
                alt288=1;
            }
            else if ( (LA288_0==TIMEPERIOD_HOUR) ) {
                alt288=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);
                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS816=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS816);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR817=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR817);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES820=null;
        Token TIMEPERIOD_MINUTE821=null;
        Token MIN822=null;
        EsperEPL2GrammarParser.number_return number818 = null;
        EsperEPL2GrammarParser.substitution_return substitution819 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES820_tree=null;
        CommonTree TIMEPERIOD_MINUTE821_tree=null;
        CommonTree MIN822_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt289=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                alt289=2;
                }
                break;
            case QUESTION:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart11721);
                    number818=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number818.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11727);
                    substitution819=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution819.getTree());
                    }
                    break;
            }
            int alt290=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt290=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt290=2;
                }
                break;
            case MIN:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES820=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES820);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE821=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE821);
                    }
                    break;
                case 3 :
                    {
                    MIN822=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN822);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS825=null;
        Token TIMEPERIOD_SECOND826=null;
        Token TIMEPERIOD_SEC827=null;
        EsperEPL2GrammarParser.number_return number823 = null;
        EsperEPL2GrammarParser.substitution_return substitution824 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS825_tree=null;
        CommonTree TIMEPERIOD_SECOND826_tree=null;
        CommonTree TIMEPERIOD_SEC827_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt291=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt291=1;
                }
                break;
            case IDENT:
                {
                alt291=2;
                }
                break;
            case QUESTION:
                {
                alt291=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart11789);
                    number823=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number823.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11795);
                    substitution824=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution824.getTree());
                    }
                    break;
            }
            int alt292=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt292=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt292=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt292=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);
                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS825=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS825);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND826=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND826);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC827=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC827);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS830=null;
        Token TIMEPERIOD_MILLISECOND831=null;
        Token TIMEPERIOD_MILLISEC832=null;
        EsperEPL2GrammarParser.number_return number828 = null;
        EsperEPL2GrammarParser.substitution_return substitution829 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS830_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND831_tree=null;
        CommonTree TIMEPERIOD_MILLISEC832_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt293=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt293=1;
                }
                break;
            case IDENT:
                {
                alt293=2;
                }
                break;
            case QUESTION:
                {
                alt293=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);
                throw nvae;
            }
            switch (alt293) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11857);
                    number828=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number828.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11863);
                    substitution829=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution829.getTree());
                    }
                    break;
            }
            int alt294=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt294=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt294=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt294=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS830=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS830);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND831=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND831);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC832=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC832);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt295=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt295=1;
                }
                break;
            case NUM_LONG:
                {
                alt295=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt295=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt295=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);
                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution12002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant833 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant834 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt296=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt296=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt296=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt296=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt296=4;
                }
                break;
            case VALUE_NULL:
                {
                alt296=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 296, 0, input);
                throw nvae;
            }
            switch (alt296) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12021);
                    numberconstant833=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant833.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12028);
                    stringconstant834=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant834.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number835 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt297=3;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==MINUS) ) {
                alt297=1;
            }
            else if ( (LA297_0==PLUS) ) {
                alt297=2;
            }
            switch (alt297) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12113);
            number835=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number835.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number835!=null?((CommonTree)number835.tree):null).getType(), "-" + (number835!=null?input.toString(number835.start,number835.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==STRING_LITERAL) ) {
                alt298=1;
            }
            else if ( (LA298_0==QUOTED_STRING_LITERAL) ) {
                alt298=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 0, input);
                throw nvae;
            }
            switch (alt298) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4426);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5799);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7663);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8487);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8555);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9804);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10227);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10238);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10249);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10260);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10271);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10283);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10294);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10305);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10318);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA180 dfa180 = new DFA180(this);
    static final String DFA180_eotS =
        "\u0ad6\uffff";
    static final String DFA180_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\2\16\3\uffff\1\16\u0aa2\uffff";
    static final String DFA180_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\2\6\3\uffff\1\6\12\uffff\1\u0113\167\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\u011e\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72"+
        "\uffff\1\5\11\uffff\2\6\72\uffff\2\6\102\uffff\2\6\111\uffff\2\6"+
        "\102\uffff\2\6\102\uffff\2\6\71\uffff\2\6\113\uffff\2\6\70\uffff"+
        "\2\6\101\uffff\2\6\107\uffff\2\6\74\uffff\2\6\107\uffff\2\6\102"+
        "\uffff\2\6\172\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\157\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA180_maxS =
        "\2\u0133\13\uffff\1\u0133\3\uffff\1\u0130\2\uffff\2\u0130\2\uffff"+
        "\4\u0130\1\uffff\2\u0130\12\uffff\3\u0130\2\uffff\2\u0130\3\uffff"+
        "\1\u0130\12\uffff\1\u0113\167\uffff\1\u0133\72\uffff\1\u0133\72"+
        "\uffff\1\u0133\72\uffff\1\u0133\72\uffff\1\u0133\72\uffff\1\u0133"+
        "\72\uffff\1\u0133\72\uffff\1\u0133\72\uffff\1\u0133\72\uffff\1\u0133"+
        "\72\uffff\1\u0133\72\uffff\1\u012e\72\uffff\1\u0133\72\uffff\1\u0133"+
        "\72\uffff\1\u0133\72\uffff\1\u0131\11\uffff\2\u012b\72\uffff\2\u012b"+
        "\102\uffff\2\u012b\111\uffff\2\u012b\102\uffff\2\u012b\102\uffff"+
        "\2\u012b\71\uffff\2\u012b\113\uffff\2\u012b\70\uffff\2\u012b\101"+
        "\uffff\2\u012b\107\uffff\2\u012b\74\uffff\2\u012b\107\uffff\2\u012b"+
        "\102\uffff\2\u012b\172\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\157\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA180_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\55\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\1\61\uffff\1\10\1\4\u03b7\uffff\11\6\2\uffff\72\6\2\uffff"+
        "\102\6\2\uffff\111\6\2\uffff\102\6\2\uffff\102\6\2\uffff\71\6\2"+
        "\uffff\113\6\2\uffff\70\6\2\uffff\101\6\2\uffff\107\6\2\uffff\72"+
        "\6\4\uffff\107\6\2\uffff\102\6\2\uffff\70\6\1\11\101\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36"+
        "\6\1\uffff\31\6\1\uffff\23\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\36\6\1\uffff\31\6\2\uffff\32\6\1\uffff\32\6\1\uffff\30"+
        "\6\1\uffff\30\6";
    static final String DFA180_specialS =
        "\1\0\u00b5\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\72\uffff\1\20\11\uffff\1\21\1\22\72\uffff\1"+
        "\23\1\24\102\uffff\1\25\1\26\111\uffff\1\27\1\30\102\uffff\1\31"+
        "\1\32\102\uffff\1\33\1\34\71\uffff\1\35\1\36\113\uffff\1\37\1\40"+
        "\70\uffff\1\41\1\42\101\uffff\1\43\1\44\107\uffff\1\45\1\46\74\uffff"+
        "\1\47\1\50\107\uffff\1\51\1\52\102\uffff\1\53\1\54\172\uffff\1\55"+
        "\30\uffff\1\56\30\uffff\1\57\30\uffff\1\60\30\uffff\1\61\30\uffff"+
        "\1\62\114\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff\1\66\30"+
        "\uffff\1\67\30\uffff\1\70\31\uffff\1\71\31\uffff\1\72\31\uffff\1"+
        "\73\31\uffff\1\74\31\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff"+
        "\1\100\157\uffff\1\101\30\uffff\1\102\30\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\63\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\74\1\75\1\53\1\76\2\16"+
            "\1\56\1\57\1\77\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff"+
            "\3\16\2\uffff\1\16\1\uffff\2\16\u008f\uffff\1\2\16\uffff\1\16"+
            "\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\100"+
            "\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\101\4\uffff\1\101\3\uffff\1\101\3\uffff\11\101\10\uffff"+
            "\1\101\1\uffff\4\101\12\uffff\3\101\11\uffff\10\101\2\uffff"+
            "\1\101\1\uffff\4\101\2\uffff\1\101\1\uffff\4\101\24\uffff\3"+
            "\101\2\uffff\1\101\1\uffff\2\101\u008f\uffff\1\2\16\uffff\1"+
            "\101\33\uffff\1\2\2\uffff\1\101\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\164\4\uffff\1\164\2\uffff\2\164\3\uffff\11\164\1\163\1"+
            "\164\6\uffff\1\164\1\uffff\4\164\12\uffff\3\164\11\uffff\21"+
            "\164\1\uffff\1\164\1\uffff\4\164\14\uffff\3\164\5\uffff\3\164"+
            "\2\uffff\1\164\1\uffff\2\164\u008f\uffff\1\164\16\uffff\2\164"+
            "\7\uffff\2\164\1\uffff\2\164\11\uffff\1\164\2\uffff\1\164\1"+
            "\uffff\1\164\2\uffff\3\164",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u00b6\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u00f1\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u012c\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0167\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u01a2\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u01dd\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0218\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0253\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u028e\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u02c9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0304\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u033f\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u037a\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u03b5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u03f0\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u042b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0461\4\uffff\1\u0440\2\uffff\1\u046f\1\u0441\3\uffff\1"+
            "\u0442\1\u0443\1\u0444\1\u0445\1\u0446\1\u0447\1\u0448\1\u0449"+
            "\1\u043f\1\uffff\1\u042e\6\uffff\1\u0464\1\uffff\1\u0466\1\u0462"+
            "\1\u0463\1\u0465\5\uffff\1\u042d\1\u042c\3\uffff\1\u044a\1\u044b"+
            "\1\u044c\11\uffff\1\u0450\1\u0451\1\u0452\1\u0454\1\u0455\1"+
            "\u0456\1\u0457\1\u0458\1\u046a\1\u046b\1\u0459\1\u046c\1\u045a"+
            "\1\u045b\1\u045c\1\u045d\1\u046d\1\uffff\1\u045e\1\uffff\1\u045f"+
            "\1\u0453\1\u043e\1\u0460\14\uffff\1\u0437\1\u0438\1\u0439\5"+
            "\uffff\1\u0467\1\u0468\1\u0469\2\uffff\1\u044d\1\uffff\1\u044e"+
            "\1\u044f\u008f\uffff\1\u0434\16\uffff\1\u043c\1\u043b\5\uffff"+
            "\1\u0470\1\uffff\1\u0430\1\u043a\1\uffff\1\u0435\1\u0436\11"+
            "\uffff\1\u042f\2\uffff\1\u046e\1\uffff\1\u0431\2\uffff\1\u043d"+
            "\1\u0432\1\u0433",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04a6\4\uffff\1\u0485\2\uffff\1\u04b4\1\u0486\3\uffff\1"+
            "\u0487\1\u0488\1\u0489\1\u048a\1\u048b\1\u048c\1\u048d\1\u048e"+
            "\1\u0484\1\uffff\1\u0475\6\uffff\1\u04a9\1\uffff\1\u04ab\1\u04a7"+
            "\1\u04a8\1\u04aa\5\uffff\1\u0474\1\u0473\3\uffff\1\u048f\1\u0490"+
            "\1\u0491\11\uffff\1\u0495\1\u0496\1\u0497\1\u0499\1\u049a\1"+
            "\u049b\1\u049c\1\u049d\1\u04af\1\u04b0\1\u049e\1\u04b1\1\u049f"+
            "\1\u04a0\1\u04a1\1\u04a2\1\u04b2\1\uffff\1\u04a3\1\uffff\1\u04a4"+
            "\1\u0498\1\u0483\1\u04a5\14\uffff\1\u047c\1\u047d\1\u047e\5"+
            "\uffff\1\u04ac\1\u04ad\1\u04ae\2\uffff\1\u0492\1\uffff\1\u0493"+
            "\1\u0494\u008f\uffff\1\u047b\16\uffff\1\u0481\1\u0480\7\uffff"+
            "\1\u0477\1\u047f\1\uffff\1\u0471\1\u0472\11\uffff\1\u0476\2"+
            "\uffff\1\u04b3\1\uffff\1\u0478\2\uffff\1\u0482\1\u0479\1\u047a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ea\4\uffff\1\u04c9\2\uffff\1\u04f8\1\u04ca\3\uffff\1"+
            "\u04cb\1\u04cc\1\u04cd\1\u04ce\1\u04cf\1\u04d0\1\u04d1\1\u04d2"+
            "\1\u04c8\1\uffff\1\u04b9\6\uffff\1\u04ed\1\uffff\1\u04ef\1\u04eb"+
            "\1\u04ec\1\u04ee\5\uffff\1\u04b8\1\u04b7\3\uffff\1\u04d3\1\u04d4"+
            "\1\u04d5\11\uffff\1\u04d9\1\u04da\1\u04db\1\u04dd\1\u04de\1"+
            "\u04df\1\u04e0\1\u04e1\1\u04f3\1\u04f4\1\u04e2\1\u04f5\1\u04e3"+
            "\1\u04e4\1\u04e5\1\u04e6\1\u04f6\1\uffff\1\u04e7\1\uffff\1\u04e8"+
            "\1\u04dc\1\u04c7\1\u04e9\14\uffff\1\u04c0\1\u04c1\1\u04c2\5"+
            "\uffff\1\u04f0\1\u04f1\1\u04f2\2\uffff\1\u04d6\1\uffff\1\u04d7"+
            "\1\u04d8\u008f\uffff\1\u04bf\16\uffff\1\u04c5\1\u04c4\7\uffff"+
            "\1\u04bb\1\u04c3\1\uffff\1\u04b5\1\u04b6\11\uffff\1\u04ba\2"+
            "\uffff\1\u04f7\1\uffff\1\u04bc\2\uffff\1\u04c6\1\u04bd\1\u04be",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052c\4\uffff\1\u050b\2\uffff\1\u053a\1\u050c\3\uffff\1"+
            "\u050d\1\u050e\1\u050f\1\u0510\1\u0511\1\u0512\1\u0513\1\u0514"+
            "\1\u050a\1\uffff\1\u04f9\6\uffff\1\u052f\1\uffff\1\u0531\1\u052d"+
            "\1\u052e\1\u0530\12\uffff\1\u0515\1\u0516\1\u0517\11\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051f\1\u0520\1\u0521\1\u0522\1\u0523"+
            "\1\u0535\1\u0536\1\u0524\1\u0537\1\u0525\1\u0526\1\u0527\1\u0528"+
            "\1\u0538\1\uffff\1\u0529\1\uffff\1\u052a\1\u051e\1\u0509\1\u052b"+
            "\14\uffff\1\u0502\1\u0503\1\u0504\5\uffff\1\u0532\1\u0533\1"+
            "\u0534\2\uffff\1\u0518\1\uffff\1\u0519\1\u051a\u008f\uffff\1"+
            "\u04ff\16\uffff\1\u0507\1\u0506\7\uffff\1\u04fb\1\u0505\1\uffff"+
            "\1\u0500\1\u0501\11\uffff\1\u04fa\2\uffff\1\u0539\1\uffff\1"+
            "\u04fc\2\uffff\1\u0508\1\u04fd\1\u04fe",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0570\4\uffff\1\u054f\2\uffff\1\u057e\1\u0550\3\uffff\1"+
            "\u0551\1\u0552\1\u0553\1\u0554\1\u0555\1\u0556\1\u0557\1\u0558"+
            "\1\u054e\1\uffff\1\u053d\6\uffff\1\u0573\1\uffff\1\u0575\1\u0571"+
            "\1\u0572\1\u0574\5\uffff\1\u053c\1\u053b\3\uffff\1\u0559\1\u055a"+
            "\1\u055b\11\uffff\1\u055f\1\u0560\1\u0561\1\u0563\1\u0564\1"+
            "\u0565\1\u0566\1\u0567\1\u0579\1\u057a\1\u0568\1\u057b\1\u0569"+
            "\1\u056a\1\u056b\1\u056c\1\u057c\1\uffff\1\u056d\1\uffff\1\u056e"+
            "\1\u0562\1\u054d\1\u056f\14\uffff\1\u0546\1\u0547\1\u0548\5"+
            "\uffff\1\u0576\1\u0577\1\u0578\2\uffff\1\u055c\1\uffff\1\u055d"+
            "\1\u055e\u008f\uffff\1\u0543\16\uffff\1\u054b\1\u054a\7\uffff"+
            "\1\u053f\1\u0549\1\uffff\1\u0544\1\u0545\11\uffff\1\u053e\2"+
            "\uffff\1\u057d\1\uffff\1\u0540\2\uffff\1\u054c\1\u0541\1\u0542",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b4\4\uffff\1\u0593\2\uffff\1\u05c2\1\u0594\3\uffff\1"+
            "\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a\1\u059b\1\u059c"+
            "\1\u0592\1\uffff\1\u0581\6\uffff\1\u05b7\1\uffff\1\u05b9\1\u05b5"+
            "\1\u05b6\1\u05b8\5\uffff\1\u0580\1\u057f\3\uffff\1\u059d\1\u059e"+
            "\1\u059f\11\uffff\1\u05a3\1\u05a4\1\u05a5\1\u05a7\1\u05a8\1"+
            "\u05a9\1\u05aa\1\u05ab\1\u05bd\1\u05be\1\u05ac\1\u05bf\1\u05ad"+
            "\1\u05ae\1\u05af\1\u05b0\1\u05c0\1\uffff\1\u05b1\1\uffff\1\u05b2"+
            "\1\u05a6\1\u0591\1\u05b3\14\uffff\1\u058a\1\u058b\1\u058c\5"+
            "\uffff\1\u05ba\1\u05bb\1\u05bc\2\uffff\1\u05a0\1\uffff\1\u05a1"+
            "\1\u05a2\u008f\uffff\1\u0587\16\uffff\1\u058f\1\u058e\7\uffff"+
            "\1\u0583\1\u058d\1\uffff\1\u0588\1\u0589\11\uffff\1\u0582\2"+
            "\uffff\1\u05c1\1\uffff\1\u0584\2\uffff\1\u0590\1\u0585\1\u0586",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f8\4\uffff\1\u05d7\2\uffff\1\u0606\1\u05d8\3\uffff\1"+
            "\u05d9\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0"+
            "\1\u05d6\1\uffff\1\u05c7\6\uffff\1\u05fb\1\uffff\1\u05fd\1\u05f9"+
            "\1\u05fa\1\u05fc\5\uffff\1\u05c6\1\u05c5\3\uffff\1\u05e1\1\u05e2"+
            "\1\u05e3\11\uffff\1\u05e7\1\u05e8\1\u05e9\1\u05eb\1\u05ec\1"+
            "\u05ed\1\u05ee\1\u05ef\1\u0601\1\u0602\1\u05f0\1\u0603\1\u05f1"+
            "\1\u05f2\1\u05f3\1\u05f4\1\u0604\1\uffff\1\u05f5\1\uffff\1\u05f6"+
            "\1\u05ea\1\u05d5\1\u05f7\14\uffff\1\u05ce\1\u05cf\1\u05d0\5"+
            "\uffff\1\u05fe\1\u05ff\1\u0600\2\uffff\1\u05e4\1\uffff\1\u05e5"+
            "\1\u05e6\u008f\uffff\1\u05cd\16\uffff\1\u05d3\1\u05d2\7\uffff"+
            "\1\u05c9\1\u05d1\1\uffff\1\u05c3\1\u05c4\11\uffff\1\u05c8\2"+
            "\uffff\1\u0605\1\uffff\1\u05ca\2\uffff\1\u05d4\1\u05cb\1\u05cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063b\4\uffff\1\u061a\2\uffff\1\u0649\1\u061b\3\uffff\1"+
            "\u061c\1\u061d\1\u061e\1\u061f\1\u0620\1\u0621\1\u0622\1\u0623"+
            "\1\u0619\1\uffff\1\u0609\6\uffff\1\u063e\1\uffff\1\u0640\1\u063c"+
            "\1\u063d\1\u063f\12\uffff\1\u0624\1\u0625\1\u0626\11\uffff\1"+
            "\u062a\1\u062b\1\u062c\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632"+
            "\1\u0644\1\u0645\1\u0633\1\u0646\1\u0634\1\u0635\1\u0636\1\u0637"+
            "\1\u0647\1\uffff\1\u0638\1\uffff\1\u0639\1\u062d\1\u0618\1\u063a"+
            "\14\uffff\1\u0612\1\u0613\1\u0614\5\uffff\1\u0641\1\u0642\1"+
            "\u0643\2\uffff\1\u0627\1\uffff\1\u0628\1\u0629\u008f\uffff\1"+
            "\u060f\16\uffff\1\u0608\1\u0616\5\uffff\1\u0607\1\uffff\1\u060b"+
            "\1\u0615\1\uffff\1\u0610\1\u0611\11\uffff\1\u060a\2\uffff\1"+
            "\u0648\1\uffff\1\u060c\2\uffff\1\u0617\1\u060d\1\u060e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u067e\4\uffff\1\u065d\2\uffff\1\u068c\1\u065e\3\uffff\1"+
            "\u065f\1\u0660\1\u0661\1\u0662\1\u0663\1\u0664\1\u0665\1\u0666"+
            "\1\u065c\1\uffff\1\u064e\6\uffff\1\u0681\1\uffff\1\u0683\1\u067f"+
            "\1\u0680\1\u0682\12\uffff\1\u0667\1\u0668\1\u0669\11\uffff\1"+
            "\u066d\1\u066e\1\u066f\1\u0671\1\u0672\1\u0673\1\u0674\1\u0675"+
            "\1\u0687\1\u0688\1\u0676\1\u0689\1\u0677\1\u0678\1\u0679\1\u067a"+
            "\1\u068a\1\uffff\1\u067b\1\uffff\1\u067c\1\u0670\1\u065b\1\u067d"+
            "\14\uffff\1\u0655\1\u0656\1\u0657\5\uffff\1\u0684\1\u0685\1"+
            "\u0686\2\uffff\1\u066a\1\uffff\1\u066b\1\u066c\u008f\uffff\1"+
            "\u0654\16\uffff\1\u064d\1\u0659\5\uffff\1\u064c\1\uffff\1\u0650"+
            "\1\u0658\1\uffff\1\u064a\1\u064b\11\uffff\1\u064f\2\uffff\1"+
            "\u068b\1\uffff\1\u0651\2\uffff\1\u065a\1\u0652\1\u0653",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c0\4\uffff\1\u069f\2\uffff\1\u06ce\1\u06a0\3\uffff\1"+
            "\u06a1\1\u06a2\1\u06a3\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u06a8"+
            "\1\u069e\1\uffff\1\u068f\6\uffff\1\u06c3\1\uffff\1\u06c5\1\u06c1"+
            "\1\u06c2\1\u06c4\12\uffff\1\u06a9\1\u06aa\1\u06ab\11\uffff\1"+
            "\u06af\1\u06b0\1\u06b1\1\u06b3\1\u06b4\1\u06b5\1\u06b6\1\u06b7"+
            "\1\u06c9\1\u06ca\1\u06b8\1\u06cb\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06cc\1\uffff\1\u06bd\1\uffff\1\u06be\1\u06b2\1\u069d\1\u06bf"+
            "\14\uffff\1\u0696\1\u0697\1\u0698\5\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\2\uffff\1\u06ac\1\uffff\1\u06ad\1\u06ae\u008f\uffff\1"+
            "\u0695\16\uffff\1\u069b\1\u069a\7\uffff\1\u0691\1\u0699\1\uffff"+
            "\1\u068d\1\u068e\11\uffff\1\u0690\2\uffff\1\u06cd\1\uffff\1"+
            "\u0692\2\uffff\1\u069c\1\u0693\1\u0694",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0702\4\uffff\1\u06e1\2\uffff\1\u0710\1\u06e2\3\uffff\1"+
            "\u06e3\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\u06e8\1\u06e9\1\u06ea"+
            "\1\u06e0\1\uffff\1\u06cf\6\uffff\1\u0705\1\uffff\1\u0707\1\u0703"+
            "\1\u0704\1\u0706\12\uffff\1\u06eb\1\u06ec\1\u06ed\11\uffff\1"+
            "\u06f1\1\u06f2\1\u06f3\1\u06f5\1\u06f6\1\u06f7\1\u06f8\1\u06f9"+
            "\1\u070b\1\u070c\1\u06fa\1\u070d\1\u06fb\1\u06fc\1\u06fd\1\u06fe"+
            "\1\u070e\1\uffff\1\u06ff\1\uffff\1\u0700\1\u06f4\1\u06df\1\u0701"+
            "\14\uffff\1\u06d8\1\u06d9\1\u06da\5\uffff\1\u0708\1\u0709\1"+
            "\u070a\2\uffff\1\u06ee\1\uffff\1\u06ef\1\u06f0\u008f\uffff\1"+
            "\u06d5\16\uffff\1\u06dd\1\u06dc\7\uffff\1\u06d1\1\u06db\1\uffff"+
            "\1\u06d6\1\u06d7\11\uffff\1\u06d0\2\uffff\1\u070f\1\uffff\1"+
            "\u06d2\2\uffff\1\u06de\1\u06d3\1\u06d4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0711",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0747\4\uffff\1\u0726\2\uffff\1\u0755\1\u0727\3\uffff\1"+
            "\u0728\1\u0729\1\u072a\1\u072b\1\u072c\1\u072d\1\u072e\1\u072f"+
            "\1\u0725\1\uffff\1\u0716\6\uffff\1\u074a\1\uffff\1\u074c\1\u0748"+
            "\1\u0749\1\u074b\12\uffff\1\u0730\1\u0731\1\u0732\11\uffff\1"+
            "\u0736\1\u0737\1\u0738\1\u073a\1\u073b\1\u073c\1\u073d\1\u073e"+
            "\1\u0750\1\u0751\1\u073f\1\u0752\1\u0740\1\u0741\1\u0742\1\u0743"+
            "\1\u0753\1\uffff\1\u0744\1\uffff\1\u0745\1\u0739\1\u0724\1\u0746"+
            "\14\uffff\1\u071d\1\u071e\1\u071f\5\uffff\1\u074d\1\u074e\1"+
            "\u074f\2\uffff\1\u0733\1\uffff\1\u0734\1\u0735\u008f\uffff\1"+
            "\u071c\16\uffff\1\u0722\1\u0721\7\uffff\1\u0718\1\u0720\1\uffff"+
            "\1\u0714\1\u0715\11\uffff\1\u0717\2\uffff\1\u0754\1\uffff\1"+
            "\u0719\2\uffff\1\u0723\1\u071a\1\u071b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0789\4\uffff\1\u0768\2\uffff\1\u0797\1\u0769\3\uffff\1"+
            "\u076a\1\u076b\1\u076c\1\u076d\1\u076e\1\u076f\1\u0770\1\u0771"+
            "\1\u0767\1\uffff\1\u0756\6\uffff\1\u078c\1\uffff\1\u078e\1\u078a"+
            "\1\u078b\1\u078d\12\uffff\1\u0772\1\u0773\1\u0774\11\uffff\1"+
            "\u0778\1\u0779\1\u077a\1\u077c\1\u077d\1\u077e\1\u077f\1\u0780"+
            "\1\u0792\1\u0793\1\u0781\1\u0794\1\u0782\1\u0783\1\u0784\1\u0785"+
            "\1\u0795\1\uffff\1\u0786\1\uffff\1\u0787\1\u077b\1\u0766\1\u0788"+
            "\14\uffff\1\u075f\1\u0760\1\u0761\5\uffff\1\u078f\1\u0790\1"+
            "\u0791\2\uffff\1\u0775\1\uffff\1\u0776\1\u0777\u008f\uffff\1"+
            "\u075c\16\uffff\1\u0764\1\u0763\7\uffff\1\u0758\1\u0762\1\uffff"+
            "\1\u075d\1\u075e\11\uffff\1\u0757\2\uffff\1\u0796\1\uffff\1"+
            "\u0759\2\uffff\1\u0765\1\u075a\1\u075b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07cc\4\uffff\1\u07ab\2\uffff\1\u07da\1\u07ac\3\uffff\1"+
            "\u07ad\1\u07ae\1\u07af\1\u07b0\1\u07b1\1\u07b2\1\u07b3\1\u07b4"+
            "\1\u07aa\1\uffff\1\u079a\6\uffff\1\u07cf\1\uffff\1\u07d1\1\u07cd"+
            "\1\u07ce\1\u07d0\12\uffff\1\u07b5\1\u07b6\1\u07b7\11\uffff\1"+
            "\u07bb\1\u07bc\1\u07bd\1\u07bf\1\u07c0\1\u07c1\1\u07c2\1\u07c3"+
            "\1\u07d5\1\u07d6\1\u07c4\1\u07d7\1\u07c5\1\u07c6\1\u07c7\1\u07c8"+
            "\1\u07d8\1\uffff\1\u07c9\1\uffff\1\u07ca\1\u07be\1\u07a9\1\u07cb"+
            "\14\uffff\1\u07a3\1\u07a4\1\u07a5\5\uffff\1\u07d2\1\u07d3\1"+
            "\u07d4\2\uffff\1\u07b8\1\uffff\1\u07b9\1\u07ba\u008f\uffff\1"+
            "\u07a0\16\uffff\1\u0799\1\u07a7\5\uffff\1\u0798\1\uffff\1\u079c"+
            "\1\u07a6\1\uffff\1\u07a1\1\u07a2\11\uffff\1\u079b\2\uffff\1"+
            "\u07d9\1\uffff\1\u079d\2\uffff\1\u07a8\1\u079e\1\u079f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0801\4\uffff\1\u07e0\3\uffff\1\u07e1\3\uffff\1\u07e2\1"+
            "\u07e3\1\u07e4\1\u07e5\1\u07e6\1\u07e7\1\u07e8\1\u07e9\1\u07df"+
            "\1\u07db\7\uffff\1\u0804\1\uffff\1\u0806\1\u0802\1\u0803\1\u0805"+
            "\12\uffff\1\u07ea\1\u07eb\1\u07ec\11\uffff\1\u07f0\1\u07f1\1"+
            "\u07f2\1\u07f4\1\u07f5\1\u07f6\1\u07f7\1\u07f8\2\uffff\1\u07f9"+
            "\1\uffff\1\u07fa\1\u07fb\1\u07fc\1\u07fd\2\uffff\1\u07fe\1\uffff"+
            "\1\u07ff\1\u07f3\1\u07de\1\u0800\24\uffff\1\u0807\1\u0808\1"+
            "\u0809\2\uffff\1\u07ed\1\uffff\1\u07ee\1\u07ef\u009e\uffff\1"+
            "\u07dc\36\uffff\1\u07dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081f\1\u0820\1\u0821\1\u0822\1\uffff\1\u081c\1\u081b\1"+
            "\u081e\34\uffff\1\u0815\u00e9\uffff\1\u081d\1\u0814\3\uffff"+
            "\1\u080a\1\u0819\1\u080d\4\uffff\1\u0818\1\u081a\1\u0816\1\u0817"+
            "\1\u0810\1\u0811\1\u0812\1\u0813\1\u080f\1\u080e\1\u080b\1\u080c",
            "\1\u0838\1\u0839\1\u083a\1\u083b\1\uffff\1\u0835\1\u0834\1"+
            "\u0837\34\uffff\1\u082e\u00e9\uffff\1\u0836\1\u082d\3\uffff"+
            "\1\u0823\1\u0832\1\u0826\4\uffff\1\u0831\1\u0833\1\u082f\1\u0830"+
            "\1\u0829\1\u082a\1\u082b\1\u082c\1\u0828\1\u0827\1\u0824\1\u0825",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0851\1\u0852\1\u0853\1\u0854\1\uffff\1\u084e\1\u084d\1"+
            "\u0850\34\uffff\1\u0847\u00e9\uffff\1\u084f\1\u0846\3\uffff"+
            "\1\u083c\1\u084b\1\u083f\4\uffff\1\u084a\1\u084c\1\u0848\1\u0849"+
            "\1\u0842\1\u0843\1\u0844\1\u0845\1\u0841\1\u0840\1\u083d\1\u083e",
            "\1\u086a\1\u086b\1\u086c\1\u086d\1\uffff\1\u0867\1\u0866\1"+
            "\u0869\34\uffff\1\u0860\u00e9\uffff\1\u0868\1\u085f\3\uffff"+
            "\1\u0855\1\u0864\1\u0858\4\uffff\1\u0863\1\u0865\1\u0861\1\u0862"+
            "\1\u085b\1\u085c\1\u085d\1\u085e\1\u085a\1\u0859\1\u0856\1\u0857",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0883\1\u0884\1\u0885\1\u0886\1\uffff\1\u0880\1\u087f\1"+
            "\u0882\34\uffff\1\u0879\u00e9\uffff\1\u0881\1\u0878\3\uffff"+
            "\1\u086e\1\u087d\1\u0871\4\uffff\1\u087c\1\u087e\1\u087a\1\u087b"+
            "\1\u0874\1\u0875\1\u0876\1\u0877\1\u0873\1\u0872\1\u086f\1\u0870",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0899\1\u0898\1"+
            "\u089b\34\uffff\1\u0892\u00e9\uffff\1\u089a\1\u0891\3\uffff"+
            "\1\u0887\1\u0896\1\u088a\4\uffff\1\u0895\1\u0897\1\u0893\1\u0894"+
            "\1\u088d\1\u088e\1\u088f\1\u0890\1\u088c\1\u088b\1\u0888\1\u0889",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b5\1\u08b6\1\u08b7\1\u08b8\1\uffff\1\u08b2\1\u08b1\1"+
            "\u08b4\34\uffff\1\u08ab\u00e6\uffff\1\u08b3\2\uffff\1\16\1\u08aa"+
            "\3\uffff\1\u08a0\1\u08af\1\u08a3\4\uffff\1\u08ae\1\u08b0\1\u08ac"+
            "\1\u08ad\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\u08a5\1\u08a4\1\u08a1"+
            "\1\u08a2",
            "\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\uffff\1\u08cc\1\u08cb\1"+
            "\u08ce\34\uffff\1\u08c5\u00e6\uffff\1\u08cd\2\uffff\1\16\1\u08c4"+
            "\3\uffff\1\u08ba\1\u08c9\1\u08bd\4\uffff\1\u08c8\1\u08ca\1\u08c6"+
            "\1\u08c7\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\u08bf\1\u08be\1\u08bb"+
            "\1\u08bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e9\1\u08ea\1\u08eb\1\u08ec\1\uffff\1\u08e6\1\u08e5\1"+
            "\u08e8\34\uffff\1\u08df\u00e9\uffff\1\u08e7\1\u08de\3\uffff"+
            "\1\u08d4\1\u08e3\1\u08d7\4\uffff\1\u08e2\1\u08e4\1\u08e0\1\u08e1"+
            "\1\u08da\1\u08db\1\u08dc\1\u08dd\1\u08d9\1\u08d8\1\u08d5\1\u08d6",
            "\1\u0902\1\u0903\1\u0904\1\u0905\1\uffff\1\u08ff\1\u08fe\1"+
            "\u0901\34\uffff\1\u08f8\u00e9\uffff\1\u0900\1\u08f7\3\uffff"+
            "\1\u08ed\1\u08fc\1\u08f0\4\uffff\1\u08fb\1\u08fd\1\u08f9\1\u08fa"+
            "\1\u08f3\1\u08f4\1\u08f5\1\u08f6\1\u08f2\1\u08f1\1\u08ee\1\u08ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u091b\1\u091c\1\u091d\1\u091e\1\uffff\1\u0918\1\u0917\1"+
            "\u091a\34\uffff\1\u0911\u00e9\uffff\1\u0919\1\u0910\3\uffff"+
            "\1\u0906\1\u0915\1\u0909\4\uffff\1\u0914\1\u0916\1\u0912\1\u0913"+
            "\1\u090c\1\u090d\1\u090e\1\u090f\1\u090b\1\u090a\1\u0907\1\u0908",
            "\1\u0934\1\u0935\1\u0936\1\u0937\1\uffff\1\u0931\1\u0930\1"+
            "\u0933\34\uffff\1\u092a\u00e9\uffff\1\u0932\1\u0929\3\uffff"+
            "\1\u091f\1\u092e\1\u0922\4\uffff\1\u092d\1\u092f\1\u092b\1\u092c"+
            "\1\u0925\1\u0926\1\u0927\1\u0928\1\u0924\1\u0923\1\u0920\1\u0921",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u094d\1\u094e\1\u094f\1\u0950\1\uffff\1\u094a\1\u0949\1"+
            "\u094c\34\uffff\1\u0943\u00e9\uffff\1\u094b\1\u0942\3\uffff"+
            "\1\u0938\1\u0947\1\u093b\4\uffff\1\u0946\1\u0948\1\u0944\1\u0945"+
            "\1\u093e\1\u093f\1\u0940\1\u0941\1\u093d\1\u093c\1\u0939\1\u093a",
            "\1\u0966\1\u0967\1\u0968\1\u0969\1\uffff\1\u0963\1\u0962\1"+
            "\u0965\34\uffff\1\u095c\u00e9\uffff\1\u0964\1\u095b\3\uffff"+
            "\1\u0951\1\u0960\1\u0954\4\uffff\1\u095f\1\u0961\1\u095d\1\u095e"+
            "\1\u0957\1\u0958\1\u0959\1\u095a\1\u0956\1\u0955\1\u0952\1\u0953",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0980\1\u0981\1\u0982\1\u0983\1\uffff\1\u097c\1\u097b\1"+
            "\u097f\34\uffff\1\u0975\u00e6\uffff\1\u097d\2\uffff\1\u097e"+
            "\1\u0974\3\uffff\1\u096a\1\u0979\1\u096d\4\uffff\1\u0978\1\u097a"+
            "\1\u0976\1\u0977\1\u0970\1\u0971\1\u0972\1\u0973\1\u096f\1\u096e"+
            "\1\u096b\1\u096c",
            "\1\u099a\1\u099b\1\u099c\1\u099d\1\uffff\1\u0996\1\u0995\1"+
            "\u0999\34\uffff\1\u098f\u00e6\uffff\1\u0997\2\uffff\1\u0998"+
            "\1\u098e\3\uffff\1\u0984\1\u0993\1\u0987\4\uffff\1\u0992\1\u0994"+
            "\1\u0990\1\u0991\1\u098a\1\u098b\1\u098c\1\u098d\1\u0989\1\u0988"+
            "\1\u0985\1\u0986",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09b4\1\u09b5\1\u09b6\1\u09b7\1\uffff\1\u09b0\1\u09af\1"+
            "\u09b3\34\uffff\1\u09a9\u00e6\uffff\1\u09b1\2\uffff\1\u09b2"+
            "\1\u09a8\3\uffff\1\u099e\1\u09ad\1\u09a1\4\uffff\1\u09ac\1\u09ae"+
            "\1\u09aa\1\u09ab\1\u09a4\1\u09a5\1\u09a6\1\u09a7\1\u09a3\1\u09a2"+
            "\1\u099f\1\u09a0",
            "\1\u09ce\1\u09cf\1\u09d0\1\u09d1\1\uffff\1\u09ca\1\u09c9\1"+
            "\u09cd\34\uffff\1\u09c3\u00e6\uffff\1\u09cb\2\uffff\1\u09cc"+
            "\1\u09c2\3\uffff\1\u09b8\1\u09c7\1\u09bb\4\uffff\1\u09c6\1\u09c8"+
            "\1\u09c4\1\u09c5\1\u09be\1\u09bf\1\u09c0\1\u09c1\1\u09bd\1\u09bc"+
            "\1\u09b9\1\u09ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09e8\1\u09e9\1\u09ea\1\u09eb\1\uffff\1\u09e4\1\u09e3\1"+
            "\u09e7\34\uffff\1\u09dd\u00e6\uffff\1\u09e5\2\uffff\1\u09e6"+
            "\1\u09dc\3\uffff\1\u09d2\1\u09e1\1\u09d5\4\uffff\1\u09e0\1\u09e2"+
            "\1\u09de\1\u09df\1\u09d8\1\u09d9\1\u09da\1\u09db\1\u09d7\1\u09d6"+
            "\1\u09d3\1\u09d4",
            "\1\u0a02\1\u0a03\1\u0a04\1\u0a05\1\uffff\1\u09fe\1\u09fd\1"+
            "\u0a01\34\uffff\1\u09f7\u00e6\uffff\1\u09ff\2\uffff\1\u0a00"+
            "\1\u09f6\3\uffff\1\u09ec\1\u09fb\1\u09ef\4\uffff\1\u09fa\1\u09fc"+
            "\1\u09f8\1\u09f9\1\u09f2\1\u09f3\1\u09f4\1\u09f5\1\u09f1\1\u09f0"+
            "\1\u09ed\1\u09ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a1c\1\u0a1d\1\u0a1e\1\u0a1f\1\uffff\1\u0a18\1\u0a17\1"+
            "\u0a1b\34\uffff\1\u0a11\u00e6\uffff\1\u0a19\2\uffff\1\u0a1a"+
            "\1\u0a10\3\uffff\1\u0a06\1\u0a15\1\u0a09\4\uffff\1\u0a14\1\u0a16"+
            "\1\u0a12\1\u0a13\1\u0a0c\1\u0a0d\1\u0a0e\1\u0a0f\1\u0a0b\1\u0a0a"+
            "\1\u0a07\1\u0a08",
            "\1\u0a36\1\u0a37\1\u0a38\1\u0a39\1\uffff\1\u0a32\1\u0a31\1"+
            "\u0a35\34\uffff\1\u0a2b\u00e6\uffff\1\u0a33\2\uffff\1\u0a34"+
            "\1\u0a2a\3\uffff\1\u0a20\1\u0a2f\1\u0a23\4\uffff\1\u0a2e\1\u0a30"+
            "\1\u0a2c\1\u0a2d\1\u0a26\1\u0a27\1\u0a28\1\u0a29\1\u0a25\1\u0a24"+
            "\1\u0a21\1\u0a22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a4f\1\u0a50\1\u0a51\1\u0a52\1\uffff\1\u0a4c\1\u0a4b\1"+
            "\u0a4e\34\uffff\1\u0a45\u00e6\uffff\1\u0a4d\2\uffff\1\16\1\u0a44"+
            "\3\uffff\1\u0a3a\1\u0a49\1\u0a3d\4\uffff\1\u0a48\1\u0a4a\1\u0a46"+
            "\1\u0a47\1\u0a40\1\u0a41\1\u0a42\1\u0a43\1\u0a3f\1\u0a3e\1\u0a3b"+
            "\1\u0a3c",
            "\1\u0a69\1\u0a6a\1\u0a6b\1\u0a6c\1\uffff\1\u0a66\1\u0a65\1"+
            "\u0a68\34\uffff\1\u0a5f\u00e6\uffff\1\u0a67\2\uffff\1\16\1\u0a5e"+
            "\3\uffff\1\u0a54\1\u0a63\1\u0a57\4\uffff\1\u0a62\1\u0a64\1\u0a60"+
            "\1\u0a61\1\u0a5a\1\u0a5b\1\u0a5c\1\u0a5d\1\u0a59\1\u0a58\1\u0a55"+
            "\1\u0a56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a85\1\u0a86\1\u0a87\1\u0a88\1\uffff\1\u0a81\1\u0a80\1"+
            "\u0a84\3\uffff\1\u0a83\30\uffff\1\u0a7a\u00e6\uffff\1\u0a82"+
            "\2\uffff\1\16\1\u0a79\3\uffff\1\u0a6f\1\u0a7e\1\u0a72\4\uffff"+
            "\1\u0a7d\1\u0a7f\1\u0a7b\1\u0a7c\1\u0a75\1\u0a76\1\u0a77\1\u0a78"+
            "\1\u0a74\1\u0a73\1\u0a70\1\u0a71",
            "\1\u0aa0\1\u0aa1\1\u0aa2\1\u0aa3\1\uffff\1\u0a9c\1\u0a9b\1"+
            "\u0a9f\3\uffff\1\u0a9e\30\uffff\1\u0a95\u00e6\uffff\1\u0a9d"+
            "\2\uffff\1\16\1\u0a94\3\uffff\1\u0a8a\1\u0a99\1\u0a8d\4\uffff"+
            "\1\u0a98\1\u0a9a\1\u0a96\1\u0a97\1\u0a90\1\u0a91\1\u0a92\1\u0a93"+
            "\1\u0a8f\1\u0a8e\1\u0a8b\1\u0a8c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0ab9\1\u0aba\1\u0abb\1\u0abc\1\uffff\1\u0ab7\1\u0ab6\1"+
            "\u0ab8\34\uffff\1\u0ab0\u00e9\uffff\1\u0aa4\1\u0aaf\3\uffff"+
            "\1\u0aa5\1\u0ab4\1\u0aa8\4\uffff\1\u0ab3\1\u0ab5\1\u0ab1\1\u0ab2"+
            "\1\u0aab\1\u0aac\1\u0aad\1\u0aae\1\u0aaa\1\u0aa9\1\u0aa6\1\u0aa7",
            "\1\u0ad2\1\u0ad3\1\u0ad4\1\u0ad5\1\uffff\1\u0ad0\1\u0acf\1"+
            "\u0ad1\34\uffff\1\u0ac9\u00e9\uffff\1\u0abd\1\u0ac8\3\uffff"+
            "\1\u0abe\1\u0acd\1\u0ac1\4\uffff\1\u0acc\1\u0ace\1\u0aca\1\u0acb"+
            "\1\u0ac4\1\u0ac5\1\u0ac6\1\u0ac7\1\u0ac3\1\u0ac2\1\u0abf\1\u0ac0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;
    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }
    class DFA180 extends DFA {
        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "1228:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA180_0 = input.LA(1);
                        int index180_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_0==MINUS) ) {s = 1;}
                        else if ( ((LA180_0>=BOOLEAN_TRUE && LA180_0<=VALUE_NULL)||LA180_0==NUM_DOUBLE||LA180_0==PLUS||(LA180_0>=STRING_LITERAL && LA180_0<=QUOTED_STRING_LITERAL)||LA180_0==NUM_INT||(LA180_0>=NUM_LONG && LA180_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA180_0==QUESTION) ) {s = 12;}
                        else if ( (LA180_0==LPAREN) ) {s = 13;}
                        else if ( (LA180_0==ESCAPE||LA180_0==EVERY_EXPR||(LA180_0>=MAX && LA180_0<=MIN)||LA180_0==OUTER||(LA180_0>=JOIN && LA180_0<=FULL)||LA180_0==EVENTS||(LA180_0>=UNIDIRECTIONAL && LA180_0<=METADATASQL)||(LA180_0>=WEEKDAY && LA180_0<=LW)||LA180_0==SNAPSHOT||(LA180_0>=VARIABLE && LA180_0<=INDEX)||(LA180_0>=DEFINE && LA180_0<=MATCHES)||LA180_0==WHILE||(LA180_0>=MERGE && LA180_0<=MATCHED)||LA180_0==IDENT||LA180_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA180_0==COUNT) ) {s = 17;}
                        else if ( (LA180_0==SUM) ) {s = 20;}
                        else if ( (LA180_0==AVG) ) {s = 21;}
                        else if ( (LA180_0==COALESCE) ) {s = 24;}
                        else if ( (LA180_0==MEDIAN) ) {s = 25;}
                        else if ( (LA180_0==STDDEV) ) {s = 26;}
                        else if ( (LA180_0==AVEDEV) ) {s = 27;}
                        else if ( (LA180_0==FIRST) ) {s = 29;}
                        else if ( (LA180_0==LAST) ) {s = 30;}
                        else if ( (LA180_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA180_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA180_0==PRIOR) ) {s = 43;}
                        else if ( (LA180_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA180_0==CAST) ) {s = 47;}
                        else if ( (LA180_0==WINDOW) ) {s = 51;}
                        else if ( (LA180_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA180_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA180_0==EXISTS) ) {s = 62;}
                        else if ( (LA180_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA180_0==LCURLY) ) {s = 64;}
                        input.seek(index180_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA180_182 = input.LA(1);
                        int index180_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_182==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1068;}
                        else if ( (LA180_182==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1069;}
                        else if ( (LA180_182==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA180_182==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA180_182==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA180_182==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA180_182==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA180_182==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA180_182==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA180_182==STRING_LITERAL) ) {s = 1077;}
                        else if ( (LA180_182==QUOTED_STRING_LITERAL) ) {s = 1078;}
                        else if ( (LA180_182==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA180_182==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA180_182==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA180_182==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA180_182==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA180_182==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA180_182==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA180_182==AT) && (synpred3_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA180_182==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA180_182==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA180_182==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA180_182==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1090;}
                        else if ( (LA180_182==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1091;}
                        else if ( (LA180_182==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA180_182==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA180_182==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA180_182==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA180_182==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA180_182==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA180_182==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1098;}
                        else if ( (LA180_182==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1099;}
                        else if ( (LA180_182==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA180_182==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA180_182==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA180_182==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA180_182==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA180_182==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA180_182==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA180_182==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA180_182==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA180_182==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA180_182==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA180_182==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA180_182==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA180_182==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA180_182==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA180_182==LW) && (synpred3_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA180_182==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA180_182==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA180_182==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA180_182==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA180_182==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA180_182==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA180_182==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA180_182==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA180_182==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA180_182==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA180_182==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA180_182==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA180_182==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA180_182==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA180_182==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA180_182==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA180_182==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA180_182==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA180_182==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA180_182==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA180_182==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1136;}
                        input.seek(index180_182);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA180_241 = input.LA(1);
                        int index180_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_241==STRING_LITERAL) ) {s = 1137;}
                        else if ( (LA180_241==QUOTED_STRING_LITERAL) ) {s = 1138;}
                        else if ( (LA180_241==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA180_241==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA180_241==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA180_241==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA180_241==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA180_241==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA180_241==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA180_241==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA180_241==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA180_241==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA180_241==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA180_241==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA180_241==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA180_241==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA180_241==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA180_241==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA180_241==AT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA180_241==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA180_241==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA180_241==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA180_241==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA180_241==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA180_241==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA180_241==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA180_241==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA180_241==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA180_241==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA180_241==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA180_241==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA180_241==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA180_241==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA180_241==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA180_241==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA180_241==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA180_241==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA180_241==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA180_241==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA180_241==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA180_241==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA180_241==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA180_241==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA180_241==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA180_241==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA180_241==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA180_241==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA180_241==LW) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA180_241==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA180_241==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA180_241==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA180_241==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA180_241==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA180_241==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA180_241==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA180_241==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA180_241==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA180_241==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA180_241==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA180_241==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA180_241==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA180_241==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA180_241==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA180_241==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA180_241==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA180_241==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA180_241==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA180_241==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        input.seek(index180_241);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA180_300 = input.LA(1);
                        int index180_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_300==STRING_LITERAL) ) {s = 1205;}
                        else if ( (LA180_300==QUOTED_STRING_LITERAL) ) {s = 1206;}
                        else if ( (LA180_300==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA180_300==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA180_300==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA180_300==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA180_300==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA180_300==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA180_300==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA180_300==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA180_300==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA180_300==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA180_300==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA180_300==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA180_300==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA180_300==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA180_300==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA180_300==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA180_300==AT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA180_300==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA180_300==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA180_300==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA180_300==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA180_300==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA180_300==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA180_300==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA180_300==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA180_300==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA180_300==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA180_300==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA180_300==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA180_300==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA180_300==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA180_300==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA180_300==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA180_300==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA180_300==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA180_300==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA180_300==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA180_300==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA180_300==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA180_300==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA180_300==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA180_300==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA180_300==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA180_300==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA180_300==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA180_300==LW) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA180_300==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA180_300==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA180_300==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA180_300==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA180_300==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA180_300==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA180_300==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA180_300==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA180_300==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA180_300==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA180_300==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA180_300==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA180_300==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA180_300==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA180_300==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA180_300==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA180_300==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA180_300==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA180_300==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA180_300==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        input.seek(index180_300);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA180_359 = input.LA(1);
                        int index180_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_359==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA180_359==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA180_359==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA180_359==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA180_359==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA180_359==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA180_359==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA180_359==STRING_LITERAL) ) {s = 1280;}
                        else if ( (LA180_359==QUOTED_STRING_LITERAL) ) {s = 1281;}
                        else if ( (LA180_359==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA180_359==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA180_359==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA180_359==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA180_359==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA180_359==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA180_359==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA180_359==AT) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA180_359==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA180_359==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA180_359==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA180_359==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA180_359==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA180_359==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA180_359==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA180_359==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA180_359==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA180_359==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA180_359==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA180_359==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA180_359==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA180_359==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA180_359==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA180_359==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA180_359==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA180_359==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA180_359==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA180_359==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA180_359==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA180_359==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA180_359==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA180_359==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA180_359==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA180_359==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA180_359==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA180_359==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA180_359==LW) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA180_359==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA180_359==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA180_359==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA180_359==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA180_359==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA180_359==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA180_359==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA180_359==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA180_359==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA180_359==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA180_359==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA180_359==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA180_359==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA180_359==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA180_359==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA180_359==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA180_359==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA180_359==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA180_359==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA180_359==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        input.seek(index180_359);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA180_418 = input.LA(1);
                        int index180_418 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_418==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA180_418==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA180_418==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA180_418==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA180_418==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA180_418==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA180_418==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA180_418==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA180_418==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA180_418==STRING_LITERAL) ) {s = 1348;}
                        else if ( (LA180_418==QUOTED_STRING_LITERAL) ) {s = 1349;}
                        else if ( (LA180_418==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA180_418==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA180_418==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA180_418==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA180_418==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA180_418==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA180_418==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA180_418==AT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA180_418==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA180_418==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA180_418==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA180_418==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA180_418==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA180_418==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA180_418==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA180_418==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA180_418==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA180_418==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA180_418==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA180_418==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA180_418==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA180_418==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA180_418==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA180_418==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA180_418==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA180_418==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA180_418==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA180_418==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA180_418==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA180_418==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA180_418==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA180_418==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA180_418==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA180_418==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA180_418==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA180_418==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA180_418==LW) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA180_418==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA180_418==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA180_418==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA180_418==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA180_418==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA180_418==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA180_418==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA180_418==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA180_418==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA180_418==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA180_418==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA180_418==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA180_418==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA180_418==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA180_418==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA180_418==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA180_418==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA180_418==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA180_418==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA180_418==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        input.seek(index180_418);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA180_477 = input.LA(1);
                        int index180_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_477==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA180_477==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA180_477==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA180_477==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA180_477==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA180_477==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA180_477==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA180_477==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA180_477==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA180_477==STRING_LITERAL) ) {s = 1416;}
                        else if ( (LA180_477==QUOTED_STRING_LITERAL) ) {s = 1417;}
                        else if ( (LA180_477==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA180_477==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA180_477==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA180_477==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA180_477==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA180_477==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA180_477==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA180_477==AT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA180_477==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA180_477==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA180_477==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA180_477==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA180_477==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA180_477==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA180_477==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA180_477==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA180_477==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA180_477==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA180_477==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA180_477==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA180_477==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA180_477==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA180_477==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA180_477==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA180_477==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA180_477==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA180_477==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA180_477==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA180_477==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA180_477==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA180_477==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA180_477==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA180_477==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA180_477==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA180_477==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA180_477==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA180_477==LW) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA180_477==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA180_477==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA180_477==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA180_477==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA180_477==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA180_477==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA180_477==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA180_477==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA180_477==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA180_477==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA180_477==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA180_477==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA180_477==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA180_477==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA180_477==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA180_477==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA180_477==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA180_477==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA180_477==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA180_477==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        input.seek(index180_477);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA180_536 = input.LA(1);
                        int index180_536 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_536==STRING_LITERAL) ) {s = 1475;}
                        else if ( (LA180_536==QUOTED_STRING_LITERAL) ) {s = 1476;}
                        else if ( (LA180_536==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA180_536==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA180_536==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA180_536==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA180_536==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA180_536==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA180_536==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA180_536==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA180_536==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA180_536==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA180_536==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA180_536==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA180_536==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA180_536==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA180_536==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA180_536==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA180_536==AT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA180_536==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA180_536==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA180_536==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA180_536==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA180_536==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA180_536==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA180_536==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA180_536==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA180_536==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA180_536==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA180_536==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA180_536==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA180_536==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA180_536==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA180_536==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA180_536==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA180_536==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA180_536==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA180_536==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA180_536==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA180_536==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA180_536==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA180_536==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA180_536==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA180_536==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA180_536==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA180_536==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA180_536==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA180_536==LW) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA180_536==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA180_536==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA180_536==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA180_536==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA180_536==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA180_536==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA180_536==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA180_536==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA180_536==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA180_536==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA180_536==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA180_536==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA180_536==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA180_536==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA180_536==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA180_536==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA180_536==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA180_536==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA180_536==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA180_536==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        input.seek(index180_536);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA180_595 = input.LA(1);
                        int index180_595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_595==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA180_595==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA180_595==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA180_595==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA180_595==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA180_595==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA180_595==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA180_595==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA180_595==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA180_595==STRING_LITERAL) ) {s = 1552;}
                        else if ( (LA180_595==QUOTED_STRING_LITERAL) ) {s = 1553;}
                        else if ( (LA180_595==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA180_595==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA180_595==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA180_595==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA180_595==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA180_595==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA180_595==AT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA180_595==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA180_595==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA180_595==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA180_595==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA180_595==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA180_595==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA180_595==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA180_595==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA180_595==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA180_595==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA180_595==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA180_595==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA180_595==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA180_595==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA180_595==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA180_595==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA180_595==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA180_595==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA180_595==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA180_595==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA180_595==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA180_595==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA180_595==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA180_595==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA180_595==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA180_595==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA180_595==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA180_595==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA180_595==LW) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA180_595==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA180_595==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA180_595==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA180_595==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA180_595==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA180_595==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA180_595==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA180_595==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA180_595==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA180_595==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA180_595==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA180_595==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA180_595==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA180_595==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA180_595==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA180_595==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA180_595==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA180_595==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA180_595==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA180_595==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        input.seek(index180_595);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA180_654 = input.LA(1);
                        int index180_654 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_654==STRING_LITERAL) ) {s = 1610;}
                        else if ( (LA180_654==QUOTED_STRING_LITERAL) ) {s = 1611;}
                        else if ( (LA180_654==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA180_654==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA180_654==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA180_654==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA180_654==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA180_654==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA180_654==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA180_654==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA180_654==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA180_654==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA180_654==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA180_654==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA180_654==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA180_654==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA180_654==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA180_654==AT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA180_654==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA180_654==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA180_654==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA180_654==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA180_654==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA180_654==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA180_654==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA180_654==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA180_654==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA180_654==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA180_654==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA180_654==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA180_654==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA180_654==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA180_654==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA180_654==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA180_654==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA180_654==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA180_654==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA180_654==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA180_654==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA180_654==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA180_654==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA180_654==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA180_654==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA180_654==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA180_654==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA180_654==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA180_654==LW) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA180_654==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA180_654==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA180_654==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA180_654==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA180_654==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA180_654==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA180_654==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA180_654==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA180_654==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA180_654==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA180_654==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA180_654==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA180_654==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA180_654==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA180_654==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA180_654==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA180_654==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA180_654==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA180_654==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA180_654==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        input.seek(index180_654);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA180_713 = input.LA(1);
                        int index180_713 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_713==STRING_LITERAL) ) {s = 1677;}
                        else if ( (LA180_713==QUOTED_STRING_LITERAL) ) {s = 1678;}
                        else if ( (LA180_713==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA180_713==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA180_713==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA180_713==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA180_713==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA180_713==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA180_713==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA180_713==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA180_713==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA180_713==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA180_713==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA180_713==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA180_713==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA180_713==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA180_713==AT) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA180_713==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA180_713==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA180_713==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA180_713==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA180_713==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA180_713==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA180_713==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA180_713==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA180_713==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA180_713==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA180_713==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA180_713==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA180_713==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA180_713==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA180_713==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA180_713==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA180_713==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA180_713==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA180_713==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA180_713==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA180_713==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA180_713==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA180_713==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA180_713==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA180_713==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA180_713==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA180_713==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA180_713==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA180_713==LW) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA180_713==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA180_713==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA180_713==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA180_713==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA180_713==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA180_713==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA180_713==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA180_713==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA180_713==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA180_713==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA180_713==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA180_713==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA180_713==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA180_713==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA180_713==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA180_713==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA180_713==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA180_713==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA180_713==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA180_713==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        input.seek(index180_713);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA180_772 = input.LA(1);
                        int index180_772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_772==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA180_772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA180_772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA180_772==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA180_772==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA180_772==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA180_772==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA180_772==STRING_LITERAL) ) {s = 1750;}
                        else if ( (LA180_772==QUOTED_STRING_LITERAL) ) {s = 1751;}
                        else if ( (LA180_772==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA180_772==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA180_772==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA180_772==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA180_772==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA180_772==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA180_772==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA180_772==AT) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA180_772==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA180_772==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA180_772==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA180_772==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA180_772==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA180_772==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA180_772==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA180_772==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA180_772==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA180_772==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA180_772==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA180_772==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA180_772==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA180_772==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA180_772==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA180_772==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA180_772==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA180_772==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA180_772==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA180_772==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA180_772==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA180_772==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA180_772==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA180_772==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA180_772==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA180_772==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA180_772==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA180_772==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA180_772==LW) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA180_772==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA180_772==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA180_772==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA180_772==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA180_772==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA180_772==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA180_772==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA180_772==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA180_772==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA180_772==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA180_772==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA180_772==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA180_772==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA180_772==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA180_772==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA180_772==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA180_772==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA180_772==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA180_772==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA180_772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        input.seek(index180_772);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA180_831 = input.LA(1);
                        int index180_831 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_831==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( ((LA180_831>=STRING_LITERAL && LA180_831<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index180_831);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA180_890 = input.LA(1);
                        int index180_890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_890==STRING_LITERAL) ) {s = 1812;}
                        else if ( (LA180_890==QUOTED_STRING_LITERAL) ) {s = 1813;}
                        else if ( (LA180_890==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA180_890==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA180_890==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA180_890==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA180_890==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA180_890==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA180_890==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA180_890==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA180_890==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA180_890==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA180_890==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA180_890==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA180_890==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA180_890==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA180_890==AT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA180_890==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA180_890==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA180_890==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA180_890==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA180_890==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA180_890==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA180_890==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA180_890==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA180_890==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA180_890==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA180_890==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA180_890==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA180_890==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA180_890==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA180_890==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA180_890==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA180_890==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA180_890==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA180_890==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA180_890==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA180_890==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA180_890==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA180_890==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA180_890==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA180_890==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA180_890==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA180_890==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA180_890==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA180_890==LW) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA180_890==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA180_890==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA180_890==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA180_890==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA180_890==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA180_890==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA180_890==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA180_890==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA180_890==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA180_890==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA180_890==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA180_890==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA180_890==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA180_890==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA180_890==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA180_890==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA180_890==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA180_890==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA180_890==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA180_890==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        input.seek(index180_890);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA180_949 = input.LA(1);
                        int index180_949 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_949==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA180_949==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA180_949==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA180_949==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA180_949==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA180_949==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA180_949==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA180_949==STRING_LITERAL) ) {s = 1885;}
                        else if ( (LA180_949==QUOTED_STRING_LITERAL) ) {s = 1886;}
                        else if ( (LA180_949==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA180_949==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA180_949==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA180_949==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA180_949==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA180_949==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA180_949==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA180_949==AT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA180_949==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA180_949==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA180_949==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA180_949==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA180_949==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA180_949==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA180_949==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA180_949==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA180_949==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA180_949==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA180_949==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA180_949==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA180_949==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA180_949==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA180_949==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA180_949==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA180_949==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA180_949==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA180_949==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA180_949==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA180_949==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA180_949==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA180_949==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA180_949==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA180_949==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA180_949==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA180_949==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA180_949==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA180_949==LW) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA180_949==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA180_949==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA180_949==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA180_949==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA180_949==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA180_949==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA180_949==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA180_949==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA180_949==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA180_949==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA180_949==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA180_949==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA180_949==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA180_949==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA180_949==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA180_949==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA180_949==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA180_949==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA180_949==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA180_949==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        input.seek(index180_949);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA180_1008 = input.LA(1);
                        int index180_1008 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1008==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA180_1008==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA180_1008==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA180_1008==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA180_1008==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA180_1008==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA180_1008==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA180_1008==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA180_1008==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA180_1008==STRING_LITERAL) ) {s = 1953;}
                        else if ( (LA180_1008==QUOTED_STRING_LITERAL) ) {s = 1954;}
                        else if ( (LA180_1008==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA180_1008==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA180_1008==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA180_1008==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA180_1008==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA180_1008==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA180_1008==AT) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA180_1008==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA180_1008==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA180_1008==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA180_1008==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA180_1008==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA180_1008==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA180_1008==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA180_1008==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA180_1008==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA180_1008==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA180_1008==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA180_1008==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA180_1008==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA180_1008==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA180_1008==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA180_1008==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA180_1008==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA180_1008==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA180_1008==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA180_1008==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA180_1008==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA180_1008==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA180_1008==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA180_1008==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA180_1008==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA180_1008==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA180_1008==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA180_1008==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA180_1008==LW) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA180_1008==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA180_1008==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA180_1008==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA180_1008==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA180_1008==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA180_1008==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA180_1008==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA180_1008==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA180_1008==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA180_1008==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA180_1008==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA180_1008==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA180_1008==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA180_1008==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA180_1008==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA180_1008==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA180_1008==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA180_1008==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA180_1008==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA180_1008==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        input.seek(index180_1008);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA180_1067 = input.LA(1);
                        int index180_1067 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1067==SELECT) ) {s = 2011;}
                        else if ( (LA180_1067==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA180_1067==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA180_1067==AT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA180_1067==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA180_1067==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA180_1067==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA180_1067==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA180_1067==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA180_1067==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA180_1067==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA180_1067==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA180_1067==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA180_1067==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA180_1067==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA180_1067==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA180_1067==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA180_1067==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA180_1067==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA180_1067==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA180_1067==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA180_1067==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA180_1067==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA180_1067==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA180_1067==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA180_1067==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA180_1067==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA180_1067==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA180_1067==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA180_1067==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA180_1067==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA180_1067==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA180_1067==LW) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA180_1067==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA180_1067==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA180_1067==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA180_1067==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA180_1067==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA180_1067==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA180_1067==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA180_1067==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA180_1067==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA180_1067==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA180_1067==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA180_1067==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA180_1067==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA180_1067==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        input.seek(index180_1067);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA180_1077 = input.LA(1);
                        int index180_1077 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1077==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA180_1077==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA180_1077==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA180_1077==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA180_1077==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA180_1077==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA180_1077==LT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA180_1077==GT) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA180_1077==LE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA180_1077==GE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA180_1077==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA180_1077==IS) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA180_1077==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA180_1077==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA180_1077==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA180_1077==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA180_1077==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA180_1077==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA180_1077==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA180_1077==RPAREN) ) {s = 2077;}
                        else if ( (LA180_1077==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA180_1077==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA180_1077==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA180_1077==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA180_1077==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        input.seek(index180_1077);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA180_1078 = input.LA(1);
                        int index180_1078 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1078==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA180_1078==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA180_1078==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA180_1078==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA180_1078==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA180_1078==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA180_1078==LT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA180_1078==GT) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA180_1078==LE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA180_1078==GE) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA180_1078==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA180_1078==IS) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA180_1078==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA180_1078==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA180_1078==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA180_1078==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA180_1078==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA180_1078==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA180_1078==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA180_1078==RPAREN) ) {s = 2102;}
                        else if ( (LA180_1078==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA180_1078==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA180_1078==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA180_1078==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA180_1078==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        input.seek(index180_1078);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA180_1137 = input.LA(1);
                        int index180_1137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1137==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA180_1137==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA180_1137==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA180_1137==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA180_1137==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA180_1137==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA180_1137==LT) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA180_1137==GT) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA180_1137==LE) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA180_1137==GE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA180_1137==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA180_1137==IS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA180_1137==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA180_1137==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA180_1137==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA180_1137==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA180_1137==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA180_1137==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA180_1137==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA180_1137==RPAREN) ) {s = 2127;}
                        else if ( (LA180_1137==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA180_1137==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA180_1137==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA180_1137==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA180_1137==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        input.seek(index180_1137);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA180_1138 = input.LA(1);
                        int index180_1138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1138==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA180_1138==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA180_1138==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA180_1138==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA180_1138==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA180_1138==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA180_1138==LT) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA180_1138==GT) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA180_1138==LE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA180_1138==GE) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA180_1138==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA180_1138==IS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA180_1138==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA180_1138==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA180_1138==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA180_1138==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA180_1138==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA180_1138==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA180_1138==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA180_1138==RPAREN) ) {s = 2152;}
                        else if ( (LA180_1138==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA180_1138==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA180_1138==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA180_1138==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA180_1138==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        input.seek(index180_1138);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA180_1205 = input.LA(1);
                        int index180_1205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1205==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA180_1205==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA180_1205==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA180_1205==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA180_1205==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA180_1205==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA180_1205==LT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA180_1205==GT) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA180_1205==LE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA180_1205==GE) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA180_1205==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA180_1205==IS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA180_1205==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA180_1205==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA180_1205==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA180_1205==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA180_1205==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA180_1205==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA180_1205==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA180_1205==RPAREN) ) {s = 2177;}
                        else if ( (LA180_1205==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA180_1205==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA180_1205==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA180_1205==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA180_1205==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        input.seek(index180_1205);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA180_1206 = input.LA(1);
                        int index180_1206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1206==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA180_1206==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA180_1206==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA180_1206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA180_1206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA180_1206==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA180_1206==LT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA180_1206==GT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA180_1206==LE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA180_1206==GE) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA180_1206==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA180_1206==IS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA180_1206==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA180_1206==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA180_1206==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA180_1206==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA180_1206==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA180_1206==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA180_1206==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA180_1206==RPAREN) ) {s = 2202;}
                        else if ( (LA180_1206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA180_1206==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA180_1206==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA180_1206==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA180_1206==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        input.seek(index180_1206);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA180_1280 = input.LA(1);
                        int index180_1280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1280==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA180_1280==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA180_1280==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA180_1280==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA180_1280==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA180_1280==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA180_1280==LT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA180_1280==GT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA180_1280==LE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA180_1280==GE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA180_1280==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA180_1280==IS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA180_1280==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA180_1280==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA180_1280==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA180_1280==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA180_1280==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA180_1280==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA180_1280==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA180_1280==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA180_1280==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA180_1280==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA180_1280==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA180_1280==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA180_1280==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA180_1280==RPAREN) ) {s = 14;}
                        input.seek(index180_1280);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA180_1281 = input.LA(1);
                        int index180_1281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1281==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA180_1281==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA180_1281==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA180_1281==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA180_1281==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA180_1281==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA180_1281==LT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA180_1281==GT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA180_1281==LE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA180_1281==GE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA180_1281==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA180_1281==IS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA180_1281==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA180_1281==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA180_1281==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA180_1281==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA180_1281==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA180_1281==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA180_1281==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA180_1281==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA180_1281==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA180_1281==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA180_1281==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA180_1281==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA180_1281==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA180_1281==RPAREN) ) {s = 14;}
                        input.seek(index180_1281);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA180_1348 = input.LA(1);
                        int index180_1348 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1348==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA180_1348==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA180_1348==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA180_1348==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA180_1348==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA180_1348==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA180_1348==LT) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA180_1348==GT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA180_1348==LE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA180_1348==GE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA180_1348==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA180_1348==IS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA180_1348==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA180_1348==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA180_1348==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA180_1348==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA180_1348==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA180_1348==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA180_1348==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA180_1348==RPAREN) ) {s = 2279;}
                        else if ( (LA180_1348==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA180_1348==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA180_1348==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA180_1348==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA180_1348==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        input.seek(index180_1348);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA180_1349 = input.LA(1);
                        int index180_1349 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1349==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA180_1349==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA180_1349==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA180_1349==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA180_1349==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA180_1349==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA180_1349==LT) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA180_1349==GT) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA180_1349==LE) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA180_1349==GE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA180_1349==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA180_1349==IS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA180_1349==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA180_1349==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA180_1349==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA180_1349==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA180_1349==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA180_1349==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA180_1349==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA180_1349==RPAREN) ) {s = 2304;}
                        else if ( (LA180_1349==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA180_1349==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA180_1349==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA180_1349==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA180_1349==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        input.seek(index180_1349);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA180_1416 = input.LA(1);
                        int index180_1416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1416==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA180_1416==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA180_1416==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA180_1416==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA180_1416==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA180_1416==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA180_1416==LT) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA180_1416==GT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA180_1416==LE) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA180_1416==GE) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA180_1416==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA180_1416==IS) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA180_1416==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA180_1416==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA180_1416==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA180_1416==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA180_1416==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA180_1416==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA180_1416==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA180_1416==RPAREN) ) {s = 2329;}
                        else if ( (LA180_1416==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA180_1416==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA180_1416==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA180_1416==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA180_1416==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        input.seek(index180_1416);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA180_1417 = input.LA(1);
                        int index180_1417 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1417==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA180_1417==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA180_1417==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA180_1417==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA180_1417==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA180_1417==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA180_1417==LT) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA180_1417==GT) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA180_1417==LE) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA180_1417==GE) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA180_1417==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA180_1417==IS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA180_1417==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA180_1417==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA180_1417==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA180_1417==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA180_1417==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA180_1417==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA180_1417==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA180_1417==RPAREN) ) {s = 2354;}
                        else if ( (LA180_1417==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA180_1417==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA180_1417==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA180_1417==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA180_1417==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        input.seek(index180_1417);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA180_1475 = input.LA(1);
                        int index180_1475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1475==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA180_1475==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA180_1475==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA180_1475==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA180_1475==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA180_1475==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA180_1475==LT) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA180_1475==GT) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA180_1475==LE) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA180_1475==GE) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA180_1475==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA180_1475==IS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA180_1475==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA180_1475==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA180_1475==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA180_1475==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA180_1475==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA180_1475==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA180_1475==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA180_1475==RPAREN) ) {s = 2379;}
                        else if ( (LA180_1475==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA180_1475==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA180_1475==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA180_1475==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA180_1475==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        input.seek(index180_1475);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA180_1476 = input.LA(1);
                        int index180_1476 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1476==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA180_1476==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA180_1476==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA180_1476==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA180_1476==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA180_1476==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA180_1476==LT) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA180_1476==GT) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA180_1476==LE) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA180_1476==GE) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA180_1476==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA180_1476==IS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA180_1476==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA180_1476==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA180_1476==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA180_1476==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA180_1476==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA180_1476==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA180_1476==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA180_1476==RPAREN) ) {s = 2404;}
                        else if ( (LA180_1476==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA180_1476==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA180_1476==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA180_1476==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA180_1476==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        input.seek(index180_1476);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA180_1552 = input.LA(1);
                        int index180_1552 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1552==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA180_1552==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA180_1552==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA180_1552==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA180_1552==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA180_1552==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA180_1552==LT) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA180_1552==GT) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA180_1552==LE) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA180_1552==GE) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA180_1552==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA180_1552==IS) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA180_1552==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA180_1552==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA180_1552==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA180_1552==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA180_1552==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA180_1552==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA180_1552==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA180_1552==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA180_1552==RPAREN) ) {s = 2430;}
                        else if ( (LA180_1552==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA180_1552==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA180_1552==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA180_1552==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA180_1552==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        input.seek(index180_1552);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA180_1553 = input.LA(1);
                        int index180_1553 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1553==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA180_1553==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA180_1553==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA180_1553==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA180_1553==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA180_1553==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA180_1553==LT) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA180_1553==GT) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA180_1553==LE) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA180_1553==GE) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA180_1553==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA180_1553==IS) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA180_1553==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA180_1553==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA180_1553==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA180_1553==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA180_1553==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA180_1553==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA180_1553==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA180_1553==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA180_1553==RPAREN) ) {s = 2456;}
                        else if ( (LA180_1553==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA180_1553==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA180_1553==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA180_1553==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA180_1553==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        input.seek(index180_1553);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA180_1610 = input.LA(1);
                        int index180_1610 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1610==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA180_1610==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA180_1610==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA180_1610==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA180_1610==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA180_1610==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA180_1610==LT) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA180_1610==GT) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA180_1610==LE) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA180_1610==GE) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA180_1610==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA180_1610==IS) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA180_1610==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA180_1610==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA180_1610==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA180_1610==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA180_1610==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA180_1610==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA180_1610==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA180_1610==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA180_1610==RPAREN) ) {s = 2482;}
                        else if ( (LA180_1610==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA180_1610==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA180_1610==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA180_1610==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA180_1610==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        input.seek(index180_1610);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA180_1611 = input.LA(1);
                        int index180_1611 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1611==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA180_1611==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA180_1611==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA180_1611==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA180_1611==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA180_1611==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA180_1611==LT) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA180_1611==GT) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA180_1611==LE) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA180_1611==GE) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA180_1611==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA180_1611==IS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA180_1611==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA180_1611==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA180_1611==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA180_1611==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA180_1611==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA180_1611==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA180_1611==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA180_1611==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA180_1611==RPAREN) ) {s = 2508;}
                        else if ( (LA180_1611==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA180_1611==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA180_1611==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA180_1611==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA180_1611==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        input.seek(index180_1611);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA180_1677 = input.LA(1);
                        int index180_1677 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1677==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA180_1677==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA180_1677==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA180_1677==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA180_1677==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA180_1677==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA180_1677==LT) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA180_1677==GT) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA180_1677==LE) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA180_1677==GE) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA180_1677==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA180_1677==IS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA180_1677==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA180_1677==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA180_1677==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA180_1677==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA180_1677==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA180_1677==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA180_1677==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA180_1677==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA180_1677==RPAREN) ) {s = 2534;}
                        else if ( (LA180_1677==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA180_1677==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA180_1677==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA180_1677==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA180_1677==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        input.seek(index180_1677);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA180_1678 = input.LA(1);
                        int index180_1678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1678==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA180_1678==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA180_1678==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA180_1678==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA180_1678==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA180_1678==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA180_1678==LT) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA180_1678==GT) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA180_1678==LE) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA180_1678==GE) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA180_1678==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA180_1678==IS) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA180_1678==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA180_1678==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA180_1678==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA180_1678==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA180_1678==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA180_1678==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA180_1678==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA180_1678==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA180_1678==RPAREN) ) {s = 2560;}
                        else if ( (LA180_1678==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA180_1678==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA180_1678==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA180_1678==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA180_1678==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        input.seek(index180_1678);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA180_1750 = input.LA(1);
                        int index180_1750 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1750==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA180_1750==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA180_1750==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA180_1750==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA180_1750==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA180_1750==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA180_1750==LT) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA180_1750==GT) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA180_1750==LE) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA180_1750==GE) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA180_1750==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA180_1750==IS) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA180_1750==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA180_1750==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA180_1750==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA180_1750==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA180_1750==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA180_1750==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA180_1750==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA180_1750==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA180_1750==RPAREN) ) {s = 2586;}
                        else if ( (LA180_1750==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA180_1750==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA180_1750==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA180_1750==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA180_1750==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        input.seek(index180_1750);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA180_1751 = input.LA(1);
                        int index180_1751 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1751==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA180_1751==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA180_1751==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA180_1751==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA180_1751==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA180_1751==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA180_1751==LT) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA180_1751==GT) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA180_1751==LE) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA180_1751==GE) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA180_1751==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA180_1751==IS) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA180_1751==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA180_1751==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA180_1751==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA180_1751==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA180_1751==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA180_1751==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA180_1751==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA180_1751==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA180_1751==RPAREN) ) {s = 2612;}
                        else if ( (LA180_1751==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA180_1751==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA180_1751==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA180_1751==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA180_1751==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        input.seek(index180_1751);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA180_1812 = input.LA(1);
                        int index180_1812 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1812==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA180_1812==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA180_1812==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA180_1812==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA180_1812==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA180_1812==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA180_1812==LT) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA180_1812==GT) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA180_1812==LE) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA180_1812==GE) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA180_1812==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA180_1812==IS) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA180_1812==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA180_1812==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA180_1812==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA180_1812==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA180_1812==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA180_1812==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA180_1812==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA180_1812==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA180_1812==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA180_1812==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA180_1812==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA180_1812==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA180_1812==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA180_1812==RPAREN) ) {s = 14;}
                        input.seek(index180_1812);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA180_1813 = input.LA(1);
                        int index180_1813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1813==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA180_1813==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA180_1813==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA180_1813==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA180_1813==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA180_1813==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA180_1813==LT) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA180_1813==GT) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA180_1813==LE) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA180_1813==GE) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA180_1813==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA180_1813==IS) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA180_1813==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA180_1813==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA180_1813==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA180_1813==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA180_1813==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA180_1813==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA180_1813==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA180_1813==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA180_1813==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA180_1813==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA180_1813==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA180_1813==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA180_1813==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA180_1813==RPAREN) ) {s = 14;}
                        input.seek(index180_1813);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA180_1885 = input.LA(1);
                        int index180_1885 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1885==RPAREN) ) {s = 14;}
                        else if ( (LA180_1885==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA180_1885==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA180_1885==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA180_1885==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA180_1885==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA180_1885==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA180_1885==LT) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA180_1885==GT) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA180_1885==LE) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA180_1885==GE) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA180_1885==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA180_1885==IS) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA180_1885==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA180_1885==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA180_1885==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA180_1885==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA180_1885==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA180_1885==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA180_1885==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA180_1885==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA180_1885==AS) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA180_1885==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA180_1885==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA180_1885==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA180_1885==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA180_1885==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        input.seek(index180_1885);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA180_1886 = input.LA(1);
                        int index180_1886 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1886==RPAREN) ) {s = 14;}
                        else if ( (LA180_1886==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA180_1886==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA180_1886==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA180_1886==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA180_1886==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA180_1886==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA180_1886==LT) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA180_1886==GT) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA180_1886==LE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA180_1886==GE) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA180_1886==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA180_1886==IS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA180_1886==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA180_1886==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA180_1886==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA180_1886==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA180_1886==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA180_1886==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA180_1886==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA180_1886==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA180_1886==AS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA180_1886==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA180_1886==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA180_1886==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA180_1886==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA180_1886==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        input.seek(index180_1886);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA180_1953 = input.LA(1);
                        int index180_1953 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1953==RPAREN) ) {s = 2724;}
                        else if ( (LA180_1953==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA180_1953==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA180_1953==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA180_1953==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA180_1953==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA180_1953==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA180_1953==LT) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA180_1953==GT) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA180_1953==LE) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA180_1953==GE) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA180_1953==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA180_1953==IS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA180_1953==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA180_1953==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA180_1953==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA180_1953==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA180_1953==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA180_1953==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA180_1953==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA180_1953==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA180_1953==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA180_1953==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA180_1953==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA180_1953==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        input.seek(index180_1953);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA180_1954 = input.LA(1);
                        int index180_1954 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA180_1954==RPAREN) ) {s = 2749;}
                        else if ( (LA180_1954==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA180_1954==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA180_1954==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA180_1954==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA180_1954==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA180_1954==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA180_1954==LT) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA180_1954==GT) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA180_1954==LE) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA180_1954==GE) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA180_1954==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA180_1954==IS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA180_1954==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA180_1954==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA180_1954==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA180_1954==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA180_1954==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA180_1954==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA180_1954==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA180_1954==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA180_1954==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA180_1954==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA180_1954==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA180_1954==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        input.seek(index180_1954);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA180_2077 = input.LA(1);
                        int index180_2077 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2077);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA180_2102 = input.LA(1);
                        int index180_2102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2102);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA180_2127 = input.LA(1);
                        int index180_2127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2127);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA180_2152 = input.LA(1);
                        int index180_2152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2152);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA180_2177 = input.LA(1);
                        int index180_2177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2177);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA180_2202 = input.LA(1);
                        int index180_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2202);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA180_2279 = input.LA(1);
                        int index180_2279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2279);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA180_2304 = input.LA(1);
                        int index180_2304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2304);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA180_2329 = input.LA(1);
                        int index180_2329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2329);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA180_2354 = input.LA(1);
                        int index180_2354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2354);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA180_2379 = input.LA(1);
                        int index180_2379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2379);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA180_2404 = input.LA(1);
                        int index180_2404 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2404);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA180_2430 = input.LA(1);
                        int index180_2430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2430);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA180_2456 = input.LA(1);
                        int index180_2456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2456);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA180_2482 = input.LA(1);
                        int index180_2482 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2482);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA180_2508 = input.LA(1);
                        int index180_2508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2508);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA180_2534 = input.LA(1);
                        int index180_2534 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2534);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA180_2560 = input.LA(1);
                        int index180_2560 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2560);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA180_2586 = input.LA(1);
                        int index180_2586 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2586);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA180_2612 = input.LA(1);
                        int index180_2612 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2612);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA180_2724 = input.LA(1);
                        int index180_2724 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2724);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA180_2749 = input.LA(1);
                        int index180_2749 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index180_2749);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1666 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L,0x0000000000000200L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1671 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1689 = new BitSet(new long[]{0x0040020008000010L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1695 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1725 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1755 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000C5200C8140008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1815 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000E5200C8140008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1927 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000C5200C8000008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1968 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000E5200C8040008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2100 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000C7200C8020008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2106 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000C5200C8000008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2148 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000E7200C8060008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2154 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0000000000000000L,0x000E5200C8040008L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2200 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2205 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2210 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2215 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2220 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2225 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2230 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2247 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2250 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2256 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2259 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2263 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2266 = new BitSet(new long[]{0x0104300000010002L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2270 = new BitSet(new long[]{0x0104300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2276 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2279 = new BitSet(new long[]{0x0104300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2286 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2289 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2292 = new BitSet(new long[]{0x0104200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2299 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2302 = new BitSet(new long[]{0x0104000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2309 = new BitSet(new long[]{0x0130800080004000L,0x0000404000220000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2312 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2319 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2322 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2325 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008040008L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2352 = new BitSet(new long[]{0x0040000008000000L,0x0004010000050000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2361 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2364 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2427 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2431 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2476 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2480 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2499 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2501 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2504 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2506 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2514 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2551 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2558 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2565 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2571 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2578 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2580 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_mergeMatched_in_onMergeExpr2589 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_mergeUnmatched_in_onMergeExpr2593 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2631 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2633 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2636 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2638 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2642 = new BitSet(new long[]{0x0000000000000000L,0x0000010000010000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2657 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2662 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatched2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2715 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2717 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2719 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2721 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2725 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2732 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2736 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2777 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2779 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2785 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2787 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2790 = new BitSet(new long[]{0x0100300400010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2794 = new BitSet(new long[]{0x0100300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2800 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2802 = new BitSet(new long[]{0x0100300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2811 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2813 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2815 = new BitSet(new long[]{0x0100200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2822 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2824 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2831 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2833 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2835 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008040008L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2911 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2930 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2932 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2935 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2937 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2944 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2997 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2999 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3003 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3005 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3010 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3043 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3096 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3100 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3105 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3147 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3152 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3181 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3212 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3253 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3259 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00020000004C0000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3264 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00020000004C0000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3269 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x00020000004C0000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3278 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000000C0000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3282 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000000C0000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3286 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000000C0000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3301 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3320 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3337 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3340 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3429 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x000E5200CA040008L,0x0000000000000200L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3432 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3458 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3508 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3644 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x000E5200CA040008L,0x0000000000000200L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3646 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3687 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3715 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3746 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3750 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3757 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000020C0000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000020C0000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000140000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_variantList3887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000002040000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3947 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3953 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4045 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4066 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4083 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4086 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4129 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4133 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4137 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4140 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4161 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4175 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4177 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4244 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4247 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4250 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4253 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4270 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4331 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4337 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4343 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4349 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4386 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4436 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4439 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4503 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4541 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4545 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4549 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4553 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4562 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4567 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4578 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4584 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4665 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4720 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4726 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4733 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4738 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4744 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4750 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4756 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4806 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4808 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4813 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4844 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4849 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4876 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4915 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4961 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4965 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4969 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4973 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4977 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001A000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5188 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001A000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5290 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5292 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5321 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5455 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5521 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA9C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5568 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5608 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5635 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5720 = new BitSet(new long[]{0x0030800080004002L,0x0000000000220000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5735 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5739 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5743 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5747 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5815 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5821 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5877 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_outputLimit5879 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6041 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6089 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6095 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008040008L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008040008L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6172 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6176 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6180 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6184 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6188 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6193 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6229 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_whenClause6232 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6234 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_whenClause6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6250 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_elseClause6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6280 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6283 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6286 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6300 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_caseExpression6302 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6304 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6307 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6345 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6350 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6352 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6384 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6389 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6391 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000304000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6428 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6431 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6434 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000304000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6459 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6475 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00200000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6488 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6506 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6520 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6522 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6536 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6550 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6580 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00200000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6615 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6620 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00200000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6625 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00200000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6753 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000F000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6785 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6789 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6793 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6797 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000F000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6856 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000F000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000F000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6962 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7001 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7007 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000021120000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7032 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7061 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001120000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7266 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7318 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7320 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7377 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7472 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7478 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020008000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7526 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7529 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020008000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0002000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7552 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7555 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7558 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0002000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7577 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7602 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7611 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7618 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7781 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7787 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7790 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7793 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7803 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7811 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7847 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7854 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7859 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7927 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E7200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7933 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000020000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7968 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7972 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7977 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7992 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7996 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8001 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8016 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8028 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8033 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8068 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8072 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8077 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8092 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8096 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8101 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8116 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8120 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8125 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8155 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8160 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8182 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8188 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8204 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8210 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8226 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8240 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8259 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8277 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8304 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8307 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8330 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8365 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8370 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8403 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8408 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8442 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8519 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_maxFunc8522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8525 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_maxFunc8528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8531 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_maxFunc8534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8580 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8614 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8620 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8658 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8728 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8733 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8737 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8740 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8757 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8759 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200D80C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8807 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8848 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8853 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8855 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8887 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8892 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8894 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8929 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8938 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9005 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9011 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9019 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9025 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9149 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9154 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000120000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom9183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9198 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9204 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00020000008C0000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9208 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9324 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA9C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9385 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA9C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9406 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9432 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200FA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000021000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9444 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DB0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9467 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9589 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9684 = new BitSet(new long[]{0x803801E80FFC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9687 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9689 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9691 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9695 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9700 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9705 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9764 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9814 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9817 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9869 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9945 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA1C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_expression_in_expressionList10166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10169 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA0C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_expressionList10172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10203 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000E5200DA8C0008L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10339 = new BitSet(new long[]{0x0600000000000002L,0x00000000E0000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_number_in_rangeOperand10534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10654 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10658 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10660 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C42001A040008L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C42001A040008L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10830 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010880000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11062 = new BitSet(new long[]{0x803801E807FC4422L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0003000000040000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420018040008L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11595 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11599 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11601 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11658 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11662 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11664 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11721 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11725 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11727 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11789 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11793 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11795 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11857 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11861 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11863 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008000008L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000C420008000008L});
    public static final BitSet FOLLOW_number_in_numberconstant12113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10318 = new BitSet(new long[]{0x0000000000000002L});
}
