  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=177;
    public static final int FLOAT_SUFFIX=337;
    public static final int STAR=280;
    public static final int DOT_EXPR=185;
    public static final int NUMERIC_PARAM_LIST=117;
    public static final int MOD=298;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=159;
    public static final int LIB_FUNC_CHAIN=184;
    public static final int CREATE_COL_TYPE_LIST=234;
    public static final int BSR=319;
    public static final int MERGE_INS=250;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=183;
    public static final int TIMEPERIOD_MILLISECONDS=98;
    public static final int FULL_OUTERJOIN_EXPR=163;
    public static final int MATCHREC_PATTERN_CONCAT=262;
    public static final int INC=312;
    public static final int LNOT=308;
    public static final int RPAREN=275;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=285;
    public static final int BSR_ASSIGN=320;
    public static final int CAST_EXPR=214;
    public static final int MATCHES=109;
    public static final int USING=113;
    public static final int STREAM_EXPR=158;
    public static final int TIMEPERIOD_SECONDS=95;
    public static final int NOT_EQUAL=290;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=126;
    public static final int LAST_AGGREG=241;
    public static final int REGEXP=9;
    public static final int MATCHED=115;
    public static final int FOLLOWED_BY_EXPR=120;
    public static final int FOLLOWED_BY=302;
    public static final int HOUR_PART=190;
    public static final int RBRACK=279;
    public static final int MATCHREC_PATTERN_NESTED=264;
    public static final int MATCH_UNTIL_RANGE_CLOSED=232;
    public static final int GE=294;
    public static final int METHOD_JOIN_EXPR=228;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=125;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=124;
    public static final int MINUS_ASSIGN=313;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=136;
    public static final int NUM_DOUBLE=258;
    public static final int INSERTINTO_STREAM_NAME=202;
    public static final int LCURLY=299;
    public static final int TIMEPERIOD_MILLISEC=96;
    public static final int UNARY_MINUS=186;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=200;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=134;
    public static final int WS=329;
    public static final int EMAILAT=328;
    public static final int SUBSELECT_GROUP_EXPR=206;
    public static final int ON_SELECT_INSERT_EXPR=223;
    public static final int ESCAPECHAR=303;
    public static final int EXPRCOL=181;
    public static final int SL_COMMENT=330;
    public static final int NULL_TYPE=257;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=230;
    public static final int GT=292;
    public static final int BNOT=309;
    public static final int WHERE_EXPR=145;
    public static final int END=33;
    public static final int LAND=326;
    public static final int INNERJOIN_EXPR=160;
    public static final int NOT_REGEXP=197;
    public static final int MATCH_UNTIL_EXPR=229;
    public static final int EVENT_PROP_EXPR=167;
    public static final int LBRACK=278;
    public static final int MERGE_UPD=249;
    public static final int VIEW_EXPR=142;
    public static final int ANNOTATION=237;
    public static final int LONG_TYPE=252;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=127;
    public static final int MATCHREC_PATTERN=260;
    public static final int TIMEPERIOD_SEC=93;
    public static final int TICKED_STRING_LITERAL=304;
    public static final int ON_SELECT_EXPR=221;
    public static final int MINUTE_PART=191;
    public static final int PATTERN_NOT_EXPR=123;
    public static final int SQL_NE=289;
    public static final int SUM=18;
    public static final int HexDigit=335;
    public static final int UPDATE_EXPR=243;
    public static final int LPAREN=274;
    public static final int IN_SUBSELECT_EXPR=208;
    public static final int AT=85;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=99;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=266;
    public static final int NOT_IN_RANGE=204;
    public static final int OFFSET=103;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=192;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=105;
    public static final int IDENT=273;
    public static final int DATABASE_JOIN_EXPR=144;
    public static final int BXOR=288;
    public static final int PLUS=282;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=87;
    public static final int CREATE_SCHEMA_EXPR=245;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=170;
    public static final int CREATE_INDEX_EXPR=215;
    public static final int TIMEPERIOD_MILLISECOND=97;
    public static final int EVAL_NOTEQUALS_EXPR=151;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=231;
    public static final int CREATE_VARIABLE_EXPR=227;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=267;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=121;
    public static final int RIGHT_OUTERJOIN_EXPR=162;
    public static final int NUMBERSETSTAR=236;
    public static final int LAST_OPERATOR=211;
    public static final int PATTERN_FILTER_EXPR=122;
    public static final int MERGE=114;
    public static final int EVAL_AND_EXPR=148;
    public static final int LEFT_OUTERJOIN_EXPR=161;
    public static final int EPL_EXPR=259;
    public static final int GROUP_BY_EXPR=164;
    public static final int SET=82;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=168;
    public static final int MINUS=296;
    public static final int SEMI=327;
    public static final int STAR_ASSIGN=315;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=248;
    public static final int FIRST_AGGREG=240;
    public static final int COLON=284;
    public static final int EVAL_EQUALS_GROUP_EXPR=152;
    public static final int BAND_ASSIGN=325;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=178;
    public static final int NOT_IN_SET=194;
    public static final int VALUE_NULL=101;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=171;
    public static final int SL=321;
    public static final int NOT_IN_SUBSELECT_EXPR=209;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=140;
    public static final int SR=317;
    public static final int RCURLY=300;
    public static final int PLUS_ASSIGN=311;
    public static final int EXISTS_SUBSELECT_EXPR=207;
    public static final int DAY_PART=189;
    public static final int EVENT_FILTER_IN=135;
    public static final int DIV=297;
    public static final int OBJECT_PARAM_ORDERED_EXPR=119;
    public static final int OctalEscape=334;
    public static final int MILLISECOND_PART=193;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=102;
    public static final int SELECTION_EXPR=155;
    public static final int LOR=295;
    public static final int CAST=78;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=201;
    public static final int EXPONENT=336;
    public static final int LT=291;
    public static final int PATTERN_INCL_EXPR=143;
    public static final int WHILE=112;
    public static final int ORDER_BY_EXPR=165;
    public static final int BOOL_TYPE=256;
    public static final int MOD_ASSIGN=316;
    public static final int ANNOTATION_ARRAY=238;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=210;
    public static final int EQUALS=276;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=310;
    public static final int WINDOW_AGGREG=242;
    public static final int SL_ASSIGN=322;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=265;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=222;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=188;
    public static final int CREATE_COL_TYPE=235;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=100;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=153;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=253;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=94;
    public static final int EVENT_FILTER_BETWEEN=137;
    public static final int ANNOTATION_VALUE=239;
    public static final int SUBSELECT_EXPR=205;
    public static final int NUMERIC_PARAM_RANGE=116;
    public static final int CONCAT=182;
    public static final int CLASS_IDENT=139;
    public static final int MATCHREC_PATTERN_ALTER=263;
    public static final int ON_EXPR=218;
    public static final int CREATE_WINDOW_EXPR=216;
    public static final int PROPERTY_SELECTION_STREAM=129;
    public static final int ON_DELETE_EXPR=220;
    public static final int NUM_LONG=305;
    public static final int ON=41;
    public static final int TIME_PERIOD=187;
    public static final int DOUBLE_TYPE=254;
    public static final int DELETE=80;
    public static final int INT_TYPE=251;
    public static final int MATCHREC_PARTITION=271;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=147;
    public static final int ORDER_ELEMENT_EXPR=166;
    public static final int TIMEPERIOD_HOURS=90;
    public static final int VARIABLE=83;
    public static final int SUBSTITUTION=213;
    public static final int UNTIL=84;
    public static final int STRING_TYPE=255;
    public static final int NUM_INT=301;
    public static final int MATCHREC_DEFINE_ITEM=268;
    public static final int ON_SET_EXPR=226;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=247;
    public static final int NUM_FLOAT=306;
    public static final int ON_EXPR_FROM=225;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=332;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=128;
    public static final int WEEKDAY_OPERATOR=212;
    public static final int DEC=314;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=323;
    public static final int NUMERIC_PARAM_FREQUENCY=118;
    public static final int SNAPSHOT=81;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=176;
    public static final int EVENT_FILTER_PARAM=132;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=173;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=104;
    public static final int FOR=111;
    public static final int ON_STREAM=219;
    public static final int DEFINE=107;
    public static final int TIMEPERIOD_DAYS=88;
    public static final int EVENT_FILTER_RANGE=133;
    public static final int ML_COMMENT=331;
    public static final int INDEX=86;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=172;
    public static final int BOR_ASSIGN=324;
    public static final int COMMA=272;
    public static final int IS=42;
    public static final int PARTITION=108;
    public static final int WHEN_LIMIT_EXPR=179;
    public static final int TIMEPERIOD_LIMIT_EXPR=175;
    public static final int SOME=49;
    public static final int EQUAL=307;
    public static final int BOR=281;
    public static final int MATCHREC_MEASURE_ITEM=270;
    public static final int TIMEPERIOD_HOUR=89;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=138;
    public static final int IN_RANGE=203;
    public static final int DOT=277;
    public static final int MATCHREC_MEASURES=269;
    public static final int CURRENT_TIMESTAMP=79;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=130;
    public static final int INSERTINTO_EXPR=180;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=146;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=233;
    public static final int EVAL_EQUALS_EXPR=150;
    public static final int TIMEPERIOD_MINUTES=92;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=196;
    public static final int EVENT_LIMIT_EXPR=174;
    public static final int NOT_BETWEEN=195;
    public static final int TIMEPERIOD_MINUTE=91;
    public static final int EVAL_OR_EXPR=149;
    public static final int ON_SELECT_INSERT_OUTPUT=224;
    public static final int MEASURES=106;
    public static final int AFTER=110;
    public static final int BAND=287;
    public static final int MATCHREC_PATTERN_ATOM=261;
    public static final int QUOTED_STRING_LITERAL=286;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=283;
    public static final int OBSERVER_EXPR=141;
    public static final int CREATE_SCHEMA_EXPR_QUAL=246;
    public static final int EVENT_FILTER_IDENT=131;
    public static final int EVENT_PROP_MAPPED=169;
    public static final int UnicodeEscape=333;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=198;
    public static final int SELECTION_ELEMENT_EXPR=156;
    public static final int CREATE_WINDOW_SELECT_EXPR=217;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=244;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=157;
    public static final int SR_ASSIGN=318;
    public static final int LE=293;
    public static final int DBFROM_CLAUSE=199;
    public static final int EVAL_IDENT=154;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1662);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1667);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1671); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1685);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1691);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1721);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1725); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1747);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);
                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);
                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1755);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1759);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1807);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1815);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1819);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1865);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1868); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1871);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1892);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1895); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1898);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1925);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1966);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1997);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2008);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2021);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2044);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2055);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2068);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2076);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2099);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2102); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2104);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2147);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2150); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2152);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.mergeExpr_return mergeExpr57 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr58 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            case MERGE:
                {
                alt17=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2196);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2201);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2206);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2211);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2216);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2221);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2226);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_mergeExpr_in_eplExpression2231);
                    mergeExpr57=mergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeExpr57.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2234);
                    forExpr58=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr58.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT59=null;
        Token SELECT61=null;
        Token FROM63=null;
        Token WHERE66=null;
        Token GROUP68=null;
        Token BY69=null;
        Token HAVING71=null;
        Token OUTPUT73=null;
        Token ORDER75=null;
        Token BY76=null;
        Token ROW_LIMIT_EXPR78=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr60 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause62 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause64 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog65 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause67 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr70 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause72 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit74 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr77 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit79 = null;
        CommonTree INSERT59_tree=null;
        CommonTree SELECT61_tree=null;
        CommonTree FROM63_tree=null;
        CommonTree WHERE66_tree=null;
        CommonTree GROUP68_tree=null;
        CommonTree BY69_tree=null;
        CommonTree HAVING71_tree=null;
        CommonTree OUTPUT73_tree=null;
        CommonTree ORDER75_tree=null;
        CommonTree BY76_tree=null;
        CommonTree ROW_LIMIT_EXPR78_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT59=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2248); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2251);
                    insertIntoExpr60=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr60.getTree());
                    }
                    break;
            }
            SELECT61=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2257); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2260);
            selectClause62=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause62.getTree());
            FROM63=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2264); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2267);
            fromClause64=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause64.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2271);
                    matchRecog65=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog65.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE66=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2277); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2280);
                    whereClause67=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause67.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP68=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2287); if (state.failed) return retval;
                    BY69=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2290); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2293);
                    groupByListExpr70=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr70.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING71=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2300); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2303);
                    havingClause72=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause72.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT73=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2310); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2313);
                    outputLimit74=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit74.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER75=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2320); if (state.failed) return retval;
                    BY76=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2323); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2326);
                    orderByListExpr77=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr77.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR78=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2333); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2336);
                    rowLimit79=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit79.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON80=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr81 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr82 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr83 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr84 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert85 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr86 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr87 = null;
        CommonTree ON80_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON80=(Token)match(input,ON,FOLLOW_ON_in_onExpr2351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON80);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2353);
            onStreamExpr81=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr81.getTree());
            int alt30=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2358);
                    onDeleteExpr82=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr82.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2362);
                    onSelectExpr83=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr83.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2365);
                            	    onSelectInsertExpr84=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr84.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2368);
                                    outputClauseInsert85=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert85.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2375);
                    onSetExpr86=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr86.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2379);
                    onUpdateExpr87=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2422);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2426);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2475);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2496);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2499); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2501);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2511);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeExpr_return mergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.mergeExpr_return retval = new EsperEPL2GrammarParser.mergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token IDENT103=null;
        Token AS104=null;
        Token USING105=null;
        Token ON107=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr106 = null;
        EsperEPL2GrammarParser.expression_return expression108 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched109 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched110 = null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree IDENT103_tree=null;
        CommonTree AS104_tree=null;
        CommonTree USING105_tree=null;
        CommonTree ON107_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_mergeMatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatched");
        RewriteRuleSubtreeStream stream_mergeUnmatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatched");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_mergeExpr2546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_mergeExpr2548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO102);
            IDENT103=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT103);
            int alt36=3;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==AS) ) {
                alt36=1;
            }
            else if ( (LA36_0==IDENT) ) {
                alt36=2;
            }
            switch (alt36) {
                case 1 :
                    {
                    AS104=(Token)match(input,AS,FOLLOW_AS_in_mergeExpr2553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS104);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            USING105=(Token)match(input,USING,FOLLOW_USING_in_mergeExpr2569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_USING.add(USING105);
            pushFollow(FOLLOW_onStreamExpr_in_mergeExpr2571);
            onStreamExpr106=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr106.getTree());
            ON107=(Token)match(input,ON,FOLLOW_ON_in_mergeExpr2575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON107);
            pushFollow(FOLLOW_expression_in_mergeExpr2577);
            expression108=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression108.getTree());
            int cnt37=0;
            loop37:
            do {
                int alt37=3;
                int LA37_0 = input.LA(1);
                if ( (LA37_0==WHEN) ) {
                    int LA37_3 = input.LA(2);
                    if ( (LA37_3==MATCHED) ) {
                        alt37=1;
                    }
                    else if ( (LA37_3==NOT_EXPR) ) {
                        alt37=2;
                    }
                }
                switch (alt37) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatched_in_mergeExpr2582);
            	    mergeMatched109=mergeMatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatched.add(mergeMatched109.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatched_in_mergeExpr2586);
            	    mergeUnmatched110=mergeUnmatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatched.add(mergeUnmatched110.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt37 >= 1 ) break loop37;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(37, input);
                        throw eee;
                }
                cnt37++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MERGE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                while ( stream_mergeMatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatched.nextTree());
                }
                stream_mergeMatched.reset();
                while ( stream_mergeUnmatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatched.nextTree());
                }
                stream_mergeUnmatched.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token d=null;
        Token WHEN111=null;
        Token MATCHED112=null;
        Token AND_EXPR113=null;
        Token THEN115=null;
        Token SET116=null;
        Token COMMA118=null;
        EsperEPL2GrammarParser.expression_return expression114 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment117 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment119 = null;
        CommonTree i_tree=null;
        CommonTree d_tree=null;
        CommonTree WHEN111_tree=null;
        CommonTree MATCHED112_tree=null;
        CommonTree AND_EXPR113_tree=null;
        CommonTree THEN115_tree=null;
        CommonTree SET116_tree=null;
        CommonTree COMMA118_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN111=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN111);
            MATCHED112=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED112);
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==AND_EXPR) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    AND_EXPR113=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR113);
                    pushFollow(FOLLOW_expression_in_mergeMatched2635);
                    expression114=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression114.getTree());
                    }
                    break;
            }
            THEN115=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN115);
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==UPDATE) ) {
                alt40=1;
            }
            else if ( (LA40_0==DELETE) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    {
                    i=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(i);
                    SET116=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET116);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2656);
                    onSetAssignment117=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment117.getTree());
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);
                        if ( (LA39_0==COMMA) ) {
                            alt39=1;
                        }
                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    COMMA118=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2659); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA118);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2661);
                    	    onSetAssignment119=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment119.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop39;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatched2672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN120=null;
        Token NOT_EXPR121=null;
        Token MATCHED122=null;
        Token THEN123=null;
        Token INSERT124=null;
        Token LPAREN125=null;
        Token RPAREN127=null;
        Token SELECT128=null;
        EsperEPL2GrammarParser.columnList_return columnList126 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;
        CommonTree WHEN120_tree=null;
        CommonTree NOT_EXPR121_tree=null;
        CommonTree MATCHED122_tree=null;
        CommonTree THEN123_tree=null;
        CommonTree INSERT124_tree=null;
        CommonTree LPAREN125_tree=null;
        CommonTree RPAREN127_tree=null;
        CommonTree SELECT128_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN120=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN120);
            NOT_EXPR121=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR121);
            MATCHED122=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED122);
            THEN123=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN123);
            INSERT124=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT124);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==LPAREN) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    LPAREN125=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN125);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2727);
                    columnList126=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList126.getTree());
                    RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN127);
                    }
                    break;
            }
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2735);
            selectionList129=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT130=null;
        Token SELECT132=null;
        Token DISTINCT133=null;
        Token WHERE136=null;
        Token GROUP138=null;
        Token BY139=null;
        Token HAVING141=null;
        Token ORDER143=null;
        Token BY144=null;
        Token ROW_LIMIT_EXPR146=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr131 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList134 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom135 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr140 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause142 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr145 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit147 = null;
        CommonTree INSERT130_tree=null;
        CommonTree SELECT132_tree=null;
        CommonTree DISTINCT133_tree=null;
        CommonTree WHERE136_tree=null;
        CommonTree GROUP138_tree=null;
        CommonTree BY139_tree=null;
        CommonTree HAVING141_tree=null;
        CommonTree ORDER143_tree=null;
        CommonTree BY144_tree=null;
        CommonTree ROW_LIMIT_EXPR146_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==INSERT) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    {
                    INSERT130=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT130);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2776);
                    insertIntoExpr131=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr131.getTree());
                    }
                    break;
            }
            SELECT132=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT132);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==DISTINCT) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    DISTINCT133=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT133);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2787);
            selectionList134=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList134.getTree());
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==FROM) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2791);
                    onExprFrom135=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom135.getTree());
                    }
                    break;
            }
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==WHERE) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2799);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==GROUP) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    GROUP138=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP138);
                    BY139=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY139);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2812);
                    groupByListExpr140=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr140.getTree());
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==HAVING) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    HAVING141=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING141);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2821);
                    havingClause142=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause142.getTree());
                    }
                    break;
            }
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==ORDER) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    ORDER143=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER143);
                    BY144=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY144);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2832);
                    orderByListExpr145=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr145.getTree());
                    }
                    break;
            }
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==ROW_LIMIT_EXPR) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR146=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR146);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2841);
                    rowLimit147=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit147.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE148=null;
        Token AS149=null;
        Token SET150=null;
        Token COMMA152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment151 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE148_tree=null;
        CommonTree AS149_tree=null;
        CommonTree SET150_tree=null;
        CommonTree COMMA152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE148=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE148);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt50=3;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AS) ) {
                alt50=1;
            }
            else if ( (LA50_0==IDENT) ) {
                alt50=2;
            }
            switch (alt50) {
                case 1 :
                    {
                    AS149=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS149);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET150=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET150);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2929);
            onSetAssignment151=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment151.getTree());
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==COMMA) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    COMMA152=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2932); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA152);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2934);
            	    onSetAssignment153=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment153.getTree());
            	    }
            	    break;
            	default :
            	    break loop51;
                }
            } while (true);
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==WHERE) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2943);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token WHERE160=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList159 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause161 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree WHERE160_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2996);
            insertIntoExpr157=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3002);
            selectionList159=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList159.getTree());
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==WHERE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    WHERE160=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE160);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3009);
                    whereClause161=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause161.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT162=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT162_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT162=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT162);
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==FIRST) ) {
                alt54=1;
            }
            else if ( (LA54_0==ALL) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);
                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree DELETE163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE163=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE163);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3097);
            onExprFrom164=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom164.getTree());
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==WHERE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3104);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET167=null;
        Token COMMA169=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment168 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment170 = null;
        CommonTree SET167_tree=null;
        CommonTree COMMA169_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET167=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET167);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3146);
            onSetAssignment168=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment168.getTree());
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);
                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }
                switch (alt56) {
            	case 1 :
            	    {
            	    COMMA169=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3149); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA169);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3151);
            	    onSetAssignment170=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment170.getTree());
            	    }
            	    break;
            	default :
            	    break loop56;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty171 = null;
        EsperEPL2GrammarParser.expression_return expression173 = null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3176);
            eventProperty171=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty171.getTree());
            EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);
            pushFollow(FOLLOW_expression_in_onSetAssignment3180);
            expression173=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM174=null;
        Token AS175=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM174_tree=null;
        CommonTree AS175_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM174=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt57=3;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            else if ( (LA57_0==IDENT) ) {
                alt57=2;
            }
            switch (alt57) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE176=null;
        Token WINDOW177=null;
        Token DOT178=null;
        Token DOT180=null;
        Token AS182=null;
        Token LPAREN184=null;
        Token RPAREN186=null;
        Token WHERE187=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression179 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression181 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter183 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList185 = null;
        EsperEPL2GrammarParser.expression_return expression188 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE176_tree=null;
        CommonTree WINDOW177_tree=null;
        CommonTree DOT178_tree=null;
        CommonTree DOT180_tree=null;
        CommonTree AS182_tree=null;
        CommonTree LPAREN184_tree=null;
        CommonTree RPAREN186_tree=null;
        CommonTree WHERE187_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE176=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE176);
            WINDOW177=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW177);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==DOT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT178);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3261);
                    viewExpression179=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression179.getTree());
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);
                        if ( (LA58_0==DOT) ) {
                            alt58=1;
                        }
                        switch (alt58) {
                    	case 1 :
                    	    {
                    	    DOT180=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3264); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT180);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3266);
                    	    viewExpression181=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression181.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop58;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt60=3;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==RETAINUNION) ) {
                alt60=1;
            }
            else if ( (LA60_0==RETAININTERSECTION) ) {
                alt60=2;
            }
            switch (alt60) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    AS182=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS182);
                    }
                    break;
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==SELECT||LA62_0==IDENT||LA62_0==TICKED_STRING_LITERAL) ) {
                alt62=1;
            }
            else if ( (LA62_0==LPAREN) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);
                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3298);
                    createWindowExprModelAfter183=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter183.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3315);
                    createColumnList185=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList185.getTree());
                    RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==INSERT) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt63=2;
                    int LA63_0 = input.LA(1);
                    if ( (LA63_0==WHERE) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            {
                            WHERE187=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3337); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE187);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3339);
                            expression188=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression188.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT189=null;
        Token FROM191=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList190 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier192 = null;
        CommonTree SELECT189_tree=null;
        CommonTree FROM191_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==SELECT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    SELECT189=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3426); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3429);
                    createSelectionList190=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList190.getTree());
                    FROM191=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3431); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3436);
            classIdentifier192=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier192.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE193=null;
        Token INDEX194=null;
        Token ON195=null;
        Token LPAREN196=null;
        Token RPAREN198=null;
        EsperEPL2GrammarParser.columnList_return columnList197 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE193_tree=null;
        CommonTree INDEX194_tree=null;
        CommonTree ON195_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN198_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE193=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE193);
            INDEX194=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX194);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON195=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON195);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);
            pushFollow(FOLLOW_columnList_in_createIndexExpr3465);
            columnList197=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList197.getTree());
            RPAREN198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN198);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE199=null;
        Token VARIABLE200=null;
        Token EQUALS202=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier201 = null;
        EsperEPL2GrammarParser.expression_return expression203 = null;
        CommonTree n_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree VARIABLE200_tree=null;
        CommonTree EQUALS202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            VARIABLE200=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE200);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3498);
            classIdentifier201=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier201.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==EQUALS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    EQUALS202=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS202);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3507);
                    expression203=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression203.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA205=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement204 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement206 = null;
        CommonTree COMMA205_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3549);
            createColumnListElement204=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement204.getTree());
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);
                if ( (LA67_0==COMMA) ) {
                    alt67=1;
                }
                switch (alt67) {
            	case 1 :
            	    {
            	    COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3552); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3554);
            	    createColumnListElement206=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement206.getTree());
            	    }
            	    break;
            	default :
            	    break loop67;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token b=null;
        Token RBRACK208=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier207 = null;
        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK208_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3587);
            classIdentifier207=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier207.getTree());
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==LBRACK) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK208=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK208);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA210=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement209 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement211 = null;
        CommonTree COMMA210_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3638);
            createSelectionListElement209=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement209.getTree());
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);
                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }
                switch (alt69) {
            	case 1 :
            	    {
            	    COMMA210=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3641); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA210);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3643);
            	    createSelectionListElement211=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement211.getTree());
            	    }
            	    break;
            	default :
            	    break loop69;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS213=null;
        Token AS215=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty212 = null;
        EsperEPL2GrammarParser.constant_return constant214 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS213_tree=null;
        CommonTree AS215_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt71=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt71=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt71=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt71=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);
                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3684);
                    eventProperty212=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty212.getTree());
                    int alt70=2;
                    int LA70_0 = input.LA(1);
                    if ( (LA70_0==AS) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            {
                            AS213=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3687); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS213);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3691); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3712);
                    constant214=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant214.getTree());
                    AS215=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS215);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE216=null;
        Token SCHEMA217=null;
        Token AS218=null;
        Token LPAREN220=null;
        Token RPAREN222=null;
        EsperEPL2GrammarParser.variantList_return variantList219 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList221 = null;
        EsperEPL2GrammarParser.columnList_return columnList223 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree SCHEMA217_tree=null;
        CommonTree AS218_tree=null;
        CommonTree LPAREN220_tree=null;
        CommonTree RPAREN222_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==IDENT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA217=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA217);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==AS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    AS218=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS218);
                    }
                    break;
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==IDENT||LA76_0==STAR||LA76_0==TICKED_STRING_LITERAL) ) {
                alt76=1;
            }
            else if ( (LA76_0==LPAREN) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);
                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3769);
                    variantList219=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList219.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN220=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN220);
                    int alt74=2;
                    int LA74_0 = input.LA(1);
                    if ( (LA74_0==IDENT) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3782);
                            createColumnList221=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList221.getTree());
                            }
                            break;
                    }
                    RPAREN222=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN222);
                    int alt75=2;
                    int LA75_0 = input.LA(1);
                    if ( (LA75_0==IDENT) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3790); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3792);
                            columnList223=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList223.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA225=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement224 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement226 = null;
        CommonTree COMMA225_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3881);
            variantListElement224=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement224.getTree());
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);
                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }
                switch (alt77) {
            	case 1 :
            	    {
            	    COMMA225=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3884); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA225);
            	    pushFollow(FOLLOW_variantListElement_in_variantList3886);
            	    variantListElement226=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement226.getTree());
            	    }
            	    break;
            	default :
            	    break loop77;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR227=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier228 = null;
        CommonTree STAR227_tree=null;
        try {
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==STAR) ) {
                alt78=1;
            }
            else if ( (LA78_0==IDENT||LA78_0==TICKED_STRING_LITERAL) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);
                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR227=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR227_tree = (CommonTree)adaptor.create(STAR227);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR227_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3919);
                    classIdentifier228=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier228.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token INTO229=null;
        Token LPAREN230=null;
        Token RPAREN232=null;
        EsperEPL2GrammarParser.columnList_return columnList231 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO229_tree=null;
        CommonTree LPAREN230_tree=null;
        CommonTree RPAREN232_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt79=3;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==ISTREAM) ) {
                alt79=1;
            }
            else if ( (LA79_0==RSTREAM) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO229=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO229);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==LPAREN) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    LPAREN230=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN230);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3963);
                    columnList231=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList231.getTree());
                    RPAREN232=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN232);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT233=null;
        Token COMMA234=null;
        Token IDENT235=null;
        CommonTree IDENT233_tree=null;
        CommonTree COMMA234_tree=null;
        CommonTree IDENT235_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT233=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT233);
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA234=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4002); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA234);
            	    IDENT235=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4004); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT235);
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression236 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin237 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList238 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4042);
            streamExpression236=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression236.getTree());
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==EOF||LA82_0==WHERE||(LA82_0>=GROUP && LA82_0<=HAVING)||LA82_0==OUTPUT||LA82_0==ORDER||LA82_0==ROW_LIMIT_EXPR||LA82_0==MATCH_RECOGNIZE||LA82_0==FOR||LA82_0==COMMA) ) {
                alt82=1;
            }
            else if ( ((LA82_0>=INNER && LA82_0<=FULL)) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);
                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4045);
                    regularJoin237=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin237.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4049);
                    outerJoinList238=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList238.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA239=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression240 = null;
        CommonTree COMMA239_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4063); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4066);
            	    streamExpression240=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression240.getTree());
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin241 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin242 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4080);
            outerJoin241=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin241.getTree());
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);
                if ( ((LA84_0>=INNER && LA84_0<=FULL)) ) {
                    alt84=1;
                }
                switch (alt84) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4083);
            	    outerJoin242=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin242.getTree());
            	    }
            	    break;
            	default :
            	    break loop84;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER243=null;
        Token JOIN244=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression245 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent246 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER243_tree=null;
        CommonTree JOIN244_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( ((LA87_0>=JOIN && LA87_0<=FULL)) ) {
                alt87=1;
            }
            else if ( (LA87_0==INNER) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);
                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    {
                    int alt86=2;
                    int LA86_0 = input.LA(1);
                    if ( ((LA86_0>=LEFT && LA86_0<=FULL)) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            int alt85=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt85=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt85=2;
                                }
                                break;
                            case FULL:
                                {
                                alt85=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 85, 0, input);
                                throw nvae;
                            }
                            switch (alt85) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4126); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4130); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4134); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER243=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4137); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER243);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN244=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN244);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4174);
            streamExpression245=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression245.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4176);
            outerJoinIdent246=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent246.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON247=null;
        Token AND_EXPR249=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair248 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair250 = null;
        CommonTree ON247_tree=null;
        CommonTree AND_EXPR249_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON247=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4241); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4244);
            outerJoinIdentPair248=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair248.getTree());
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( (LA88_0==AND_EXPR) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    AND_EXPR249=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4247); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4250);
            	    outerJoinIdentPair250=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair250.getTree());
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS252=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty251 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty253 = null;
        CommonTree EQUALS252_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4265);
            eventProperty251=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty251.getTree());
            EQUALS252=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4267); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4270);
            eventProperty253=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty253.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression254 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4292);
            evalOrExpression254=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression254.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList255 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt89=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt89=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt89=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt89=3;
                    }
                    break;
            }
            switch (alt89) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==DISTINCT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4349);
            selectionList255=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList255.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA257=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement256 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement258 = null;
        CommonTree COMMA257_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4380);
            selectionListElement256=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement256.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA257=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4383); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4386);
            	    selectionListElement258=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement258.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS261=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector259 = null;
        EsperEPL2GrammarParser.expression_return expression260 = null;
        CommonTree s_tree=null;
        CommonTree AS261_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt93=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt93=1;
                }
                break;
            case IDENT:
                {
                int LA93_2 = input.LA(2);
                if ( (LA93_2==DOT) ) {
                    int LA93_68 = input.LA(3);
                    if ( (LA93_68==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt93=2;
                    }
                    else if ( (LA93_68==WINDOW||LA93_68==ESCAPE||LA93_68==EVERY_EXPR||(LA93_68>=SUM && LA93_68<=COUNT)||LA93_68==OUTER||(LA93_68>=JOIN && LA93_68<=FULL)||(LA93_68>=EVENTS && LA93_68<=LAST)||(LA93_68>=UNIDIRECTIONAL && LA93_68<=PREVIOUSTAIL)||LA93_68==PRIOR||(LA93_68>=WEEKDAY && LA93_68<=CAST)||LA93_68==SNAPSHOT||(LA93_68>=VARIABLE && LA93_68<=INDEX)||(LA93_68>=DEFINE && LA93_68<=MATCHES)||LA93_68==WHILE||(LA93_68>=MERGE && LA93_68<=MATCHED)||LA93_68==IDENT||LA93_68==TICKED_STRING_LITERAL) ) {
                        alt93=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 68, input);
                        throw nvae;
                    }
                }
                else if ( (LA93_2==EOF||(LA93_2>=IN_SET && LA93_2<=REGEXP)||(LA93_2>=OR_EXPR && LA93_2<=NOT_EXPR)||(LA93_2>=WHERE && LA93_2<=AS)||LA93_2==WHEN||LA93_2==FROM||LA93_2==IS||(LA93_2>=GROUP && LA93_2<=HAVING)||LA93_2==OUTPUT||LA93_2==INSERT||LA93_2==ORDER||LA93_2==ROW_LIMIT_EXPR||LA93_2==FOR||LA93_2==COMMA||LA93_2==LPAREN||LA93_2==EQUALS||LA93_2==LBRACK||(LA93_2>=STAR && LA93_2<=QUESTION)||(LA93_2>=BAND && LA93_2<=MOD)||LA93_2==ESCAPECHAR) ) {
                    alt93=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4428);
                    streamSelector259=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector259.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4433);
                    expression260=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression260.getTree());
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( (LA92_0==AS) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            AS261=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4436); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS261);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4440);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT262=null;
        Token STAR263=null;
        Token AS264=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT262_tree=null;
        CommonTree STAR263_tree=null;
        CommonTree AS264_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT262=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT262);
            STAR263=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR263);
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==AS) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    AS264=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS264);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT269=null;
        Token DOT271=null;
        Token AS273=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression265 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression266 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression267 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression268 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression270 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression272 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT269_tree=null;
        CommonTree DOT271_tree=null;
        CommonTree AS273_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt95=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA95_1 = input.LA(2);
                if ( (LA95_1==EOF||(LA95_1>=WHERE && LA95_1<=AS)||(LA95_1>=INNER && LA95_1<=ON)||(LA95_1>=GROUP && LA95_1<=HAVING)||LA95_1==OUTPUT||LA95_1==ORDER||(LA95_1>=UNIDIRECTIONAL && LA95_1<=RETAININTERSECTION)||LA95_1==ROW_LIMIT_EXPR||LA95_1==MATCH_RECOGNIZE||LA95_1==FOR||(LA95_1>=COMMA && LA95_1<=LPAREN)||(LA95_1>=EQUALS && LA95_1<=LBRACK)) ) {
                    alt95=1;
                }
                else if ( (LA95_1==COLON) ) {
                    alt95=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt95=1;
                }
                break;
            case PATTERN:
                {
                alt95=2;
                }
                break;
            case SQL:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);
                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4538);
                    eventFilterExpression265=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression265.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4542);
                    patternInclusionExpression266=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression266.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4546);
                    databaseJoinExpression267=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression267.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4550);
                    methodJoinExpression268=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression268.getTree());
                    }
                    break;
            }
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==DOT) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    {
                    DOT269=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT269);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4559);
                    viewExpression270=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression270.getTree());
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);
                        if ( (LA96_0==DOT) ) {
                            alt96=1;
                        }
                        switch (alt96) {
                    	case 1 :
                    	    {
                    	    DOT271=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4562); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT271);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4564);
                    	    viewExpression272=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression272.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop96;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt98=3;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==AS) ) {
                alt98=1;
            }
            else if ( (LA98_0==IDENT) ) {
                alt98=2;
            }
            switch (alt98) {
                case 1 :
                    {
                    AS273=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS273);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==UNIDIRECTIONAL) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt100=3;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==RETAINUNION) ) {
                alt100=1;
            }
            else if ( (LA100_0==RETAININTERSECTION) ) {
                alt100=2;
            }
            switch (alt100) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR274=null;
        Token LPAREN275=null;
        Token RPAREN277=null;
        EsperEPL2GrammarParser.expressionList_return expressionList276 = null;
        CommonTree i_tree=null;
        CommonTree FOR274_tree=null;
        CommonTree LPAREN275_tree=null;
        CommonTree RPAREN277_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR274=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR274);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==LPAREN) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    LPAREN275=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN275);
                    int alt101=2;
                    int LA101_0 = input.LA(1);
                    if ( (LA101_0==WINDOW||LA101_0==ESCAPE||(LA101_0>=NOT_EXPR && LA101_0<=EVERY_EXPR)||(LA101_0>=SUM && LA101_0<=COUNT)||LA101_0==CASE||LA101_0==OUTER||(LA101_0>=JOIN && LA101_0<=FULL)||(LA101_0>=EVENTS && LA101_0<=LAST)||(LA101_0>=UNIDIRECTIONAL && LA101_0<=CURRENT_TIMESTAMP)||LA101_0==SNAPSHOT||(LA101_0>=VARIABLE && LA101_0<=INDEX)||(LA101_0>=BOOLEAN_TRUE && LA101_0<=VALUE_NULL)||(LA101_0>=DEFINE && LA101_0<=MATCHES)||LA101_0==WHILE||(LA101_0>=MERGE && LA101_0<=MATCHED)||LA101_0==NUM_DOUBLE||(LA101_0>=IDENT && LA101_0<=LPAREN)||(LA101_0>=PLUS && LA101_0<=QUESTION)||(LA101_0>=STRING_LITERAL && LA101_0<=QUOTED_STRING_LITERAL)||LA101_0==MINUS||LA101_0==LCURLY||LA101_0==NUM_INT||(LA101_0>=TICKED_STRING_LITERAL && LA101_0<=NUM_FLOAT)) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4664);
                            expressionList276=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList276.getTree());
                            }
                            break;
                    }
                    RPAREN277=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN277);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE278=null;
        Token LPAREN279=null;
        Token RPAREN287=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy280 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures281 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection282 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip283 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern284 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval285 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine286 = null;
        CommonTree MATCH_RECOGNIZE278_tree=null;
        CommonTree LPAREN279_tree=null;
        CommonTree RPAREN287_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE278=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE278);
            LPAREN279=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN279);
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==PARTITION) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4723);
                    matchRecogPartitionBy280=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy280.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4730);
            matchRecogMeasures281=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures281.getTree());
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==ALL) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4735);
                    matchRecogMatchesSelection282=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection282.getTree());
                    }
                    break;
            }
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==AFTER) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4741);
                    matchRecogMatchesAfterSkip283=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip283.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4747);
            matchRecogPattern284=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern284.getTree());
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==IDENT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4753);
                    matchRecogMatchesInterval285=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval285.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4759);
            matchRecogDefine286=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine286.getTree());
            RPAREN287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN287);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION288=null;
        Token BY289=null;
        Token COMMA291=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;
        EsperEPL2GrammarParser.expression_return expression292 = null;
        CommonTree PARTITION288_tree=null;
        CommonTree BY289_tree=null;
        CommonTree COMMA291_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION288=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION288);
            BY289=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY289);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4807);
            expression290=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);
                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }
                switch (alt107) {
            	case 1 :
            	    {
            	    COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4810); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA291);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4812);
            	    expression292=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression292.getTree());
            	    }
            	    break;
            	default :
            	    break loop107;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES293=null;
        Token COMMA295=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem294 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem296 = null;
        CommonTree MEASURES293_tree=null;
        CommonTree COMMA295_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES293=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES293);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4843);
            matchRecogMeasureItem294=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem294.getTree());
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);
                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }
                switch (alt108) {
            	case 1 :
            	    {
            	    COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4846); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4848);
            	    matchRecogMeasureItem296=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem296.getTree());
            	    }
            	    break;
            	default :
            	    break loop108;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS298=null;
        EsperEPL2GrammarParser.expression_return expression297 = null;
        CommonTree i_tree=null;
        CommonTree AS298_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4873);
            expression297=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression297.getTree());
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==AS) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    AS298=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS298);
                    int alt109=2;
                    int LA109_0 = input.LA(1);
                    if ( (LA109_0==IDENT) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4881); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL299=null;
        Token MATCHES300=null;
        CommonTree ALL299_tree=null;
        CommonTree MATCHES300_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL299=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL299_tree = (CommonTree)adaptor.create(ALL299);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL299_tree, root_0);
            }
            MATCHES300=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4915); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN301=null;
        Token LPAREN302=null;
        Token RPAREN304=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration303 = null;
        CommonTree PATTERN301_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree RPAREN304_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN301=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN301);
            LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4934);
            matchRecogPatternAlteration303=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration303.getTree());
            RPAREN304=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN304);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER305=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER305_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER305=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER305);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4962);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4966);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4970);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4974);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4978);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod306 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5016);
            timePeriod306=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod306.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat307 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat308 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5042);
            matchRecogPatternConcat307=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat307.getTree());
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);
                if ( (LA111_0==BOR) ) {
                    alt111=1;
                }
                switch (alt111) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5047); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5049);
            	    matchRecogPatternConcat308=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat308.getTree());
            	    }
            	    break;
            	default :
            	    break loop111;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary309 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);
                if ( ((LA112_0>=IDENT && LA112_0<=LPAREN)) ) {
                    alt112=1;
                }
                switch (alt112) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5082);
            	    matchRecogPatternUnary309=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary309.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested310 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom311 = null;
        try {
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==LPAREN) ) {
                alt113=1;
            }
            else if ( (LA113_0==IDENT) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5107);
                    matchRecogPatternNested310=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested310.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5113);
                    matchRecogPatternAtom311=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom311.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN312=null;
        Token RPAREN314=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration313 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN312_tree=null;
        CommonTree RPAREN314_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN312=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN312);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5127);
            matchRecogPatternAlteration313=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration313.getTree());
            RPAREN314=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN314);
            int alt114=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt114=1;
                    }
                    break;
                case PLUS:
                    {
                    alt114=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt114=3;
                    }
                    break;
            }
            switch (alt114) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==STAR||(LA117_0>=PLUS && LA117_0<=QUESTION)) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    int alt115=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt115=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt115=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt115=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);
                        throw nvae;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5191); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5197); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5203); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt116=2;
                    int LA116_0 = input.LA(1);
                    if ( (LA116_0==QUESTION) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5209); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE315=null;
        Token COMMA317=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem316 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem318 = null;
        CommonTree DEFINE315_tree=null;
        CommonTree COMMA317_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE315=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE315);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5255);
            matchRecogDefineItem316=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem316.getTree());
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);
                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }
                switch (alt118) {
            	case 1 :
            	    {
            	    COMMA317=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5258); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA317);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5260);
            	    matchRecogDefineItem318=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem318.getTree());
            	    }
            	    break;
            	default :
            	    break loop118;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS319=null;
        EsperEPL2GrammarParser.expression_return expression320 = null;
        CommonTree i_tree=null;
        CommonTree AS319_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS319=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS319);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5291);
            expression320=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression320.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN321=null;
        Token LBRACK322=null;
        Token RBRACK324=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression323 = null;
        CommonTree PATTERN321_tree=null;
        CommonTree LBRACK322_tree=null;
        CommonTree RBRACK324_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN321=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN321);
            LBRACK322=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK322);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5320);
            patternExpression323=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression323.getTree());
            RBRACK324=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK324);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL325=null;
        Token COLON326=null;
        Token LBRACK327=null;
        Token METADATASQL328=null;
        Token RBRACK329=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL325_tree=null;
        CommonTree COLON326_tree=null;
        CommonTree LBRACK327_tree=null;
        CommonTree METADATASQL328_tree=null;
        CommonTree RBRACK329_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL325=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL325);
            COLON326=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON326);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK327=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK327);
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==STRING_LITERAL) ) {
                alt119=1;
            }
            else if ( (LA119_0==QUOTED_STRING_LITERAL) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);
                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==METADATASQL) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    METADATASQL328=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL328);
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==STRING_LITERAL) ) {
                        alt120=1;
                    }
                    else if ( (LA120_0==QUOTED_STRING_LITERAL) ) {
                        alt120=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 0, input);
                        throw nvae;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5383); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5389); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK329=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK329);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON330=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier331 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList333 = null;
        CommonTree i_tree=null;
        CommonTree COLON330_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON330=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON330);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5449);
            classIdentifier331=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier331.getTree());
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==LPAREN) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);
                    int alt122=2;
                    int LA122_0 = input.LA(1);
                    if ( (LA122_0==WINDOW||LA122_0==ESCAPE||(LA122_0>=NOT_EXPR && LA122_0<=EVERY_EXPR)||(LA122_0>=SUM && LA122_0<=COUNT)||LA122_0==CASE||LA122_0==OUTER||(LA122_0>=JOIN && LA122_0<=FULL)||(LA122_0>=EVENTS && LA122_0<=LAST)||(LA122_0>=UNIDIRECTIONAL && LA122_0<=CURRENT_TIMESTAMP)||LA122_0==SNAPSHOT||(LA122_0>=VARIABLE && LA122_0<=INDEX)||(LA122_0>=BOOLEAN_TRUE && LA122_0<=VALUE_NULL)||(LA122_0>=DEFINE && LA122_0<=MATCHES)||LA122_0==WHILE||(LA122_0>=MERGE && LA122_0<=MATCHED)||LA122_0==NUM_DOUBLE||(LA122_0>=IDENT && LA122_0<=LPAREN)||(LA122_0>=PLUS && LA122_0<=QUESTION)||(LA122_0>=STRING_LITERAL && LA122_0<=QUOTED_STRING_LITERAL)||LA122_0==MINUS||LA122_0==LCURLY||LA122_0==NUM_INT||(LA122_0>=TICKED_STRING_LITERAL && LA122_0<=NUM_FLOAT)) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5454);
                            expressionList333=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList333.getTree());
                            }
                            break;
                    }
                    RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token COLON335=null;
        Token LPAREN336=null;
        Token RPAREN338=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList337 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON335_tree=null;
        CommonTree LPAREN336_tree=null;
        CommonTree RPAREN338_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON335=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON335);
            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);
            LPAREN336=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN336);
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==WINDOW||LA124_0==ESCAPE||(LA124_0>=NOT_EXPR && LA124_0<=EVERY_EXPR)||(LA124_0>=SUM && LA124_0<=COUNT)||LA124_0==CASE||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=CURRENT_TIMESTAMP)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=INDEX)||(LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||(LA124_0>=DEFINE && LA124_0<=MATCHES)||LA124_0==WHILE||(LA124_0>=MERGE && LA124_0<=MATCHED)||LA124_0==NUM_DOUBLE||(LA124_0>=IDENT && LA124_0<=LPAREN)||LA124_0==LBRACK||LA124_0==STAR||(LA124_0>=PLUS && LA124_0<=QUESTION)||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==MINUS||LA124_0==LCURLY||LA124_0==NUM_INT||(LA124_0>=TICKED_STRING_LITERAL && LA124_0<=NUM_FLOAT)) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5520);
                    expressionWithTimeList337=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList337.getTree());
                    }
                    break;
            }
            RPAREN338=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN338);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA340=null;
        EsperEPL2GrammarParser.expression_return expression339 = null;
        EsperEPL2GrammarParser.expression_return expression341 = null;
        CommonTree COMMA340_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5562);
            expression339=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression339.getTree());
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);
                if ( (LA125_0==COMMA) ) {
                    alt125=1;
                }
                switch (alt125) {
            	case 1 :
            	    {
            	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5565); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA340);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5567);
            	    expression341=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression341.getTree());
            	    }
            	    break;
            	default :
            	    break loop125;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA343=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement342 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement344 = null;
        CommonTree COMMA343_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5602);
            orderByListElement342=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement342.getTree());
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);
                if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }
                switch (alt126) {
            	case 1 :
            	    {
            	    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5605); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA343);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5607);
            	    orderByListElement344=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement344.getTree());
            	    }
            	    break;
            	default :
            	    break loop126;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5632);
            expression345=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression345.getTree());
            int alt127=3;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==ASC) ) {
                alt127=1;
            }
            else if ( (LA127_0==DESC) ) {
                alt127=2;
            }
            switch (alt127) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression346 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5679);
            evalOrExpression346=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression346.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN352=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter347 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod348 = null;
        EsperEPL2GrammarParser.number_return number349 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet350 = null;
        EsperEPL2GrammarParser.expression_return expression351 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr353 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN352_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==AFTER) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5717);
                    outputLimitAfter347=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter347.getTree());
                    }
                    break;
            }
            int alt129=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt129=1;
                    }
                    break;
                case FIRST:
                    {
                    alt129=2;
                    }
                    break;
                case LAST:
                    {
                    alt129=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt129=4;
                    }
                    break;
            }
            switch (alt129) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt133=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt133=1;
                }
                break;
            case AT:
                {
                alt133=2;
                }
                break;
            case WHEN:
                {
                alt133=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt133=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);
                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt131=2;
                    int LA131_0 = input.LA(1);
                    if ( (LA131_0==NUM_INT) ) {
                        int LA131_1 = input.LA(2);
                        if ( (LA131_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==EVENTS) ) {
                            alt131=2;
                        }
                        else if ( (LA131_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA131_0==NUM_LONG) ) {
                        int LA131_2 = input.LA(2);
                        if ( (LA131_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==EVENTS) ) {
                            alt131=2;
                        }
                        else if ( (LA131_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA131_0==NUM_FLOAT) ) {
                        int LA131_3 = input.LA(2);
                        if ( (LA131_3==EVENTS) ) {
                            alt131=2;
                        }
                        else if ( (LA131_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA131_0==NUM_DOUBLE) ) {
                        int LA131_4 = input.LA(2);
                        if ( (LA131_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==EVENTS) ) {
                            alt131=2;
                        }
                        else if ( (LA131_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA131_0==IDENT) ) {
                        int LA131_5 = input.LA(2);
                        if ( (LA131_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==EVENTS) ) {
                            alt131=2;
                        }
                        else if ( (LA131_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else if ( (LA131_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA131_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt131=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);
                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5801);
                            timePeriod348=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod348.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt130=2;
                            int LA130_0 = input.LA(1);
                            if ( (LA130_0==NUM_DOUBLE||LA130_0==NUM_INT||(LA130_0>=NUM_LONG && LA130_0<=NUM_FLOAT)) ) {
                                alt130=1;
                            }
                            else if ( (LA130_0==IDENT) ) {
                                alt130=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 130, 0, input);
                                throw nvae;
                            }
                            switch (alt130) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5812);
                                    number349=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number349.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5818); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5824); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5857);
                    crontabLimitParameterSet350=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet350.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5874); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit5876);
                    expression351=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression351.getTree());
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( (LA132_0==THEN) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            THEN352=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5879); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN352);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5881);
                            onSetExpr353=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr353.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS356=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod354 = null;
        EsperEPL2GrammarParser.number_return number355 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS356_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt134=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA134_1 = input.LA(2);
                if ( (LA134_1==MIN||(LA134_1>=TIMEPERIOD_DAY && LA134_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt134=1;
                }
                else if ( (LA134_1==EVENTS) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA134_2 = input.LA(2);
                if ( (LA134_2==EVENTS) ) {
                    alt134=2;
                }
                else if ( (LA134_2==MIN||(LA134_2>=TIMEPERIOD_DAY && LA134_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt134=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA134_3 = input.LA(2);
                if ( (LA134_3==EVENTS) ) {
                    alt134=2;
                }
                else if ( (LA134_3==MIN||(LA134_3>=TIMEPERIOD_DAY && LA134_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt134=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA134_4 = input.LA(2);
                if ( (LA134_4==MIN||(LA134_4>=TIMEPERIOD_DAY && LA134_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt134=1;
                }
                else if ( (LA134_4==EVENTS) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt134=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);
                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6034);
                    timePeriod354=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod354.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6038);
                    number355=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number355.getTree());
                    EVENTS356=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS356);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==NUM_DOUBLE||LA135_0==PLUS||LA135_0==MINUS||LA135_0==NUM_INT||(LA135_0>=NUM_LONG && LA135_0<=NUM_FLOAT)) ) {
                alt135=1;
            }
            else if ( (LA135_0==IDENT) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6086);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt138=2;
            int LA138_0 = input.LA(1);
            if ( (LA138_0==OFFSET||LA138_0==COMMA) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    {
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==COMMA) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==OFFSET) ) {
                        alt136=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);
                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6099); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6105); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( (LA137_0==NUM_DOUBLE||LA137_0==PLUS||LA137_0==MINUS||LA137_0==NUM_INT||(LA137_0>=NUM_LONG && LA137_0<=NUM_FLOAT)) ) {
                        alt137=1;
                    }
                    else if ( (LA137_0==IDENT) ) {
                        alt137=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);
                        throw nvae;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6111);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN357=null;
        Token COMMA359=null;
        Token COMMA361=null;
        Token COMMA363=null;
        Token COMMA365=null;
        Token COMMA367=null;
        Token RPAREN369=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime358 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime360 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime362 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime364 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime366 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime368 = null;
        CommonTree LPAREN357_tree=null;
        CommonTree COMMA359_tree=null;
        CommonTree COMMA361_tree=null;
        CommonTree COMMA363_tree=null;
        CommonTree COMMA365_tree=null;
        CommonTree COMMA367_tree=null;
        CommonTree RPAREN369_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN357=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN357);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6171);
            expressionWithTime358=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime358.getTree());
            COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA359);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6175);
            expressionWithTime360=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime360.getTree());
            COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6179);
            expressionWithTime362=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime362.getTree());
            COMMA363=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA363);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6183);
            expressionWithTime364=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime364.getTree());
            COMMA365=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA365);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6187);
            expressionWithTime366=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime366.getTree());
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==COMMA) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    COMMA367=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA367);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6192);
                    expressionWithTime368=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime368.getTree());
                    }
                    break;
            }
            RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN369);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN370=null;
        Token THEN372=null;
        EsperEPL2GrammarParser.expression_return expression371 = null;
        EsperEPL2GrammarParser.expression_return expression373 = null;
        CommonTree WHEN370_tree=null;
        CommonTree THEN372_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN370=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6226); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6229);
            expression371=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression371.getTree());
            THEN372=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6231); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6234);
            expression373=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE374=null;
        EsperEPL2GrammarParser.expression_return expression375 = null;
        CommonTree ELSE374_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE374=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6247); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6250);
            expression375=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression376 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6263);
            caseExpression376=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression376.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE377=null;
        Token END380=null;
        Token CASE381=null;
        Token END385=null;
        EsperEPL2GrammarParser.whenClause_return whenClause378 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause379 = null;
        EsperEPL2GrammarParser.expression_return expression382 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause383 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause384 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression386 = null;
        CommonTree CASE377_tree=null;
        CommonTree END380_tree=null;
        CommonTree CASE381_tree=null;
        CommonTree END385_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt144=3;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==CASE) ) {
                int LA144_1 = input.LA(2);
                if ( (LA144_1==WHEN) ) {
                    alt144=1;
                }
                else if ( (LA144_1==WINDOW||LA144_1==ESCAPE||(LA144_1>=NOT_EXPR && LA144_1<=EVERY_EXPR)||(LA144_1>=SUM && LA144_1<=COUNT)||LA144_1==CASE||LA144_1==OUTER||(LA144_1>=JOIN && LA144_1<=FULL)||(LA144_1>=EVENTS && LA144_1<=LAST)||(LA144_1>=UNIDIRECTIONAL && LA144_1<=CURRENT_TIMESTAMP)||LA144_1==SNAPSHOT||(LA144_1>=VARIABLE && LA144_1<=INDEX)||(LA144_1>=BOOLEAN_TRUE && LA144_1<=VALUE_NULL)||(LA144_1>=DEFINE && LA144_1<=MATCHES)||LA144_1==WHILE||(LA144_1>=MERGE && LA144_1<=MATCHED)||LA144_1==NUM_DOUBLE||(LA144_1>=IDENT && LA144_1<=LPAREN)||(LA144_1>=PLUS && LA144_1<=QUESTION)||(LA144_1>=STRING_LITERAL && LA144_1<=QUOTED_STRING_LITERAL)||LA144_1==MINUS||LA144_1==LCURLY||LA144_1==NUM_INT||(LA144_1>=TICKED_STRING_LITERAL && LA144_1<=NUM_FLOAT)) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA144_0==WINDOW||LA144_0==ESCAPE||(LA144_0>=NOT_EXPR && LA144_0<=EVERY_EXPR)||(LA144_0>=SUM && LA144_0<=COUNT)||LA144_0==OUTER||(LA144_0>=JOIN && LA144_0<=FULL)||(LA144_0>=EVENTS && LA144_0<=LAST)||(LA144_0>=UNIDIRECTIONAL && LA144_0<=CURRENT_TIMESTAMP)||LA144_0==SNAPSHOT||(LA144_0>=VARIABLE && LA144_0<=INDEX)||(LA144_0>=BOOLEAN_TRUE && LA144_0<=VALUE_NULL)||(LA144_0>=DEFINE && LA144_0<=MATCHES)||LA144_0==WHILE||(LA144_0>=MERGE && LA144_0<=MATCHED)||LA144_0==NUM_DOUBLE||(LA144_0>=IDENT && LA144_0<=LPAREN)||(LA144_0>=PLUS && LA144_0<=QUESTION)||(LA144_0>=STRING_LITERAL && LA144_0<=QUOTED_STRING_LITERAL)||LA144_0==MINUS||LA144_0==LCURLY||LA144_0==NUM_INT||(LA144_0>=TICKED_STRING_LITERAL && LA144_0<=NUM_FLOAT)) ) {
                alt144=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);
                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE377=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE377_tree = (CommonTree)adaptor.create(CASE377);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE377_tree, root_0);
                    }
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);
                        if ( (LA140_0==WHEN) ) {
                            alt140=1;
                        }
                        switch (alt140) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6280);
                    	    whenClause378=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause378.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==ELSE) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6283);
                            elseClause379=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause379.getTree());
                            }
                            break;
                    }
                    END380=(Token)match(input,END,FOLLOW_END_in_caseExpression6286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE381=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE381);
                    pushFollow(FOLLOW_expression_in_caseExpression6299);
                    expression382=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);
                        if ( (LA142_0==WHEN) ) {
                            alt142=1;
                        }
                        switch (alt142) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6301);
                    	    whenClause383=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause383.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( (LA143_0==ELSE) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6304);
                            elseClause384=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause384.getTree());
                            }
                            break;
                    }
                    END385=(Token)match(input,END,FOLLOW_END_in_caseExpression6307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END385);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6331);
                    evalOrExpression386=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression386.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression387 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression388 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6342);
            evalAndExpression387=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression387.getTree());
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);
                if ( (LA145_0==OR_EXPR) ) {
                    alt145=1;
                }
                switch (alt145) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6347); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6349);
            	    evalAndExpression388=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression388.getTree());
            	    }
            	    break;
            	default :
            	    break loop145;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression389 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression390 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6381);
            bitWiseExpression389=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression389.getTree());
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);
                if ( (LA146_0==AND_EXPR) ) {
                    alt146=1;
                }
                switch (alt146) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6386); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6388);
            	    bitWiseExpression390=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression390.getTree());
            	    }
            	    break;
            	default :
            	    break loop146;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND392=null;
        Token BOR393=null;
        Token BXOR394=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression391 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression395 = null;
        CommonTree BAND392_tree=null;
        CommonTree BOR393_tree=null;
        CommonTree BXOR394_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6420);
            negatedExpression391=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression391.getTree());
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);
                if ( (LA148_0==BOR||(LA148_0>=BAND && LA148_0<=BXOR)) ) {
                    alt148=1;
                }
                switch (alt148) {
            	case 1 :
            	    {
            	    int alt147=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt147=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt147=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt147=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 147, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            {
            	            BAND392=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6425); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND392_tree = (CommonTree)adaptor.create(BAND392);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND392_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR393=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6428); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR393_tree = (CommonTree)adaptor.create(BOR393);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR393_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR394=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6431); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR394_tree = (CommonTree)adaptor.create(BXOR394);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR394_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6435);
            	    negatedExpression395=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression395.getTree());
            	    }
            	    break;
            	default :
            	    break loop148;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR397=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression396 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression398 = null;
        CommonTree NOT_EXPR397_tree=null;
        try {
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==WINDOW||LA149_0==ESCAPE||LA149_0==EVERY_EXPR||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||LA149_0==SNAPSHOT||(LA149_0>=VARIABLE && LA149_0<=INDEX)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||(LA149_0>=DEFINE && LA149_0<=MATCHES)||LA149_0==WHILE||(LA149_0>=MERGE && LA149_0<=MATCHED)||LA149_0==NUM_DOUBLE||(LA149_0>=IDENT && LA149_0<=LPAREN)||(LA149_0>=PLUS && LA149_0<=QUESTION)||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||LA149_0==MINUS||LA149_0==LCURLY||LA149_0==NUM_INT||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                alt149=1;
            }
            else if ( (LA149_0==NOT_EXPR) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6450);
                    evalEqualsExpression396=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression396.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR397=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR397_tree = (CommonTree)adaptor.create(NOT_EXPR397);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR397_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6459);
                    evalEqualsExpression398=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression398.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR400=null;
        Token LPAREN402=null;
        Token RPAREN404=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression399 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression401 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList403 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression405 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR400_tree=null;
        CommonTree LPAREN402_tree=null;
        CommonTree RPAREN404_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6472);
            evalRelationalExpression399=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression399.getTree());
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( (LA155_0==IS||LA155_0==EQUALS||(LA155_0>=SQL_NE && LA155_0<=NOT_EQUAL)) ) {
                    alt155=1;
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    int alt150=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt150=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA150_2 = input.LA(2);
            	        if ( (LA150_2==NOT_EXPR) ) {
            	            alt150=3;
            	        }
            	        else if ( (LA150_2==WINDOW||LA150_2==ESCAPE||LA150_2==EVERY_EXPR||(LA150_2>=SUM && LA150_2<=COUNT)||LA150_2==OUTER||(LA150_2>=JOIN && LA150_2<=FULL)||(LA150_2>=ALL && LA150_2<=SOME)||(LA150_2>=EVENTS && LA150_2<=LAST)||(LA150_2>=UNIDIRECTIONAL && LA150_2<=CURRENT_TIMESTAMP)||LA150_2==SNAPSHOT||(LA150_2>=VARIABLE && LA150_2<=INDEX)||(LA150_2>=BOOLEAN_TRUE && LA150_2<=VALUE_NULL)||(LA150_2>=DEFINE && LA150_2<=MATCHES)||LA150_2==WHILE||(LA150_2>=MERGE && LA150_2<=MATCHED)||LA150_2==NUM_DOUBLE||(LA150_2>=IDENT && LA150_2<=LPAREN)||(LA150_2>=PLUS && LA150_2<=QUESTION)||(LA150_2>=STRING_LITERAL && LA150_2<=QUOTED_STRING_LITERAL)||LA150_2==MINUS||LA150_2==LCURLY||LA150_2==NUM_INT||(LA150_2>=TICKED_STRING_LITERAL && LA150_2<=NUM_FLOAT)) ) {
            	            alt150=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 150, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt150=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt150=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 150, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt150) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6485); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6503); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6517); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR400=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6519); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR400);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6533); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6547); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt154=2;
            	    int LA154_0 = input.LA(1);
            	    if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||(LA154_0>=MERGE && LA154_0<=MATCHED)||LA154_0==NUM_DOUBLE||(LA154_0>=IDENT && LA154_0<=LPAREN)||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
            	        alt154=1;
            	    }
            	    else if ( ((LA154_0>=ALL && LA154_0<=SOME)) ) {
            	        alt154=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 154, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt154) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6577);
            	            evalRelationalExpression401=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression401.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt151=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt151=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt151=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt151=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 151, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt151) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6594); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6600); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6606); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt153=2;
            	            int LA153_0 = input.LA(1);
            	            if ( (LA153_0==LPAREN) ) {
            	                int LA153_1 = input.LA(2);
            	                if ( (LA153_1==SELECT) ) {
            	                    alt153=2;
            	                }
            	                else if ( (LA153_1==WINDOW||LA153_1==ESCAPE||(LA153_1>=NOT_EXPR && LA153_1<=EVERY_EXPR)||(LA153_1>=SUM && LA153_1<=COUNT)||LA153_1==CASE||LA153_1==OUTER||(LA153_1>=JOIN && LA153_1<=FULL)||(LA153_1>=EVENTS && LA153_1<=LAST)||(LA153_1>=UNIDIRECTIONAL && LA153_1<=CURRENT_TIMESTAMP)||LA153_1==SNAPSHOT||(LA153_1>=VARIABLE && LA153_1<=INDEX)||(LA153_1>=BOOLEAN_TRUE && LA153_1<=VALUE_NULL)||(LA153_1>=DEFINE && LA153_1<=MATCHES)||LA153_1==WHILE||(LA153_1>=MERGE && LA153_1<=MATCHED)||LA153_1==NUM_DOUBLE||(LA153_1>=IDENT && LA153_1<=RPAREN)||(LA153_1>=PLUS && LA153_1<=QUESTION)||(LA153_1>=STRING_LITERAL && LA153_1<=QUOTED_STRING_LITERAL)||LA153_1==MINUS||LA153_1==LCURLY||LA153_1==NUM_INT||(LA153_1>=TICKED_STRING_LITERAL && LA153_1<=NUM_FLOAT)) ) {
            	                    alt153=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 153, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 153, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt153) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN402=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6612); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN402);
            	                    int alt152=2;
            	                    int LA152_0 = input.LA(1);
            	                    if ( (LA152_0==WINDOW||LA152_0==ESCAPE||(LA152_0>=NOT_EXPR && LA152_0<=EVERY_EXPR)||(LA152_0>=SUM && LA152_0<=COUNT)||LA152_0==CASE||LA152_0==OUTER||(LA152_0>=JOIN && LA152_0<=FULL)||(LA152_0>=EVENTS && LA152_0<=LAST)||(LA152_0>=UNIDIRECTIONAL && LA152_0<=CURRENT_TIMESTAMP)||LA152_0==SNAPSHOT||(LA152_0>=VARIABLE && LA152_0<=INDEX)||(LA152_0>=BOOLEAN_TRUE && LA152_0<=VALUE_NULL)||(LA152_0>=DEFINE && LA152_0<=MATCHES)||LA152_0==WHILE||(LA152_0>=MERGE && LA152_0<=MATCHED)||LA152_0==NUM_DOUBLE||(LA152_0>=IDENT && LA152_0<=LPAREN)||(LA152_0>=PLUS && LA152_0<=QUESTION)||(LA152_0>=STRING_LITERAL && LA152_0<=QUOTED_STRING_LITERAL)||LA152_0==MINUS||LA152_0==LCURLY||LA152_0==NUM_INT||(LA152_0>=TICKED_STRING_LITERAL && LA152_0<=NUM_FLOAT)) ) {
            	                        alt152=1;
            	                    }
            	                    switch (alt152) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6614);
            	                            expressionList403=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList403.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN404=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6617); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN404);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6622);
            	                    subSelectGroupExpression405=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression405.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN408=null;
        Token RPAREN410=null;
        Token COMMA414=null;
        Token IN_SET416=null;
        Token BETWEEN418=null;
        Token LIKE420=null;
        Token ESCAPE422=null;
        Token REGEXP424=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr406 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr407 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList409 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression411 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.expression_return expression413 = null;
        EsperEPL2GrammarParser.expression_return expression415 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery417 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList419 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr421 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant423 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr425 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN408_tree=null;
        CommonTree RPAREN410_tree=null;
        CommonTree COMMA414_tree=null;
        CommonTree IN_SET416_tree=null;
        CommonTree BETWEEN418_tree=null;
        CommonTree LIKE420_tree=null;
        CommonTree ESCAPE422_tree=null;
        CommonTree REGEXP424_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6750);
            concatenationExpr406=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr406.getTree());
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==EOF||(LA169_0>=OR_EXPR && LA169_0<=AND_EXPR)||(LA169_0>=WHERE && LA169_0<=AS)||(LA169_0>=ELSE && LA169_0<=FROM)||LA169_0==IS||(LA169_0>=GROUP && LA169_0<=HAVING)||LA169_0==ALL||LA169_0==OUTPUT||LA169_0==INSERT||(LA169_0>=ORDER && LA169_0<=DESC)||LA169_0==PATTERN||(LA169_0>=TIMEPERIOD_SEC && LA169_0<=TIMEPERIOD_SECONDS)||LA169_0==ROW_LIMIT_EXPR||LA169_0==MEASURES||(LA169_0>=AFTER && LA169_0<=FOR)||LA169_0==COMMA||(LA169_0>=RPAREN && LA169_0<=EQUALS)||LA169_0==RBRACK||LA169_0==BOR||LA169_0==COLON||(LA169_0>=BAND && LA169_0<=GE)||LA169_0==RCURLY) ) {
                alt169=1;
            }
            else if ( ((LA169_0>=IN_SET && LA169_0<=REGEXP)||LA169_0==NOT_EXPR) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);
                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    {
                    {
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);
                        if ( ((LA161_0>=LT && LA161_0<=GE)) ) {
                            alt161=1;
                        }
                        switch (alt161) {
                    	case 1 :
                    	    {
                    	    int alt156=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt156=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt156=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt156=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt156=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 156, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt156) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6782); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6786); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6790); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6794); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt160=2;
                    	    int LA160_0 = input.LA(1);
                    	    if ( (LA160_0==WINDOW||LA160_0==ESCAPE||LA160_0==EVERY_EXPR||(LA160_0>=SUM && LA160_0<=COUNT)||LA160_0==OUTER||(LA160_0>=JOIN && LA160_0<=FULL)||(LA160_0>=EVENTS && LA160_0<=LAST)||(LA160_0>=UNIDIRECTIONAL && LA160_0<=CURRENT_TIMESTAMP)||LA160_0==SNAPSHOT||(LA160_0>=VARIABLE && LA160_0<=INDEX)||(LA160_0>=BOOLEAN_TRUE && LA160_0<=VALUE_NULL)||(LA160_0>=DEFINE && LA160_0<=MATCHES)||LA160_0==WHILE||(LA160_0>=MERGE && LA160_0<=MATCHED)||LA160_0==NUM_DOUBLE||(LA160_0>=IDENT && LA160_0<=LPAREN)||(LA160_0>=PLUS && LA160_0<=QUESTION)||(LA160_0>=STRING_LITERAL && LA160_0<=QUOTED_STRING_LITERAL)||LA160_0==MINUS||LA160_0==LCURLY||LA160_0==NUM_INT||(LA160_0>=TICKED_STRING_LITERAL && LA160_0<=NUM_FLOAT)) ) {
                    	        alt160=1;
                    	    }
                    	    else if ( ((LA160_0>=ALL && LA160_0<=SOME)) ) {
                    	        alt160=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 160, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt160) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6818);
                    	            concatenationExpr407=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr407.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt157=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt157=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt157=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt157=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 157, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt157) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6835); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6841); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6847); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt159=2;
                    	            int LA159_0 = input.LA(1);
                    	            if ( (LA159_0==LPAREN) ) {
                    	                int LA159_1 = input.LA(2);
                    	                if ( (LA159_1==SELECT) ) {
                    	                    alt159=2;
                    	                }
                    	                else if ( (LA159_1==WINDOW||LA159_1==ESCAPE||(LA159_1>=NOT_EXPR && LA159_1<=EVERY_EXPR)||(LA159_1>=SUM && LA159_1<=COUNT)||LA159_1==CASE||LA159_1==OUTER||(LA159_1>=JOIN && LA159_1<=FULL)||(LA159_1>=EVENTS && LA159_1<=LAST)||(LA159_1>=UNIDIRECTIONAL && LA159_1<=CURRENT_TIMESTAMP)||LA159_1==SNAPSHOT||(LA159_1>=VARIABLE && LA159_1<=INDEX)||(LA159_1>=BOOLEAN_TRUE && LA159_1<=VALUE_NULL)||(LA159_1>=DEFINE && LA159_1<=MATCHES)||LA159_1==WHILE||(LA159_1>=MERGE && LA159_1<=MATCHED)||LA159_1==NUM_DOUBLE||(LA159_1>=IDENT && LA159_1<=RPAREN)||(LA159_1>=PLUS && LA159_1<=QUESTION)||(LA159_1>=STRING_LITERAL && LA159_1<=QUOTED_STRING_LITERAL)||LA159_1==MINUS||LA159_1==LCURLY||LA159_1==NUM_INT||(LA159_1>=TICKED_STRING_LITERAL && LA159_1<=NUM_FLOAT)) ) {
                    	                    alt159=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 159, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 159, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt159) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN408=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6853); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN408);
                    	                    int alt158=2;
                    	                    int LA158_0 = input.LA(1);
                    	                    if ( (LA158_0==WINDOW||LA158_0==ESCAPE||(LA158_0>=NOT_EXPR && LA158_0<=EVERY_EXPR)||(LA158_0>=SUM && LA158_0<=COUNT)||LA158_0==CASE||LA158_0==OUTER||(LA158_0>=JOIN && LA158_0<=FULL)||(LA158_0>=EVENTS && LA158_0<=LAST)||(LA158_0>=UNIDIRECTIONAL && LA158_0<=CURRENT_TIMESTAMP)||LA158_0==SNAPSHOT||(LA158_0>=VARIABLE && LA158_0<=INDEX)||(LA158_0>=BOOLEAN_TRUE && LA158_0<=VALUE_NULL)||(LA158_0>=DEFINE && LA158_0<=MATCHES)||LA158_0==WHILE||(LA158_0>=MERGE && LA158_0<=MATCHED)||LA158_0==NUM_DOUBLE||(LA158_0>=IDENT && LA158_0<=LPAREN)||(LA158_0>=PLUS && LA158_0<=QUESTION)||(LA158_0>=STRING_LITERAL && LA158_0<=QUOTED_STRING_LITERAL)||LA158_0==MINUS||LA158_0==LCURLY||LA158_0==NUM_INT||(LA158_0>=TICKED_STRING_LITERAL && LA158_0<=NUM_FLOAT)) ) {
                    	                        alt158=1;
                    	                    }
                    	                    switch (alt158) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6855);
                    	                            expressionList409=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList409.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6858); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN410);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6863);
                    	                    subSelectGroupExpression411=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression411.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop161;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt162=2;
                    int LA162_0 = input.LA(1);
                    if ( (LA162_0==NOT_EXPR) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6959); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt168=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA168_1 = input.LA(2);
                        if ( (LA168_1==LPAREN) ) {
                            int LA168_5 = input.LA(3);
                            if ( (LA168_5==SELECT) ) {
                                alt168=2;
                            }
                            else if ( (LA168_5==WINDOW||LA168_5==ESCAPE||(LA168_5>=NOT_EXPR && LA168_5<=EVERY_EXPR)||(LA168_5>=SUM && LA168_5<=COUNT)||LA168_5==CASE||LA168_5==OUTER||(LA168_5>=JOIN && LA168_5<=FULL)||(LA168_5>=EVENTS && LA168_5<=LAST)||(LA168_5>=UNIDIRECTIONAL && LA168_5<=CURRENT_TIMESTAMP)||LA168_5==SNAPSHOT||(LA168_5>=VARIABLE && LA168_5<=INDEX)||(LA168_5>=BOOLEAN_TRUE && LA168_5<=VALUE_NULL)||(LA168_5>=DEFINE && LA168_5<=MATCHES)||LA168_5==WHILE||(LA168_5>=MERGE && LA168_5<=MATCHED)||LA168_5==NUM_DOUBLE||(LA168_5>=IDENT && LA168_5<=LPAREN)||(LA168_5>=PLUS && LA168_5<=QUESTION)||(LA168_5>=STRING_LITERAL && LA168_5<=QUOTED_STRING_LITERAL)||LA168_5==MINUS||LA168_5==LCURLY||LA168_5==NUM_INT||(LA168_5>=TICKED_STRING_LITERAL && LA168_5<=NUM_FLOAT)) ) {
                                alt168=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 168, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA168_1==LBRACK) ) {
                            alt168=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt168=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt168=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt168=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);
                        throw nvae;
                    }
                    switch (alt168) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt163=2;
                            int LA163_0 = input.LA(1);
                            if ( (LA163_0==LPAREN) ) {
                                alt163=1;
                            }
                            else if ( (LA163_0==LBRACK) ) {
                                alt163=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 163, 0, input);
                                throw nvae;
                            }
                            switch (alt163) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6998); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7004); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7007);
                            expression412=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                            int alt165=2;
                            int LA165_0 = input.LA(1);
                            if ( (LA165_0==COLON) ) {
                                alt165=1;
                            }
                            else if ( (LA165_0==COMMA||LA165_0==RPAREN||LA165_0==RBRACK) ) {
                                alt165=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 165, 0, input);
                                throw nvae;
                            }
                            switch (alt165) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7029); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7032);
                                    expression413=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression413.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop164:
                                    do {
                                        int alt164=2;
                                        int LA164_0 = input.LA(1);
                                        if ( (LA164_0==COMMA) ) {
                                            alt164=1;
                                        }
                                        switch (alt164) {
                                    	case 1 :
                                    	    {
                                    	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7058); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA414);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7060);
                                    	    expression415=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression415.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop164;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt166=2;
                            int LA166_0 = input.LA(1);
                            if ( (LA166_0==RPAREN) ) {
                                alt166=1;
                            }
                            else if ( (LA166_0==RBRACK) ) {
                                alt166=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 166, 0, input);
                                throw nvae;
                            }
                            switch (alt166) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7086); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7092); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET416=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7215); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET416);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7217);
                            inSubSelectQuery417=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery417.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN418=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7263); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN418);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7265);
                            betweenList419=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList419.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE420=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7315); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE420);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7317);
                            concatenationExpr421=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr421.getTree());
                            int alt167=2;
                            int LA167_0 = input.LA(1);
                            if ( (LA167_0==ESCAPE) ) {
                                alt167=1;
                            }
                            switch (alt167) {
                                case 1 :
                                    {
                                    ESCAPE422=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7320); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE422);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7322);
                                    stringconstant423=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant423.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP424=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7374); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP424);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7376);
                            concatenationExpr425=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr425.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr426 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7438);
            subQueryExpr426=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr426.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR429=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression427 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression428 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression430 = null;
        CommonTree c_tree=null;
        CommonTree LOR429_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7463);
            additiveExpression427=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression427.getTree());
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==LOR) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7471);
                    additiveExpression428=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression428.getTree());
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);
                        if ( (LA170_0==LOR) ) {
                            alt170=1;
                        }
                        switch (alt170) {
                    	case 1 :
                    	    {
                    	    LOR429=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7475); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR429);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7477);
                    	    additiveExpression430=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression430.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop170;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS432=null;
        Token MINUS433=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression431 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression434 = null;
        CommonTree PLUS432_tree=null;
        CommonTree MINUS433_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7518);
            multiplyExpression431=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression431.getTree());
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);
                if ( (LA173_0==PLUS||LA173_0==MINUS) ) {
                    alt173=1;
                }
                switch (alt173) {
            	case 1 :
            	    {
            	    int alt172=2;
            	    int LA172_0 = input.LA(1);
            	    if ( (LA172_0==PLUS) ) {
            	        alt172=1;
            	    }
            	    else if ( (LA172_0==MINUS) ) {
            	        alt172=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 172, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt172) {
            	        case 1 :
            	            {
            	            PLUS432=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7523); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS432_tree = (CommonTree)adaptor.create(PLUS432);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS432_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS433=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7526); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS433_tree = (CommonTree)adaptor.create(MINUS433);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS433_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7530);
            	    multiplyExpression434=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression434.getTree());
            	    }
            	    break;
            	default :
            	    break loop173;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR436=null;
        Token DIV437=null;
        Token MOD438=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression435 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression439 = null;
        CommonTree STAR436_tree=null;
        CommonTree DIV437_tree=null;
        CommonTree MOD438_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7544);
            unaryExpression435=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression435.getTree());
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);
                if ( (LA175_0==STAR||(LA175_0>=DIV && LA175_0<=MOD)) ) {
                    alt175=1;
                }
                switch (alt175) {
            	case 1 :
            	    {
            	    int alt174=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt174=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt174=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt174=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 174, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt174) {
            	        case 1 :
            	            {
            	            STAR436=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7549); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR436_tree = (CommonTree)adaptor.create(STAR436);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR436_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV437=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7552); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV437_tree = (CommonTree)adaptor.create(DIV437);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV437_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD438=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7555); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD438_tree = (CommonTree)adaptor.create(MOD438);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD438_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7559);
            	    unaryExpression439=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression439.getTree());
            	    }
            	    break;
            	default :
            	    break loop175;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS440=null;
        Token LPAREN444=null;
        Token RPAREN446=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty441 = null;
        EsperEPL2GrammarParser.constant_return constant442 = null;
        EsperEPL2GrammarParser.substitution_return substitution443 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass447 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass448 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction449 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc450 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression451 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression452 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression453 = null;
        CommonTree d_tree=null;
        CommonTree MINUS440_tree=null;
        CommonTree LPAREN444_tree=null;
        CommonTree RPAREN446_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt178=9;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    {
                    MINUS440=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS440);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7576);
                    eventProperty441=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty441.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7589);
                    constant442=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant442.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7594);
                    substitution443=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution443.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN444=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN444);
                    pushFollow(FOLLOW_expression_in_unaryExpression7601);
                    expression445=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
                    RPAREN446=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN446);
                    int alt177=2;
                    int LA177_0 = input.LA(1);
                    if ( (LA177_0==DOT) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7608); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7610);
                            libFunctionNoClass447=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass447.getTree());
                            loop176:
                            do {
                                int alt176=2;
                                int LA176_0 = input.LA(1);
                                if ( (LA176_0==DOT) ) {
                                    alt176=1;
                                }
                                switch (alt176) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7615); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7617);
                            	    libFunctionNoClass448=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass448.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop176;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7654);
                    eventPropertyOrLibFunction449=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction449.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7666);
                    builtinFunc450=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc450.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7672);
                    arrayExpression451=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression451.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7677);
                    subSelectExpression452=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression452.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7682);
                    existsSubSelectExpression453=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression453.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr454 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7699);
            subQueryExpr454=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr454.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr455 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7721);
            subQueryExpr455=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr455.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS456=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr457 = null;
        CommonTree EXISTS456_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS456=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS456);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7745);
            subQueryExpr457=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr457.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN458=null;
        Token SELECT459=null;
        Token DISTINCT460=null;
        Token FROM462=null;
        Token WHERE464=null;
        Token RPAREN466=null;
        EsperEPL2GrammarParser.selectionList_return selectionList461 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr463 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause465 = null;
        CommonTree LPAREN458_tree=null;
        CommonTree SELECT459_tree=null;
        CommonTree DISTINCT460_tree=null;
        CommonTree FROM462_tree=null;
        CommonTree WHERE464_tree=null;
        CommonTree RPAREN466_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN458=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7778); if (state.failed) return retval;
            SELECT459=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7784); if (state.failed) return retval;
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==DISTINCT) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    DISTINCT460=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT460_tree = (CommonTree)adaptor.create(DISTINCT460);
                    adaptor.addChild(root_0, DISTINCT460_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7790);
            selectionList461=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList461.getTree());
            FROM462=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7797); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7800);
            subSelectFilterExpr463=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr463.getTree());
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==WHERE) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    WHERE464=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7808); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7811);
                    whereClause465=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause465.getTree());
                    }
                    break;
            }
            RPAREN466=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7820); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT468=null;
        Token DOT470=null;
        Token AS472=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression467 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression469 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression471 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT468_tree=null;
        CommonTree DOT470_tree=null;
        CommonTree AS472_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7844);
            eventFilterExpression467=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression467.getTree());
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==DOT) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    DOT468=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT468);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7851);
                    viewExpression469=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression469.getTree());
                    loop181:
                    do {
                        int alt181=2;
                        int LA181_0 = input.LA(1);
                        if ( (LA181_0==DOT) ) {
                            alt181=1;
                        }
                        switch (alt181) {
                    	case 1 :
                    	    {
                    	    DOT470=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7854); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT470);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7856);
                    	    viewExpression471=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression471.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop181;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt183=3;
            int LA183_0 = input.LA(1);
            if ( (LA183_0==AS) ) {
                alt183=1;
            }
            else if ( (LA183_0==IDENT) ) {
                alt183=2;
            }
            switch (alt183) {
                case 1 :
                    {
                    AS472=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS472);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt184=3;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==RETAINUNION) ) {
                alt184=1;
            }
            else if ( (LA184_0==RETAININTERSECTION) ) {
                alt184=2;
            }
            switch (alt184) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY473=null;
        Token COMMA475=null;
        Token RCURLY477=null;
        EsperEPL2GrammarParser.expression_return expression474 = null;
        EsperEPL2GrammarParser.expression_return expression476 = null;
        CommonTree LCURLY473_tree=null;
        CommonTree COMMA475_tree=null;
        CommonTree RCURLY477_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY473=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY473);
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==WINDOW||LA186_0==ESCAPE||(LA186_0>=NOT_EXPR && LA186_0<=EVERY_EXPR)||(LA186_0>=SUM && LA186_0<=COUNT)||LA186_0==CASE||LA186_0==OUTER||(LA186_0>=JOIN && LA186_0<=FULL)||(LA186_0>=EVENTS && LA186_0<=LAST)||(LA186_0>=UNIDIRECTIONAL && LA186_0<=CURRENT_TIMESTAMP)||LA186_0==SNAPSHOT||(LA186_0>=VARIABLE && LA186_0<=INDEX)||(LA186_0>=BOOLEAN_TRUE && LA186_0<=VALUE_NULL)||(LA186_0>=DEFINE && LA186_0<=MATCHES)||LA186_0==WHILE||(LA186_0>=MERGE && LA186_0<=MATCHED)||LA186_0==NUM_DOUBLE||(LA186_0>=IDENT && LA186_0<=LPAREN)||(LA186_0>=PLUS && LA186_0<=QUESTION)||(LA186_0>=STRING_LITERAL && LA186_0<=QUOTED_STRING_LITERAL)||LA186_0==MINUS||LA186_0==LCURLY||LA186_0==NUM_INT||(LA186_0>=TICKED_STRING_LITERAL && LA186_0<=NUM_FLOAT)) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7927);
                    expression474=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression474.getTree());
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);
                        if ( (LA185_0==COMMA) ) {
                            alt185=1;
                        }
                        switch (alt185) {
                    	case 1 :
                    	    {
                    	    COMMA475=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7930); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA475);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression7932);
                    	    expression476=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression476.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop185;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY477=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY477);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM478=null;
        Token LPAREN479=null;
        Token ALL480=null;
        Token DISTINCT481=null;
        Token RPAREN483=null;
        Token AVG484=null;
        Token LPAREN485=null;
        Token ALL486=null;
        Token DISTINCT487=null;
        Token RPAREN489=null;
        Token COUNT490=null;
        Token LPAREN491=null;
        Token ALL492=null;
        Token DISTINCT493=null;
        Token STAR495=null;
        Token RPAREN496=null;
        Token MEDIAN497=null;
        Token LPAREN498=null;
        Token ALL499=null;
        Token DISTINCT500=null;
        Token RPAREN502=null;
        Token STDDEV503=null;
        Token LPAREN504=null;
        Token ALL505=null;
        Token DISTINCT506=null;
        Token RPAREN508=null;
        Token AVEDEV509=null;
        Token LPAREN510=null;
        Token ALL511=null;
        Token DISTINCT512=null;
        Token RPAREN514=null;
        Token COALESCE518=null;
        Token LPAREN519=null;
        Token COMMA521=null;
        Token COMMA523=null;
        Token RPAREN525=null;
        Token PREVIOUS526=null;
        Token LPAREN527=null;
        Token COMMA529=null;
        Token RPAREN531=null;
        Token PREVIOUSTAIL532=null;
        Token LPAREN533=null;
        Token COMMA535=null;
        Token RPAREN537=null;
        Token PREVIOUSCOUNT538=null;
        Token LPAREN539=null;
        Token RPAREN541=null;
        Token PREVIOUSWINDOW542=null;
        Token LPAREN543=null;
        Token RPAREN545=null;
        Token PRIOR546=null;
        Token LPAREN547=null;
        Token NUM_INT548=null;
        Token COMMA549=null;
        Token RPAREN551=null;
        Token INSTANCEOF552=null;
        Token LPAREN553=null;
        Token COMMA555=null;
        Token COMMA557=null;
        Token RPAREN559=null;
        Token CAST560=null;
        Token LPAREN561=null;
        Token COMMA563=null;
        Token AS564=null;
        Token RPAREN566=null;
        Token EXISTS567=null;
        Token LPAREN568=null;
        Token RPAREN570=null;
        Token CURRENT_TIMESTAMP571=null;
        Token LPAREN572=null;
        Token RPAREN573=null;
        EsperEPL2GrammarParser.expression_return expression482 = null;
        EsperEPL2GrammarParser.expression_return expression488 = null;
        EsperEPL2GrammarParser.expression_return expression494 = null;
        EsperEPL2GrammarParser.expression_return expression501 = null;
        EsperEPL2GrammarParser.expression_return expression507 = null;
        EsperEPL2GrammarParser.expression_return expression513 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation515 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation516 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation517 = null;
        EsperEPL2GrammarParser.expression_return expression520 = null;
        EsperEPL2GrammarParser.expression_return expression522 = null;
        EsperEPL2GrammarParser.expression_return expression524 = null;
        EsperEPL2GrammarParser.expression_return expression528 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        EsperEPL2GrammarParser.expression_return expression534 = null;
        EsperEPL2GrammarParser.expression_return expression536 = null;
        EsperEPL2GrammarParser.expression_return expression540 = null;
        EsperEPL2GrammarParser.expression_return expression544 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty550 = null;
        EsperEPL2GrammarParser.expression_return expression554 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier556 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier558 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier565 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty569 = null;
        CommonTree SUM478_tree=null;
        CommonTree LPAREN479_tree=null;
        CommonTree ALL480_tree=null;
        CommonTree DISTINCT481_tree=null;
        CommonTree RPAREN483_tree=null;
        CommonTree AVG484_tree=null;
        CommonTree LPAREN485_tree=null;
        CommonTree ALL486_tree=null;
        CommonTree DISTINCT487_tree=null;
        CommonTree RPAREN489_tree=null;
        CommonTree COUNT490_tree=null;
        CommonTree LPAREN491_tree=null;
        CommonTree ALL492_tree=null;
        CommonTree DISTINCT493_tree=null;
        CommonTree STAR495_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree MEDIAN497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree ALL499_tree=null;
        CommonTree DISTINCT500_tree=null;
        CommonTree RPAREN502_tree=null;
        CommonTree STDDEV503_tree=null;
        CommonTree LPAREN504_tree=null;
        CommonTree ALL505_tree=null;
        CommonTree DISTINCT506_tree=null;
        CommonTree RPAREN508_tree=null;
        CommonTree AVEDEV509_tree=null;
        CommonTree LPAREN510_tree=null;
        CommonTree ALL511_tree=null;
        CommonTree DISTINCT512_tree=null;
        CommonTree RPAREN514_tree=null;
        CommonTree COALESCE518_tree=null;
        CommonTree LPAREN519_tree=null;
        CommonTree COMMA521_tree=null;
        CommonTree COMMA523_tree=null;
        CommonTree RPAREN525_tree=null;
        CommonTree PREVIOUS526_tree=null;
        CommonTree LPAREN527_tree=null;
        CommonTree COMMA529_tree=null;
        CommonTree RPAREN531_tree=null;
        CommonTree PREVIOUSTAIL532_tree=null;
        CommonTree LPAREN533_tree=null;
        CommonTree COMMA535_tree=null;
        CommonTree RPAREN537_tree=null;
        CommonTree PREVIOUSCOUNT538_tree=null;
        CommonTree LPAREN539_tree=null;
        CommonTree RPAREN541_tree=null;
        CommonTree PREVIOUSWINDOW542_tree=null;
        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN545_tree=null;
        CommonTree PRIOR546_tree=null;
        CommonTree LPAREN547_tree=null;
        CommonTree NUM_INT548_tree=null;
        CommonTree COMMA549_tree=null;
        CommonTree RPAREN551_tree=null;
        CommonTree INSTANCEOF552_tree=null;
        CommonTree LPAREN553_tree=null;
        CommonTree COMMA555_tree=null;
        CommonTree COMMA557_tree=null;
        CommonTree RPAREN559_tree=null;
        CommonTree CAST560_tree=null;
        CommonTree LPAREN561_tree=null;
        CommonTree COMMA563_tree=null;
        CommonTree AS564_tree=null;
        CommonTree RPAREN566_tree=null;
        CommonTree EXISTS567_tree=null;
        CommonTree LPAREN568_tree=null;
        CommonTree RPAREN570_tree=null;
        CommonTree CURRENT_TIMESTAMP571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree RPAREN573_tree=null;
        try {
            int alt200=19;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt200=1;
                }
                break;
            case AVG:
                {
                alt200=2;
                }
                break;
            case COUNT:
                {
                alt200=3;
                }
                break;
            case MEDIAN:
                {
                alt200=4;
                }
                break;
            case STDDEV:
                {
                alt200=5;
                }
                break;
            case AVEDEV:
                {
                alt200=6;
                }
                break;
            case FIRST:
                {
                alt200=7;
                }
                break;
            case LAST:
                {
                alt200=8;
                }
                break;
            case WINDOW:
                {
                alt200=9;
                }
                break;
            case COALESCE:
                {
                alt200=10;
                }
                break;
            case PREVIOUS:
                {
                alt200=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt200=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt200=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt200=14;
                }
                break;
            case PRIOR:
                {
                alt200=15;
                }
                break;
            case INSTANCEOF:
                {
                alt200=16;
                }
                break;
            case CAST:
                {
                alt200=17;
                }
                break;
            case EXISTS:
                {
                alt200=18;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt200=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);
                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM478=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM478_tree = (CommonTree)adaptor.create(SUM478);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM478_tree, root_0);
                    }
                    LPAREN479=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7965); if (state.failed) return retval;
                    int alt187=3;
                    int LA187_0 = input.LA(1);
                    if ( (LA187_0==ALL) ) {
                        alt187=1;
                    }
                    else if ( (LA187_0==DISTINCT) ) {
                        alt187=2;
                    }
                    switch (alt187) {
                        case 1 :
                            {
                            ALL480=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7969); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT481=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT481_tree = (CommonTree)adaptor.create(DISTINCT481);
                            adaptor.addChild(root_0, DISTINCT481_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc7978);
                    expression482=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());
                    RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7980); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG484=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7986); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG484_tree = (CommonTree)adaptor.create(AVG484);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG484_tree, root_0);
                    }
                    LPAREN485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7989); if (state.failed) return retval;
                    int alt188=3;
                    int LA188_0 = input.LA(1);
                    if ( (LA188_0==ALL) ) {
                        alt188=1;
                    }
                    else if ( (LA188_0==DISTINCT) ) {
                        alt188=2;
                    }
                    switch (alt188) {
                        case 1 :
                            {
                            ALL486=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7993); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT487=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7998); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT487_tree = (CommonTree)adaptor.create(DISTINCT487);
                            adaptor.addChild(root_0, DISTINCT487_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8002);
                    expression488=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
                    RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8004); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT490=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT490_tree = (CommonTree)adaptor.create(COUNT490);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT490_tree, root_0);
                    }
                    LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8013); if (state.failed) return retval;
                    int alt190=2;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==WINDOW||LA190_0==ESCAPE||(LA190_0>=NOT_EXPR && LA190_0<=EVERY_EXPR)||(LA190_0>=SUM && LA190_0<=COUNT)||LA190_0==CASE||LA190_0==OUTER||(LA190_0>=JOIN && LA190_0<=FULL)||(LA190_0>=DISTINCT && LA190_0<=ALL)||(LA190_0>=EVENTS && LA190_0<=LAST)||(LA190_0>=UNIDIRECTIONAL && LA190_0<=CURRENT_TIMESTAMP)||LA190_0==SNAPSHOT||(LA190_0>=VARIABLE && LA190_0<=INDEX)||(LA190_0>=BOOLEAN_TRUE && LA190_0<=VALUE_NULL)||(LA190_0>=DEFINE && LA190_0<=MATCHES)||LA190_0==WHILE||(LA190_0>=MERGE && LA190_0<=MATCHED)||LA190_0==NUM_DOUBLE||(LA190_0>=IDENT && LA190_0<=LPAREN)||(LA190_0>=PLUS && LA190_0<=QUESTION)||(LA190_0>=STRING_LITERAL && LA190_0<=QUOTED_STRING_LITERAL)||LA190_0==MINUS||LA190_0==LCURLY||LA190_0==NUM_INT||(LA190_0>=TICKED_STRING_LITERAL && LA190_0<=NUM_FLOAT)) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==STAR) ) {
                        alt190=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);
                        throw nvae;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            {
                            int alt189=3;
                            int LA189_0 = input.LA(1);
                            if ( (LA189_0==ALL) ) {
                                alt189=1;
                            }
                            else if ( (LA189_0==DISTINCT) ) {
                                alt189=2;
                            }
                            switch (alt189) {
                                case 1 :
                                    {
                                    ALL492=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8025); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT493=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8030); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT493_tree = (CommonTree)adaptor.create(DISTINCT493);
                                    adaptor.addChild(root_0, DISTINCT493_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8034);
                            expression494=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression494.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR495=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8045); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8056); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN497=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN497_tree = (CommonTree)adaptor.create(MEDIAN497);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN497_tree, root_0);
                    }
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8065); if (state.failed) return retval;
                    int alt191=3;
                    int LA191_0 = input.LA(1);
                    if ( (LA191_0==ALL) ) {
                        alt191=1;
                    }
                    else if ( (LA191_0==DISTINCT) ) {
                        alt191=2;
                    }
                    switch (alt191) {
                        case 1 :
                            {
                            ALL499=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8069); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT500=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8074); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT500_tree = (CommonTree)adaptor.create(DISTINCT500);
                            adaptor.addChild(root_0, DISTINCT500_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8078);
                    expression501=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                    RPAREN502=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8080); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV503=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8086); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV503_tree = (CommonTree)adaptor.create(STDDEV503);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV503_tree, root_0);
                    }
                    LPAREN504=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8089); if (state.failed) return retval;
                    int alt192=3;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==ALL) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==DISTINCT) ) {
                        alt192=2;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            ALL505=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8093); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT506=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8098); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT506_tree = (CommonTree)adaptor.create(DISTINCT506);
                            adaptor.addChild(root_0, DISTINCT506_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8102);
                    expression507=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                    RPAREN508=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8104); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV509=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV509_tree = (CommonTree)adaptor.create(AVEDEV509);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV509_tree, root_0);
                    }
                    LPAREN510=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8113); if (state.failed) return retval;
                    int alt193=3;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==ALL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==DISTINCT) ) {
                        alt193=2;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            ALL511=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8117); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT512=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8122); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT512_tree = (CommonTree)adaptor.create(DISTINCT512);
                            adaptor.addChild(root_0, DISTINCT512_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8126);
                    expression513=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression513.getTree());
                    RPAREN514=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8128); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8134);
                    firstAggregation515=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation515.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8139);
                    lastAggregation516=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation516.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8144);
                    windowAggregation517=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation517.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE518=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE518_tree = (CommonTree)adaptor.create(COALESCE518);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE518_tree, root_0);
                    }
                    LPAREN519=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8152); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8155);
                    expression520=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());
                    COMMA521=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8157); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8160);
                    expression522=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression522.getTree());
                    loop194:
                    do {
                        int alt194=2;
                        int LA194_0 = input.LA(1);
                        if ( (LA194_0==COMMA) ) {
                            alt194=1;
                        }
                        switch (alt194) {
                    	case 1 :
                    	    {
                    	    COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8163); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8166);
                    	    expression524=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression524.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop194;
                        }
                    } while (true);
                    RPAREN525=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8170); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS526=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS526_tree = (CommonTree)adaptor.create(PREVIOUS526);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS526_tree, root_0);
                    }
                    LPAREN527=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8179); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8182);
                    expression528=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression528.getTree());
                    int alt195=2;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==COMMA) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8185); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8188);
                            expression530=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression530.getTree());
                            }
                            break;
                    }
                    RPAREN531=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8192); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL532=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL532_tree = (CommonTree)adaptor.create(PREVIOUSTAIL532);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL532_tree, root_0);
                    }
                    LPAREN533=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8201); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8204);
                    expression534=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression534.getTree());
                    int alt196=2;
                    int LA196_0 = input.LA(1);
                    if ( (LA196_0==COMMA) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8207); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8210);
                            expression536=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                            }
                            break;
                    }
                    RPAREN537=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8214); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT538=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT538_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT538);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT538_tree, root_0);
                    }
                    LPAREN539=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8223); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8226);
                    expression540=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression540.getTree());
                    RPAREN541=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8228); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW542=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW542_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW542);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW542_tree, root_0);
                    }
                    LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8237); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8240);
                    expression544=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression544.getTree());
                    RPAREN545=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8242); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR546=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR546_tree = (CommonTree)adaptor.create(PRIOR546);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR546_tree, root_0);
                    }
                    LPAREN547=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8251); if (state.failed) return retval;
                    NUM_INT548=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT548_tree = (CommonTree)adaptor.create(NUM_INT548);
                    adaptor.addChild(root_0, NUM_INT548_tree);
                    }
                    COMMA549=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8256); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8259);
                    eventProperty550=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty550.getTree());
                    RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8261); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF552=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF552_tree = (CommonTree)adaptor.create(INSTANCEOF552);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF552_tree, root_0);
                    }
                    LPAREN553=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8274); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8277);
                    expression554=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());
                    COMMA555=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8279); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8282);
                    classIdentifier556=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier556.getTree());
                    loop197:
                    do {
                        int alt197=2;
                        int LA197_0 = input.LA(1);
                        if ( (LA197_0==COMMA) ) {
                            alt197=1;
                        }
                        switch (alt197) {
                    	case 1 :
                    	    {
                    	    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8285); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8288);
                    	    classIdentifier558=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier558.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop197;
                        }
                    } while (true);
                    RPAREN559=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8292); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST560=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8298); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST560_tree = (CommonTree)adaptor.create(CAST560);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST560_tree, root_0);
                    }
                    LPAREN561=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8301); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8304);
                    expression562=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression562.getTree());
                    int alt198=2;
                    int LA198_0 = input.LA(1);
                    if ( (LA198_0==COMMA) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==AS) ) {
                        alt198=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 198, 0, input);
                        throw nvae;
                    }
                    switch (alt198) {
                        case 1 :
                            {
                            COMMA563=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8307); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS564=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8312); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8316);
                    classIdentifier565=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier565.getTree());
                    RPAREN566=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8318); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS567=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS567_tree = (CommonTree)adaptor.create(EXISTS567);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS567_tree, root_0);
                    }
                    LPAREN568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8327); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8330);
                    eventProperty569=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty569.getTree());
                    RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8332); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP571=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP571_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP571);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP571_tree, root_0);
                    }
                    int alt199=2;
                    int LA199_0 = input.LA(1);
                    if ( (LA199_0==LPAREN) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            {
                            LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8342); if (state.failed) return retval;
                            RPAREN573=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8345); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST574=null;
        Token LPAREN575=null;
        Token COMMA577=null;
        Token RPAREN579=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr576 = null;
        EsperEPL2GrammarParser.expression_return expression578 = null;
        CommonTree FIRST574_tree=null;
        CommonTree LPAREN575_tree=null;
        CommonTree COMMA577_tree=null;
        CommonTree RPAREN579_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST574=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST574);
            LPAREN575=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN575);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8364);
            accessAggExpr576=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr576.getTree());
            int alt201=2;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==COMMA) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    {
                    COMMA577=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA577);
                    pushFollow(FOLLOW_expression_in_firstAggregation8369);
                    expression578=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression578.getTree());
                    }
                    break;
            }
            RPAREN579=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN579);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST580=null;
        Token LPAREN581=null;
        Token COMMA583=null;
        Token RPAREN585=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr582 = null;
        EsperEPL2GrammarParser.expression_return expression584 = null;
        CommonTree LAST580_tree=null;
        CommonTree LPAREN581_tree=null;
        CommonTree COMMA583_tree=null;
        CommonTree RPAREN585_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST580=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST580);
            LPAREN581=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN581);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8402);
            accessAggExpr582=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr582.getTree());
            int alt202=2;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==COMMA) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    {
                    COMMA583=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA583);
                    pushFollow(FOLLOW_expression_in_lastAggregation8407);
                    expression584=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression584.getTree());
                    }
                    break;
            }
            RPAREN585=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN585);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW586=null;
        Token LPAREN587=null;
        Token RPAREN589=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr588 = null;
        CommonTree WINDOW586_tree=null;
        CommonTree LPAREN587_tree=null;
        CommonTree RPAREN589_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW586=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW586);
            LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN587);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8441);
            accessAggExpr588=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr588.getTree());
            RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN589);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector590 = null;
        EsperEPL2GrammarParser.expression_return expression591 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt203=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt203=1;
                }
                break;
            case IDENT:
                {
                int LA203_2 = input.LA(2);
                if ( (LA203_2==DOT) ) {
                    int LA203_68 = input.LA(3);
                    if ( (LA203_68==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt203=2;
                    }
                    else if ( (LA203_68==WINDOW||LA203_68==ESCAPE||LA203_68==EVERY_EXPR||(LA203_68>=SUM && LA203_68<=COUNT)||LA203_68==OUTER||(LA203_68>=JOIN && LA203_68<=FULL)||(LA203_68>=EVENTS && LA203_68<=LAST)||(LA203_68>=UNIDIRECTIONAL && LA203_68<=PREVIOUSTAIL)||LA203_68==PRIOR||(LA203_68>=WEEKDAY && LA203_68<=CAST)||LA203_68==SNAPSHOT||(LA203_68>=VARIABLE && LA203_68<=INDEX)||(LA203_68>=DEFINE && LA203_68<=MATCHES)||LA203_68==WHILE||(LA203_68>=MERGE && LA203_68<=MATCHED)||LA203_68==IDENT||LA203_68==TICKED_STRING_LITERAL) ) {
                        alt203=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA203_2>=IN_SET && LA203_2<=REGEXP)||(LA203_2>=OR_EXPR && LA203_2<=NOT_EXPR)||LA203_2==IS||LA203_2==COMMA||(LA203_2>=LPAREN && LA203_2<=EQUALS)||LA203_2==LBRACK||(LA203_2>=STAR && LA203_2<=QUESTION)||(LA203_2>=BAND && LA203_2<=MOD)||LA203_2==ESCAPECHAR) ) {
                    alt203=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt203=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);
                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8489);
                    propertyStreamSelector590=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector590.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8494);
                    expression591=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression591.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX592=null;
        Token MIN593=null;
        Token LPAREN594=null;
        Token COMMA596=null;
        Token COMMA598=null;
        Token RPAREN600=null;
        EsperEPL2GrammarParser.expression_return expression595 = null;
        EsperEPL2GrammarParser.expression_return expression597 = null;
        EsperEPL2GrammarParser.expression_return expression599 = null;
        CommonTree MAX592_tree=null;
        CommonTree MIN593_tree=null;
        CommonTree LPAREN594_tree=null;
        CommonTree COMMA596_tree=null;
        CommonTree COMMA598_tree=null;
        CommonTree RPAREN600_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==MAX) ) {
                alt204=1;
            }
            else if ( (LA204_0==MIN) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);
                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    {
                    MAX592=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8507); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX592_tree = (CommonTree)adaptor.create(MAX592);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX592_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN593=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN593_tree = (CommonTree)adaptor.create(MIN593);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN593_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8516); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8519);
            expression595=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression595.getTree());
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==COMMA) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    COMMA596=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8522); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8525);
                    expression597=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression597.getTree());
                    loop205:
                    do {
                        int alt205=2;
                        int LA205_0 = input.LA(1);
                        if ( (LA205_0==COMMA) ) {
                            alt205=1;
                        }
                        switch (alt205) {
                    	case 1 :
                    	    {
                    	    COMMA598=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8528); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8531);
                    	    expression599=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression599.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop205;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8538); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty601 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction602 = null;
        try {
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==IDENT) ) {
                int LA207_1 = input.LA(2);
                if ( (LA207_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt207=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA207_292 = input.LA(4);
                        if ( (LA207_292==RPAREN) ) {
                            int LA207_651 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 651, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA207_292>=IN_SET && LA207_292<=REGEXP)||(LA207_292>=OR_EXPR && LA207_292<=NOT_EXPR)||LA207_292==IS||LA207_292==COMMA||LA207_292==EQUALS||(LA207_292>=STAR && LA207_292<=PLUS)||(LA207_292>=BAND && LA207_292<=MOD)) ) {
                            alt207=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 292, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA207_293 = input.LA(4);
                        if ( ((LA207_293>=IN_SET && LA207_293<=REGEXP)||(LA207_293>=OR_EXPR && LA207_293<=NOT_EXPR)||LA207_293==IS||LA207_293==COMMA||LA207_293==EQUALS||(LA207_293>=STAR && LA207_293<=PLUS)||(LA207_293>=BAND && LA207_293<=MOD)) ) {
                            alt207=2;
                        }
                        else if ( (LA207_293==RPAREN) ) {
                            int LA207_697 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 697, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 293, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 47, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_1==DOT) ) {
                    int LA207_48 = input.LA(3);
                    if ( (LA207_48==IDENT) ) {
                        int LA207_352 = input.LA(4);
                        if ( (LA207_352==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LPAREN) ) {
                            int LA207_705 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 705, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_352==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_352==DOT) ) {
                            int LA207_761 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 761, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 352, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_48==TICKED_STRING_LITERAL) ) {
                        int LA207_353 = input.LA(4);
                        if ( (LA207_353==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LPAREN) ) {
                            int LA207_764 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 764, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_353==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_353==DOT) ) {
                            int LA207_820 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 820, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 353, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_48==MAX) ) {
                        int LA207_354 = input.LA(4);
                        if ( (LA207_354==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LPAREN) ) {
                            int LA207_823 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 823, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_354==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_354==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 354, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_48==MIN) ) {
                        int LA207_355 = input.LA(4);
                        if ( (LA207_355==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LPAREN) ) {
                            int LA207_882 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 882, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_355==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_355==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 355, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_48==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_48==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 48, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA207_0==TICKED_STRING_LITERAL) ) {
                int LA207_2 = input.LA(2);
                if ( (LA207_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt207=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA207_407 = input.LA(4);
                        if ( (LA207_407==RPAREN) ) {
                            int LA207_939 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 939, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA207_407>=IN_SET && LA207_407<=REGEXP)||(LA207_407>=OR_EXPR && LA207_407<=NOT_EXPR)||LA207_407==IS||LA207_407==COMMA||LA207_407==EQUALS||(LA207_407>=STAR && LA207_407<=PLUS)||(LA207_407>=BAND && LA207_407<=MOD)) ) {
                            alt207=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 407, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA207_408 = input.LA(4);
                        if ( ((LA207_408>=IN_SET && LA207_408<=REGEXP)||(LA207_408>=OR_EXPR && LA207_408<=NOT_EXPR)||LA207_408==IS||LA207_408==COMMA||LA207_408==EQUALS||(LA207_408>=STAR && LA207_408<=PLUS)||(LA207_408>=BAND && LA207_408<=MOD)) ) {
                            alt207=2;
                        }
                        else if ( (LA207_408==RPAREN) ) {
                            int LA207_985 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 985, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 408, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==DOT) ) {
                    int LA207_110 = input.LA(3);
                    if ( (LA207_110==IDENT) ) {
                        int LA207_467 = input.LA(4);
                        if ( (LA207_467==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LPAREN) ) {
                            int LA207_993 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 993, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_467==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_467==DOT) ) {
                            int LA207_1049 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1049, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 467, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_110==TICKED_STRING_LITERAL) ) {
                        int LA207_468 = input.LA(4);
                        if ( (LA207_468==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LPAREN) ) {
                            int LA207_1052 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1052, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_468==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_468==DOT) ) {
                            int LA207_1108 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1108, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 468, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_110==MAX) ) {
                        int LA207_469 = input.LA(4);
                        if ( (LA207_469==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LPAREN) ) {
                            int LA207_1111 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1111, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_469==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_469==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 469, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_110==MIN) ) {
                        int LA207_470 = input.LA(4);
                        if ( (LA207_470==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LPAREN) ) {
                            int LA207_1170 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1170, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA207_470==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==END) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_470==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 470, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_110==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_110==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 110, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA207_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==MAX) ) {
                int LA207_9 = input.LA(2);
                if ( (LA207_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt207=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA207_522 = input.LA(4);
                        if ( (LA207_522==RPAREN) ) {
                            int LA207_1227 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1227, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA207_522>=IN_SET && LA207_522<=REGEXP)||(LA207_522>=OR_EXPR && LA207_522<=NOT_EXPR)||LA207_522==IS||LA207_522==COMMA||LA207_522==EQUALS||(LA207_522>=STAR && LA207_522<=PLUS)||(LA207_522>=BAND && LA207_522<=MOD)) ) {
                            alt207=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 522, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA207_523 = input.LA(4);
                        if ( ((LA207_523>=IN_SET && LA207_523<=REGEXP)||(LA207_523>=OR_EXPR && LA207_523<=NOT_EXPR)||LA207_523==IS||LA207_523==COMMA||LA207_523==EQUALS||(LA207_523>=STAR && LA207_523<=PLUS)||(LA207_523>=BAND && LA207_523<=MOD)) ) {
                            alt207=2;
                        }
                        else if ( (LA207_523==RPAREN) ) {
                            int LA207_1273 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1273, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 523, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA207_0==MIN) ) {
                int LA207_10 = input.LA(2);
                if ( (LA207_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt207=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA207_591 = input.LA(4);
                        if ( (LA207_591==RPAREN) ) {
                            int LA207_1279 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1279, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA207_591>=IN_SET && LA207_591<=REGEXP)||(LA207_591>=OR_EXPR && LA207_591<=NOT_EXPR)||LA207_591==IS||LA207_591==COMMA||LA207_591==EQUALS||(LA207_591>=STAR && LA207_591<=PLUS)||(LA207_591>=BAND && LA207_591<=MOD)) ) {
                            alt207=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 591, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA207_592 = input.LA(4);
                        if ( ((LA207_592>=IN_SET && LA207_592<=REGEXP)||(LA207_592>=OR_EXPR && LA207_592<=NOT_EXPR)||LA207_592==IS||LA207_592==COMMA||LA207_592==EQUALS||(LA207_592>=STAR && LA207_592<=PLUS)||(LA207_592>=BAND && LA207_592<=MOD)) ) {
                            alt207=2;
                        }
                        else if ( (LA207_592==RPAREN) ) {
                            int LA207_1325 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt207=1;
                            }
                            else if ( (true) ) {
                                alt207=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 207, 1325, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 592, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 226, input);
                        throw nvae;
                    }
                }
                else if ( (LA207_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else if ( (LA207_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt207=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA207_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else if ( (LA207_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt207=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);
                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8557);
                    eventProperty601=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty601.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8562);
                    libFunction602=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction602.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT604=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass603 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass605 = null;
        CommonTree DOT604_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8574);
            libFunctionWithClass603=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass603.getTree());
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);
                if ( (LA208_0==DOT) ) {
                    alt208=1;
                }
                switch (alt208) {
            	case 1 :
            	    {
            	    DOT604=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8577); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT604);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8579);
            	    libFunctionNoClass605=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass605.getTree());
            	    }
            	    break;
            	default :
            	    break loop208;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT607=null;
        Token LPAREN609=null;
        Token RPAREN611=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy606 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent608 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs610 = null;
        CommonTree DOT607_tree=null;
        CommonTree LPAREN609_tree=null;
        CommonTree RPAREN611_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==IDENT) ) {
                int LA209_1 = input.LA(2);
                if ( (LA209_1==DOT) ) {
                    alt209=1;
                }
            }
            else if ( (LA209_0==TICKED_STRING_LITERAL) ) {
                int LA209_2 = input.LA(2);
                if ( (LA209_2==DOT) ) {
                    alt209=1;
                }
            }
            switch (alt209) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8609);
                    classIdentifierNonGreedy606=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy606.getTree());
                    DOT607=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT607);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8615);
            funcIdent608=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent608.getTree());
            LPAREN609=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN609);
            int alt210=2;
            int LA210_0 = input.LA(1);
            if ( (LA210_0==WINDOW||LA210_0==ESCAPE||(LA210_0>=NOT_EXPR && LA210_0<=EVERY_EXPR)||(LA210_0>=SUM && LA210_0<=COUNT)||LA210_0==CASE||LA210_0==OUTER||(LA210_0>=JOIN && LA210_0<=FULL)||(LA210_0>=DISTINCT && LA210_0<=ALL)||(LA210_0>=EVENTS && LA210_0<=LAST)||(LA210_0>=UNIDIRECTIONAL && LA210_0<=CURRENT_TIMESTAMP)||LA210_0==SNAPSHOT||(LA210_0>=VARIABLE && LA210_0<=INDEX)||(LA210_0>=BOOLEAN_TRUE && LA210_0<=VALUE_NULL)||(LA210_0>=DEFINE && LA210_0<=MATCHES)||LA210_0==WHILE||(LA210_0>=MERGE && LA210_0<=MATCHED)||LA210_0==NUM_DOUBLE||(LA210_0>=IDENT && LA210_0<=LPAREN)||(LA210_0>=PLUS && LA210_0<=QUESTION)||(LA210_0>=STRING_LITERAL && LA210_0<=QUOTED_STRING_LITERAL)||LA210_0==MINUS||LA210_0==LCURLY||LA210_0==NUM_INT||(LA210_0>=TICKED_STRING_LITERAL && LA210_0<=NUM_FLOAT)) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8620);
                    libFunctionArgs610=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs610.getTree());
                    }
                    break;
            }
            RPAREN611=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN611);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN613=null;
        Token RPAREN615=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent612 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs614 = null;
        CommonTree LPAREN613_tree=null;
        CommonTree RPAREN615_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8653);
            funcIdent612=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent612.getTree());
            LPAREN613=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN613);
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==WINDOW||LA211_0==ESCAPE||(LA211_0>=NOT_EXPR && LA211_0<=EVERY_EXPR)||(LA211_0>=SUM && LA211_0<=COUNT)||LA211_0==CASE||LA211_0==OUTER||(LA211_0>=JOIN && LA211_0<=FULL)||(LA211_0>=DISTINCT && LA211_0<=ALL)||(LA211_0>=EVENTS && LA211_0<=LAST)||(LA211_0>=UNIDIRECTIONAL && LA211_0<=CURRENT_TIMESTAMP)||LA211_0==SNAPSHOT||(LA211_0>=VARIABLE && LA211_0<=INDEX)||(LA211_0>=BOOLEAN_TRUE && LA211_0<=VALUE_NULL)||(LA211_0>=DEFINE && LA211_0<=MATCHES)||LA211_0==WHILE||(LA211_0>=MERGE && LA211_0<=MATCHED)||LA211_0==NUM_DOUBLE||(LA211_0>=IDENT && LA211_0<=LPAREN)||(LA211_0>=PLUS && LA211_0<=QUESTION)||(LA211_0>=STRING_LITERAL && LA211_0<=QUOTED_STRING_LITERAL)||LA211_0==MINUS||LA211_0==LCURLY||LA211_0==NUM_INT||(LA211_0>=TICKED_STRING_LITERAL && LA211_0<=NUM_FLOAT)) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8658);
                    libFunctionArgs614=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs614.getTree());
                    }
                    break;
            }
            RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN615);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent616 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt212=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt212=1;
                }
                break;
            case MAX:
                {
                alt212=2;
                }
                break;
            case MIN:
                {
                alt212=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);
                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8688);
                    escapableIdent616=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent616.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL617=null;
        Token DISTINCT618=null;
        Token COMMA620=null;
        EsperEPL2GrammarParser.expression_return expression619 = null;
        EsperEPL2GrammarParser.expression_return expression621 = null;
        CommonTree ALL617_tree=null;
        CommonTree DISTINCT618_tree=null;
        CommonTree COMMA620_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt213=3;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==ALL) ) {
                alt213=1;
            }
            else if ( (LA213_0==DISTINCT) ) {
                alt213=2;
            }
            switch (alt213) {
                case 1 :
                    {
                    ALL617=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8725); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT618=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT618_tree = (CommonTree)adaptor.create(DISTINCT618);
                    adaptor.addChild(root_0, DISTINCT618_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8734);
            expression619=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression619.getTree());
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);
                if ( (LA214_0==COMMA) ) {
                    alt214=1;
                }
                switch (alt214) {
            	case 1 :
            	    {
            	    COMMA620=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8737); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8740);
            	    expression621=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression621.getTree());
            	    }
            	    break;
            	default :
            	    break loop214;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR623=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr622 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr624 = null;
        CommonTree AND_EXPR623_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8754);
            concatenationExpr622=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr622.getTree());
            AND_EXPR623=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8756); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8759);
            concatenationExpr624=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr624.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression625 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8787);
            followedByExpression625=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression625.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression626 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression627 = null;
        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8799);
            orExpression626=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression626.getTree());
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);
                if ( (LA215_0==FOLLOWED_BY) ) {
                    alt215=1;
                }
                switch (alt215) {
            	case 1 :
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8804); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8806);
            	    orExpression627=orExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression627.getTree());
            	    }
            	    break;
            	default :
            	    break loop215;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (f != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());
                }
                stream_orExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression628 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression629 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8845);
            andExpression628=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression628.getTree());
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);
                if ( (LA216_0==OR_EXPR) ) {
                    alt216=1;
                }
                switch (alt216) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8850); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression8852);
            	    andExpression629=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression629.getTree());
            	    }
            	    break;
            	default :
            	    break loop216;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression630 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression631 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8884);
            matchUntilExpression630=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression630.getTree());
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);
                if ( (LA217_0==AND_EXPR) ) {
                    alt217=1;
                }
                switch (alt217) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8889); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8891);
            	    matchUntilExpression631=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression631.getTree());
            	    }
            	    break;
            	default :
            	    break loop217;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression632 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression633 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==LBRACK) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8926);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8930);
            qualifyExpression632=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression632.getTree());
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( (LA219_0==UNTIL) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8937);
                    qualifyExpression633=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression633.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList634 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix635 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( ((LA222_0>=NOT_EXPR && LA222_0<=EVERY_DISTINCT_EXPR)) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    {
                    int alt220=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt220=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt220=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt220=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 0, input);
                        throw nvae;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9002); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9008); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9014); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9016);
                            distinctExpressionList634=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList634.getTree());
                            }
                            break;
                    }
                    int alt221=2;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==LBRACK) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9022);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9031);
            guardPostFix635=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix635.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN636=null;
        Token COMMA638=null;
        Token RPAREN640=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom637 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom639 = null;
        CommonTree LPAREN636_tree=null;
        CommonTree COMMA638_tree=null;
        CommonTree RPAREN640_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN636=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN636);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9148);
            distinctExpressionAtom637=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom637.getTree());
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);
                if ( (LA223_0==COMMA) ) {
                    alt223=1;
                }
                switch (alt223) {
            	case 1 :
            	    {
            	    COMMA638=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9151); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA638);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9153);
            	    distinctExpressionAtom639=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom639.getTree());
            	    }
            	    break;
            	default :
            	    break loop223;
                }
            } while (true);
            RPAREN640=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN640);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression641 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_distinctExpressionAtom9180);
            expression641=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression641.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN644=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression642 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression643 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression645 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression646 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN644_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==IDENT||LA224_0==TICKED_STRING_LITERAL) ) {
                alt224=1;
            }
            else if ( (LA224_0==LPAREN) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);
                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9195);
                    atomicExpression642=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression642.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9203);
                    patternExpression643=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression643.getTree());
                    RPAREN644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN644);
                    }
                    break;
            }
            int alt225=3;
            int LA225_0 = input.LA(1);
            if ( (LA225_0==WHERE) ) {
                alt225=1;
            }
            else if ( (LA225_0==WHILE) ) {
                alt225=2;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9214);
                    guardWhereExpression645=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression645.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9224);
                    guardWhileExpression646=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression646.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression647 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression648 = null;
        try {
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==IDENT) ) {
                int LA226_1 = input.LA(2);
                if ( (LA226_1==COLON) ) {
                    alt226=1;
                }
                else if ( (LA226_1==EOF||(LA226_1>=OR_EXPR && LA226_1<=AND_EXPR)||LA226_1==WHERE||LA226_1==UNTIL||LA226_1==WHILE||(LA226_1>=LPAREN && LA226_1<=RBRACK)||LA226_1==FOLLOWED_BY) ) {
                    alt226=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA226_0==TICKED_STRING_LITERAL) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);
                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9286);
                    observerExpression647=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression647.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9290);
                    patternFilterExpression648=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression648.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON649=null;
        Token LPAREN650=null;
        Token RPAREN652=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList651 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON649_tree=null;
        CommonTree LPAREN650_tree=null;
        CommonTree RPAREN652_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON649=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON649);
            int alt227=2;
            int LA227_0 = input.LA(1);
            if ( (LA227_0==IDENT) ) {
                alt227=1;
            }
            else if ( (LA227_0==AT) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);
                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN650=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN650);
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( (LA228_0==WINDOW||LA228_0==ESCAPE||(LA228_0>=NOT_EXPR && LA228_0<=EVERY_EXPR)||(LA228_0>=SUM && LA228_0<=COUNT)||LA228_0==CASE||LA228_0==OUTER||(LA228_0>=JOIN && LA228_0<=FULL)||(LA228_0>=EVENTS && LA228_0<=LAST)||(LA228_0>=UNIDIRECTIONAL && LA228_0<=CURRENT_TIMESTAMP)||LA228_0==SNAPSHOT||(LA228_0>=VARIABLE && LA228_0<=INDEX)||(LA228_0>=BOOLEAN_TRUE && LA228_0<=VALUE_NULL)||(LA228_0>=DEFINE && LA228_0<=MATCHES)||LA228_0==WHILE||(LA228_0>=MERGE && LA228_0<=MATCHED)||LA228_0==NUM_DOUBLE||(LA228_0>=IDENT && LA228_0<=LPAREN)||LA228_0==LBRACK||LA228_0==STAR||(LA228_0>=PLUS && LA228_0<=QUESTION)||(LA228_0>=STRING_LITERAL && LA228_0<=QUOTED_STRING_LITERAL)||LA228_0==MINUS||LA228_0==LCURLY||LA228_0==NUM_INT||(LA228_0>=TICKED_STRING_LITERAL && LA228_0<=NUM_FLOAT)) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9323);
                    expressionWithTimeList651=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList651.getTree());
                    }
                    break;
            }
            RPAREN652=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN652);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT653=null;
        Token COLON654=null;
        Token IDENT655=null;
        Token LPAREN656=null;
        Token RPAREN658=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList657 = null;
        CommonTree IDENT653_tree=null;
        CommonTree COLON654_tree=null;
        CommonTree IDENT655_tree=null;
        CommonTree LPAREN656_tree=null;
        CommonTree RPAREN658_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT653=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT653_tree = (CommonTree)adaptor.create(IDENT653);
            adaptor.addChild(root_0, IDENT653_tree);
            }
            COLON654=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9377); if (state.failed) return retval;
            IDENT655=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT655_tree = (CommonTree)adaptor.create(IDENT655);
            adaptor.addChild(root_0, IDENT655_tree);
            }
            LPAREN656=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9382); if (state.failed) return retval;
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==WINDOW||LA229_0==ESCAPE||(LA229_0>=NOT_EXPR && LA229_0<=EVERY_EXPR)||(LA229_0>=SUM && LA229_0<=COUNT)||LA229_0==CASE||LA229_0==OUTER||(LA229_0>=JOIN && LA229_0<=FULL)||(LA229_0>=EVENTS && LA229_0<=LAST)||(LA229_0>=UNIDIRECTIONAL && LA229_0<=CURRENT_TIMESTAMP)||LA229_0==SNAPSHOT||(LA229_0>=VARIABLE && LA229_0<=INDEX)||(LA229_0>=BOOLEAN_TRUE && LA229_0<=VALUE_NULL)||(LA229_0>=DEFINE && LA229_0<=MATCHES)||LA229_0==WHILE||(LA229_0>=MERGE && LA229_0<=MATCHED)||LA229_0==NUM_DOUBLE||(LA229_0>=IDENT && LA229_0<=LPAREN)||LA229_0==LBRACK||LA229_0==STAR||(LA229_0>=PLUS && LA229_0<=QUESTION)||(LA229_0>=STRING_LITERAL && LA229_0<=QUOTED_STRING_LITERAL)||LA229_0==MINUS||LA229_0==LCURLY||LA229_0==NUM_INT||(LA229_0>=TICKED_STRING_LITERAL && LA229_0<=NUM_FLOAT)) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9386);
                    expressionWithTimeList657=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList657.getTree());
                    }
                    break;
            }
            RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9390); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN659=null;
        Token RPAREN661=null;
        EsperEPL2GrammarParser.expression_return expression660 = null;
        CommonTree LPAREN659_tree=null;
        CommonTree RPAREN661_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN659=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9403); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9406);
            expression660=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression660.getTree());
            RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9408); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK662=null;
        Token RBRACK666=null;
        EsperEPL2GrammarParser.expression_return expression663 = null;
        EsperEPL2GrammarParser.expression_return expression664 = null;
        EsperEPL2GrammarParser.expression_return expression665 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK662_tree=null;
        CommonTree RBRACK666_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK662=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK662);
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==WINDOW||LA232_0==ESCAPE||(LA232_0>=NOT_EXPR && LA232_0<=EVERY_EXPR)||(LA232_0>=SUM && LA232_0<=COUNT)||LA232_0==CASE||LA232_0==OUTER||(LA232_0>=JOIN && LA232_0<=FULL)||(LA232_0>=EVENTS && LA232_0<=LAST)||(LA232_0>=UNIDIRECTIONAL && LA232_0<=CURRENT_TIMESTAMP)||LA232_0==SNAPSHOT||(LA232_0>=VARIABLE && LA232_0<=INDEX)||(LA232_0>=BOOLEAN_TRUE && LA232_0<=VALUE_NULL)||(LA232_0>=DEFINE && LA232_0<=MATCHES)||LA232_0==WHILE||(LA232_0>=MERGE && LA232_0<=MATCHED)||LA232_0==NUM_DOUBLE||(LA232_0>=IDENT && LA232_0<=LPAREN)||(LA232_0>=PLUS && LA232_0<=QUESTION)||(LA232_0>=STRING_LITERAL && LA232_0<=QUOTED_STRING_LITERAL)||LA232_0==MINUS||LA232_0==LCURLY||LA232_0==NUM_INT||(LA232_0>=TICKED_STRING_LITERAL && LA232_0<=NUM_FLOAT)) ) {
                alt232=1;
            }
            else if ( (LA232_0==COLON) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);
                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9436);
                    expression663=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression663.getTree());
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==COLON) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9441); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt230=2;
                            int LA230_0 = input.LA(1);
                            if ( (LA230_0==WINDOW||LA230_0==ESCAPE||(LA230_0>=NOT_EXPR && LA230_0<=EVERY_EXPR)||(LA230_0>=SUM && LA230_0<=COUNT)||LA230_0==CASE||LA230_0==OUTER||(LA230_0>=JOIN && LA230_0<=FULL)||(LA230_0>=EVENTS && LA230_0<=LAST)||(LA230_0>=UNIDIRECTIONAL && LA230_0<=CURRENT_TIMESTAMP)||LA230_0==SNAPSHOT||(LA230_0>=VARIABLE && LA230_0<=INDEX)||(LA230_0>=BOOLEAN_TRUE && LA230_0<=VALUE_NULL)||(LA230_0>=DEFINE && LA230_0<=MATCHES)||LA230_0==WHILE||(LA230_0>=MERGE && LA230_0<=MATCHED)||LA230_0==NUM_DOUBLE||(LA230_0>=IDENT && LA230_0<=LPAREN)||(LA230_0>=PLUS && LA230_0<=QUESTION)||(LA230_0>=STRING_LITERAL && LA230_0<=QUOTED_STRING_LITERAL)||LA230_0==MINUS||LA230_0==LCURLY||LA230_0==NUM_INT||(LA230_0>=TICKED_STRING_LITERAL && LA230_0<=NUM_FLOAT)) ) {
                                alt230=1;
                            }
                            switch (alt230) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9444);
                                    expression664=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression664.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9466);
                    expression665=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression665.getTree());
                    }
                    break;
            }
            RBRACK666=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK666);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS667=null;
        Token LPAREN669=null;
        Token RPAREN671=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier668 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList670 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression672 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS667_tree=null;
        CommonTree LPAREN669_tree=null;
        CommonTree RPAREN671_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==IDENT) ) {
                int LA233_1 = input.LA(2);
                if ( (LA233_1==EQUALS) ) {
                    alt233=1;
                }
            }
            switch (alt233) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS667=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS667);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9575);
            classIdentifier668=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier668.getTree());
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==LPAREN) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    LPAREN669=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN669);
                    int alt234=2;
                    int LA234_0 = input.LA(1);
                    if ( (LA234_0==WINDOW||LA234_0==ESCAPE||(LA234_0>=NOT_EXPR && LA234_0<=EVERY_EXPR)||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==CASE||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||LA234_0==SNAPSHOT||(LA234_0>=VARIABLE && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHES)||LA234_0==WHILE||(LA234_0>=MERGE && LA234_0<=MATCHED)||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||(LA234_0>=PLUS && LA234_0<=QUESTION)||(LA234_0>=STRING_LITERAL && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==LCURLY||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
                        alt234=1;
                    }
                    switch (alt234) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9588);
                            expressionList670=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList670.getTree());
                            }
                            break;
                    }
                    RPAREN671=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN671);
                    }
                    break;
            }
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==LBRACK) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9603);
                    propertyExpression672=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression672.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic673 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic674 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9648);
            propertyExpressionAtomic673=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic673.getTree());
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);
                if ( (LA237_0==LBRACK) ) {
                    alt237=1;
                }
                switch (alt237) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9651);
            	    propertyExpressionAtomic674=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic674.getTree());
            	    }
            	    break;
            	default :
            	    break loop237;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK675=null;
        Token SELECT676=null;
        Token FROM678=null;
        Token AS680=null;
        Token IDENT681=null;
        Token WHERE682=null;
        Token RBRACK684=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList677 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty679 = null;
        EsperEPL2GrammarParser.expression_return expression683 = null;
        CommonTree LBRACK675_tree=null;
        CommonTree SELECT676_tree=null;
        CommonTree FROM678_tree=null;
        CommonTree AS680_tree=null;
        CommonTree IDENT681_tree=null;
        CommonTree WHERE682_tree=null;
        CommonTree RBRACK684_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK675=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK675);
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==SELECT) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    SELECT676=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT676);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9686);
                    propertySelectionList677=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList677.getTree());
                    FROM678=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM678);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9692);
            eventProperty679=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty679.getTree());
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==AS) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    AS680=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS680);
                    IDENT681=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT681);
                    }
                    break;
            }
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==WHERE) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    WHERE682=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE682);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9704);
                    expression683=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression683.getTree());
                    }
                    break;
            }
            RBRACK684=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK684);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA686=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement685 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement687 = null;
        CommonTree COMMA686_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9758);
            propertySelectionListElement685=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement685.getTree());
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);
                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }
                switch (alt241) {
            	case 1 :
            	    {
            	    COMMA686=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9761); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9764);
            	    propertySelectionListElement687=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement687.getTree());
            	    }
            	    break;
            	default :
            	    break loop241;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS690=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector688 = null;
        EsperEPL2GrammarParser.expression_return expression689 = null;
        CommonTree s_tree=null;
        CommonTree AS690_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt243=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt243=1;
                }
                break;
            case IDENT:
                {
                int LA243_2 = input.LA(2);
                if ( (LA243_2==DOT) ) {
                    int LA243_68 = input.LA(3);
                    if ( (LA243_68==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt243=2;
                    }
                    else if ( (LA243_68==WINDOW||LA243_68==ESCAPE||LA243_68==EVERY_EXPR||(LA243_68>=SUM && LA243_68<=COUNT)||LA243_68==OUTER||(LA243_68>=JOIN && LA243_68<=FULL)||(LA243_68>=EVENTS && LA243_68<=LAST)||(LA243_68>=UNIDIRECTIONAL && LA243_68<=PREVIOUSTAIL)||LA243_68==PRIOR||(LA243_68>=WEEKDAY && LA243_68<=CAST)||LA243_68==SNAPSHOT||(LA243_68>=VARIABLE && LA243_68<=INDEX)||(LA243_68>=DEFINE && LA243_68<=MATCHES)||LA243_68==WHILE||(LA243_68>=MERGE && LA243_68<=MATCHED)||LA243_68==IDENT||LA243_68==TICKED_STRING_LITERAL) ) {
                        alt243=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA243_2>=IN_SET && LA243_2<=REGEXP)||(LA243_2>=OR_EXPR && LA243_2<=NOT_EXPR)||LA243_2==AS||LA243_2==FROM||LA243_2==IS||LA243_2==COMMA||LA243_2==LPAREN||LA243_2==EQUALS||LA243_2==LBRACK||(LA243_2>=STAR && LA243_2<=QUESTION)||(LA243_2>=BAND && LA243_2<=MOD)||LA243_2==ESCAPECHAR) ) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt243=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);
                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9806);
                    propertyStreamSelector688=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector688.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9811);
                    expression689=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression689.getTree());
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==AS) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            AS690=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9814); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS690);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9818);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT691=null;
        Token STAR692=null;
        Token AS693=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT691_tree=null;
        CommonTree STAR692_tree=null;
        CommonTree AS693_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT691=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT691);
            STAR692=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR692);
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==AS) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    AS693=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS693);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS694=null;
        Token LPAREN696=null;
        Token RPAREN698=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier695 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList697 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression699 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS694_tree=null;
        CommonTree LPAREN696_tree=null;
        CommonTree RPAREN698_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==IDENT) ) {
                int LA245_1 = input.LA(2);
                if ( (LA245_1==EQUALS) ) {
                    alt245=1;
                }
            }
            switch (alt245) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS694=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS694);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9931);
            classIdentifier695=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier695.getTree());
            int alt247=2;
            int LA247_0 = input.LA(1);
            if ( (LA247_0==LPAREN) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    {
                    LPAREN696=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN696);
                    int alt246=2;
                    int LA246_0 = input.LA(1);
                    if ( (LA246_0==WINDOW||LA246_0==ESCAPE||(LA246_0>=NOT_EXPR && LA246_0<=EVERY_EXPR)||(LA246_0>=SUM && LA246_0<=COUNT)||LA246_0==CASE||LA246_0==OUTER||(LA246_0>=JOIN && LA246_0<=FULL)||(LA246_0>=EVENTS && LA246_0<=LAST)||(LA246_0>=UNIDIRECTIONAL && LA246_0<=CURRENT_TIMESTAMP)||LA246_0==SNAPSHOT||(LA246_0>=VARIABLE && LA246_0<=INDEX)||(LA246_0>=BOOLEAN_TRUE && LA246_0<=VALUE_NULL)||(LA246_0>=DEFINE && LA246_0<=MATCHES)||LA246_0==WHILE||(LA246_0>=MERGE && LA246_0<=MATCHED)||LA246_0==NUM_DOUBLE||(LA246_0>=IDENT && LA246_0<=LPAREN)||(LA246_0>=PLUS && LA246_0<=QUESTION)||(LA246_0>=STRING_LITERAL && LA246_0<=QUOTED_STRING_LITERAL)||LA246_0==MINUS||LA246_0==LCURLY||LA246_0==NUM_INT||(LA246_0>=TICKED_STRING_LITERAL && LA246_0<=NUM_FLOAT)) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9944);
                            expressionList697=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList697.getTree());
                            }
                            break;
                    }
                    RPAREN698=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN698);
                    }
                    break;
            }
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==LBRACK) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9959);
                    propertyExpression699=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression699.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT700=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT700_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10014);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==DOT) ) {
                    int LA249_22 = input.LA(2);
                    if ( (LA249_22==IDENT) ) {
                        int LA249_45 = input.LA(3);
                        if ( (LA249_45==EOF||LA249_45==CREATE||(LA249_45>=OR_EXPR && LA249_45<=AS)||LA249_45==SELECT||(LA249_45>=INNER && LA249_45<=ON)||(LA249_45>=GROUP && LA249_45<=HAVING)||LA249_45==OUTPUT||LA249_45==INSERT||LA249_45==ORDER||(LA249_45>=UNIDIRECTIONAL && LA249_45<=RETAININTERSECTION)||LA249_45==DELETE||LA249_45==SET||LA249_45==UNTIL||LA249_45==ROW_LIMIT_EXPR||(LA249_45>=UPDATE && LA249_45<=MATCH_RECOGNIZE)||(LA249_45>=FOR && LA249_45<=WHILE)||LA249_45==MERGE||(LA249_45>=COMMA && LA249_45<=RPAREN)||(LA249_45>=DOT && LA249_45<=RBRACK)||LA249_45==RCURLY||LA249_45==FOLLOWED_BY||LA249_45==TICKED_STRING_LITERAL||LA249_45==EMAILAT) ) {
                            alt249=1;
                        }
                    }
                    else if ( (LA249_22==TICKED_STRING_LITERAL) ) {
                        alt249=1;
                    }
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    DOT700=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10033); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT700);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10037);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT701=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT701_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10082);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);
                if ( (LA250_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA250_2 = input.LA(3);
                        if ( (LA250_2==DOT) ) {
                            alt250=1;
                        }
                        else if ( (LA250_2==LPAREN) ) {
                            alt250=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA250_3 = input.LA(3);
                        if ( (LA250_3==DOT) ) {
                            alt250=1;
                        }
                        else if ( (LA250_3==LPAREN) ) {
                            alt250=2;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt250=2;
                        }
                        break;
                    }
                }
                switch (alt250) {
            	case 1 :
            	    {
            	    DOT701=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10117); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT701);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10121);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop250;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA703=null;
        EsperEPL2GrammarParser.expression_return expression702 = null;
        EsperEPL2GrammarParser.expression_return expression704 = null;
        CommonTree COMMA703_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10163);
            expression702=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression702.getTree());
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( (LA251_0==COMMA) ) {
                    alt251=1;
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10166); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10169);
            	    expression704=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression704.getTree());
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA706=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime705 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime707 = null;
        CommonTree COMMA706_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10197);
            expressionWithTime705=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime705.getTree());
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);
                if ( (LA252_0==COMMA) ) {
                    alt252=1;
                }
                switch (alt252) {
            	case 1 :
            	    {
            	    COMMA706=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10200); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10203);
            	    expressionWithTime707=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime707.getTree());
            	    }
            	    break;
            	default :
            	    break loop252;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand708 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand709 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod710 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable711 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand712 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand713 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator714 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator715 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList716 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar717 = null;
        try {
            int alt253=10;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==LAST) ) {
                int LA253_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt253=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt253=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==LW) ) {
                int LA253_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt253=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt253=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==NUM_INT) ) {
                int LA253_3 = input.LA(2);
                if ( (LA253_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else if ( (LA253_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==TIMEPERIOD_SECONDS) ) {
                    int LA253_165 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 165, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_3==TIMEPERIOD_SECOND) ) {
                    int LA253_166 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 166, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_3==TIMEPERIOD_SEC) ) {
                    int LA253_167 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==NUM_LONG) ) {
                int LA253_4 = input.LA(2);
                if ( (LA253_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==TIMEPERIOD_SECONDS) ) {
                    int LA253_211 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 211, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_4==TIMEPERIOD_SECOND) ) {
                    int LA253_212 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 212, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_4==TIMEPERIOD_SEC) ) {
                    int LA253_213 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 213, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==NUM_FLOAT) ) {
                int LA253_5 = input.LA(2);
                if ( (LA253_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==TIMEPERIOD_SECONDS) ) {
                    int LA253_255 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 255, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_5==TIMEPERIOD_SECOND) ) {
                    int LA253_256 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 256, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_5==TIMEPERIOD_SEC) ) {
                    int LA253_257 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 257, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==NUM_DOUBLE) ) {
                int LA253_6 = input.LA(2);
                if ( (LA253_6==TIMEPERIOD_SECONDS) ) {
                    int LA253_275 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 275, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_6==TIMEPERIOD_SECOND) ) {
                    int LA253_276 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 276, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_6==TIMEPERIOD_SEC) ) {
                    int LA253_277 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 277, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else if ( (LA253_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==IDENT) ) {
                int LA253_7 = input.LA(2);
                if ( (LA253_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==TIMEPERIOD_SECONDS) ) {
                    int LA253_345 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 345, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_7==TIMEPERIOD_SECOND) ) {
                    int LA253_346 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 346, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_7==TIMEPERIOD_SEC) ) {
                    int LA253_347 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 347, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else if ( (LA253_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==QUESTION) ) {
                int LA253_8 = input.LA(2);
                if ( (LA253_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt253=7;
                }
                else if ( (LA253_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==TIMEPERIOD_SECONDS) ) {
                    int LA253_392 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 392, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_8==TIMEPERIOD_SECOND) ) {
                    int LA253_393 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 393, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_8==TIMEPERIOD_SEC) ) {
                    int LA253_394 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt253=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt253=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 394, input);
                        throw nvae;
                    }
                }
                else if ( (LA253_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt253=4;
                }
                else if ( (LA253_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt253=5;
                }
                else if ( (LA253_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt253=8;
                }
                else if ( (LA253_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else if ( (LA253_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt253=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt253=4;
            }
            else if ( (LA253_0==STAR) ) {
                int LA253_67 = input.LA(2);
                if ( (LA253_67==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt253=6;
                }
                else if ( (LA253_67==COMMA||LA253_67==RPAREN) ) {
                    alt253=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 67, input);
                    throw nvae;
                }
            }
            else if ( (LA253_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt253=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);
                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10229);
                    lastOperand708=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand708.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10240);
                    lastWeekdayOperand709=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand709.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10251);
                    timePeriod710=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod710.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10262);
                    expressionQualifyable711=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable711.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10273);
                    rangeOperand712=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand712.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10285);
                    frequencyOperand713=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand713.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10296);
                    lastOperator714=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator714.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10308);
                    weekDayOperator715=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator715.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10320);
                    numericParameterList716=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList716.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10325);
                    numberSetStar717=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar717.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression718 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10336);
            expression718=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression718.getTree());
            int alt254=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt254=1;
                    }
                    break;
                case DESC:
                    {
                    alt254=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt254=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt254=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt254=5;
                    }
                    break;
            }
            switch (alt254) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR719=null;
        CommonTree STAR719_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR719=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR719);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW720=null;
        CommonTree LW720_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW720=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW720_tree = (CommonTree)adaptor.create(LW720);
            root_0 = (CommonTree)adaptor.becomeRoot(LW720_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST721=null;
        CommonTree LAST721_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST721=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST721_tree = (CommonTree)adaptor.create(LAST721);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST721_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR722=null;
        Token DIV723=null;
        EsperEPL2GrammarParser.number_return number724 = null;
        EsperEPL2GrammarParser.substitution_return substitution725 = null;
        CommonTree i_tree=null;
        CommonTree STAR722_tree=null;
        CommonTree DIV723_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR722=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR722);
            DIV723=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV723);
            int alt255=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt255=1;
                }
                break;
            case IDENT:
                {
                alt255=2;
                }
                break;
            case QUESTION:
                {
                alt255=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);
                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10464);
                    number724=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number724.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10470);
                    substitution725=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution725.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON728=null;
        EsperEPL2GrammarParser.number_return number726 = null;
        EsperEPL2GrammarParser.substitution_return substitution727 = null;
        EsperEPL2GrammarParser.number_return number729 = null;
        EsperEPL2GrammarParser.substitution_return substitution730 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON728_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt256=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt256=1;
                }
                break;
            case IDENT:
                {
                alt256=2;
                }
                break;
            case QUESTION:
                {
                alt256=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);
                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10519);
                    number726=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number726.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10525);
                    substitution727=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution727.getTree());
                    }
                    break;
            }
            COLON728=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON728);
            int alt257=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt257=1;
                }
                break;
            case IDENT:
                {
                alt257=2;
                }
                break;
            case QUESTION:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);
                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10531);
                    number729=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number729.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10537);
                    substitution730=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution730.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST733=null;
        EsperEPL2GrammarParser.number_return number731 = null;
        EsperEPL2GrammarParser.substitution_return substitution732 = null;
        CommonTree i_tree=null;
        CommonTree LAST733_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt258=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt258=1;
                }
                break;
            case IDENT:
                {
                alt258=2;
                }
                break;
            case QUESTION:
                {
                alt258=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);
                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10651);
                    number731=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number731.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10657);
                    substitution732=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution732.getTree());
                    }
                    break;
            }
            LAST733=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST733);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY736=null;
        EsperEPL2GrammarParser.number_return number734 = null;
        EsperEPL2GrammarParser.substitution_return substitution735 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY736_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt259=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt259=1;
                }
                break;
            case IDENT:
                {
                alt259=2;
                }
                break;
            case QUESTION:
                {
                alt259=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);
                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10708);
                    number734=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number734.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10714);
                    substitution735=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution735.getTree());
                    }
                    break;
            }
            WEEKDAY736=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY736);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK737=null;
        Token COMMA739=null;
        Token RBRACK741=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter738 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter740 = null;
        CommonTree LBRACK737_tree=null;
        CommonTree COMMA739_tree=null;
        CommonTree RBRACK741_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK737=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK737);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10766);
            numericListParameter738=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter738.getTree());
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);
                if ( (LA260_0==COMMA) ) {
                    alt260=1;
                }
                switch (alt260) {
            	case 1 :
            	    {
            	    COMMA739=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10769); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA739);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10771);
            	    numericListParameter740=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter740.getTree());
            	    }
            	    break;
            	default :
            	    break loop260;
                }
            } while (true);
            RBRACK741=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK741);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand742 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand743 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant744 = null;
        try {
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA261_1 = input.LA(2);
                if ( (LA261_1==COMMA||LA261_1==RBRACK) ) {
                    alt261=3;
                }
                else if ( (LA261_1==COLON) ) {
                    alt261=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA261_2 = input.LA(2);
                if ( (LA261_2==COLON) ) {
                    alt261=1;
                }
                else if ( (LA261_2==COMMA||LA261_2==RBRACK) ) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA261_3 = input.LA(2);
                if ( (LA261_3==COLON) ) {
                    alt261=1;
                }
                else if ( (LA261_3==COMMA||LA261_3==RBRACK) ) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA261_4 = input.LA(2);
                if ( (LA261_4==COLON) ) {
                    alt261=1;
                }
                else if ( (LA261_4==COMMA||LA261_4==RBRACK) ) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt261=1;
                }
                break;
            case STAR:
                {
                alt261=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10797);
                    rangeOperand742=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand742.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10803);
                    frequencyOperand743=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand743.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10808);
                    numberconstant744=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant744.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT746=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic745 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic747 = null;
        CommonTree DOT746_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10824);
            eventPropertyAtomic745=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic745.getTree());
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);
                if ( (LA262_0==DOT) ) {
                    alt262=1;
                }
                switch (alt262) {
            	case 1 :
            	    {
            	    DOT746=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10827); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT746);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10829);
            	    eventPropertyAtomic747=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic747.getTree());
            	    }
            	    break;
            	default :
            	    break loop262;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK749=null;
        Token RPAREN750=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent748 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK749_tree=null;
        CommonTree RPAREN750_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10855);
            eventPropertyIdent748=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent748.getTree());
            int alt266=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt266=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt266=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt266=3;
                    }
                    break;
            }
            switch (alt266) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK749=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK749);
                    int alt263=2;
                    int LA263_0 = input.LA(1);
                    if ( (LA263_0==QUESTION) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10875); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt264=2;
                    int LA264_0 = input.LA(1);
                    if ( (LA264_0==STRING_LITERAL) ) {
                        alt264=1;
                    }
                    else if ( (LA264_0==QUOTED_STRING_LITERAL) ) {
                        alt264=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 264, 0, input);
                        throw nvae;
                    }
                    switch (alt264) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10894); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10900); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN750=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN750);
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==QUESTION) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10908); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR751=null;
        Token DOT752=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR751_tree=null;
        CommonTree DOT752_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11045);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);
                if ( (LA268_0==ESCAPECHAR) ) {
                    alt268=1;
                }
                switch (alt268) {
            	case 1 :
            	    {
            	    ESCAPECHAR751=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11057); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR751);
            	    DOT752=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11059); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT752);
            	    int alt267=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt267=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA267_5 = input.LA(2);
            	            if ( (LA267_5==EOF||(LA267_5>=IN_SET && LA267_5<=NOT_EXPR)||(LA267_5>=WHERE && LA267_5<=AS)||(LA267_5>=ELSE && LA267_5<=FROM)||(LA267_5>=INNER && LA267_5<=FULL)||LA267_5==IS||(LA267_5>=GROUP && LA267_5<=HAVING)||LA267_5==ALL||LA267_5==OUTPUT||LA267_5==INSERT||(LA267_5>=ORDER && LA267_5<=DESC)||LA267_5==PATTERN||(LA267_5>=TIMEPERIOD_SEC && LA267_5<=TIMEPERIOD_SECONDS)||LA267_5==ROW_LIMIT_EXPR||(LA267_5>=MATCH_RECOGNIZE && LA267_5<=MEASURES)||(LA267_5>=AFTER && LA267_5<=FOR)||LA267_5==COMMA||(LA267_5>=LPAREN && LA267_5<=COLON)||(LA267_5>=BAND && LA267_5<=MOD)||LA267_5==RCURLY||LA267_5==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA267_25 = input.LA(2);
            	            if ( (LA267_25==LPAREN) ) {
            	                int LA267_173 = input.LA(3);
            	                if ( ((LA267_173>=STRING_LITERAL && LA267_173<=QUOTED_STRING_LITERAL)) ) {
            	                    alt267=1;
            	                }
            	            }
            	            else if ( (LA267_25==EOF||(LA267_25>=IN_SET && LA267_25<=NOT_EXPR)||(LA267_25>=WHERE && LA267_25<=AS)||(LA267_25>=ELSE && LA267_25<=FROM)||(LA267_25>=INNER && LA267_25<=FULL)||LA267_25==IS||(LA267_25>=GROUP && LA267_25<=HAVING)||LA267_25==ALL||LA267_25==OUTPUT||LA267_25==INSERT||(LA267_25>=ORDER && LA267_25<=DESC)||LA267_25==PATTERN||(LA267_25>=TIMEPERIOD_SEC && LA267_25<=TIMEPERIOD_SECONDS)||LA267_25==ROW_LIMIT_EXPR||(LA267_25>=MATCH_RECOGNIZE && LA267_25<=MEASURES)||(LA267_25>=AFTER && LA267_25<=FOR)||LA267_25==COMMA||(LA267_25>=RPAREN && LA267_25<=COLON)||(LA267_25>=BAND && LA267_25<=MOD)||LA267_25==RCURLY||LA267_25==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA267_39 = input.LA(2);
            	            if ( (LA267_39==EOF||(LA267_39>=IN_SET && LA267_39<=NOT_EXPR)||(LA267_39>=WHERE && LA267_39<=AS)||(LA267_39>=ELSE && LA267_39<=FROM)||(LA267_39>=INNER && LA267_39<=FULL)||LA267_39==IS||(LA267_39>=GROUP && LA267_39<=HAVING)||LA267_39==ALL||LA267_39==OUTPUT||LA267_39==INSERT||(LA267_39>=ORDER && LA267_39<=DESC)||LA267_39==PATTERN||(LA267_39>=TIMEPERIOD_SEC && LA267_39<=TIMEPERIOD_SECONDS)||LA267_39==ROW_LIMIT_EXPR||(LA267_39>=MATCH_RECOGNIZE && LA267_39<=MEASURES)||(LA267_39>=AFTER && LA267_39<=FOR)||LA267_39==COMMA||(LA267_39>=LPAREN && LA267_39<=COLON)||(LA267_39>=BAND && LA267_39<=MOD)||LA267_39==RCURLY||LA267_39==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA267_40 = input.LA(2);
            	            if ( (LA267_40==EOF||(LA267_40>=IN_SET && LA267_40<=NOT_EXPR)||(LA267_40>=WHERE && LA267_40<=AS)||(LA267_40>=ELSE && LA267_40<=FROM)||(LA267_40>=INNER && LA267_40<=FULL)||LA267_40==IS||(LA267_40>=GROUP && LA267_40<=HAVING)||LA267_40==ALL||LA267_40==OUTPUT||LA267_40==INSERT||(LA267_40>=ORDER && LA267_40<=DESC)||LA267_40==PATTERN||(LA267_40>=TIMEPERIOD_SEC && LA267_40<=TIMEPERIOD_SECONDS)||LA267_40==ROW_LIMIT_EXPR||(LA267_40>=MATCH_RECOGNIZE && LA267_40<=MEASURES)||(LA267_40>=AFTER && LA267_40<=FOR)||LA267_40==COMMA||(LA267_40>=LPAREN && LA267_40<=COLON)||(LA267_40>=BAND && LA267_40<=MOD)||LA267_40==RCURLY||LA267_40==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA267_42 = input.LA(2);
            	            if ( (LA267_42==EOF||(LA267_42>=IN_SET && LA267_42<=NOT_EXPR)||(LA267_42>=WHERE && LA267_42<=AS)||(LA267_42>=ELSE && LA267_42<=FROM)||(LA267_42>=INNER && LA267_42<=FULL)||LA267_42==IS||(LA267_42>=GROUP && LA267_42<=HAVING)||LA267_42==ALL||LA267_42==OUTPUT||LA267_42==INSERT||(LA267_42>=ORDER && LA267_42<=DESC)||LA267_42==PATTERN||(LA267_42>=TIMEPERIOD_SEC && LA267_42<=TIMEPERIOD_SECONDS)||LA267_42==ROW_LIMIT_EXPR||(LA267_42>=MATCH_RECOGNIZE && LA267_42<=MEASURES)||(LA267_42>=AFTER && LA267_42<=FOR)||LA267_42==COMMA||(LA267_42>=LPAREN && LA267_42<=COLON)||(LA267_42>=BAND && LA267_42<=MOD)||LA267_42==RCURLY||LA267_42==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA267_43 = input.LA(2);
            	            if ( (LA267_43==EOF||(LA267_43>=IN_SET && LA267_43<=NOT_EXPR)||(LA267_43>=WHERE && LA267_43<=AS)||(LA267_43>=ELSE && LA267_43<=FROM)||(LA267_43>=INNER && LA267_43<=FULL)||LA267_43==IS||(LA267_43>=GROUP && LA267_43<=HAVING)||LA267_43==ALL||LA267_43==OUTPUT||LA267_43==INSERT||(LA267_43>=ORDER && LA267_43<=DESC)||(LA267_43>=TIMEPERIOD_SEC && LA267_43<=TIMEPERIOD_SECONDS)||LA267_43==ROW_LIMIT_EXPR||(LA267_43>=MATCH_RECOGNIZE && LA267_43<=MEASURES)||(LA267_43>=AFTER && LA267_43<=FOR)||LA267_43==COMMA||(LA267_43>=LPAREN && LA267_43<=COLON)||(LA267_43>=BAND && LA267_43<=MOD)||LA267_43==RCURLY||LA267_43==ESCAPECHAR) ) {
            	                alt267=1;
            	            }
            	            else if ( (LA267_43==PATTERN) ) {
            	                int LA267_483 = input.LA(3);
            	                if ( (LA267_483==LPAREN) ) {
            	                    alt267=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11063);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop268;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT753=null;
        Token COUNT754=null;
        Token ESCAPE755=null;
        Token EVERY_EXPR756=null;
        Token SUM757=null;
        Token AVG758=null;
        Token MAX759=null;
        Token MIN760=null;
        Token COALESCE761=null;
        Token MEDIAN762=null;
        Token STDDEV763=null;
        Token AVEDEV764=null;
        Token EVENTS765=null;
        Token FIRST766=null;
        Token LAST767=null;
        Token WHILE768=null;
        Token MERGE769=null;
        Token MATCHED770=null;
        Token UNIDIRECTIONAL771=null;
        Token RETAINUNION772=null;
        Token RETAININTERSECTION773=null;
        Token UNTIL774=null;
        Token PATTERN775=null;
        Token SQL776=null;
        Token METADATASQL777=null;
        Token PREVIOUS778=null;
        Token PREVIOUSTAIL779=null;
        Token PRIOR780=null;
        Token WEEKDAY781=null;
        Token LW782=null;
        Token INSTANCEOF783=null;
        Token CAST784=null;
        Token SNAPSHOT785=null;
        Token VARIABLE786=null;
        Token INDEX787=null;
        Token WINDOW788=null;
        Token LEFT789=null;
        Token RIGHT790=null;
        Token OUTER791=null;
        Token FULL792=null;
        Token JOIN793=null;
        Token DEFINE794=null;
        Token PARTITION795=null;
        Token MATCHES796=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT753_tree=null;
        CommonTree COUNT754_tree=null;
        CommonTree ESCAPE755_tree=null;
        CommonTree EVERY_EXPR756_tree=null;
        CommonTree SUM757_tree=null;
        CommonTree AVG758_tree=null;
        CommonTree MAX759_tree=null;
        CommonTree MIN760_tree=null;
        CommonTree COALESCE761_tree=null;
        CommonTree MEDIAN762_tree=null;
        CommonTree STDDEV763_tree=null;
        CommonTree AVEDEV764_tree=null;
        CommonTree EVENTS765_tree=null;
        CommonTree FIRST766_tree=null;
        CommonTree LAST767_tree=null;
        CommonTree WHILE768_tree=null;
        CommonTree MERGE769_tree=null;
        CommonTree MATCHED770_tree=null;
        CommonTree UNIDIRECTIONAL771_tree=null;
        CommonTree RETAINUNION772_tree=null;
        CommonTree RETAININTERSECTION773_tree=null;
        CommonTree UNTIL774_tree=null;
        CommonTree PATTERN775_tree=null;
        CommonTree SQL776_tree=null;
        CommonTree METADATASQL777_tree=null;
        CommonTree PREVIOUS778_tree=null;
        CommonTree PREVIOUSTAIL779_tree=null;
        CommonTree PRIOR780_tree=null;
        CommonTree WEEKDAY781_tree=null;
        CommonTree LW782_tree=null;
        CommonTree INSTANCEOF783_tree=null;
        CommonTree CAST784_tree=null;
        CommonTree SNAPSHOT785_tree=null;
        CommonTree VARIABLE786_tree=null;
        CommonTree INDEX787_tree=null;
        CommonTree WINDOW788_tree=null;
        CommonTree LEFT789_tree=null;
        CommonTree RIGHT790_tree=null;
        CommonTree OUTER791_tree=null;
        CommonTree FULL792_tree=null;
        CommonTree JOIN793_tree=null;
        CommonTree DEFINE794_tree=null;
        CommonTree PARTITION795_tree=null;
        CommonTree MATCHES796_tree=null;
        try {
            int alt269=46;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt269=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt269=2;
                }
                break;
            case AT:
                {
                alt269=3;
                }
                break;
            case COUNT:
                {
                alt269=4;
                }
                break;
            case ESCAPE:
                {
                alt269=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt269=6;
                }
                break;
            case SUM:
                {
                alt269=7;
                }
                break;
            case AVG:
                {
                alt269=8;
                }
                break;
            case MAX:
                {
                alt269=9;
                }
                break;
            case MIN:
                {
                alt269=10;
                }
                break;
            case COALESCE:
                {
                alt269=11;
                }
                break;
            case MEDIAN:
                {
                alt269=12;
                }
                break;
            case STDDEV:
                {
                alt269=13;
                }
                break;
            case AVEDEV:
                {
                alt269=14;
                }
                break;
            case EVENTS:
                {
                alt269=15;
                }
                break;
            case FIRST:
                {
                alt269=16;
                }
                break;
            case LAST:
                {
                alt269=17;
                }
                break;
            case WHILE:
                {
                alt269=18;
                }
                break;
            case MERGE:
                {
                alt269=19;
                }
                break;
            case MATCHED:
                {
                alt269=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt269=21;
                }
                break;
            case RETAINUNION:
                {
                alt269=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt269=23;
                }
                break;
            case UNTIL:
                {
                alt269=24;
                }
                break;
            case PATTERN:
                {
                alt269=25;
                }
                break;
            case SQL:
                {
                alt269=26;
                }
                break;
            case METADATASQL:
                {
                alt269=27;
                }
                break;
            case PREVIOUS:
                {
                alt269=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt269=29;
                }
                break;
            case PRIOR:
                {
                alt269=30;
                }
                break;
            case WEEKDAY:
                {
                alt269=31;
                }
                break;
            case LW:
                {
                alt269=32;
                }
                break;
            case INSTANCEOF:
                {
                alt269=33;
                }
                break;
            case CAST:
                {
                alt269=34;
                }
                break;
            case SNAPSHOT:
                {
                alt269=35;
                }
                break;
            case VARIABLE:
                {
                alt269=36;
                }
                break;
            case INDEX:
                {
                alt269=37;
                }
                break;
            case WINDOW:
                {
                alt269=38;
                }
                break;
            case LEFT:
                {
                alt269=39;
                }
                break;
            case RIGHT:
                {
                alt269=40;
                }
                break;
            case OUTER:
                {
                alt269=41;
                }
                break;
            case FULL:
                {
                alt269=42;
                }
                break;
            case JOIN:
                {
                alt269=43;
                }
                break;
            case DEFINE:
                {
                alt269=44;
                }
                break;
            case PARTITION:
                {
                alt269=45;
                }
                break;
            case MATCHES:
                {
                alt269=46;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);
                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT753=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT753_tree = (CommonTree)adaptor.create(AT753);
                    adaptor.addChild(root_0, AT753_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT754=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT754_tree = (CommonTree)adaptor.create(COUNT754);
                    adaptor.addChild(root_0, COUNT754_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE755=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE755_tree = (CommonTree)adaptor.create(ESCAPE755);
                    adaptor.addChild(root_0, ESCAPE755_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR756=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR756_tree = (CommonTree)adaptor.create(EVERY_EXPR756);
                    adaptor.addChild(root_0, EVERY_EXPR756_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM757=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM757_tree = (CommonTree)adaptor.create(SUM757);
                    adaptor.addChild(root_0, SUM757_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG758=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG758_tree = (CommonTree)adaptor.create(AVG758);
                    adaptor.addChild(root_0, AVG758_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX759=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX759_tree = (CommonTree)adaptor.create(MAX759);
                    adaptor.addChild(root_0, MAX759_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN760=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN760_tree = (CommonTree)adaptor.create(MIN760);
                    adaptor.addChild(root_0, MIN760_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE761=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE761_tree = (CommonTree)adaptor.create(COALESCE761);
                    adaptor.addChild(root_0, COALESCE761_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN762=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN762_tree = (CommonTree)adaptor.create(MEDIAN762);
                    adaptor.addChild(root_0, MEDIAN762_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV763=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV763_tree = (CommonTree)adaptor.create(STDDEV763);
                    adaptor.addChild(root_0, STDDEV763_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV764=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV764_tree = (CommonTree)adaptor.create(AVEDEV764);
                    adaptor.addChild(root_0, AVEDEV764_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS765=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS765_tree = (CommonTree)adaptor.create(EVENTS765);
                    adaptor.addChild(root_0, EVENTS765_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST766=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST766_tree = (CommonTree)adaptor.create(FIRST766);
                    adaptor.addChild(root_0, FIRST766_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST767=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST767_tree = (CommonTree)adaptor.create(LAST767);
                    adaptor.addChild(root_0, LAST767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE768=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE768_tree = (CommonTree)adaptor.create(WHILE768);
                    adaptor.addChild(root_0, WHILE768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE769=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE769_tree = (CommonTree)adaptor.create(MERGE769);
                    adaptor.addChild(root_0, MERGE769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED770=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED770_tree = (CommonTree)adaptor.create(MATCHED770);
                    adaptor.addChild(root_0, MATCHED770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL771=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL771_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL771);
                    adaptor.addChild(root_0, UNIDIRECTIONAL771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION772=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION772_tree = (CommonTree)adaptor.create(RETAINUNION772);
                    adaptor.addChild(root_0, RETAINUNION772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION773=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION773_tree = (CommonTree)adaptor.create(RETAININTERSECTION773);
                    adaptor.addChild(root_0, RETAININTERSECTION773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL774=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL774_tree = (CommonTree)adaptor.create(UNTIL774);
                    adaptor.addChild(root_0, UNTIL774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN775=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN775_tree = (CommonTree)adaptor.create(PATTERN775);
                    adaptor.addChild(root_0, PATTERN775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL776=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL776_tree = (CommonTree)adaptor.create(SQL776);
                    adaptor.addChild(root_0, SQL776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL777=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL777_tree = (CommonTree)adaptor.create(METADATASQL777);
                    adaptor.addChild(root_0, METADATASQL777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS778=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS778_tree = (CommonTree)adaptor.create(PREVIOUS778);
                    adaptor.addChild(root_0, PREVIOUS778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL779=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL779_tree = (CommonTree)adaptor.create(PREVIOUSTAIL779);
                    adaptor.addChild(root_0, PREVIOUSTAIL779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR780=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR780_tree = (CommonTree)adaptor.create(PRIOR780);
                    adaptor.addChild(root_0, PRIOR780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY781=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY781_tree = (CommonTree)adaptor.create(WEEKDAY781);
                    adaptor.addChild(root_0, WEEKDAY781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW782=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW782_tree = (CommonTree)adaptor.create(LW782);
                    adaptor.addChild(root_0, LW782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF783=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF783_tree = (CommonTree)adaptor.create(INSTANCEOF783);
                    adaptor.addChild(root_0, INSTANCEOF783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST784=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST784_tree = (CommonTree)adaptor.create(CAST784);
                    adaptor.addChild(root_0, CAST784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT785=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT785_tree = (CommonTree)adaptor.create(SNAPSHOT785);
                    adaptor.addChild(root_0, SNAPSHOT785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE786=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE786_tree = (CommonTree)adaptor.create(VARIABLE786);
                    adaptor.addChild(root_0, VARIABLE786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX787=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX787_tree = (CommonTree)adaptor.create(INDEX787);
                    adaptor.addChild(root_0, INDEX787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW788=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW788_tree = (CommonTree)adaptor.create(WINDOW788);
                    adaptor.addChild(root_0, WINDOW788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT789=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT789_tree = (CommonTree)adaptor.create(LEFT789);
                    adaptor.addChild(root_0, LEFT789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT790=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT790_tree = (CommonTree)adaptor.create(RIGHT790);
                    adaptor.addChild(root_0, RIGHT790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER791=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER791_tree = (CommonTree)adaptor.create(OUTER791);
                    adaptor.addChild(root_0, OUTER791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL792=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL792_tree = (CommonTree)adaptor.create(FULL792);
                    adaptor.addChild(root_0, FULL792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN793=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN793_tree = (CommonTree)adaptor.create(JOIN793);
                    adaptor.addChild(root_0, JOIN793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE794=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE794_tree = (CommonTree)adaptor.create(DEFINE794);
                    adaptor.addChild(root_0, DEFINE794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION795=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION795_tree = (CommonTree)adaptor.create(PARTITION795);
                    adaptor.addChild(root_0, PARTITION795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES796=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES796_tree = (CommonTree)adaptor.create(MATCHES796);
                    adaptor.addChild(root_0, MATCHES796_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt270=2;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==IDENT) ) {
                alt270=1;
            }
            else if ( (LA270_0==TICKED_STRING_LITERAL) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);
                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11457); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT797=null;
        CommonTree t_tree=null;
        CommonTree IDENT797_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt271=2;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==IDENT) ) {
                alt271=1;
            }
            else if ( (LA271_0==TICKED_STRING_LITERAL) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);
                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT797=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11471); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT797_tree = (CommonTree)adaptor.create(IDENT797);
                    adaptor.addChild(root_0, IDENT797_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart798 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart799 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart800 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart801 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart802 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart803 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart804 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart805 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart806 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart807 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart808 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart809 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart810 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart811 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart812 = null;
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            {
            int alt282=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt282=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt282=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt282=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt282=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt282=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);
                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11504);
                    dayPart798=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart798.getTree());
                    int alt272=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA272_1 = input.LA(2);
                            if ( ((LA272_1>=TIMEPERIOD_HOUR && LA272_1<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA272_2 = input.LA(2);
                            if ( ((LA272_2>=TIMEPERIOD_HOUR && LA272_2<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA272_3 = input.LA(2);
                            if ( ((LA272_3>=TIMEPERIOD_HOUR && LA272_3<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA272_4 = input.LA(2);
                            if ( ((LA272_4>=TIMEPERIOD_HOUR && LA272_4<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA272_5 = input.LA(2);
                            if ( ((LA272_5>=TIMEPERIOD_HOUR && LA272_5<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA272_6 = input.LA(2);
                            if ( ((LA272_6>=TIMEPERIOD_HOUR && LA272_6<=TIMEPERIOD_HOURS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11506);
                            hourPart799=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart799.getTree());
                            }
                            break;
                    }
                    int alt273=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA273_1 = input.LA(2);
                            if ( (LA273_1==MIN||(LA273_1>=TIMEPERIOD_MINUTE && LA273_1<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA273_2 = input.LA(2);
                            if ( (LA273_2==MIN||(LA273_2>=TIMEPERIOD_MINUTE && LA273_2<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA273_3 = input.LA(2);
                            if ( (LA273_3==MIN||(LA273_3>=TIMEPERIOD_MINUTE && LA273_3<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA273_4 = input.LA(2);
                            if ( (LA273_4==MIN||(LA273_4>=TIMEPERIOD_MINUTE && LA273_4<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA273_5 = input.LA(2);
                            if ( (LA273_5==MIN||(LA273_5>=TIMEPERIOD_MINUTE && LA273_5<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA273_6 = input.LA(2);
                            if ( (LA273_6==MIN||(LA273_6>=TIMEPERIOD_MINUTE && LA273_6<=TIMEPERIOD_MINUTES)) ) {
                                alt273=1;
                            }
                            }
                            break;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11509);
                            minutePart800=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart800.getTree());
                            }
                            break;
                    }
                    int alt274=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA274_1 = input.LA(2);
                            if ( ((LA274_1>=TIMEPERIOD_SEC && LA274_1<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA274_2 = input.LA(2);
                            if ( ((LA274_2>=TIMEPERIOD_SEC && LA274_2<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA274_3 = input.LA(2);
                            if ( ((LA274_3>=TIMEPERIOD_SEC && LA274_3<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA274_4 = input.LA(2);
                            if ( ((LA274_4>=TIMEPERIOD_SEC && LA274_4<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA274_5 = input.LA(2);
                            if ( ((LA274_5>=TIMEPERIOD_SEC && LA274_5<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA274_6 = input.LA(2);
                            if ( ((LA274_6>=TIMEPERIOD_SEC && LA274_6<=TIMEPERIOD_SECONDS)) ) {
                                alt274=1;
                            }
                            }
                            break;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11512);
                            secondPart801=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart801.getTree());
                            }
                            break;
                    }
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==NUM_DOUBLE||LA275_0==IDENT||LA275_0==QUESTION||LA275_0==NUM_INT||(LA275_0>=NUM_LONG && LA275_0<=NUM_FLOAT)) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11515);
                            millisecondPart802=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart802.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11521);
                    hourPart803=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart803.getTree());
                    int alt276=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA276_1 = input.LA(2);
                            if ( (LA276_1==MIN||(LA276_1>=TIMEPERIOD_MINUTE && LA276_1<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA276_2 = input.LA(2);
                            if ( (LA276_2==MIN||(LA276_2>=TIMEPERIOD_MINUTE && LA276_2<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA276_3 = input.LA(2);
                            if ( (LA276_3==MIN||(LA276_3>=TIMEPERIOD_MINUTE && LA276_3<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA276_4 = input.LA(2);
                            if ( (LA276_4==MIN||(LA276_4>=TIMEPERIOD_MINUTE && LA276_4<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA276_5 = input.LA(2);
                            if ( (LA276_5==MIN||(LA276_5>=TIMEPERIOD_MINUTE && LA276_5<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA276_6 = input.LA(2);
                            if ( (LA276_6==MIN||(LA276_6>=TIMEPERIOD_MINUTE && LA276_6<=TIMEPERIOD_MINUTES)) ) {
                                alt276=1;
                            }
                            }
                            break;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11523);
                            minutePart804=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart804.getTree());
                            }
                            break;
                    }
                    int alt277=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA277_1 = input.LA(2);
                            if ( ((LA277_1>=TIMEPERIOD_SEC && LA277_1<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA277_2 = input.LA(2);
                            if ( ((LA277_2>=TIMEPERIOD_SEC && LA277_2<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA277_3 = input.LA(2);
                            if ( ((LA277_3>=TIMEPERIOD_SEC && LA277_3<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA277_4 = input.LA(2);
                            if ( ((LA277_4>=TIMEPERIOD_SEC && LA277_4<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA277_5 = input.LA(2);
                            if ( ((LA277_5>=TIMEPERIOD_SEC && LA277_5<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA277_6 = input.LA(2);
                            if ( ((LA277_6>=TIMEPERIOD_SEC && LA277_6<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11526);
                            secondPart805=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart805.getTree());
                            }
                            break;
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==NUM_DOUBLE||LA278_0==IDENT||LA278_0==QUESTION||LA278_0==NUM_INT||(LA278_0>=NUM_LONG && LA278_0<=NUM_FLOAT)) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11529);
                            millisecondPart806=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart806.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11535);
                    minutePart807=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart807.getTree());
                    int alt279=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA279_1 = input.LA(2);
                            if ( ((LA279_1>=TIMEPERIOD_SEC && LA279_1<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA279_2 = input.LA(2);
                            if ( ((LA279_2>=TIMEPERIOD_SEC && LA279_2<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA279_3 = input.LA(2);
                            if ( ((LA279_3>=TIMEPERIOD_SEC && LA279_3<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA279_4 = input.LA(2);
                            if ( ((LA279_4>=TIMEPERIOD_SEC && LA279_4<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA279_5 = input.LA(2);
                            if ( ((LA279_5>=TIMEPERIOD_SEC && LA279_5<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA279_6 = input.LA(2);
                            if ( ((LA279_6>=TIMEPERIOD_SEC && LA279_6<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11537);
                            secondPart808=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart808.getTree());
                            }
                            break;
                    }
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==NUM_DOUBLE||LA280_0==IDENT||LA280_0==QUESTION||LA280_0==NUM_INT||(LA280_0>=NUM_LONG && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11540);
                            millisecondPart809=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart809.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11546);
                    secondPart810=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart810.getTree());
                    int alt281=2;
                    int LA281_0 = input.LA(1);
                    if ( (LA281_0==NUM_DOUBLE||LA281_0==IDENT||LA281_0==QUESTION||LA281_0==NUM_INT||(LA281_0>=NUM_LONG && LA281_0<=NUM_FLOAT)) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11548);
                            millisecondPart811=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart811.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11554);
                    millisecondPart812=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart812.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS815=null;
        Token TIMEPERIOD_DAY816=null;
        EsperEPL2GrammarParser.number_return number813 = null;
        EsperEPL2GrammarParser.substitution_return substitution814 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS815_tree=null;
        CommonTree TIMEPERIOD_DAY816_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt283=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt283=1;
                }
                break;
            case IDENT:
                {
                alt283=2;
                }
                break;
            case QUESTION:
                {
                alt283=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart11592);
                    number813=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number813.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11598);
                    substitution814=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution814.getTree());
                    }
                    break;
            }
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==TIMEPERIOD_DAYS) ) {
                alt284=1;
            }
            else if ( (LA284_0==TIMEPERIOD_DAY) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS815=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS815);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY816=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY816);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS819=null;
        Token TIMEPERIOD_HOUR820=null;
        EsperEPL2GrammarParser.number_return number817 = null;
        EsperEPL2GrammarParser.substitution_return substitution818 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS819_tree=null;
        CommonTree TIMEPERIOD_HOUR820_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt285=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt285=1;
                }
                break;
            case IDENT:
                {
                alt285=2;
                }
                break;
            case QUESTION:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);
                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart11655);
                    number817=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number817.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11661);
                    substitution818=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution818.getTree());
                    }
                    break;
            }
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==TIMEPERIOD_HOURS) ) {
                alt286=1;
            }
            else if ( (LA286_0==TIMEPERIOD_HOUR) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);
                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS819=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS819);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR820=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR820);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES823=null;
        Token TIMEPERIOD_MINUTE824=null;
        Token MIN825=null;
        EsperEPL2GrammarParser.number_return number821 = null;
        EsperEPL2GrammarParser.substitution_return substitution822 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES823_tree=null;
        CommonTree TIMEPERIOD_MINUTE824_tree=null;
        CommonTree MIN825_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt287=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt287=1;
                }
                break;
            case IDENT:
                {
                alt287=2;
                }
                break;
            case QUESTION:
                {
                alt287=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart11718);
                    number821=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number821.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11724);
                    substitution822=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution822.getTree());
                    }
                    break;
            }
            int alt288=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt288=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt288=2;
                }
                break;
            case MIN:
                {
                alt288=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);
                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES823=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES823);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE824=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE824);
                    }
                    break;
                case 3 :
                    {
                    MIN825=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN825);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS828=null;
        Token TIMEPERIOD_SECOND829=null;
        Token TIMEPERIOD_SEC830=null;
        EsperEPL2GrammarParser.number_return number826 = null;
        EsperEPL2GrammarParser.substitution_return substitution827 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS828_tree=null;
        CommonTree TIMEPERIOD_SECOND829_tree=null;
        CommonTree TIMEPERIOD_SEC830_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt289=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                alt289=2;
                }
                break;
            case QUESTION:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart11786);
                    number826=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number826.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11792);
                    substitution827=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution827.getTree());
                    }
                    break;
            }
            int alt290=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt290=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt290=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS828=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS828);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND829=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND829);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC830=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC830);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS833=null;
        Token TIMEPERIOD_MILLISECOND834=null;
        Token TIMEPERIOD_MILLISEC835=null;
        EsperEPL2GrammarParser.number_return number831 = null;
        EsperEPL2GrammarParser.substitution_return substitution832 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS833_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND834_tree=null;
        CommonTree TIMEPERIOD_MILLISEC835_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt291=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt291=1;
                }
                break;
            case IDENT:
                {
                alt291=2;
                }
                break;
            case QUESTION:
                {
                alt291=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11854);
                    number831=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number831.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11860);
                    substitution832=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution832.getTree());
                    }
                    break;
            }
            int alt292=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt292=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt292=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt292=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);
                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS833=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS833);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND834=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND834);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC835=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC835);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt293=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt293=1;
                }
                break;
            case NUM_LONG:
                {
                alt293=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt293=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt293=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);
                throw nvae;
            }
            switch (alt293) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant836 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant837 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt294=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt294=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt294=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt294=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt294=4;
                }
                break;
            case VALUE_NULL:
                {
                alt294=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12018);
                    numberconstant836=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant836.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12025);
                    stringconstant837=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant837.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number838 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt295=3;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==MINUS) ) {
                alt295=1;
            }
            else if ( (LA295_0==PLUS) ) {
                alt295=2;
            }
            switch (alt295) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12110);
            number838=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number838.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number838!=null?((CommonTree)number838.tree):null).getType(), "-" + (number838!=null?input.toString(number838.start,number838.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==STRING_LITERAL) ) {
                alt296=1;
            }
            else if ( (LA296_0==QUOTED_STRING_LITERAL) ) {
                alt296=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 296, 0, input);
                throw nvae;
            }
            switch (alt296) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4423);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5796);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7660);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8484);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8552);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9801);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10224);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10235);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10246);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10257);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10268);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10280);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10291);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10302);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10315);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA178 dfa178 = new DFA178(this);
    static final String DFA178_eotS =
        "\u0ad6\uffff";
    static final String DFA178_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\2\16\3\uffff\1\16\u0aa2\uffff";
    static final String DFA178_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\2\6\3\uffff\1\6\12\uffff\1\u0112\167\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\u011d\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72"+
        "\uffff\1\5\2\6\114\uffff\2\6\102\uffff\2\6\71\uffff\2\6\111\uffff"+
        "\2\6\102\uffff\2\6\71\uffff\2\6\113\uffff\2\6\70\uffff\2\6\101\uffff"+
        "\2\6\100\uffff\2\6\103\uffff\2\6\107\uffff\2\6\71\uffff\2\6\u0083"+
        "\uffff\1\0\30\uffff\1\0\5\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30"+
        "\uffff\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\157\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA178_maxS =
        "\2\u0132\13\uffff\1\u0132\3\uffff\1\u012f\2\uffff\2\u012f\2\uffff"+
        "\4\u012f\1\uffff\2\u012f\12\uffff\3\u012f\2\uffff\2\u012f\3\uffff"+
        "\1\u012f\12\uffff\1\u0112\167\uffff\1\u0132\72\uffff\1\u0132\72"+
        "\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u012d\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u0130\2\u012a\114\uffff\2\u012a\102"+
        "\uffff\2\u012a\71\uffff\2\u012a\111\uffff\2\u012a\102\uffff\2\u012a"+
        "\71\uffff\2\u012a\113\uffff\2\u012a\70\uffff\2\u012a\101\uffff\2"+
        "\u012a\100\uffff\2\u012a\103\uffff\2\u012a\107\uffff\2\u012a\71"+
        "\uffff\2\u012a\u0083\uffff\1\0\30\uffff\1\0\5\uffff\1\0\53\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\157\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA178_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\55\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\1\61\uffff\1\10\1\4\u03b9\uffff\114\6\2\uffff\102\6\2\uffff"+
        "\71\6\2\uffff\111\6\2\uffff\102\6\2\uffff\71\6\2\uffff\113\6\2\uffff"+
        "\70\6\2\uffff\101\6\2\uffff\100\6\2\uffff\101\6\4\uffff\107\6\2"+
        "\uffff\71\6\2\uffff\101\6\1\11\101\6\1\uffff\30\6\1\uffff\5\6\1"+
        "\uffff\53\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36\6\1\uffff\31\6"+
        "\1\uffff\23\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\36"+
        "\6\1\uffff\31\6\2\uffff\32\6\1\uffff\32\6\1\uffff\30\6\1\uffff\30"+
        "\6";
    static final String DFA178_specialS =
        "\1\0\u00b5\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\72\uffff\1\20\1\21\1\22\114\uffff\1\23\1\24"+
        "\102\uffff\1\25\1\26\71\uffff\1\27\1\30\111\uffff\1\31\1\32\102"+
        "\uffff\1\33\1\34\71\uffff\1\35\1\36\113\uffff\1\37\1\40\70\uffff"+
        "\1\41\1\42\101\uffff\1\43\1\44\100\uffff\1\45\1\46\103\uffff\1\47"+
        "\1\50\107\uffff\1\51\1\52\71\uffff\1\53\1\54\u0083\uffff\1\55\30"+
        "\uffff\1\56\5\uffff\1\57\53\uffff\1\60\30\uffff\1\61\30\uffff\1"+
        "\62\114\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff\1\66\30"+
        "\uffff\1\67\30\uffff\1\70\31\uffff\1\71\31\uffff\1\72\31\uffff\1"+
        "\73\31\uffff\1\74\31\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff"+
        "\1\100\157\uffff\1\101\30\uffff\1\102\30\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\63\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\74\1\75\1\53\1\76\2\16"+
            "\1\56\1\57\1\77\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff"+
            "\3\16\2\uffff\1\16\1\uffff\2\16\u008e\uffff\1\2\16\uffff\1\16"+
            "\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\100"+
            "\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\101\4\uffff\1\101\3\uffff\1\101\3\uffff\11\101\10\uffff"+
            "\1\101\1\uffff\4\101\12\uffff\3\101\11\uffff\10\101\2\uffff"+
            "\1\101\1\uffff\4\101\2\uffff\1\101\1\uffff\4\101\24\uffff\3"+
            "\101\2\uffff\1\101\1\uffff\2\101\u008e\uffff\1\2\16\uffff\1"+
            "\101\33\uffff\1\2\2\uffff\1\101\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\164\4\uffff\1\164\2\uffff\2\164\3\uffff\11\164\1\163\1"+
            "\164\6\uffff\1\164\1\uffff\4\164\12\uffff\3\164\11\uffff\21"+
            "\164\1\uffff\1\164\1\uffff\4\164\14\uffff\3\164\5\uffff\3\164"+
            "\2\uffff\1\164\1\uffff\2\164\u008e\uffff\1\164\16\uffff\2\164"+
            "\7\uffff\2\164\1\uffff\2\164\11\uffff\1\164\2\uffff\1\164\1"+
            "\uffff\1\164\2\uffff\3\164",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u00b6\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u00f1\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u012c\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0167\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u01a2\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u01dd\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0218\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0253\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u028e\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u02c9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0304\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u033f\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u037a\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u03b5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u03f0\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u042b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0461\4\uffff\1\u0440\2\uffff\1\u046f\1\u0441\3\uffff\1"+
            "\u0442\1\u0443\1\u0444\1\u0445\1\u0446\1\u0447\1\u0448\1\u0449"+
            "\1\u043f\1\uffff\1\u0430\6\uffff\1\u0464\1\uffff\1\u0466\1\u0462"+
            "\1\u0463\1\u0465\5\uffff\1\u042f\1\u042e\3\uffff\1\u044a\1\u044b"+
            "\1\u044c\11\uffff\1\u0450\1\u0451\1\u0452\1\u0454\1\u0455\1"+
            "\u0456\1\u0457\1\u0458\1\u046a\1\u046b\1\u0459\1\u046c\1\u045a"+
            "\1\u045b\1\u045c\1\u045d\1\u046d\1\uffff\1\u045e\1\uffff\1\u045f"+
            "\1\u0453\1\u043e\1\u0460\14\uffff\1\u0437\1\u0438\1\u0439\5"+
            "\uffff\1\u0467\1\u0468\1\u0469\2\uffff\1\u044d\1\uffff\1\u044e"+
            "\1\u044f\u008e\uffff\1\u0436\16\uffff\1\u043c\1\u043b\5\uffff"+
            "\1\u0470\1\uffff\1\u0432\1\u043a\1\uffff\1\u042c\1\u042d\11"+
            "\uffff\1\u0431\2\uffff\1\u046e\1\uffff\1\u0433\2\uffff\1\u043d"+
            "\1\u0434\1\u0435",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04a6\4\uffff\1\u0485\2\uffff\1\u04b4\1\u0486\3\uffff\1"+
            "\u0487\1\u0488\1\u0489\1\u048a\1\u048b\1\u048c\1\u048d\1\u048e"+
            "\1\u0484\1\uffff\1\u0473\6\uffff\1\u04a9\1\uffff\1\u04ab\1\u04a7"+
            "\1\u04a8\1\u04aa\5\uffff\1\u0472\1\u0471\3\uffff\1\u048f\1\u0490"+
            "\1\u0491\11\uffff\1\u0495\1\u0496\1\u0497\1\u0499\1\u049a\1"+
            "\u049b\1\u049c\1\u049d\1\u04af\1\u04b0\1\u049e\1\u04b1\1\u049f"+
            "\1\u04a0\1\u04a1\1\u04a2\1\u04b2\1\uffff\1\u04a3\1\uffff\1\u04a4"+
            "\1\u0498\1\u0483\1\u04a5\14\uffff\1\u047c\1\u047d\1\u047e\5"+
            "\uffff\1\u04ac\1\u04ad\1\u04ae\2\uffff\1\u0492\1\uffff\1\u0493"+
            "\1\u0494\u008e\uffff\1\u0479\16\uffff\1\u0481\1\u0480\7\uffff"+
            "\1\u0475\1\u047f\1\uffff\1\u047a\1\u047b\11\uffff\1\u0474\2"+
            "\uffff\1\u04b3\1\uffff\1\u0476\2\uffff\1\u0482\1\u0477\1\u0478",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ea\4\uffff\1\u04c9\2\uffff\1\u04f8\1\u04ca\3\uffff\1"+
            "\u04cb\1\u04cc\1\u04cd\1\u04ce\1\u04cf\1\u04d0\1\u04d1\1\u04d2"+
            "\1\u04c8\1\uffff\1\u04b7\6\uffff\1\u04ed\1\uffff\1\u04ef\1\u04eb"+
            "\1\u04ec\1\u04ee\5\uffff\1\u04b6\1\u04b5\3\uffff\1\u04d3\1\u04d4"+
            "\1\u04d5\11\uffff\1\u04d9\1\u04da\1\u04db\1\u04dd\1\u04de\1"+
            "\u04df\1\u04e0\1\u04e1\1\u04f3\1\u04f4\1\u04e2\1\u04f5\1\u04e3"+
            "\1\u04e4\1\u04e5\1\u04e6\1\u04f6\1\uffff\1\u04e7\1\uffff\1\u04e8"+
            "\1\u04dc\1\u04c7\1\u04e9\14\uffff\1\u04c0\1\u04c1\1\u04c2\5"+
            "\uffff\1\u04f0\1\u04f1\1\u04f2\2\uffff\1\u04d6\1\uffff\1\u04d7"+
            "\1\u04d8\u008e\uffff\1\u04bd\16\uffff\1\u04c5\1\u04c4\7\uffff"+
            "\1\u04b9\1\u04c3\1\uffff\1\u04be\1\u04bf\11\uffff\1\u04b8\2"+
            "\uffff\1\u04f7\1\uffff\1\u04ba\2\uffff\1\u04c6\1\u04bb\1\u04bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052c\4\uffff\1\u050b\2\uffff\1\u053a\1\u050c\3\uffff\1"+
            "\u050d\1\u050e\1\u050f\1\u0510\1\u0511\1\u0512\1\u0513\1\u0514"+
            "\1\u050a\1\uffff\1\u04fb\6\uffff\1\u052f\1\uffff\1\u0531\1\u052d"+
            "\1\u052e\1\u0530\12\uffff\1\u0515\1\u0516\1\u0517\11\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051f\1\u0520\1\u0521\1\u0522\1\u0523"+
            "\1\u0535\1\u0536\1\u0524\1\u0537\1\u0525\1\u0526\1\u0527\1\u0528"+
            "\1\u0538\1\uffff\1\u0529\1\uffff\1\u052a\1\u051e\1\u0509\1\u052b"+
            "\14\uffff\1\u0502\1\u0503\1\u0504\5\uffff\1\u0532\1\u0533\1"+
            "\u0534\2\uffff\1\u0518\1\uffff\1\u0519\1\u051a\u008e\uffff\1"+
            "\u0501\16\uffff\1\u0507\1\u0506\7\uffff\1\u04fd\1\u0505\1\uffff"+
            "\1\u04f9\1\u04fa\11\uffff\1\u04fc\2\uffff\1\u0539\1\uffff\1"+
            "\u04fe\2\uffff\1\u0508\1\u04ff\1\u0500",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0570\4\uffff\1\u054f\2\uffff\1\u057e\1\u0550\3\uffff\1"+
            "\u0551\1\u0552\1\u0553\1\u0554\1\u0555\1\u0556\1\u0557\1\u0558"+
            "\1\u054e\1\uffff\1\u053d\6\uffff\1\u0573\1\uffff\1\u0575\1\u0571"+
            "\1\u0572\1\u0574\5\uffff\1\u053c\1\u053b\3\uffff\1\u0559\1\u055a"+
            "\1\u055b\11\uffff\1\u055f\1\u0560\1\u0561\1\u0563\1\u0564\1"+
            "\u0565\1\u0566\1\u0567\1\u0579\1\u057a\1\u0568\1\u057b\1\u0569"+
            "\1\u056a\1\u056b\1\u056c\1\u057c\1\uffff\1\u056d\1\uffff\1\u056e"+
            "\1\u0562\1\u054d\1\u056f\14\uffff\1\u0546\1\u0547\1\u0548\5"+
            "\uffff\1\u0576\1\u0577\1\u0578\2\uffff\1\u055c\1\uffff\1\u055d"+
            "\1\u055e\u008e\uffff\1\u0543\16\uffff\1\u054b\1\u054a\7\uffff"+
            "\1\u053f\1\u0549\1\uffff\1\u0544\1\u0545\11\uffff\1\u053e\2"+
            "\uffff\1\u057d\1\uffff\1\u0540\2\uffff\1\u054c\1\u0541\1\u0542",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b4\4\uffff\1\u0593\2\uffff\1\u05c2\1\u0594\3\uffff\1"+
            "\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a\1\u059b\1\u059c"+
            "\1\u0592\1\uffff\1\u0581\6\uffff\1\u05b7\1\uffff\1\u05b9\1\u05b5"+
            "\1\u05b6\1\u05b8\5\uffff\1\u0580\1\u057f\3\uffff\1\u059d\1\u059e"+
            "\1\u059f\11\uffff\1\u05a3\1\u05a4\1\u05a5\1\u05a7\1\u05a8\1"+
            "\u05a9\1\u05aa\1\u05ab\1\u05bd\1\u05be\1\u05ac\1\u05bf\1\u05ad"+
            "\1\u05ae\1\u05af\1\u05b0\1\u05c0\1\uffff\1\u05b1\1\uffff\1\u05b2"+
            "\1\u05a6\1\u0591\1\u05b3\14\uffff\1\u058a\1\u058b\1\u058c\5"+
            "\uffff\1\u05ba\1\u05bb\1\u05bc\2\uffff\1\u05a0\1\uffff\1\u05a1"+
            "\1\u05a2\u008e\uffff\1\u0587\16\uffff\1\u058f\1\u058e\7\uffff"+
            "\1\u0583\1\u058d\1\uffff\1\u0588\1\u0589\11\uffff\1\u0582\2"+
            "\uffff\1\u05c1\1\uffff\1\u0584\2\uffff\1\u0590\1\u0585\1\u0586",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f8\4\uffff\1\u05d7\2\uffff\1\u0606\1\u05d8\3\uffff\1"+
            "\u05d9\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0"+
            "\1\u05d6\1\uffff\1\u05c7\6\uffff\1\u05fb\1\uffff\1\u05fd\1\u05f9"+
            "\1\u05fa\1\u05fc\5\uffff\1\u05c6\1\u05c5\3\uffff\1\u05e1\1\u05e2"+
            "\1\u05e3\11\uffff\1\u05e7\1\u05e8\1\u05e9\1\u05eb\1\u05ec\1"+
            "\u05ed\1\u05ee\1\u05ef\1\u0601\1\u0602\1\u05f0\1\u0603\1\u05f1"+
            "\1\u05f2\1\u05f3\1\u05f4\1\u0604\1\uffff\1\u05f5\1\uffff\1\u05f6"+
            "\1\u05ea\1\u05d5\1\u05f7\14\uffff\1\u05ce\1\u05cf\1\u05d0\5"+
            "\uffff\1\u05fe\1\u05ff\1\u0600\2\uffff\1\u05e4\1\uffff\1\u05e5"+
            "\1\u05e6\u008e\uffff\1\u05cd\16\uffff\1\u05d3\1\u05d2\7\uffff"+
            "\1\u05c9\1\u05d1\1\uffff\1\u05c3\1\u05c4\11\uffff\1\u05c8\2"+
            "\uffff\1\u0605\1\uffff\1\u05ca\2\uffff\1\u05d4\1\u05cb\1\u05cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063b\4\uffff\1\u061a\2\uffff\1\u0649\1\u061b\3\uffff\1"+
            "\u061c\1\u061d\1\u061e\1\u061f\1\u0620\1\u0621\1\u0622\1\u0623"+
            "\1\u0619\1\uffff\1\u0609\6\uffff\1\u063e\1\uffff\1\u0640\1\u063c"+
            "\1\u063d\1\u063f\12\uffff\1\u0624\1\u0625\1\u0626\11\uffff\1"+
            "\u062a\1\u062b\1\u062c\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632"+
            "\1\u0644\1\u0645\1\u0633\1\u0646\1\u0634\1\u0635\1\u0636\1\u0637"+
            "\1\u0647\1\uffff\1\u0638\1\uffff\1\u0639\1\u062d\1\u0618\1\u063a"+
            "\14\uffff\1\u0612\1\u0613\1\u0614\5\uffff\1\u0641\1\u0642\1"+
            "\u0643\2\uffff\1\u0627\1\uffff\1\u0628\1\u0629\u008e\uffff\1"+
            "\u060f\16\uffff\1\u0608\1\u0616\5\uffff\1\u0607\1\uffff\1\u060b"+
            "\1\u0615\1\uffff\1\u0610\1\u0611\11\uffff\1\u060a\2\uffff\1"+
            "\u0648\1\uffff\1\u060c\2\uffff\1\u0617\1\u060d\1\u060e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u067e\4\uffff\1\u065d\2\uffff\1\u068c\1\u065e\3\uffff\1"+
            "\u065f\1\u0660\1\u0661\1\u0662\1\u0663\1\u0664\1\u0665\1\u0666"+
            "\1\u065c\1\uffff\1\u064e\6\uffff\1\u0681\1\uffff\1\u0683\1\u067f"+
            "\1\u0680\1\u0682\12\uffff\1\u0667\1\u0668\1\u0669\11\uffff\1"+
            "\u066d\1\u066e\1\u066f\1\u0671\1\u0672\1\u0673\1\u0674\1\u0675"+
            "\1\u0687\1\u0688\1\u0676\1\u0689\1\u0677\1\u0678\1\u0679\1\u067a"+
            "\1\u068a\1\uffff\1\u067b\1\uffff\1\u067c\1\u0670\1\u065b\1\u067d"+
            "\14\uffff\1\u0655\1\u0656\1\u0657\5\uffff\1\u0684\1\u0685\1"+
            "\u0686\2\uffff\1\u066a\1\uffff\1\u066b\1\u066c\u008e\uffff\1"+
            "\u0654\16\uffff\1\u064d\1\u0659\5\uffff\1\u064c\1\uffff\1\u0650"+
            "\1\u0658\1\uffff\1\u064a\1\u064b\11\uffff\1\u064f\2\uffff\1"+
            "\u068b\1\uffff\1\u0651\2\uffff\1\u065a\1\u0652\1\u0653",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c0\4\uffff\1\u069f\2\uffff\1\u06ce\1\u06a0\3\uffff\1"+
            "\u06a1\1\u06a2\1\u06a3\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u06a8"+
            "\1\u069e\1\uffff\1\u068f\6\uffff\1\u06c3\1\uffff\1\u06c5\1\u06c1"+
            "\1\u06c2\1\u06c4\12\uffff\1\u06a9\1\u06aa\1\u06ab\11\uffff\1"+
            "\u06af\1\u06b0\1\u06b1\1\u06b3\1\u06b4\1\u06b5\1\u06b6\1\u06b7"+
            "\1\u06c9\1\u06ca\1\u06b8\1\u06cb\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06cc\1\uffff\1\u06bd\1\uffff\1\u06be\1\u06b2\1\u069d\1\u06bf"+
            "\14\uffff\1\u0696\1\u0697\1\u0698\5\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\2\uffff\1\u06ac\1\uffff\1\u06ad\1\u06ae\u008e\uffff\1"+
            "\u0695\16\uffff\1\u069b\1\u069a\7\uffff\1\u0691\1\u0699\1\uffff"+
            "\1\u068d\1\u068e\11\uffff\1\u0690\2\uffff\1\u06cd\1\uffff\1"+
            "\u0692\2\uffff\1\u069c\1\u0693\1\u0694",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0702\4\uffff\1\u06e1\2\uffff\1\u0710\1\u06e2\3\uffff\1"+
            "\u06e3\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\u06e8\1\u06e9\1\u06ea"+
            "\1\u06e0\1\uffff\1\u06d1\6\uffff\1\u0705\1\uffff\1\u0707\1\u0703"+
            "\1\u0704\1\u0706\12\uffff\1\u06eb\1\u06ec\1\u06ed\11\uffff\1"+
            "\u06f1\1\u06f2\1\u06f3\1\u06f5\1\u06f6\1\u06f7\1\u06f8\1\u06f9"+
            "\1\u070b\1\u070c\1\u06fa\1\u070d\1\u06fb\1\u06fc\1\u06fd\1\u06fe"+
            "\1\u070e\1\uffff\1\u06ff\1\uffff\1\u0700\1\u06f4\1\u06df\1\u0701"+
            "\14\uffff\1\u06d8\1\u06d9\1\u06da\5\uffff\1\u0708\1\u0709\1"+
            "\u070a\2\uffff\1\u06ee\1\uffff\1\u06ef\1\u06f0\u008e\uffff\1"+
            "\u06d7\16\uffff\1\u06dd\1\u06dc\7\uffff\1\u06d3\1\u06db\1\uffff"+
            "\1\u06cf\1\u06d0\11\uffff\1\u06d2\2\uffff\1\u070f\1\uffff\1"+
            "\u06d4\2\uffff\1\u06de\1\u06d5\1\u06d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0711",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0747\4\uffff\1\u0726\2\uffff\1\u0755\1\u0727\3\uffff\1"+
            "\u0728\1\u0729\1\u072a\1\u072b\1\u072c\1\u072d\1\u072e\1\u072f"+
            "\1\u0725\1\uffff\1\u0716\6\uffff\1\u074a\1\uffff\1\u074c\1\u0748"+
            "\1\u0749\1\u074b\12\uffff\1\u0730\1\u0731\1\u0732\11\uffff\1"+
            "\u0736\1\u0737\1\u0738\1\u073a\1\u073b\1\u073c\1\u073d\1\u073e"+
            "\1\u0750\1\u0751\1\u073f\1\u0752\1\u0740\1\u0741\1\u0742\1\u0743"+
            "\1\u0753\1\uffff\1\u0744\1\uffff\1\u0745\1\u0739\1\u0724\1\u0746"+
            "\14\uffff\1\u071d\1\u071e\1\u071f\5\uffff\1\u074d\1\u074e\1"+
            "\u074f\2\uffff\1\u0733\1\uffff\1\u0734\1\u0735\u008e\uffff\1"+
            "\u071c\16\uffff\1\u0722\1\u0721\7\uffff\1\u0718\1\u0720\1\uffff"+
            "\1\u0714\1\u0715\11\uffff\1\u0717\2\uffff\1\u0754\1\uffff\1"+
            "\u0719\2\uffff\1\u0723\1\u071a\1\u071b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0789\4\uffff\1\u0768\2\uffff\1\u0797\1\u0769\3\uffff\1"+
            "\u076a\1\u076b\1\u076c\1\u076d\1\u076e\1\u076f\1\u0770\1\u0771"+
            "\1\u0767\1\uffff\1\u0756\6\uffff\1\u078c\1\uffff\1\u078e\1\u078a"+
            "\1\u078b\1\u078d\12\uffff\1\u0772\1\u0773\1\u0774\11\uffff\1"+
            "\u0778\1\u0779\1\u077a\1\u077c\1\u077d\1\u077e\1\u077f\1\u0780"+
            "\1\u0792\1\u0793\1\u0781\1\u0794\1\u0782\1\u0783\1\u0784\1\u0785"+
            "\1\u0795\1\uffff\1\u0786\1\uffff\1\u0787\1\u077b\1\u0766\1\u0788"+
            "\14\uffff\1\u075f\1\u0760\1\u0761\5\uffff\1\u078f\1\u0790\1"+
            "\u0791\2\uffff\1\u0775\1\uffff\1\u0776\1\u0777\u008e\uffff\1"+
            "\u075c\16\uffff\1\u0764\1\u0763\7\uffff\1\u0758\1\u0762\1\uffff"+
            "\1\u075d\1\u075e\11\uffff\1\u0757\2\uffff\1\u0796\1\uffff\1"+
            "\u0759\2\uffff\1\u0765\1\u075a\1\u075b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07cc\4\uffff\1\u07ab\2\uffff\1\u07da\1\u07ac\3\uffff\1"+
            "\u07ad\1\u07ae\1\u07af\1\u07b0\1\u07b1\1\u07b2\1\u07b3\1\u07b4"+
            "\1\u07aa\1\uffff\1\u079c\6\uffff\1\u07cf\1\uffff\1\u07d1\1\u07cd"+
            "\1\u07ce\1\u07d0\12\uffff\1\u07b5\1\u07b6\1\u07b7\11\uffff\1"+
            "\u07bb\1\u07bc\1\u07bd\1\u07bf\1\u07c0\1\u07c1\1\u07c2\1\u07c3"+
            "\1\u07d5\1\u07d6\1\u07c4\1\u07d7\1\u07c5\1\u07c6\1\u07c7\1\u07c8"+
            "\1\u07d8\1\uffff\1\u07c9\1\uffff\1\u07ca\1\u07be\1\u07a9\1\u07cb"+
            "\14\uffff\1\u07a3\1\u07a4\1\u07a5\5\uffff\1\u07d2\1\u07d3\1"+
            "\u07d4\2\uffff\1\u07b8\1\uffff\1\u07b9\1\u07ba\u008e\uffff\1"+
            "\u07a2\16\uffff\1\u079b\1\u07a7\5\uffff\1\u079a\1\uffff\1\u079e"+
            "\1\u07a6\1\uffff\1\u0798\1\u0799\11\uffff\1\u079d\2\uffff\1"+
            "\u07d9\1\uffff\1\u079f\2\uffff\1\u07a8\1\u07a0\1\u07a1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0801\4\uffff\1\u07e0\3\uffff\1\u07e1\3\uffff\1\u07e2\1"+
            "\u07e3\1\u07e4\1\u07e5\1\u07e6\1\u07e7\1\u07e8\1\u07e9\1\u07df"+
            "\1\u07db\7\uffff\1\u0804\1\uffff\1\u0806\1\u0802\1\u0803\1\u0805"+
            "\12\uffff\1\u07ea\1\u07eb\1\u07ec\11\uffff\1\u07f0\1\u07f1\1"+
            "\u07f2\1\u07f4\1\u07f5\1\u07f6\1\u07f7\1\u07f8\2\uffff\1\u07f9"+
            "\1\uffff\1\u07fa\1\u07fb\1\u07fc\1\u07fd\2\uffff\1\u07fe\1\uffff"+
            "\1\u07ff\1\u07f3\1\u07de\1\u0800\24\uffff\1\u0807\1\u0808\1"+
            "\u0809\2\uffff\1\u07ed\1\uffff\1\u07ee\1\u07ef\u009d\uffff\1"+
            "\u07dc\36\uffff\1\u07dd",
            "\1\u081f\1\u0820\1\u0821\1\u0822\1\uffff\1\u081c\1\u081b\1"+
            "\u081e\34\uffff\1\u0815\u00e8\uffff\1\u081d\1\u0814\3\uffff"+
            "\1\u080a\1\u0819\1\u080d\4\uffff\1\u0818\1\u081a\1\u0816\1\u0817"+
            "\1\u0810\1\u0811\1\u0812\1\u0813\1\u080f\1\u080e\1\u080b\1\u080c",
            "\1\u0838\1\u0839\1\u083a\1\u083b\1\uffff\1\u0835\1\u0834\1"+
            "\u0837\34\uffff\1\u082e\u00e8\uffff\1\u0836\1\u082d\3\uffff"+
            "\1\u0823\1\u0832\1\u0826\4\uffff\1\u0831\1\u0833\1\u082f\1\u0830"+
            "\1\u0829\1\u082a\1\u082b\1\u082c\1\u0828\1\u0827\1\u0824\1\u0825",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0851\1\u0852\1\u0853\1\u0854\1\uffff\1\u084f\1\u084e\1"+
            "\u0850\34\uffff\1\u0848\u00e8\uffff\1\u083c\1\u0847\3\uffff"+
            "\1\u083d\1\u084c\1\u0840\4\uffff\1\u084b\1\u084d\1\u0849\1\u084a"+
            "\1\u0843\1\u0844\1\u0845\1\u0846\1\u0842\1\u0841\1\u083e\1\u083f",
            "\1\u086a\1\u086b\1\u086c\1\u086d\1\uffff\1\u0867\1\u0866\1"+
            "\u0869\34\uffff\1\u0860\u00e8\uffff\1\u0868\1\u085f\3\uffff"+
            "\1\u0855\1\u0864\1\u0858\4\uffff\1\u0863\1\u0865\1\u0861\1\u0862"+
            "\1\u085b\1\u085c\1\u085d\1\u085e\1\u085a\1\u0859\1\u0856\1\u0857",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0883\1\u0884\1\u0885\1\u0886\1\uffff\1\u0880\1\u087f\1"+
            "\u0882\34\uffff\1\u0879\u00e8\uffff\1\u0881\1\u0878\3\uffff"+
            "\1\u086e\1\u087d\1\u0871\4\uffff\1\u087c\1\u087e\1\u087a\1\u087b"+
            "\1\u0874\1\u0875\1\u0876\1\u0877\1\u0873\1\u0872\1\u086f\1\u0870",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0899\1\u0898\1"+
            "\u089b\34\uffff\1\u0892\u00e8\uffff\1\u089a\1\u0891\3\uffff"+
            "\1\u0887\1\u0896\1\u088a\4\uffff\1\u0895\1\u0897\1\u0893\1\u0894"+
            "\1\u088d\1\u088e\1\u088f\1\u0890\1\u088c\1\u088b\1\u0888\1\u0889",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b5\1\u08b6\1\u08b7\1\u08b8\1\uffff\1\u08b2\1\u08b1\1"+
            "\u08b4\34\uffff\1\u08ab\u00e5\uffff\1\u08b3\2\uffff\1\16\1\u08aa"+
            "\3\uffff\1\u08a0\1\u08af\1\u08a3\4\uffff\1\u08ae\1\u08b0\1\u08ac"+
            "\1\u08ad\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\u08a5\1\u08a4\1\u08a1"+
            "\1\u08a2",
            "\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\uffff\1\u08cc\1\u08cb\1"+
            "\u08ce\34\uffff\1\u08c5\u00e5\uffff\1\u08cd\2\uffff\1\16\1\u08c4"+
            "\3\uffff\1\u08ba\1\u08c9\1\u08bd\4\uffff\1\u08c8\1\u08ca\1\u08c6"+
            "\1\u08c7\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\u08bf\1\u08be\1\u08bb"+
            "\1\u08bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e9\1\u08ea\1\u08eb\1\u08ec\1\uffff\1\u08e6\1\u08e5\1"+
            "\u08e8\34\uffff\1\u08df\u00e8\uffff\1\u08e7\1\u08de\3\uffff"+
            "\1\u08d4\1\u08e3\1\u08d7\4\uffff\1\u08e2\1\u08e4\1\u08e0\1\u08e1"+
            "\1\u08da\1\u08db\1\u08dc\1\u08dd\1\u08d9\1\u08d8\1\u08d5\1\u08d6",
            "\1\u0902\1\u0903\1\u0904\1\u0905\1\uffff\1\u08ff\1\u08fe\1"+
            "\u0901\34\uffff\1\u08f8\u00e8\uffff\1\u0900\1\u08f7\3\uffff"+
            "\1\u08ed\1\u08fc\1\u08f0\4\uffff\1\u08fb\1\u08fd\1\u08f9\1\u08fa"+
            "\1\u08f3\1\u08f4\1\u08f5\1\u08f6\1\u08f2\1\u08f1\1\u08ee\1\u08ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u091b\1\u091c\1\u091d\1\u091e\1\uffff\1\u0918\1\u0917\1"+
            "\u091a\34\uffff\1\u0911\u00e8\uffff\1\u0919\1\u0910\3\uffff"+
            "\1\u0906\1\u0915\1\u0909\4\uffff\1\u0914\1\u0916\1\u0912\1\u0913"+
            "\1\u090c\1\u090d\1\u090e\1\u090f\1\u090b\1\u090a\1\u0907\1\u0908",
            "\1\u0934\1\u0935\1\u0936\1\u0937\1\uffff\1\u0931\1\u0930\1"+
            "\u0933\34\uffff\1\u092a\u00e8\uffff\1\u0932\1\u0929\3\uffff"+
            "\1\u091f\1\u092e\1\u0922\4\uffff\1\u092d\1\u092f\1\u092b\1\u092c"+
            "\1\u0925\1\u0926\1\u0927\1\u0928\1\u0924\1\u0923\1\u0920\1\u0921",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u094d\1\u094e\1\u094f\1\u0950\1\uffff\1\u094a\1\u0949\1"+
            "\u094c\34\uffff\1\u0943\u00e8\uffff\1\u094b\1\u0942\3\uffff"+
            "\1\u0938\1\u0947\1\u093b\4\uffff\1\u0946\1\u0948\1\u0944\1\u0945"+
            "\1\u093e\1\u093f\1\u0940\1\u0941\1\u093d\1\u093c\1\u0939\1\u093a",
            "\1\u0966\1\u0967\1\u0968\1\u0969\1\uffff\1\u0963\1\u0962\1"+
            "\u0965\34\uffff\1\u095c\u00e8\uffff\1\u0964\1\u095b\3\uffff"+
            "\1\u0951\1\u0960\1\u0954\4\uffff\1\u095f\1\u0961\1\u095d\1\u095e"+
            "\1\u0957\1\u0958\1\u0959\1\u095a\1\u0956\1\u0955\1\u0952\1\u0953",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0980\1\u0981\1\u0982\1\u0983\1\uffff\1\u097c\1\u097b\1"+
            "\u097f\34\uffff\1\u0975\u00e5\uffff\1\u097d\2\uffff\1\u097e"+
            "\1\u0974\3\uffff\1\u096a\1\u0979\1\u096d\4\uffff\1\u0978\1\u097a"+
            "\1\u0976\1\u0977\1\u0970\1\u0971\1\u0972\1\u0973\1\u096f\1\u096e"+
            "\1\u096b\1\u096c",
            "\1\u099a\1\u099b\1\u099c\1\u099d\1\uffff\1\u0996\1\u0995\1"+
            "\u0999\34\uffff\1\u098f\u00e5\uffff\1\u0997\2\uffff\1\u0998"+
            "\1\u098e\3\uffff\1\u0984\1\u0993\1\u0987\4\uffff\1\u0992\1\u0994"+
            "\1\u0990\1\u0991\1\u098a\1\u098b\1\u098c\1\u098d\1\u0989\1\u0988"+
            "\1\u0985\1\u0986",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09b4\1\u09b5\1\u09b6\1\u09b7\1\uffff\1\u09b0\1\u09af\1"+
            "\u09b3\34\uffff\1\u09a9\u00e5\uffff\1\u09b1\2\uffff\1\u09b2"+
            "\1\u09a8\3\uffff\1\u099e\1\u09ad\1\u09a1\4\uffff\1\u09ac\1\u09ae"+
            "\1\u09aa\1\u09ab\1\u09a4\1\u09a5\1\u09a6\1\u09a7\1\u09a3\1\u09a2"+
            "\1\u099f\1\u09a0",
            "\1\u09ce\1\u09cf\1\u09d0\1\u09d1\1\uffff\1\u09ca\1\u09c9\1"+
            "\u09cd\34\uffff\1\u09c3\u00e5\uffff\1\u09cb\2\uffff\1\u09cc"+
            "\1\u09c2\3\uffff\1\u09b8\1\u09c7\1\u09bb\4\uffff\1\u09c6\1\u09c8"+
            "\1\u09c4\1\u09c5\1\u09be\1\u09bf\1\u09c0\1\u09c1\1\u09bd\1\u09bc"+
            "\1\u09b9\1\u09ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09e8\1\u09e9\1\u09ea\1\u09eb\1\uffff\1\u09e4\1\u09e3\1"+
            "\u09e7\34\uffff\1\u09dd\u00e5\uffff\1\u09e5\2\uffff\1\u09e6"+
            "\1\u09dc\3\uffff\1\u09d2\1\u09e1\1\u09d5\4\uffff\1\u09e0\1\u09e2"+
            "\1\u09de\1\u09df\1\u09d8\1\u09d9\1\u09da\1\u09db\1\u09d7\1\u09d6"+
            "\1\u09d3\1\u09d4",
            "\1\u0a02\1\u0a03\1\u0a04\1\u0a05\1\uffff\1\u09fe\1\u09fd\1"+
            "\u0a01\34\uffff\1\u09f7\u00e5\uffff\1\u09ff\2\uffff\1\u0a00"+
            "\1\u09f6\3\uffff\1\u09ec\1\u09fb\1\u09ef\4\uffff\1\u09fa\1\u09fc"+
            "\1\u09f8\1\u09f9\1\u09f2\1\u09f3\1\u09f4\1\u09f5\1\u09f1\1\u09f0"+
            "\1\u09ed\1\u09ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a1c\1\u0a1d\1\u0a1e\1\u0a1f\1\uffff\1\u0a18\1\u0a17\1"+
            "\u0a1b\34\uffff\1\u0a11\u00e5\uffff\1\u0a19\2\uffff\1\u0a1a"+
            "\1\u0a10\3\uffff\1\u0a06\1\u0a15\1\u0a09\4\uffff\1\u0a14\1\u0a16"+
            "\1\u0a12\1\u0a13\1\u0a0c\1\u0a0d\1\u0a0e\1\u0a0f\1\u0a0b\1\u0a0a"+
            "\1\u0a07\1\u0a08",
            "\1\u0a36\1\u0a37\1\u0a38\1\u0a39\1\uffff\1\u0a32\1\u0a31\1"+
            "\u0a35\34\uffff\1\u0a2b\u00e5\uffff\1\u0a33\2\uffff\1\u0a34"+
            "\1\u0a2a\3\uffff\1\u0a20\1\u0a2f\1\u0a23\4\uffff\1\u0a2e\1\u0a30"+
            "\1\u0a2c\1\u0a2d\1\u0a26\1\u0a27\1\u0a28\1\u0a29\1\u0a25\1\u0a24"+
            "\1\u0a21\1\u0a22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a4f\1\u0a50\1\u0a51\1\u0a52\1\uffff\1\u0a4c\1\u0a4b\1"+
            "\u0a4e\34\uffff\1\u0a45\u00e5\uffff\1\u0a4d\2\uffff\1\16\1\u0a44"+
            "\3\uffff\1\u0a3a\1\u0a49\1\u0a3d\4\uffff\1\u0a48\1\u0a4a\1\u0a46"+
            "\1\u0a47\1\u0a40\1\u0a41\1\u0a42\1\u0a43\1\u0a3f\1\u0a3e\1\u0a3b"+
            "\1\u0a3c",
            "\1\u0a69\1\u0a6a\1\u0a6b\1\u0a6c\1\uffff\1\u0a66\1\u0a65\1"+
            "\u0a68\34\uffff\1\u0a5f\u00e5\uffff\1\u0a67\2\uffff\1\16\1\u0a5e"+
            "\3\uffff\1\u0a54\1\u0a63\1\u0a57\4\uffff\1\u0a62\1\u0a64\1\u0a60"+
            "\1\u0a61\1\u0a5a\1\u0a5b\1\u0a5c\1\u0a5d\1\u0a59\1\u0a58\1\u0a55"+
            "\1\u0a56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a85\1\u0a86\1\u0a87\1\u0a88\1\uffff\1\u0a81\1\u0a80\1"+
            "\u0a84\3\uffff\1\u0a83\30\uffff\1\u0a7a\u00e5\uffff\1\u0a82"+
            "\2\uffff\1\16\1\u0a79\3\uffff\1\u0a6f\1\u0a7e\1\u0a72\4\uffff"+
            "\1\u0a7d\1\u0a7f\1\u0a7b\1\u0a7c\1\u0a75\1\u0a76\1\u0a77\1\u0a78"+
            "\1\u0a74\1\u0a73\1\u0a70\1\u0a71",
            "\1\u0aa0\1\u0aa1\1\u0aa2\1\u0aa3\1\uffff\1\u0a9c\1\u0a9b\1"+
            "\u0a9f\3\uffff\1\u0a9e\30\uffff\1\u0a95\u00e5\uffff\1\u0a9d"+
            "\2\uffff\1\16\1\u0a94\3\uffff\1\u0a8a\1\u0a99\1\u0a8d\4\uffff"+
            "\1\u0a98\1\u0a9a\1\u0a96\1\u0a97\1\u0a90\1\u0a91\1\u0a92\1\u0a93"+
            "\1\u0a8f\1\u0a8e\1\u0a8b\1\u0a8c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0ab9\1\u0aba\1\u0abb\1\u0abc\1\uffff\1\u0ab7\1\u0ab6\1"+
            "\u0ab8\34\uffff\1\u0ab0\u00e8\uffff\1\u0aa4\1\u0aaf\3\uffff"+
            "\1\u0aa5\1\u0ab4\1\u0aa8\4\uffff\1\u0ab3\1\u0ab5\1\u0ab1\1\u0ab2"+
            "\1\u0aab\1\u0aac\1\u0aad\1\u0aae\1\u0aaa\1\u0aa9\1\u0aa6\1\u0aa7",
            "\1\u0ad2\1\u0ad3\1\u0ad4\1\u0ad5\1\uffff\1\u0ad0\1\u0acf\1"+
            "\u0ad1\34\uffff\1\u0ac9\u00e8\uffff\1\u0abd\1\u0ac8\3\uffff"+
            "\1\u0abe\1\u0acd\1\u0ac1\4\uffff\1\u0acc\1\u0ace\1\u0aca\1\u0acb"+
            "\1\u0ac4\1\u0ac5\1\u0ac6\1\u0ac7\1\u0ac3\1\u0ac2\1\u0abf\1\u0ac0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;
    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }
    class DFA178 extends DFA {
        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "1229:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA178_0 = input.LA(1);
                        int index178_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_0==MINUS) ) {s = 1;}
                        else if ( ((LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||LA178_0==NUM_DOUBLE||LA178_0==PLUS||(LA178_0>=STRING_LITERAL && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==NUM_INT||(LA178_0>=NUM_LONG && LA178_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA178_0==QUESTION) ) {s = 12;}
                        else if ( (LA178_0==LPAREN) ) {s = 13;}
                        else if ( (LA178_0==ESCAPE||LA178_0==EVERY_EXPR||(LA178_0>=MAX && LA178_0<=MIN)||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||LA178_0==EVENTS||(LA178_0>=UNIDIRECTIONAL && LA178_0<=METADATASQL)||(LA178_0>=WEEKDAY && LA178_0<=LW)||LA178_0==SNAPSHOT||(LA178_0>=VARIABLE && LA178_0<=INDEX)||(LA178_0>=DEFINE && LA178_0<=MATCHES)||LA178_0==WHILE||(LA178_0>=MERGE && LA178_0<=MATCHED)||LA178_0==IDENT||LA178_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA178_0==COUNT) ) {s = 17;}
                        else if ( (LA178_0==SUM) ) {s = 20;}
                        else if ( (LA178_0==AVG) ) {s = 21;}
                        else if ( (LA178_0==COALESCE) ) {s = 24;}
                        else if ( (LA178_0==MEDIAN) ) {s = 25;}
                        else if ( (LA178_0==STDDEV) ) {s = 26;}
                        else if ( (LA178_0==AVEDEV) ) {s = 27;}
                        else if ( (LA178_0==FIRST) ) {s = 29;}
                        else if ( (LA178_0==LAST) ) {s = 30;}
                        else if ( (LA178_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA178_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA178_0==PRIOR) ) {s = 43;}
                        else if ( (LA178_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA178_0==CAST) ) {s = 47;}
                        else if ( (LA178_0==WINDOW) ) {s = 51;}
                        else if ( (LA178_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA178_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA178_0==EXISTS) ) {s = 62;}
                        else if ( (LA178_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA178_0==LCURLY) ) {s = 64;}
                        input.seek(index178_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA178_182 = input.LA(1);
                        int index178_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_182==STRING_LITERAL) ) {s = 1068;}
                        else if ( (LA178_182==QUOTED_STRING_LITERAL) ) {s = 1069;}
                        else if ( (LA178_182==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA178_182==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA178_182==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA178_182==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA178_182==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA178_182==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA178_182==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA178_182==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1077;}
                        else if ( (LA178_182==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1078;}
                        else if ( (LA178_182==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA178_182==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA178_182==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA178_182==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA178_182==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA178_182==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA178_182==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA178_182==AT) && (synpred3_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA178_182==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA178_182==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA178_182==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA178_182==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1090;}
                        else if ( (LA178_182==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1091;}
                        else if ( (LA178_182==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA178_182==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA178_182==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA178_182==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA178_182==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA178_182==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA178_182==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1098;}
                        else if ( (LA178_182==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1099;}
                        else if ( (LA178_182==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA178_182==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA178_182==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA178_182==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA178_182==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA178_182==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA178_182==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA178_182==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA178_182==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA178_182==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA178_182==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA178_182==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA178_182==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA178_182==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA178_182==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA178_182==LW) && (synpred3_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA178_182==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA178_182==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA178_182==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA178_182==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA178_182==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA178_182==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA178_182==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA178_182==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA178_182==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA178_182==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA178_182==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA178_182==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA178_182==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA178_182==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA178_182==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA178_182==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA178_182==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA178_182==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA178_182==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA178_182==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA178_182==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1136;}
                        input.seek(index178_182);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA178_241 = input.LA(1);
                        int index178_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_241==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1137;}
                        else if ( (LA178_241==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1138;}
                        else if ( (LA178_241==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA178_241==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA178_241==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA178_241==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA178_241==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA178_241==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA178_241==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA178_241==STRING_LITERAL) ) {s = 1146;}
                        else if ( (LA178_241==QUOTED_STRING_LITERAL) ) {s = 1147;}
                        else if ( (LA178_241==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA178_241==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA178_241==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA178_241==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA178_241==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA178_241==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA178_241==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA178_241==AT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA178_241==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA178_241==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA178_241==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA178_241==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA178_241==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA178_241==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA178_241==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA178_241==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA178_241==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA178_241==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA178_241==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA178_241==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA178_241==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA178_241==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA178_241==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA178_241==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA178_241==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA178_241==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA178_241==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA178_241==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA178_241==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA178_241==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA178_241==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA178_241==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA178_241==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA178_241==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA178_241==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA178_241==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA178_241==LW) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA178_241==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA178_241==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA178_241==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA178_241==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA178_241==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA178_241==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA178_241==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA178_241==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA178_241==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA178_241==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA178_241==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA178_241==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA178_241==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA178_241==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA178_241==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA178_241==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA178_241==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA178_241==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA178_241==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA178_241==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        input.seek(index178_241);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA178_300 = input.LA(1);
                        int index178_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_300==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA178_300==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA178_300==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA178_300==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA178_300==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA178_300==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA178_300==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA178_300==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA178_300==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA178_300==STRING_LITERAL) ) {s = 1214;}
                        else if ( (LA178_300==QUOTED_STRING_LITERAL) ) {s = 1215;}
                        else if ( (LA178_300==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA178_300==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA178_300==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA178_300==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA178_300==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA178_300==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA178_300==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA178_300==AT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA178_300==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA178_300==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA178_300==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA178_300==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA178_300==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA178_300==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA178_300==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA178_300==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA178_300==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA178_300==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA178_300==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA178_300==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA178_300==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA178_300==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA178_300==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA178_300==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA178_300==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA178_300==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA178_300==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA178_300==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA178_300==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA178_300==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA178_300==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA178_300==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA178_300==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA178_300==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA178_300==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA178_300==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA178_300==LW) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA178_300==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA178_300==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA178_300==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA178_300==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA178_300==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA178_300==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA178_300==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA178_300==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA178_300==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA178_300==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA178_300==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA178_300==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA178_300==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA178_300==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA178_300==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA178_300==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA178_300==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA178_300==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA178_300==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA178_300==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        input.seek(index178_300);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA178_359 = input.LA(1);
                        int index178_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_359==STRING_LITERAL) ) {s = 1273;}
                        else if ( (LA178_359==QUOTED_STRING_LITERAL) ) {s = 1274;}
                        else if ( (LA178_359==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA178_359==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA178_359==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA178_359==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA178_359==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA178_359==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA178_359==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA178_359==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA178_359==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA178_359==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA178_359==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA178_359==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA178_359==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA178_359==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA178_359==AT) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA178_359==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA178_359==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA178_359==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA178_359==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA178_359==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA178_359==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA178_359==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA178_359==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA178_359==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA178_359==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA178_359==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA178_359==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA178_359==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA178_359==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA178_359==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA178_359==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA178_359==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA178_359==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA178_359==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA178_359==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA178_359==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA178_359==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA178_359==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA178_359==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA178_359==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA178_359==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA178_359==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA178_359==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA178_359==LW) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA178_359==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA178_359==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA178_359==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA178_359==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA178_359==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA178_359==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA178_359==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA178_359==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA178_359==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA178_359==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA178_359==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA178_359==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA178_359==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA178_359==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA178_359==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA178_359==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA178_359==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA178_359==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA178_359==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA178_359==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        input.seek(index178_359);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA178_418 = input.LA(1);
                        int index178_418 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_418==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA178_418==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA178_418==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA178_418==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA178_418==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA178_418==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA178_418==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA178_418==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA178_418==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA178_418==STRING_LITERAL) ) {s = 1348;}
                        else if ( (LA178_418==QUOTED_STRING_LITERAL) ) {s = 1349;}
                        else if ( (LA178_418==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA178_418==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA178_418==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA178_418==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA178_418==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA178_418==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA178_418==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA178_418==AT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA178_418==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA178_418==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA178_418==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA178_418==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA178_418==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA178_418==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA178_418==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA178_418==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA178_418==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA178_418==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA178_418==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA178_418==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA178_418==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA178_418==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA178_418==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA178_418==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA178_418==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA178_418==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA178_418==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA178_418==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA178_418==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA178_418==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA178_418==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA178_418==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA178_418==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA178_418==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA178_418==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA178_418==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA178_418==LW) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA178_418==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA178_418==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA178_418==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA178_418==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA178_418==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA178_418==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA178_418==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA178_418==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA178_418==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA178_418==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA178_418==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA178_418==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA178_418==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA178_418==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA178_418==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA178_418==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA178_418==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA178_418==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA178_418==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA178_418==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        input.seek(index178_418);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA178_477 = input.LA(1);
                        int index178_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_477==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA178_477==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA178_477==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA178_477==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA178_477==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA178_477==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA178_477==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA178_477==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA178_477==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA178_477==STRING_LITERAL) ) {s = 1416;}
                        else if ( (LA178_477==QUOTED_STRING_LITERAL) ) {s = 1417;}
                        else if ( (LA178_477==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA178_477==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA178_477==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA178_477==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA178_477==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA178_477==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA178_477==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA178_477==AT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA178_477==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA178_477==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA178_477==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA178_477==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA178_477==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA178_477==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA178_477==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA178_477==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA178_477==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA178_477==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA178_477==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA178_477==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA178_477==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA178_477==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA178_477==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA178_477==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA178_477==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA178_477==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA178_477==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA178_477==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA178_477==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA178_477==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA178_477==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA178_477==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA178_477==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA178_477==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA178_477==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA178_477==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA178_477==LW) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA178_477==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA178_477==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA178_477==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA178_477==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA178_477==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA178_477==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA178_477==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA178_477==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA178_477==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA178_477==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA178_477==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA178_477==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA178_477==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA178_477==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA178_477==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA178_477==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA178_477==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA178_477==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA178_477==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA178_477==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        input.seek(index178_477);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA178_536 = input.LA(1);
                        int index178_536 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_536==STRING_LITERAL) ) {s = 1475;}
                        else if ( (LA178_536==QUOTED_STRING_LITERAL) ) {s = 1476;}
                        else if ( (LA178_536==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA178_536==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA178_536==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA178_536==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA178_536==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA178_536==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA178_536==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA178_536==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA178_536==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA178_536==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA178_536==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA178_536==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA178_536==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA178_536==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA178_536==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA178_536==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA178_536==AT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA178_536==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA178_536==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA178_536==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA178_536==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA178_536==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA178_536==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA178_536==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA178_536==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA178_536==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA178_536==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA178_536==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA178_536==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA178_536==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA178_536==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA178_536==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA178_536==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA178_536==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA178_536==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA178_536==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA178_536==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA178_536==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA178_536==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA178_536==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA178_536==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA178_536==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA178_536==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA178_536==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA178_536==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA178_536==LW) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA178_536==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA178_536==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA178_536==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA178_536==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA178_536==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA178_536==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA178_536==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA178_536==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA178_536==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA178_536==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA178_536==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA178_536==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA178_536==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA178_536==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA178_536==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA178_536==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA178_536==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA178_536==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA178_536==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA178_536==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        input.seek(index178_536);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA178_595 = input.LA(1);
                        int index178_595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_595==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA178_595==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA178_595==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA178_595==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA178_595==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA178_595==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA178_595==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA178_595==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA178_595==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA178_595==STRING_LITERAL) ) {s = 1552;}
                        else if ( (LA178_595==QUOTED_STRING_LITERAL) ) {s = 1553;}
                        else if ( (LA178_595==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA178_595==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA178_595==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA178_595==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA178_595==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA178_595==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA178_595==AT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA178_595==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA178_595==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA178_595==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA178_595==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA178_595==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA178_595==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA178_595==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA178_595==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA178_595==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA178_595==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA178_595==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA178_595==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA178_595==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA178_595==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA178_595==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA178_595==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA178_595==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA178_595==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA178_595==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA178_595==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA178_595==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA178_595==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA178_595==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA178_595==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA178_595==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA178_595==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA178_595==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA178_595==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA178_595==LW) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA178_595==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA178_595==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA178_595==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA178_595==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA178_595==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA178_595==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA178_595==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA178_595==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA178_595==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA178_595==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA178_595==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA178_595==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA178_595==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA178_595==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA178_595==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA178_595==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA178_595==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA178_595==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA178_595==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA178_595==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        input.seek(index178_595);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA178_654 = input.LA(1);
                        int index178_654 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_654==STRING_LITERAL) ) {s = 1610;}
                        else if ( (LA178_654==QUOTED_STRING_LITERAL) ) {s = 1611;}
                        else if ( (LA178_654==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA178_654==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA178_654==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA178_654==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA178_654==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA178_654==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA178_654==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA178_654==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA178_654==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA178_654==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA178_654==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA178_654==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA178_654==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA178_654==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA178_654==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA178_654==AT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA178_654==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA178_654==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA178_654==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA178_654==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA178_654==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA178_654==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA178_654==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA178_654==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA178_654==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA178_654==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA178_654==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA178_654==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA178_654==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA178_654==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA178_654==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA178_654==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA178_654==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA178_654==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA178_654==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA178_654==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA178_654==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA178_654==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA178_654==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA178_654==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA178_654==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA178_654==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA178_654==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA178_654==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA178_654==LW) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA178_654==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA178_654==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA178_654==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA178_654==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA178_654==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA178_654==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA178_654==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA178_654==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA178_654==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA178_654==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA178_654==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA178_654==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA178_654==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA178_654==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA178_654==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA178_654==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA178_654==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA178_654==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA178_654==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA178_654==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        input.seek(index178_654);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA178_713 = input.LA(1);
                        int index178_713 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_713==STRING_LITERAL) ) {s = 1677;}
                        else if ( (LA178_713==QUOTED_STRING_LITERAL) ) {s = 1678;}
                        else if ( (LA178_713==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA178_713==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA178_713==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA178_713==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA178_713==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA178_713==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA178_713==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA178_713==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA178_713==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA178_713==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA178_713==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA178_713==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA178_713==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA178_713==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA178_713==AT) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA178_713==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA178_713==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA178_713==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA178_713==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA178_713==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA178_713==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA178_713==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA178_713==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA178_713==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA178_713==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA178_713==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA178_713==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA178_713==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA178_713==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA178_713==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA178_713==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA178_713==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA178_713==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA178_713==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA178_713==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA178_713==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA178_713==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA178_713==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA178_713==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA178_713==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA178_713==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA178_713==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA178_713==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA178_713==LW) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA178_713==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA178_713==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA178_713==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA178_713==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA178_713==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA178_713==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA178_713==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA178_713==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA178_713==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA178_713==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA178_713==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA178_713==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA178_713==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA178_713==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA178_713==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA178_713==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA178_713==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA178_713==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA178_713==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA178_713==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        input.seek(index178_713);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA178_772 = input.LA(1);
                        int index178_772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_772==STRING_LITERAL) ) {s = 1743;}
                        else if ( (LA178_772==QUOTED_STRING_LITERAL) ) {s = 1744;}
                        else if ( (LA178_772==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA178_772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA178_772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA178_772==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA178_772==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA178_772==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA178_772==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA178_772==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA178_772==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA178_772==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA178_772==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA178_772==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA178_772==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA178_772==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA178_772==AT) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA178_772==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA178_772==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA178_772==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA178_772==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA178_772==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA178_772==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA178_772==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA178_772==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA178_772==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA178_772==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA178_772==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA178_772==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA178_772==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA178_772==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA178_772==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA178_772==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA178_772==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA178_772==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA178_772==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA178_772==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA178_772==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA178_772==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA178_772==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA178_772==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA178_772==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA178_772==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA178_772==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA178_772==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA178_772==LW) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA178_772==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA178_772==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA178_772==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA178_772==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA178_772==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA178_772==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA178_772==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA178_772==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA178_772==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA178_772==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA178_772==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA178_772==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA178_772==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA178_772==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA178_772==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA178_772==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA178_772==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA178_772==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA178_772==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA178_772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        input.seek(index178_772);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA178_831 = input.LA(1);
                        int index178_831 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_831==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( ((LA178_831>=STRING_LITERAL && LA178_831<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index178_831);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA178_890 = input.LA(1);
                        int index178_890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_890==STRING_LITERAL) ) {s = 1812;}
                        else if ( (LA178_890==QUOTED_STRING_LITERAL) ) {s = 1813;}
                        else if ( (LA178_890==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA178_890==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA178_890==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA178_890==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA178_890==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA178_890==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA178_890==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA178_890==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA178_890==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA178_890==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA178_890==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA178_890==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA178_890==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA178_890==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA178_890==AT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA178_890==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA178_890==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA178_890==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA178_890==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA178_890==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA178_890==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA178_890==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA178_890==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA178_890==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA178_890==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA178_890==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA178_890==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA178_890==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA178_890==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA178_890==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA178_890==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA178_890==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA178_890==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA178_890==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA178_890==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA178_890==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA178_890==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA178_890==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA178_890==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA178_890==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA178_890==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA178_890==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA178_890==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA178_890==LW) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA178_890==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA178_890==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA178_890==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA178_890==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA178_890==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA178_890==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA178_890==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA178_890==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA178_890==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA178_890==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA178_890==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA178_890==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA178_890==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA178_890==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA178_890==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA178_890==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA178_890==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA178_890==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA178_890==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA178_890==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        input.seek(index178_890);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA178_949 = input.LA(1);
                        int index178_949 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_949==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA178_949==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA178_949==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA178_949==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA178_949==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA178_949==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA178_949==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA178_949==STRING_LITERAL) ) {s = 1885;}
                        else if ( (LA178_949==QUOTED_STRING_LITERAL) ) {s = 1886;}
                        else if ( (LA178_949==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA178_949==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA178_949==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA178_949==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA178_949==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA178_949==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA178_949==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA178_949==AT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA178_949==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA178_949==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA178_949==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA178_949==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA178_949==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA178_949==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA178_949==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA178_949==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA178_949==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA178_949==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA178_949==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA178_949==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA178_949==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA178_949==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA178_949==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA178_949==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA178_949==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA178_949==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA178_949==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA178_949==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA178_949==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA178_949==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA178_949==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA178_949==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA178_949==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA178_949==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA178_949==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA178_949==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA178_949==LW) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA178_949==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA178_949==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA178_949==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA178_949==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA178_949==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA178_949==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA178_949==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA178_949==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA178_949==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA178_949==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA178_949==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA178_949==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA178_949==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA178_949==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA178_949==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA178_949==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA178_949==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA178_949==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA178_949==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA178_949==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        input.seek(index178_949);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA178_1008 = input.LA(1);
                        int index178_1008 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1008==STRING_LITERAL) ) {s = 1944;}
                        else if ( (LA178_1008==QUOTED_STRING_LITERAL) ) {s = 1945;}
                        else if ( (LA178_1008==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA178_1008==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA178_1008==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA178_1008==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA178_1008==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA178_1008==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA178_1008==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA178_1008==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA178_1008==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA178_1008==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA178_1008==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA178_1008==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA178_1008==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA178_1008==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA178_1008==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA178_1008==AT) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA178_1008==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA178_1008==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA178_1008==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA178_1008==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA178_1008==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA178_1008==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA178_1008==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA178_1008==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA178_1008==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA178_1008==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA178_1008==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA178_1008==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA178_1008==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA178_1008==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA178_1008==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA178_1008==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA178_1008==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA178_1008==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA178_1008==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA178_1008==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA178_1008==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA178_1008==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA178_1008==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA178_1008==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA178_1008==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA178_1008==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA178_1008==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA178_1008==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA178_1008==LW) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA178_1008==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA178_1008==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA178_1008==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA178_1008==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA178_1008==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA178_1008==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA178_1008==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA178_1008==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA178_1008==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA178_1008==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA178_1008==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA178_1008==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA178_1008==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA178_1008==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA178_1008==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA178_1008==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA178_1008==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA178_1008==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA178_1008==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA178_1008==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        input.seek(index178_1008);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA178_1067 = input.LA(1);
                        int index178_1067 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1067==SELECT) ) {s = 2011;}
                        else if ( (LA178_1067==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA178_1067==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA178_1067==AT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA178_1067==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA178_1067==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA178_1067==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA178_1067==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA178_1067==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA178_1067==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA178_1067==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA178_1067==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA178_1067==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA178_1067==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA178_1067==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA178_1067==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA178_1067==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA178_1067==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA178_1067==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA178_1067==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA178_1067==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA178_1067==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA178_1067==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA178_1067==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA178_1067==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA178_1067==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA178_1067==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA178_1067==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA178_1067==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA178_1067==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA178_1067==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA178_1067==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA178_1067==LW) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA178_1067==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA178_1067==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA178_1067==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA178_1067==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA178_1067==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA178_1067==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA178_1067==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA178_1067==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA178_1067==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA178_1067==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA178_1067==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA178_1067==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA178_1067==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA178_1067==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        input.seek(index178_1067);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA178_1068 = input.LA(1);
                        int index178_1068 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1068==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA178_1068==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA178_1068==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA178_1068==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA178_1068==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA178_1068==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA178_1068==LT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA178_1068==GT) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA178_1068==LE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA178_1068==GE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA178_1068==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA178_1068==IS) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA178_1068==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA178_1068==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA178_1068==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA178_1068==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA178_1068==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA178_1068==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA178_1068==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA178_1068==RPAREN) ) {s = 2077;}
                        else if ( (LA178_1068==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA178_1068==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA178_1068==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA178_1068==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA178_1068==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        input.seek(index178_1068);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA178_1069 = input.LA(1);
                        int index178_1069 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1069==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA178_1069==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA178_1069==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA178_1069==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA178_1069==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA178_1069==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA178_1069==LT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA178_1069==GT) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA178_1069==LE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA178_1069==GE) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA178_1069==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA178_1069==IS) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA178_1069==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA178_1069==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA178_1069==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA178_1069==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA178_1069==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA178_1069==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA178_1069==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA178_1069==RPAREN) ) {s = 2102;}
                        else if ( (LA178_1069==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA178_1069==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA178_1069==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA178_1069==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA178_1069==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        input.seek(index178_1069);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA178_1146 = input.LA(1);
                        int index178_1146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1146==RPAREN) ) {s = 2108;}
                        else if ( (LA178_1146==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA178_1146==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA178_1146==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA178_1146==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA178_1146==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA178_1146==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA178_1146==LT) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA178_1146==GT) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA178_1146==LE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA178_1146==GE) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA178_1146==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA178_1146==IS) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA178_1146==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA178_1146==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA178_1146==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA178_1146==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA178_1146==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA178_1146==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA178_1146==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA178_1146==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA178_1146==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA178_1146==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA178_1146==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA178_1146==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        input.seek(index178_1146);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA178_1147 = input.LA(1);
                        int index178_1147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1147==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA178_1147==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA178_1147==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA178_1147==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA178_1147==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA178_1147==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA178_1147==LT) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA178_1147==GT) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA178_1147==LE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA178_1147==GE) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA178_1147==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA178_1147==IS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA178_1147==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA178_1147==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA178_1147==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA178_1147==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA178_1147==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA178_1147==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA178_1147==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA178_1147==RPAREN) ) {s = 2152;}
                        else if ( (LA178_1147==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA178_1147==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA178_1147==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA178_1147==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA178_1147==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        input.seek(index178_1147);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA178_1214 = input.LA(1);
                        int index178_1214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1214==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA178_1214==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA178_1214==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA178_1214==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA178_1214==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA178_1214==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA178_1214==LT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA178_1214==GT) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA178_1214==LE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA178_1214==GE) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA178_1214==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA178_1214==IS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA178_1214==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA178_1214==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA178_1214==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA178_1214==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA178_1214==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA178_1214==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA178_1214==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA178_1214==RPAREN) ) {s = 2177;}
                        else if ( (LA178_1214==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA178_1214==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA178_1214==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA178_1214==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA178_1214==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        input.seek(index178_1214);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA178_1215 = input.LA(1);
                        int index178_1215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1215==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA178_1215==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA178_1215==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA178_1215==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA178_1215==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA178_1215==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA178_1215==LT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA178_1215==GT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA178_1215==LE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA178_1215==GE) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA178_1215==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA178_1215==IS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA178_1215==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA178_1215==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA178_1215==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA178_1215==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA178_1215==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA178_1215==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA178_1215==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA178_1215==RPAREN) ) {s = 2202;}
                        else if ( (LA178_1215==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA178_1215==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA178_1215==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA178_1215==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA178_1215==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        input.seek(index178_1215);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA178_1273 = input.LA(1);
                        int index178_1273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1273==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA178_1273==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA178_1273==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA178_1273==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA178_1273==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA178_1273==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA178_1273==LT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA178_1273==GT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA178_1273==LE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA178_1273==GE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA178_1273==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA178_1273==IS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA178_1273==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA178_1273==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA178_1273==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA178_1273==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA178_1273==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA178_1273==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA178_1273==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA178_1273==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA178_1273==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA178_1273==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA178_1273==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA178_1273==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA178_1273==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA178_1273==RPAREN) ) {s = 14;}
                        input.seek(index178_1273);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA178_1274 = input.LA(1);
                        int index178_1274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1274==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA178_1274==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA178_1274==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA178_1274==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA178_1274==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA178_1274==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA178_1274==LT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA178_1274==GT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA178_1274==LE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA178_1274==GE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA178_1274==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA178_1274==IS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA178_1274==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA178_1274==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA178_1274==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA178_1274==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA178_1274==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA178_1274==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA178_1274==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA178_1274==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA178_1274==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA178_1274==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA178_1274==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA178_1274==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA178_1274==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA178_1274==RPAREN) ) {s = 14;}
                        input.seek(index178_1274);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA178_1348 = input.LA(1);
                        int index178_1348 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1348==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA178_1348==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA178_1348==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA178_1348==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA178_1348==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA178_1348==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA178_1348==LT) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA178_1348==GT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA178_1348==LE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA178_1348==GE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA178_1348==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA178_1348==IS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA178_1348==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA178_1348==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA178_1348==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA178_1348==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA178_1348==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA178_1348==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA178_1348==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA178_1348==RPAREN) ) {s = 2279;}
                        else if ( (LA178_1348==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA178_1348==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA178_1348==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA178_1348==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA178_1348==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        input.seek(index178_1348);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA178_1349 = input.LA(1);
                        int index178_1349 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1349==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA178_1349==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA178_1349==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA178_1349==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA178_1349==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA178_1349==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA178_1349==LT) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA178_1349==GT) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA178_1349==LE) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA178_1349==GE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA178_1349==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA178_1349==IS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA178_1349==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA178_1349==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA178_1349==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA178_1349==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA178_1349==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA178_1349==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA178_1349==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA178_1349==RPAREN) ) {s = 2304;}
                        else if ( (LA178_1349==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA178_1349==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA178_1349==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA178_1349==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA178_1349==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        input.seek(index178_1349);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA178_1416 = input.LA(1);
                        int index178_1416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1416==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA178_1416==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA178_1416==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA178_1416==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA178_1416==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA178_1416==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA178_1416==LT) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA178_1416==GT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA178_1416==LE) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA178_1416==GE) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA178_1416==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA178_1416==IS) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA178_1416==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA178_1416==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA178_1416==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA178_1416==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA178_1416==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA178_1416==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA178_1416==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA178_1416==RPAREN) ) {s = 2329;}
                        else if ( (LA178_1416==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA178_1416==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA178_1416==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA178_1416==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA178_1416==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        input.seek(index178_1416);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA178_1417 = input.LA(1);
                        int index178_1417 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1417==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA178_1417==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA178_1417==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA178_1417==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA178_1417==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA178_1417==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA178_1417==LT) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA178_1417==GT) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA178_1417==LE) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA178_1417==GE) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA178_1417==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA178_1417==IS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA178_1417==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA178_1417==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA178_1417==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA178_1417==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA178_1417==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA178_1417==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA178_1417==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA178_1417==RPAREN) ) {s = 2354;}
                        else if ( (LA178_1417==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA178_1417==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA178_1417==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA178_1417==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA178_1417==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        input.seek(index178_1417);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA178_1475 = input.LA(1);
                        int index178_1475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1475==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA178_1475==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA178_1475==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA178_1475==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA178_1475==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA178_1475==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA178_1475==LT) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA178_1475==GT) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA178_1475==LE) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA178_1475==GE) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA178_1475==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA178_1475==IS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA178_1475==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA178_1475==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA178_1475==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA178_1475==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA178_1475==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA178_1475==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA178_1475==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA178_1475==RPAREN) ) {s = 2379;}
                        else if ( (LA178_1475==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA178_1475==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA178_1475==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA178_1475==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA178_1475==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        input.seek(index178_1475);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA178_1476 = input.LA(1);
                        int index178_1476 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1476==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA178_1476==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA178_1476==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA178_1476==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA178_1476==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA178_1476==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA178_1476==LT) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA178_1476==GT) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA178_1476==LE) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA178_1476==GE) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA178_1476==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA178_1476==IS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA178_1476==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA178_1476==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA178_1476==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA178_1476==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA178_1476==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA178_1476==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA178_1476==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA178_1476==RPAREN) ) {s = 2404;}
                        else if ( (LA178_1476==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA178_1476==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA178_1476==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA178_1476==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA178_1476==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        input.seek(index178_1476);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA178_1552 = input.LA(1);
                        int index178_1552 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1552==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA178_1552==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA178_1552==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA178_1552==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA178_1552==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA178_1552==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA178_1552==LT) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA178_1552==GT) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA178_1552==LE) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA178_1552==GE) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA178_1552==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA178_1552==IS) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA178_1552==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA178_1552==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA178_1552==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA178_1552==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA178_1552==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA178_1552==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA178_1552==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA178_1552==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA178_1552==RPAREN) ) {s = 2430;}
                        else if ( (LA178_1552==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA178_1552==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA178_1552==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA178_1552==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA178_1552==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        input.seek(index178_1552);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA178_1553 = input.LA(1);
                        int index178_1553 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1553==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA178_1553==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA178_1553==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA178_1553==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA178_1553==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA178_1553==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA178_1553==LT) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA178_1553==GT) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA178_1553==LE) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA178_1553==GE) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA178_1553==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA178_1553==IS) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA178_1553==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA178_1553==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA178_1553==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA178_1553==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA178_1553==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA178_1553==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA178_1553==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA178_1553==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA178_1553==RPAREN) ) {s = 2456;}
                        else if ( (LA178_1553==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA178_1553==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA178_1553==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA178_1553==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA178_1553==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        input.seek(index178_1553);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA178_1610 = input.LA(1);
                        int index178_1610 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1610==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA178_1610==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA178_1610==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA178_1610==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA178_1610==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA178_1610==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA178_1610==LT) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA178_1610==GT) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA178_1610==LE) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA178_1610==GE) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA178_1610==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA178_1610==IS) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA178_1610==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA178_1610==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA178_1610==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA178_1610==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA178_1610==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA178_1610==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA178_1610==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA178_1610==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA178_1610==RPAREN) ) {s = 2482;}
                        else if ( (LA178_1610==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA178_1610==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA178_1610==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA178_1610==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA178_1610==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        input.seek(index178_1610);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA178_1611 = input.LA(1);
                        int index178_1611 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1611==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA178_1611==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA178_1611==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA178_1611==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA178_1611==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA178_1611==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA178_1611==LT) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA178_1611==GT) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA178_1611==LE) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA178_1611==GE) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA178_1611==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA178_1611==IS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA178_1611==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA178_1611==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA178_1611==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA178_1611==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA178_1611==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA178_1611==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA178_1611==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA178_1611==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA178_1611==RPAREN) ) {s = 2508;}
                        else if ( (LA178_1611==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA178_1611==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA178_1611==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA178_1611==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA178_1611==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        input.seek(index178_1611);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA178_1677 = input.LA(1);
                        int index178_1677 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1677==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA178_1677==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA178_1677==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA178_1677==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA178_1677==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA178_1677==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA178_1677==LT) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA178_1677==GT) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA178_1677==LE) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA178_1677==GE) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA178_1677==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA178_1677==IS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA178_1677==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA178_1677==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA178_1677==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA178_1677==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA178_1677==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA178_1677==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA178_1677==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA178_1677==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA178_1677==RPAREN) ) {s = 2534;}
                        else if ( (LA178_1677==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA178_1677==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA178_1677==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA178_1677==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA178_1677==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        input.seek(index178_1677);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA178_1678 = input.LA(1);
                        int index178_1678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1678==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA178_1678==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA178_1678==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA178_1678==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA178_1678==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA178_1678==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA178_1678==LT) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA178_1678==GT) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA178_1678==LE) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA178_1678==GE) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA178_1678==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA178_1678==IS) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA178_1678==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA178_1678==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA178_1678==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA178_1678==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA178_1678==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA178_1678==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA178_1678==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA178_1678==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA178_1678==RPAREN) ) {s = 2560;}
                        else if ( (LA178_1678==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA178_1678==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA178_1678==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA178_1678==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA178_1678==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        input.seek(index178_1678);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA178_1743 = input.LA(1);
                        int index178_1743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1743==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA178_1743==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA178_1743==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA178_1743==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA178_1743==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA178_1743==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA178_1743==LT) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA178_1743==GT) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA178_1743==LE) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA178_1743==GE) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA178_1743==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA178_1743==IS) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA178_1743==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA178_1743==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA178_1743==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA178_1743==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA178_1743==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA178_1743==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA178_1743==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA178_1743==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA178_1743==RPAREN) ) {s = 2586;}
                        else if ( (LA178_1743==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA178_1743==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA178_1743==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA178_1743==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA178_1743==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        input.seek(index178_1743);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA178_1744 = input.LA(1);
                        int index178_1744 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1744==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA178_1744==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA178_1744==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA178_1744==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA178_1744==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA178_1744==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA178_1744==LT) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA178_1744==GT) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA178_1744==LE) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA178_1744==GE) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA178_1744==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA178_1744==IS) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA178_1744==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA178_1744==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA178_1744==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA178_1744==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA178_1744==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA178_1744==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA178_1744==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA178_1744==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA178_1744==RPAREN) ) {s = 2612;}
                        else if ( (LA178_1744==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA178_1744==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA178_1744==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA178_1744==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA178_1744==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        input.seek(index178_1744);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA178_1812 = input.LA(1);
                        int index178_1812 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1812==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA178_1812==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA178_1812==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA178_1812==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA178_1812==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA178_1812==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA178_1812==LT) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA178_1812==GT) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA178_1812==LE) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA178_1812==GE) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA178_1812==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA178_1812==IS) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA178_1812==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA178_1812==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA178_1812==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA178_1812==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA178_1812==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA178_1812==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA178_1812==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA178_1812==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA178_1812==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA178_1812==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA178_1812==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA178_1812==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA178_1812==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA178_1812==RPAREN) ) {s = 14;}
                        input.seek(index178_1812);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA178_1813 = input.LA(1);
                        int index178_1813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1813==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA178_1813==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA178_1813==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA178_1813==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA178_1813==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA178_1813==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA178_1813==LT) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA178_1813==GT) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA178_1813==LE) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA178_1813==GE) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA178_1813==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA178_1813==IS) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA178_1813==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA178_1813==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA178_1813==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA178_1813==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA178_1813==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA178_1813==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA178_1813==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA178_1813==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA178_1813==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA178_1813==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA178_1813==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA178_1813==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA178_1813==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA178_1813==RPAREN) ) {s = 14;}
                        input.seek(index178_1813);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA178_1885 = input.LA(1);
                        int index178_1885 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1885==RPAREN) ) {s = 14;}
                        else if ( (LA178_1885==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA178_1885==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA178_1885==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA178_1885==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA178_1885==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA178_1885==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA178_1885==LT) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA178_1885==GT) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA178_1885==LE) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA178_1885==GE) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA178_1885==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA178_1885==IS) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA178_1885==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA178_1885==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA178_1885==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA178_1885==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA178_1885==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA178_1885==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA178_1885==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA178_1885==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA178_1885==AS) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA178_1885==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA178_1885==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA178_1885==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA178_1885==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA178_1885==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        input.seek(index178_1885);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA178_1886 = input.LA(1);
                        int index178_1886 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1886==RPAREN) ) {s = 14;}
                        else if ( (LA178_1886==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA178_1886==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA178_1886==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA178_1886==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA178_1886==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA178_1886==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA178_1886==LT) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA178_1886==GT) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA178_1886==LE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA178_1886==GE) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA178_1886==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA178_1886==IS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA178_1886==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA178_1886==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA178_1886==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA178_1886==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA178_1886==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA178_1886==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA178_1886==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA178_1886==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA178_1886==AS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA178_1886==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA178_1886==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA178_1886==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA178_1886==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA178_1886==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        input.seek(index178_1886);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA178_1944 = input.LA(1);
                        int index178_1944 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1944==RPAREN) ) {s = 2724;}
                        else if ( (LA178_1944==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA178_1944==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA178_1944==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA178_1944==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA178_1944==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA178_1944==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA178_1944==LT) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA178_1944==GT) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA178_1944==LE) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA178_1944==GE) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA178_1944==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA178_1944==IS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA178_1944==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA178_1944==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA178_1944==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA178_1944==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA178_1944==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA178_1944==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA178_1944==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA178_1944==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA178_1944==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA178_1944==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA178_1944==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA178_1944==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        input.seek(index178_1944);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA178_1945 = input.LA(1);
                        int index178_1945 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_1945==RPAREN) ) {s = 2749;}
                        else if ( (LA178_1945==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA178_1945==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA178_1945==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA178_1945==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA178_1945==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA178_1945==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA178_1945==LT) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA178_1945==GT) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA178_1945==LE) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA178_1945==GE) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA178_1945==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA178_1945==IS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA178_1945==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA178_1945==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA178_1945==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA178_1945==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA178_1945==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA178_1945==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA178_1945==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA178_1945==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA178_1945==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA178_1945==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA178_1945==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA178_1945==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        input.seek(index178_1945);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA178_2077 = input.LA(1);
                        int index178_2077 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2077);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA178_2102 = input.LA(1);
                        int index178_2102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2102);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA178_2108 = input.LA(1);
                        int index178_2108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2108);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA178_2152 = input.LA(1);
                        int index178_2152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2152);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA178_2177 = input.LA(1);
                        int index178_2177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2177);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA178_2202 = input.LA(1);
                        int index178_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2202);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA178_2279 = input.LA(1);
                        int index178_2279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2279);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA178_2304 = input.LA(1);
                        int index178_2304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2304);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA178_2329 = input.LA(1);
                        int index178_2329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2329);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA178_2354 = input.LA(1);
                        int index178_2354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2354);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA178_2379 = input.LA(1);
                        int index178_2379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2379);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA178_2404 = input.LA(1);
                        int index178_2404 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2404);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA178_2430 = input.LA(1);
                        int index178_2430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2430);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA178_2456 = input.LA(1);
                        int index178_2456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2456);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA178_2482 = input.LA(1);
                        int index178_2482 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2482);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA178_2508 = input.LA(1);
                        int index178_2508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2508);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA178_2534 = input.LA(1);
                        int index178_2534 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2534);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA178_2560 = input.LA(1);
                        int index178_2560 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2560);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA178_2586 = input.LA(1);
                        int index178_2586 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2586);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA178_2612 = input.LA(1);
                        int index178_2612 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2612);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA178_2724 = input.LA(1);
                        int index178_2724 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2724);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA178_2749 = input.LA(1);
                        int index178_2749 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index178_2749);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1662 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L,0x0000000000000100L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1667 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1685 = new BitSet(new long[]{0x0040020008000010L,0x0004010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1691 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1721 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1751 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x00062900640A0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1811 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x00072900640A0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1923 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006290064000004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1964 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007290064020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2096 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006390064010004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2102 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006290064000004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2144 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007390064030004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2150 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007290064020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2196 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2201 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2206 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2211 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2216 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2221 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2226 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_mergeExpr_in_eplExpression2231 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2248 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2251 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2257 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2260 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2264 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2267 = new BitSet(new long[]{0x0104300000010002L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2271 = new BitSet(new long[]{0x0104300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2277 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2280 = new BitSet(new long[]{0x0104300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2287 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2290 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2293 = new BitSet(new long[]{0x0104200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2300 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2303 = new BitSet(new long[]{0x0104000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2310 = new BitSet(new long[]{0x0130800080004000L,0x0000404000220000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2313 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2320 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2323 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2326 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2353 = new BitSet(new long[]{0x0040000008000000L,0x0000010000050000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2362 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2365 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2422 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2426 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2471 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2475 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2494 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2496 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2499 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2501 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2509 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_mergeExpr2546 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeExpr2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2550 = new BitSet(new long[]{0x0000000000020000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_mergeExpr2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2557 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2563 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_USING_in_mergeExpr2569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onStreamExpr_in_mergeExpr2571 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_mergeExpr2575 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_mergeExpr2577 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeExpr2582 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeExpr2586 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2628 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2630 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2633 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2635 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2639 = new BitSet(new long[]{0x0000000000000000L,0x0000010000010000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2654 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2659 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatched2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2712 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2714 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2716 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2718 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2722 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2729 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2733 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2774 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2776 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2782 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2784 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2787 = new BitSet(new long[]{0x0100300400010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2791 = new BitSet(new long[]{0x0100300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2797 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2799 = new BitSet(new long[]{0x0100300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2808 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2810 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2812 = new BitSet(new long[]{0x0100200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2819 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2821 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2828 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2830 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2832 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2908 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2927 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2929 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2932 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2934 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2941 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2994 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2996 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3000 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3002 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3007 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3040 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3093 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3097 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3102 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3144 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3149 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3178 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3209 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3250 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3256 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3261 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3266 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3275 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3279 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3283 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3298 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3317 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3334 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3337 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3426 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0007290065020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3429 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3455 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3505 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3641 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0007290065020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3684 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3712 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3743 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3747 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3754 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001060000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001060000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000A0000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_variantList3884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001020000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3944 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3950 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4042 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4063 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4080 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4083 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4126 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4130 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4134 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4137 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4158 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4172 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4174 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4241 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4244 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4247 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4250 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4267 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4328 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4334 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4340 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4346 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4380 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4383 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4433 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4436 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4500 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4538 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4542 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4546 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4550 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4559 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4564 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4575 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4581 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4662 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4717 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4723 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4730 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4735 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4741 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4747 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4753 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4803 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4805 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4810 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4841 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4846 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4873 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4912 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4958 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4962 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4966 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4970 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4974 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000D000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000D000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5287 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5289 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5318 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5452 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5518 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5565 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5605 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5632 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5717 = new BitSet(new long[]{0x0030800080004002L,0x0000000000220000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5732 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5736 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5740 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5744 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5812 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5818 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5874 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_outputLimit5876 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6038 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6086 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6092 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6169 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6173 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6177 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6181 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6185 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6190 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6226 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_whenClause6229 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6231 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_whenClause6234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6247 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_elseClause6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6277 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6280 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6283 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6297 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_caseExpression6299 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6301 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6304 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6342 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6347 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6349 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6381 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6386 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6388 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000182000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6425 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6428 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6431 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000182000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6456 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6472 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6485 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6503 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6517 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6519 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6533 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6547 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6577 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6612 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6617 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6622 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6750 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6782 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6786 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6790 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6794 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6853 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6959 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6998 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7004 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010890000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7029 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7058 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000890000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7263 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7315 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7317 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7374 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7469 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7475 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7523 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7526 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060001000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7549 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7552 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7555 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060001000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7574 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7599 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7608 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7615 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7778 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7784 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7787 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7790 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7800 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7808 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7844 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7851 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7856 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7924 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000739006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7930 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7965 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7969 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7974 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7989 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7993 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7998 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8013 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8025 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8030 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8065 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8069 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8074 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8089 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8093 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8098 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8113 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8117 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8122 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8152 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8157 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8163 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8179 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8185 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8201 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8207 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8223 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8237 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8256 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8274 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8301 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8304 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8327 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8362 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8367 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8400 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8405 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8439 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8516 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8522 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8528 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8577 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8611 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8617 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8655 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8725 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8730 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8737 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8754 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8756 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8804 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8845 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8850 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8852 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8884 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8889 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8891 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8926 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8935 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9002 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9008 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9016 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9022 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9146 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9151 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom9180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9195 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9201 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9205 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9321 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9382 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9403 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9429 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729007D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9441 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D860004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9464 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9586 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9681 = new BitSet(new long[]{0x803801E80FFC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9684 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9686 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9688 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9692 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9697 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9702 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9761 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9811 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9814 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9866 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9942 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_expression_in_expressionList10163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_expressionList10169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10200 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10336 = new BitSet(new long[]{0x0600000000000002L,0x00000000E0000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_number_in_rangeOperand10531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10651 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10655 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10657 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000D020004L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000D020004L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10827 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008440000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11059 = new BitSet(new long[]{0x803801E807FC4422L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001800000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11592 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11596 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11598 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11655 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11659 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11661 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11718 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11722 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11724 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11786 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11790 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11792 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11854 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11858 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11860 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004000004L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004000004L});
    public static final BitSet FOLLOW_number_in_numberconstant12110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10315 = new BitSet(new long[]{0x0000000000000002L});
}
